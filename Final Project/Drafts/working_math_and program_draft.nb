(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    483571,       9009]
NotebookOptionsPosition[    468672,       8782]
NotebookOutlinePosition[    469015,       8797]
CellTagsIndexPosition[    468972,       8794]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsPEMDAS", "=", 
   RowBox[{"{", " ", 
    RowBox[{
    "\"\<What is 2+2\>\"", ",", " ", "\"\<2+3\>\"", ",", 
     "\"\<What is 2+3\>\"", ",", " ", "\"\<What is 1+1\>\"", ",", " ", 
     "\"\<What is 20+22\>\"", ",", " ", "\"\<What is 1+15+21\>\"", ",", " ", 
     "\"\<What is 33+5+8\>\"", ",", " ", 
     "\"\<Simplify (2-5\!\(\*SuperscriptBox[\()\), \(2\)]\)\>\"", ",", " ", 
     "\"\<Simplify 2-\!\(\*SuperscriptBox[\(5\), \(2\)]\)\>\"", ",", " ", 
     "\"\<Simplify 10-7+1\>\"", ",", " ", "\"\<Simplify 10-(7+1)\>\"", ",", 
     " ", "\"\<Simplify 24/(4-2\!\(\*SuperscriptBox[\()\), \(3\)]\)\>\"", ",",
      " ", "\"\<Simplify 4+5(1+12/6\!\(\*SuperscriptBox[\()\), \(2\)]\)\>\"", 
     ",", " ", "\"\<Simplify (15-3)/(1+5)\>\"", ",", " ", "\"\<1+12\>\"", ",",
      " ", "\"\<10% of 11\>\"", ",", " ", "\"\<30+40\>\"", ",", " ", 
     "\"\<15+12\>\"", ",", " ", "\"\<20% of 33\>\"", " ", ",", " ", 
     "\"\<11+12\>\"", ",", " ", "\"\<What is 5% of 100?\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7710111217256823`*^9, 3.7710111540272284`*^9}, {
  3.7710111885866814`*^9, 3.7710113104444427`*^9}, {3.771011349072077*^9, 
  3.7710114614252415`*^9}, {3.7710717742904773`*^9, 3.7710717974684796`*^9}, {
  3.7710825794066696`*^9, 3.7710825944885254`*^9}, {3.7710828568271475`*^9, 
  3.7710828576980124`*^9}, {3.77109972947976*^9, 3.77109975449656*^9}, {
  3.7710997929256735`*^9, 3.7710998004862556`*^9}, {3.7711007075997024`*^9, 
  3.771100733777379*^9}, {3.771101333629407*^9, 3.7711013629989295`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"2333ef13-77fd-4cdf-b6bd-0173171dc2ca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a1QsFractions", "=", 
  RowBox[{"{", 
   RowBox[{
   "\"\<express 3 2/7 as an improper fraction\>\"", ",", " ", 
    "\"\<express 12 1/3 as an improper fraction\>\"", ",", " ", 
    "\"\<Express 42/5 as a mixed number\>\"", ",", " ", 
    "\"\<Express 53/9 as a mixed number\>\"", ",", " ", 
    "\"\<write 3/18 in simplest form\>\"", ",", " ", 
    RowBox[{
    "\"\<write 42/54 in simplest form\>\"", " ", 
     "\"\<What is 3 2/7 as an improper fraction\>\""}], ",", 
    "\"\<What is 12 1/3 as an improper fraction\>\"", ",", 
    "\"\<What is 42/5 as a mixed number\>\"", ",", 
    "\"\<What is 53/9 as a mixed number\>\"", ",", 
    "\"\<What is 3/18 in simplest form\>\"", ",", 
    "\"\<What is 42/54 in simplest form\>\""}], "}"}]}]], "Input",
 CellChangeTimes->{{3.7710119043974237`*^9, 3.771012096049966*^9}, {
  3.771071582527122*^9, 3.77107158335518*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"2d263997-c8cc-4cfe-a7ea-3727e1faf43b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"express 3 2/7 as an improper fraction\"\>", 
   ",", "\<\"express 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"Express 42/5 as a mixed number\"\>", 
   ",", "\<\"Express 53/9 as a mixed number\"\>", 
   ",", "\<\"write 3/18 in simplest form\"\>", ",", 
   RowBox[{"\<\"What is 3 2/7 as an improper fraction\"\>", 
    " ", "\<\"write 42/54 in simplest form\"\>"}], 
   ",", "\<\"What is 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"What is 42/5 as a mixed number\"\>", 
   ",", "\<\"What is 53/9 as a mixed number\"\>", 
   ",", "\<\"What is 3/18 in simplest form\"\>", 
   ",", "\<\"What is 42/54 in simplest form\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.77140773426797*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"5a51fcff-2435-4c7b-956b-4f6b96456cac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"{", 
  RowBox[{
  "\"\<express 3 2/7 as an improper fraction\>\"", ",", 
   "\"\<express 12 1/3 as an improper fraction\>\"", ",", 
   "\"\<Express 42/5 as a mixed number\>\"", ",", 
   "\"\<Express 53/9 as a mixed number\>\"", ",", 
   "\"\<write 3/18 in simplest form\>\"", ",", 
   "\"\<write 42/54 in simplest form\>\""}], "}"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"a1QsOppFrac", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Multiply 24/3 and 27/8\>\"", ",", " ", "\"\<Multiply 8 and 3/24\>\"",
      ",", " ", "\"\<Add 1/2 and 1/3\>\"", ",", " ", 
     "\"\<What is  24/3 * 27/8\>\"", ",", " ", "\"\<What is  8 * 3/24\>\"", 
     ",", " ", "\"\<What is  1/2 + 1/3\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"a1QsAbsoluteVal", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<What is the absolute value of -1?\>\"", ",", " ", 
     "\"\<What is |1|\>\"", ",", " ", "\"\<What is |-30|\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"a1QsNegatice", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<What is 3-(-2)?\>\"", ",", " ", "\"\<What is -3+4\>\""}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"a1QsIntovars", "=", 
  RowBox[{"{", 
   RowBox[{
   "\"\<Evaluate \!\(\*SuperscriptBox[\(a\), \
\(2\)]\)-\!\(\*SuperscriptBox[\(b\), \(2\)]\) when a=5 and b=3\>\"", ",", 
    " ", "\"\<Evaluate a-\!\(\*SuperscriptBox[\(b\), \(2\)]\) when a=4 and \
b=2\>\"", ",", " ", 
    "\"\<Evaluate \!\(\*SuperscriptBox[\(a\), \(2\)]\)+b when a=7 and \
b=1\>\""}], "}"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7710183957665844`*^9, 3.771018693615785*^9}, {
  3.7710715604288125`*^9, 3.7710715669824667`*^9}, {3.771071599899954*^9, 
  3.771071624993181*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"6c60326b-e42a-4217-9c4b-5a627cce92a1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"express 3 2/7 as an improper fraction\"\>", 
   ",", "\<\"express 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"Express 42/5 as a mixed number\"\>", 
   ",", "\<\"Express 53/9 as a mixed number\"\>", 
   ",", "\<\"write 3/18 in simplest form\"\>", 
   ",", "\<\"write 42/54 in simplest form\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7714077343279743`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"a73ad4f1-965a-451f-8b72-535a32dddef2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Evaluate \\!\\(\\*SuperscriptBox[\\(a\\), \
\\(2\\)]\\)-\\!\\(\\*SuperscriptBox[\\(b\\), \\(2\\)]\\) when a=5 and \
b=3\"\>", 
   ",", "\<\"Evaluate a-\\!\\(\\*SuperscriptBox[\\(b\\), \\(2\\)]\\) when a=4 \
and b=2\"\>", 
   ",", "\<\"Evaluate \\!\\(\\*SuperscriptBox[\\(a\\), \\(2\\)]\\)+b when a=7 \
and b=1\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7714077343319745`*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"a4ec7dd7-fa0a-4ab7-b4e6-0422c865bd43"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "\"\<express 3 2/7 as an improper fraction\>\"", ",", 
   "\"\<express 12 1/3 as an improper fraction\>\"", ",", 
   "\"\<Express 42/5 as a mixed number\>\"", ",", 
   "\"\<Express 53/9 as a mixed number\>\"", ",", 
   "\"\<write 3/18 in simplest form\>\"", ",", 
   "\"\<write 42/54 in simplest form\>\"", ","}], " ", "}"}]], "Input",
 CellChangeTimes->{{3.771071389445044*^9, 3.7710714057846594`*^9}, {
   3.771071505249978*^9, 3.7710715347214036`*^9}, 3.7710715778464785`*^9},
 CellLabel->"In[23]:=",ExpressionUUID->"13a45433-da7c-48b3-b716-61b7e0f7a0b0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"express 3 2/7 as an improper fraction\"\>", 
   ",", "\<\"express 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"Express 42/5 as a mixed number\"\>", 
   ",", "\<\"Express 53/9 as a mixed number\"\>", 
   ",", "\<\"write 3/18 in simplest form\"\>", 
   ",", "\<\"write 42/54 in simplest form\"\>", ",", "Null"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.771407734387977*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"abe71e69-95f5-41d1-8dff-ca16f0b41750"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsCombineLikeTerms", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Combine like terms of 3a-6a+10a-a\>\"", ",", " ", 
     "\"\<Combine the like terms of 5x-10y+6z-3x\>\"", ",", " ", 
     "\"\<Combine like terms of 3n-5\!\(\*SuperscriptBox[\(n\), \(\(2\)\(\\\ \
\)\)]\)+6n-10+2\!\(\*SuperscriptBox[\(n\), \(2\)]\)\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7710187153865156`*^9, 3.7710188213954906`*^9}, 
   3.771101374565879*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"a7ae84c8-e77e-4163-a09b-03f6288de0b4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsDistrbutive", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<5(2x+4)\>\"", ",", " ", 
     "\"\<-3(\!\(\*SuperscriptBox[\(x\), \(2\)]\)-2x+7)\>\"", ",", " ", 
     "\"\<-(5\!\(\*SuperscriptBox[\(x\), \(4\)]\)-8)\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7710188742668247`*^9, 3.7710188984740705`*^9}, {
   3.771019155256483*^9, 3.7710192378708935`*^9}, 3.771101371539567*^9},
 CellLabel->"In[25]:=",ExpressionUUID->"965f7365-78f2-4e84-8c81-fb88f95c8219"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsSolving", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<8x-2=22\>\"", ",", " ", "\"\<-x-2=12\>\"", ",", " ", 
     "\"\<2/3 x+3 =15\>\""}], "}"}]}], " ", ";"}]], "Input",
 CellChangeTimes->{{3.7710193041936626`*^9, 3.771019361406973*^9}, 
   3.771101382125491*^9},
 CellLabel->"In[26]:=",ExpressionUUID->"e9cacc85-48d6-4d31-ab94-5d755d539cc0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsPolynomials", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Factor 3\!\(\*SuperscriptBox[\(x\), \(2\)]\)+4x+1\>\"", ",", " ", 
     "\"\<Factor \!\(\*SuperscriptBox[\(n\), \(2\)]\)+5n+6\>\"", ",", " ", 
     "\"\<Factor \!\(\*SuperscriptBox[\(a\), \(2\)]\)+3a+2\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771019367476872*^9, 3.7710193984622173`*^9}, {
  3.7710194762827587`*^9, 3.7710195744093504`*^9}, {3.7711013112902584`*^9, 
  3.7711013126543474`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"7421c56f-d5af-4df6-8034-ece5d5384058"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsPercent", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<A $750 watch is on sale for 15% off. Find the sale price.\>\"", ",", 
     " ", "\"\<A salesman tells you that the $140 earrings are already marked \
20% off. What\nwas the original price?\>\"", ",", " ", 
     "\"\<Tommy\[CloseCurlyQuote]s grandma gave him a $50 gift card to Toys R \
Us for his birthday.\nSales tax is currently 9%. Determine the price of the \
most expensive toy Tommy can buy with\nthe $50 gift card.\>\"", ",", " ", 
     "\"\<A salesman is paid a monthly salary of $2,300 plus 7% commission on \
his monthly sales.\nDetermine the amount of sales required for his total \
monthly income to be $3,000.\>\"", ",", " ", "\[IndentingNewLine]", 
     "\"\<What is 10% of 100\>\"", ",", " ", "\"\<What is 4% of 16?\>\"", ",",
      " ", "\"\<200% of 3\>\"", ",", " ", "\"\<What is 45+300+4\>\"", ",", 
     " ", "\"\<30+30\>\"", ",", " ", "\"\<90+200\>\"", ",", " ", 
     "\"\<1+5\>\"", ",", " ", "\"\<34+1\>\"", ",", " ", "\"\<10% of 11\>\"", 
     ",", " ", "\"\<5% of 112\>\"", ",", " ", "\"\<41+2\>\""}], " ", "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.77101961019419*^9, 3.7710196924983225`*^9}, {
   3.77107136787315*^9, 3.7710713732095246`*^9}, {3.7710825303308954`*^9, 
   3.771082555173584*^9}, 3.7711013068393455`*^9, {3.771103600684926*^9, 
   3.771103646960228*^9}, {3.7711039584884386`*^9, 3.771103975026537*^9}, {
   3.7711041538209133`*^9, 3.7711041766438804`*^9}, {3.7711049603491745`*^9, 
   3.771104971313301*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"e86a1b17-fc00-41b9-8941-ba78eb4e043a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1Questions", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"{", 
     RowBox[{
     "a1QsAbsoluteVal", ",", " ", "a1QsCombineLikeTerms", ",", " ", 
      "a1QsDistrbutive", ",", " ", "a1QsFractions", ",", " ", "a1QsIntovars", 
      ",", " ", "a1QsPEMDAS", ",", " ", "a1QsSolving", ",", " ", 
      "a1QsOppFrac", ",", " ", "a1QsPercent", ",", " ", "a1QsNegatice"}], 
     "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7710197639313936`*^9, 3.77101991115589*^9}, {
  3.7711012946740265`*^9, 3.7711012982787495`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"5d0e39cd-11b1-4595-aeb9-0fdbd16ece9d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"algebra2PSetList", "[", 
  RowBox[{"[", 
   RowBox[{"8503", ";;", "8510"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7710581376943464`*^9, 3.7710581674301476`*^9}, {
  3.7710581977897487`*^9, 3.77105819797186*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"a315aa41-887f-4376-b5a7-9f6614771663"],

Cell[BoxData[
 TemplateBox[{
  "Part","take",
   "\"Cannot take positions \\!\\(\\*RowBox[{\\\"8503\\\"}]\\) through \\!\\(\
\\*RowBox[{\\\"8510\\\"}]\\) in \
\\!\\(\\*RowBox[{\\\"algebra2PSetList\\\"}]\\).\"",2,30,5,
   15902530251911880643,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771407734507987*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"81478dec-76c8-415e-8a00-e01f4bb8dc0c"],

Cell[BoxData[
 RowBox[{"algebra2PSetList", "\[LeftDoubleBracket]", 
  RowBox[{"8503", ";;", "8510"}], "\[RightDoubleBracket]"}]], "Output",
 CellChangeTimes->{3.77140773452799*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"641b6a9f-9191-45f2-bf1e-eb0a3e7a6de7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra2Qs", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<What is the most specific subset of the real numbers that -7 is a \
part of?\>\"", ",", " ", "\"\<Plot 1.25, 2/3 and 2 on a number line\>\"", ",",
      " ", "\"\<Identify the property used in the equations below as \
distributive, inverse or associative\>\"", ",", " ", 
     "\"\<Evaluate 2\!\(\*SuperscriptBox[\(x\), \(2\)]\)-9 for x=-3\>\"", ",",
      "  ", "\"\<Expand (a+b\!\(\*SuperscriptBox[\()\), \(3\)]\)\>\"", ",", 
     " ", "\"\<What is (a+b\!\(\*SuperscriptBox[\()\), \(n\)]\) (Hint: What \
theorem is this?)\>\"", ",", " ", "\"\<Solve 4x-9=11\>\"", ",", " ", 
     "\"\<Solve 3(x-5)+4=10\>\"", ",", " ", "\"\<Solve 3(x-5)+4=10\>\"", ",", 
     " ", "\"\<Solve 9(x-3)+4=10\>\"", ",", " ", 
     "\"\<Solve (x-1/2)=(2x+3)\>\"", ",", "\"\<Solve 3|x-5|=12\>\"", ",", 
     "\"\<Solve 8(x-5)+4=10\>\"", ",", 
     "\"\<Solve (\!\(\*SuperscriptBox[\(x\), \(2\)]\)-5)=20\>\"", ",", "  ", 
     "\"\<Use the law of sines to find the missing side of this triangle\>\"",
      ",", " ", 
     "\"\<What is the largest value for the missing side of this \
triangle\>\"", ",", " ", "\"\<What is sin(60)\>\"", ",", " ", 
     "\"\<What is tan(30)\>\"", ",", " ", 
     "\"\<Write 30 degrees in radians\>\"", ",", " ", 
     "\"\<Write \[Pi]/4 in degrees\>\"", ",", " ", 
     "\"\<Is x=-8 a solution to 1/2x+6>3?\>\"", ",", "  ", 
     "\"\<Solve and graph the solution to 2x-3<7\>\"", ",", " ", 
     "\"\<Solve and graph the solution to |3x-1|\[GreaterEqual]10\>\"", ",", 
     "  ", "\"\<How many miutes are in a day?\>\"", ",", " ", 
     "\"\<Wrie the standard form of y=3/2 x+2\>\"", ",", " ", 
     "\"\<Write slope intercept form for a slope of 2 and y-intercept of 12\>\
\"", ",", " ", 
     "\"\<Find a perpedicular line of y=3x+2 with y intercept of the origin\>\
\"", ",", 
     "\"\<What are the domain and range of the trigonometric functions?\>\"", 
     " ", ",", " ", "\"\<Graph the inequality y<3x+4\>\"", ",", " ", 
     "\"\<Find the equation of best fit for the below listed data\>\"", ",", 
     " ", "\"\<Graph the parabola give by \!\(\*SuperscriptBox[\(x\), \
\(2\)]\)+3x+2. Find the zeros, vertex and intercept\>\"", ",", " ", 
     "\"\<What is the sum from 1 to 5 of a=10n+3\>\"", ",", " ", 
     "\"\<What is the next term in the series \>\"", ",", " ", 
     "\"\<what is the sum of the geometric series from 1 to infinity of \
9(1/10\!\(\*SuperscriptBox[\()\), \(n\)]\)?\>\"", ",", " ", 
     "\"\<What are the discontiuities in the function y=(x+2)/(x+3x+2). Which \
are fundamental and which are removable?\>\"", ",", " ", 
     "\"\<What is ln(1)?\>\"", ",", " ", 
     "\"\<What are the domain and range of \!\(\*SuperscriptBox[\(e\), \(x\)]\
\) and ln(x)\>\"", ",", " ", "\"\<sin(40)\>\"", ",", " ", "\"\<cos(45)\>\"", 
     ",", " ", "\"\<tan(63)\>\"", ",", " ", "\"\<sin(121)\>\"", ",", " ", 
     "\"\<sin(\[Pi]/3)\>\"", ",", " ", "\"\<sin(\[Pi]/5)\>\"", ",", " ", 
     "\"\<cos(\[Pi]/13)\>\""}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7710582068470354`*^9, 3.771058864236945*^9}, {
   3.77105889644958*^9, 3.771059060194398*^9}, {3.771059094253581*^9, 
   3.7710591689725113`*^9}, {3.771059213441484*^9, 3.771059436664031*^9}, {
   3.771083696942418*^9, 3.7710837178362527`*^9}, 3.7711012136346254`*^9, {
   3.771103066357688*^9, 3.771103174458703*^9}, {3.7711034741487684`*^9, 
   3.771103548963587*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"82a03de3-0e12-4c59-bb42-528749c4d97e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"calcQspcalc", "=", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Evaluate f(x)=3-5x-2\!\(\*SuperscriptBox[\(x\), \(2\)]\) for the \
below values: f(0), f(x+h), f(6-t)\>\"", ",", " ", 
      "\"\<Compute  the difrence quotient for the given function\>\"", ",", 
      "  ", "\"\<Find the domain of (\!\(\*SuperscriptBox[\(w\), \
\(3\)]\)-3w+1)/(12 w-7)\>\"", ",", 
      "\"\<Find the inverse of f (x) = 6x +15\>\"", ",", " ", 
      "\"\<Find inverse of W (x) =  (9 \[Minus]11x\!\(\*SuperscriptBox[\()\), \
\(1/5\)]\)\>\"", ",", " ", 
      "\"\<Find the exact value of cos(5 \[Pi]/6) without using a \
calculator\>\"", ",", " ", 
      "\"\<Find the exact value of sin(-4 \[Pi]/3) without using a calculator\
\>\"", ",", " ", "\"\<Solve  4sin (3t ) = 2\>\"", ",", " ", 
      "\"\<Solve 4sin (3t ) = 2 in [0, 4\[Pi]/3], 2cos(x/3) \
+\!\(\*SuperscriptBox[\(2\), \(0.5\)]\) = 0 in [\[Minus]7\[Pi] ,7\[Pi] }\>\"",
       ",", " ", "\"\<Solve 4y sec(7 y) = \[Minus]21y\>\"", ",", " ", 
      "\"\<Solve 3\[Minus]14sin (12t + 7) =13\>\"", ",", " ", 
      "\"\<Solve 3sec(4 \[Minus] 9z) \[Minus] 24 = 0\>\"", ",", " ", 
      "\"\<Sketch the graph of f(x)=\!\(\*SuperscriptBox[\(3\), \(1 + 2  x\)]\
\)\>\"", ",", " ", 
      "\"\<Sketch the graph of h(x)=8+3\!\(\*SuperscriptBox[\(e\), \(2  t - 4\
\)]\)\>\"", ",", "  ", 
      "\"\<Determine ln(\!\(\*SuperscriptBox[\(e\), \(4\)]\))\>\"", ",", " ", 
      "\"\<Combine 2 \!\(\*SubscriptBox[\(log\), \(4\)]\)x +5 \
\!\(\*SubscriptBox[\(log\), \(4\)]\)y - 1/2 \!\(\*SubscriptBox[\(log\), \
\(4\)]\)x\>\"", " ", ",", " ", 
      "\"\<For the function W(x)=ln(1+\!\(\*SuperscriptBox[\(x\), \(4\)]\)) \
and the point x=1, find the secants at point Q and the tangenet line\>\"", 
      ",", " ", 
      "\"\<For the function f(x)=(8-\!\(\*SuperscriptBox[\(x\), \(2\)]\))/(\!\
\(\*SuperscriptBox[\(x\), \(2\)]\)-4), find the values at the below listed \
points and th limit as x aproaches 2\>\"", ",", "  ", ",", " ", 
      "\"\<For the function f(y)= sin(y)/y find the value at the below listed \
points and the limit as y approaches 0\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7710601633187313`*^9, 3.7710602840576377`*^9}, {
   3.7710603739809523`*^9, 3.7710610326160107`*^9}, {3.7710611060732737`*^9, 
   3.771061255410469*^9}, {3.7710613977488184`*^9, 3.771061607861419*^9}, {
   3.7710707202458553`*^9, 3.7710707343529253`*^9}, {3.771083528708667*^9, 
   3.7710835661734114`*^9}, 3.7711012380737867`*^9},
 CellLabel->"In[32]:=",ExpressionUUID->"a376c96d-0f17-43df-a243-6359725f0331"],

Cell[BoxData[
 RowBox[{
  RowBox[{"calcQsderivs", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<For the function f(x)=(8-\!\(\*SuperscriptBox[\(x\), \(2\)]\))/(\!\(\
\*SuperscriptBox[\(x\), \(2\)]\)-4), use L'Hoptial's rule to find the limit \
as x aproaches 2\>\"", ",", "  ", 
     "\"\<For the function (2-(\!\(\*SuperscriptBox[\(t\), \
\(2\)]\)+3\!\(\*SuperscriptBox[\()\), \(1/2\)]\))/(t+1), L'Hoptial's rule to \
find the limit as x approaches -1\>\"", ",", " ", 
     "\"\<Use the definition of the derivative to find the derivative of \
f(x)=6\>\"", ",", " ", 
     "\"\<Use the definition of the derivative to find the derivative of V (t \
) = 3\[Minus]14t\>\"", ",", " ", "\[IndentingNewLine]", " ", 
     "\"\<Use the definition of the derivative to find the derivative of \
z(n)= (n+1)/(n+4)\>\"", ",", "\[IndentingNewLine]", 
     "\"\<Use the chain rule to find the derivative of \
Q(t)=(3\!\(\*SuperscriptBox[\(t\), \(3\)]\)-4\!\(\*SuperscriptBox[\()\), \
\(1/2\)]\)\>\"", ",", " ", 
     "\"\<Use the quotient rule to find the derivative of z(n)= \
(z+1\!\(\*SuperscriptBox[\()\), \(1/2\)]\)/(z+4)\>\"", ",", " ", 
     "\[IndentingNewLine]", 
     "\"\<Find the deriviative of f (x) = 2cos(x) \[Minus] 6sec(x) + 3\>\"", 
     ",", " ", 
     "\"\<Find the deriviative of g (z) =10 tan (z) \[Minus] 2cot (z)\>\"", 
     ",", " ", "\"\<Find the deriviative of  tan (w)sec(w)\>\"", ",", " ", 
     "\"\<Find the deriviative of R(t)=(t+ tan(t))/(1+csc(t))\>\"", ",", " ", 
     "\"\<Find the derivative of f(x)=2\!\(\*SuperscriptBox[\(e\), \
\(x\)]\)-\!\(\*SuperscriptBox[\(8\), \(x\)]\)\>\"", ",", " ", 
     "\"\<Find the derivative of g(t)=4 \!\(\*SubscriptBox[\(log\), \
\(3\)]\)(t)-ln(t)\>\"", ",", " ", 
     "\"\<Find the derivative of 2 cos(x)+arccos(x)\>\"", " ", ",", " ", 
     "\"\<Find the derivative of \!\(\*SuperscriptBox[\(x\), \
\(2\)]\)/\!\(\*SuperscriptBox[\(y\), \(3\)]\)=1\>\"", ",", " ", 
     "\"\<Find extrema of f(x)=12+6\!\(\*SuperscriptBox[\(x\), \
\(2\)]\)-\!\(\*SuperscriptBox[\(x\), \(3\)]\)\>\"", ",", " ", 
     "\"\<Find extrema of g(w)=tan (w)sec(w)\>\"", ",", " ", 
     "\"\<find the taylor expanision of g(w)=tan (w)sec(w) at w=\[Pi]/4\>\"", 
     ",", " ", 
     "\"\<Find the MacLauren Expanision of z(n)= (z+1\!\(\*SuperscriptBox[\()\
\), \(1/2\)]\)/(z+4)\>\"", ",", " ", "\"\<Find the Derivative\>\"", ",", " ", 
     "\"\<What is the Deriviative\>\"", ",", " ", 
     "\"\<Evaluate the derivative\>\"", ",", " ", 
     "\"\<Integral of ln(x) dx\>\"", ",", " ", 
     "\"\<Integral of f(x)=x ln(x) from 0 to 10\>\"", ",", " ", 
     "\"\<Integral of tan(x)\>\"", ",", " ", 
     "\"\<Integral of (1+x\!\(\*SuperscriptBox[\()\), \(1/2\)]\)\>\""}], 
    "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7710613709186153`*^9, 3.771061384907164*^9}, {
   3.7710616124774094`*^9, 3.7710616655644417`*^9}, {3.7710617100829606`*^9, 
   3.7710618108407326`*^9}, {3.771061850599373*^9, 3.7710619681588216`*^9}, {
   3.771062006314955*^9, 3.7710621511121435`*^9}, {3.771062535101706*^9, 
   3.7710626530990715`*^9}, {3.771062685514902*^9, 3.771062905169672*^9}, {
   3.771083128947034*^9, 3.7710831451490726`*^9}, 3.7710834388275137`*^9, {
   3.771083811256686*^9, 3.7710838448272*^9}, 3.771101228641127*^9, {
   3.771103378443286*^9, 3.771103451873962*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"222a3863-676a-4a91-8ed5-bf086815e19f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"calcQsIntegral", "=", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Find \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) \
\[Minus]18\!\(\*SuperscriptBox[\(x\), \(2\)]\) + 7 dx\>\"", ",", " ", 
      "\"\<Find \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) dx \
\[Minus]18x + 7\>\"", ",", " ", 
      "\"\<Evaluate \[Integral]z^6 + 4z^4 \[Minus] z^2 dz\>\"", " ", ",", 
      "\"\<Determine f (x) given that f'(x) = 6x^8 \[Minus] 20x^4 + x^2 + 9\>\
\"", ",", " ", "\"\<Find \[Integral] 2cos (w) \[Minus] sec(w) tan (w)dw\>\"", 
      ",", " ", 
      "\"\<Find \[Integral]12 + csc(\[Theta] ) [sin (\[Theta] ) + \
csc(\[Theta] )] d\[Theta]\>\"", ",", "\[IndentingNewLine]", 
      "\"\<What is \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) \
\[Minus]18\!\(\*SuperscriptBox[\(x\), \(2\)]\) + 7 dx\>\"", ",", " ", 
      "\"\<Find \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) dx \
\[Minus]18x + 7\>\"", ",", "\[IndentingNewLine]", 
      "\"\<What is the integral of sin(2x)?\>\"", ",", " ", 
      "\"\<Find the area under the curve of |x| from -1 to 1\>\"", ",", " ", 
      "\"\<What is the area under the curve \!\(\*SuperscriptBox[\(sin\), \(2\
\)]\)x from 0 to \[Pi]/2\>\"", ",", " ", "\"\<Find the integral\>\"", ",", 
      " ", "\"\<What is the integral of x dx\>\"", ",", " ", 
      "\"\<Derivative of f(x)=\!\(\*SuperscriptBox[\(x\), \(2\)]\)\>\"", ",", 
      " ", "\"\<Integral of x dx\>\"", ",", " ", 
      "\"\<Integral of \!\(\*SuperscriptBox[\(e\), \(y\)]\) dy\>\"", ",", 
      " ", "\"\<Derivative of \!\(\*SuperscriptBox[\(x\), \(3\)]\)\>\"", ",", 
      " ", "\"\<Derivative of x\>\"", ",", " ", 
      "\"\<Derivative of f(x)=20 ln(x)\>\"", ",", " ", 
      "\"\<Derivative of x/(x+1\!\(\*SuperscriptBox[\()\), \(2\)]\)\>\"", ",",
       " ", "\"\<Derivative of \!\(\*SuperscriptBox[\(x\), \(n\)]\)\>\"", ",",
       " ", "\"\<Derivative with respect to x\>\"", ",", " ", 
      "\"\<Derivative of \!\(\*SuperscriptBox[\(x\), \(3\)]\)\>\""}], "}"}]}],
    ";"}], " "}]], "Input",
 CellChangeTimes->{{3.7710629557064366`*^9, 3.771063175011337*^9}, {
  3.7710705208432536`*^9, 3.7710706472117586`*^9}, {3.771083157663864*^9, 
  3.7710831939580765`*^9}, {3.771083409161805*^9, 3.7710834215095205`*^9}, {
  3.7710838521801443`*^9, 3.771083899380905*^9}, {3.77108395416064*^9, 
  3.7710839612743645`*^9}, {3.7710840024611387`*^9, 3.7710840037268524`*^9}, {
  3.7710893022644253`*^9, 3.7710893039790277`*^9}, {3.771100980753831*^9, 
  3.771101027715567*^9}, {3.7711029731478615`*^9, 3.771103032713256*^9}, {
  3.771104068418116*^9, 3.7711041148737974`*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"82bd9a2c-9f48-402b-90c8-7cb9d90eee9e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"calcQs", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"{", 
     RowBox[{
     "calcQspcalc", ",", " ", "calcQsIntegral", ",", " ", "calcQsderivs"}], 
     "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771063178168848*^9, 3.771063202032632*^9}, {
   3.7710832208648396`*^9, 3.7710832477843122`*^9}, 3.7711030484073133`*^9},
 CellLabel->"In[35]:=",ExpressionUUID->"9c835307-f52b-4c42-8b0e-c58da6c73503"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7710883122777357`*^9, 3.7710883204823074`*^9}, {
  3.771088420900962*^9, 3.771088426201332*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"d1ec6521-5d52-4665-927a-fa1d165f502a"],

Cell[CellGroupData[{

Cell[BoxData["wpgRadicals"], "Input",
 CellChangeTimes->{{3.77111168491525*^9, 3.771111689080016*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"92ef74ea-3f9f-40e0-96ef-8699243bb53a"],

Cell[BoxData["wpgRadicals"], "Output",
 CellChangeTimes->{3.7714077346279955`*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"a949bb7a-a4bf-4517-95ee-fff31b4a867d"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"algebra2set", "=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{
      "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\algebra_2_set.pdf\>\"", ",", " ", "\"\<Plaintext\>\""}], 
      "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<.)\>\"", ",", " ", "\"\< \\r\\n\>\""}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"algebra2set", "=", 
   RowBox[{"algebra2set", "/.", 
    RowBox[{"\"\<\>\"", "\[Rule]", "Nothing"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7711120076672792`*^9, 3.7711120625554457`*^9}, {
   3.7711121558516006`*^9, 3.771112156475644*^9}, {3.7711123345075665`*^9, 
   3.7711123519011602`*^9}, {3.7711124575278187`*^9, 
   3.7711125792356033`*^9}, {3.7711129500643063`*^9, 
   3.7711129744580154`*^9}, {3.7711135154660063`*^9, 3.771113528502914*^9}, {
   3.7711135747654824`*^9, 3.7711136239169626`*^9}, {3.7711136598725877`*^9, 
   3.7711136673051133`*^9}, {3.7711138005283823`*^9, 3.771113882444995*^9}, {
   3.771113923861324*^9, 3.7711139967667465`*^9}, 3.7711140366803074`*^9, {
   3.771115247995644*^9, 3.771115290794779*^9}, {3.7714075129150295`*^9, 
   3.7714075212076015`*^9}, {3.7714079867932816`*^9, 
   3.7714079961101527`*^9}, {3.771408041492993*^9, 3.771408086566082*^9}, {
   3.77140893564396*^9, 3.7714089415483866`*^9}, {3.7714099626364465`*^9, 
   3.7714100979099627`*^9}},
 CellLabel->
  "In[222]:=",ExpressionUUID->"75320f2e-dcf8-44e4-a6d6-2ae166718cea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.7714100755563707`*^9, 3.771410080688718*^9}},
 CellLabel->
  "In[221]:=",ExpressionUUID->"b66b3ba1-ab74-45a5-8467-dbae2cc45c3d"],

Cell[BoxData[
 RowBox[{"{", "3470", "}"}]], "Output",
 CellChangeTimes->{3.7714100819928193`*^9},
 CellLabel->
  "Out[221]=",ExpressionUUID->"1bda458b-b2f2-4d0c-80c7-0a6ba55f0ae6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"algebra2Qs", ",", " ", "algebra2set"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.7711153238971057`*^9, 3.7711153701043634`*^9}, 
   3.7714075253799353`*^9},
 CellLabel->
  "In[227]:=",ExpressionUUID->"4d882cf2-cadf-422e-aa45-f2e75454a042"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"algebra2Qs", "=", 
    RowBox[{"Flatten", "[", "algebra2Qs", "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Algebra", " ", "2", " ", "eats", " ", "eaverything", " ", "now"}], ",", 
    " ", 
    RowBox[{"but", " ", "this", " ", "is", " ", "good"}], ",", " ", 
    RowBox[{
    "can", " ", "do", " ", "for", " ", "the", " ", "rest", " ", "of", " ", 
     "the", " ", "types"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.771112075136426*^9, 3.771112125458478*^9}, {
   3.7711123851826544`*^9, 3.7711124082559347`*^9}, {3.7711140417686634`*^9, 
   3.7711140462529755`*^9}, 3.7711140840312815`*^9, {3.7711141663660173`*^9, 
   3.7711141784225335`*^9}, {3.7711142415860786`*^9, 3.7711142709325714`*^9}},
 CellLabel->
  "In[228]:=",ExpressionUUID->"c682d2c2-cecf-4416-9beb-d00d0da3e4f3"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7711121110671053`*^9, 3.771112115205637*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"568cbba2-205d-43c3-b6bd-e23a73e39cba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1set", ":=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{
      "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\algebra_1_set.pdf\>\"", ",", " ", "\"\<Plaintext\>\""}], 
      "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<.)\>\"", ",", "  ", "\"\< \\r\\n\>\""}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771114780231673*^9, 3.771114802941305*^9}, {
  3.7711149655562925`*^9, 3.771115000928453*^9}, {3.7711150811480117`*^9, 
  3.771115086204361*^9}, {3.771410103166297*^9, 3.77141010406636*^9}},
 CellLabel->
  "In[224]:=",ExpressionUUID->"b11e39b9-7017-44bc-a385-0b07d552a794"],

Cell[BoxData[
 RowBox[{
  RowBox[{"settoappend", "=", 
   RowBox[{"algebra1set", "/.", 
    RowBox[{"\"\<\>\"", "\[Rule]", "Nothing"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7711148118338814`*^9, 3.771114908463847*^9}, {
  3.7711150974731426`*^9, 3.7711151965200577`*^9}, {3.771408232430397*^9, 
  3.7714082604615946`*^9}, {3.7714101141711454`*^9, 3.771410134840543*^9}},
 CellLabel->
  "In[226]:=",ExpressionUUID->"f2914d32-3898-4e48-bf07-c89efc28a175"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"algebra1Questions", ",", " ", "settoappend"}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771115205960713*^9, 3.771115225430067*^9}},
 CellLabel->
  "In[170]:=",ExpressionUUID->"45bf30fe-2ff2-417c-b0d5-9bcaed87df8f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1Questions", "=", 
   RowBox[{"Flatten", "[", "algebra1Questions", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7711152299584055`*^9, 3.77111523891906*^9}},
 CellLabel->
  "In[229]:=",ExpressionUUID->"cf4f547c-9e66-4b6e-b324-93cb9ff9ea9f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"algebra1Questions", ",", " ", 
    RowBox[{"StringSplit", "[", 
     RowBox[{
      RowBox[{"Import", "[", 
       RowBox[{
       "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\Maths Question Generator.pdf\>\"", ",", " ", 
        "\"\<Plaintext\>\""}], "]"}], ",", " ", "\"\<\\n\>\""}], "]"}]}], 
   "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.771149045287571*^9, 3.771149110757823*^9}, {
  3.771151025984123*^9, 3.7711510342007504`*^9}, {3.7714101914471455`*^9, 
  3.771410213824761*^9}},
 CellLabel->
  "In[231]:=",ExpressionUUID->"102780d6-70d9-4d69-b9aa-dab665404545"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1Questions", "=", 
   RowBox[{"Flatten", "[", "algebra1Questions", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771149127407035*^9, 3.771149145932294*^9}},
 CellLabel->
  "In[232]:=",ExpressionUUID->"796a2e9c-8057-4199-a61d-18737ea5c77f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{"algebra1Questions", ",", " ", 
   RowBox[{
    RowBox[{"MatchQ", "[", 
     RowBox[{"#", ",", "\"\< \>\""}], "]"}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.771149200951104*^9, 3.771149240069831*^9}, 
   3.771173306999384*^9, {3.7714102298938265`*^9, 3.771410249607214*^9}},
 CellLabel->
  "In[234]:=",ExpressionUUID->"5e97059b-605d-41af-bf6a-9add47d91f50"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{
  3.7714077355960608`*^9, {3.7714102450588875`*^9, 3.7714102502672663`*^9}},
 CellLabel->
  "Out[234]=",ExpressionUUID->"4248e821-a147-4083-895e-cb19278b6fa8"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7711723935283384`*^9, 3.7711724196759048`*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"a34bd91b-332e-47df-9227-c111d8b411a5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"polydiffurl", "=", 
  "\"\<https://math.ly/api/v1/calculus/polynomial-differentiation.json\>\""}]]\
, "Input",
 CellChangeTimes->{{3.7711514475428724`*^9, 3.7711514768209143`*^9}, {
  3.7711518244068594`*^9, 3.771151863997607*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"3622a052-38d9-47fa-b1f3-baec31be1a1e"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/polynomial-differentiation.\
json\"\>"], "Output",
 CellChangeTimes->{3.7714077356560664`*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"40804649-e1d7-4cf7-ad23-48c9fd54c124"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"s", "=", 
   RowBox[{
    RowBox[{"Import", "[", 
     RowBox[{"polydiffurl", ",", " ", "\"\<Data\>\""}], " ", "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{"s", "=", 
  RowBox[{"\"\<question\>\"", "/.", "s"}]}]}], "Input",
 CellChangeTimes->{{3.7711514831933584`*^9, 3.7711515672774487`*^9}, {
   3.7711517082965136`*^9, 3.771151743302946*^9}, {3.7711518471804204`*^9, 
   3.7711518890793953`*^9}, {3.7711520237376146`*^9, 3.771152169092266*^9}, {
   3.7711528706872387`*^9, 3.77115295321529*^9}, {3.771153038758667*^9, 
   3.771153051718769*^9}, 3.771153756577385*^9, {3.771157365990517*^9, 
   3.7711573666509705`*^9}, 3.7711575213869724`*^9},
 CellLabel->"In[52]:=",ExpressionUUID->"caaa5ecf-7ab4-401d-a3be-1c829e3f17a2"],

Cell[BoxData["\<\"<mfrac><mo>&DifferentialD;</mo><mrow><mo>&DifferentialD;</\
mo><mi>x</mi></mrow></mfrac><mo> ( </mo><mrow><mo> - \
</mo><mn>4</mn></mrow><mi>x</mi><mo> + </mo><mn>13</mn><mo> ) </mo>\"\>"], \
"Output",
 CellChangeTimes->{3.771407736376134*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"1879eb5e-eecd-4bf1-af82-b0af6380d325"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Clear", "[", "questionClassifier", "]"}], "\[IndentingNewLine]", 
 RowBox[{"questionClassifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<algebra 1\>\"", "\[Rule]", "algebra1Questions"}], ",", " ", 
      RowBox[{"\"\<algebra 2\>\"", "\[Rule]", "algebra2Qs"}]}], 
     RowBox[{"(*", 
      RowBox[{",", " ", 
       RowBox[{"\"\<calc\>\"", "\[Rule]", "calcQs"}]}], "*)"}], "|>"}], " ", 
    ",", " ", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.771063215443462*^9, 3.7710633502457542`*^9}, 
   3.771071823090603*^9, 3.7710828946484957`*^9, {3.771083581540978*^9, 
   3.7710835945884523`*^9}, {3.771084258837575*^9, 3.771084260138427*^9}, {
   3.771089106079487*^9, 3.771089118126458*^9}, {3.771089317703972*^9, 
   3.7710893251804914`*^9}, {3.771089589321455*^9, 3.7710895907860775`*^9}, {
   3.771101595283745*^9, 3.7711015962158113`*^9}, {3.771101911187518*^9, 
   3.771101914767723*^9}, {3.771101993407687*^9, 3.771101997373905*^9}, {
   3.7711020881095395`*^9, 3.771102097689073*^9}, {3.7711022108895693`*^9, 
   3.771102212561736*^9}, {3.771102244507637*^9, 3.7711022454461393`*^9}, {
   3.7711023227187014`*^9, 3.7711023237187867`*^9}, {3.7711024319268856`*^9, 
   3.7711024687285357`*^9}, {3.7711026925353866`*^9, 
   3.7711027066808434`*^9}, {3.7711027405195894`*^9, 
   3.7711027412324157`*^9}, {3.7711028088330135`*^9, 
   3.7711028648262777`*^9}, {3.7711029558182993`*^9, 3.77110295696642*^9}, {
   3.7711032411393385`*^9, 3.7711032422553596`*^9}, {3.7711032955593557`*^9, 
   3.7711032996276913`*^9}, {3.771103336061694*^9, 3.771103338980618*^9}, {
   3.771103370475107*^9, 3.7711033714511166`*^9}, {3.771103765164311*^9, 
   3.771103786799837*^9}, {3.7711038503910933`*^9, 3.771103876489087*^9}, {
   3.7711039191807985`*^9, 3.7711039200623417`*^9}, {3.7711042220788345`*^9, 
   3.7711042229363375`*^9}, {3.7711048598276873`*^9, 3.771104865050381*^9}, {
   3.7711051200758305`*^9, 3.7711051210515237`*^9}, {3.7711052010468435`*^9, 
   3.7711052118901978`*^9}, {3.7711052803879633`*^9, 
   3.7711053140416017`*^9}, {3.7711053727435007`*^9, 
   3.7711053821161613`*^9}, {3.771105449918454*^9, 3.7711054605800343`*^9}, {
   3.771105546996733*^9, 3.7711055473579893`*^9}, {3.7711058366348667`*^9, 
   3.771105838832412*^9}, {3.7711059259343805`*^9, 3.771105934874683*^9}, {
   3.771115446077047*^9, 3.7711154471611223`*^9}, {3.7711502712421603`*^9, 
   3.7711502722062826`*^9}, {3.771158783329757*^9, 3.771158784547639*^9}, {
   3.771172246946286*^9, 3.771172250715967*^9}, {3.771410605095007*^9, 
   3.7714106062590704`*^9}, {3.77141065532251*^9, 3.771410665411251*^9}},
 CellLabel->
  "In[299]:=",ExpressionUUID->"4a6c27e2-f698-4942-9e0f-b4b815b04b6b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Nominal\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"algebra 1\"", "\"algebra 2\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Nominal\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"algebra 1\"", "\"algebra 2\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NaiveBayes\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["10857", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 1690504, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            5411350634152402544085200221455357445147745107041055037328, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 5411350634152402544085200221455357445147745107041055037328,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellEditDuplicate->True,
 CellChangeTimes->{
  3.7714077774805465`*^9, 3.771408063593605*^9, 3.7714081910423794`*^9, 
   3.771408280093029*^9, 3.7714090209519653`*^9, 3.7714103382648897`*^9, 
   3.771410611943468*^9, {3.7714106589027596`*^9, 3.771410677420034*^9}, 
   3.77141154229117*^9},
 CellLabel->
  "Out[300]=",ExpressionUUID->"3ecd25e2-38a3-4aa2-ab1e-46a8b0463e2f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"calcIsCalc", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"calcQs", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<calc\>\""}], "}"}]}], 
      "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"calcIsAlgebra1", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"calcQs", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 1\>\""}], 
        "}"}]}], "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"calcIsAlgebra2", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"calcQs", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 2\>\""}], 
        "}"}]}], "]"}]}], ";"}], "*)"}]}]], "Input",
 CellChangeTimes->{
  3.7711580435433702`*^9, 3.7711581045325623`*^9, {3.771158178293239*^9, 
   3.7711582669439397`*^9}, {3.7711583616162257`*^9, 
   3.7711584535961103`*^9}, {3.7711585350279884`*^9, 
   3.7711585464551077`*^9}, {3.7711585872250843`*^9, 
   3.7711585886280823`*^9}, {3.7711725238773365`*^9, 
   3.7711725272497325`*^9}, {3.7711727585554667`*^9, 3.771172776237033*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"5652c7f2-04fa-4c09-af67-9f4f252f0675"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"algebra1IsCalc", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"algebra1Questions", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<calc\>\""}], "}"}]}], 
      "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"algebra1IsAlgebra1", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"algebra1Questions", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 1\>\""}], 
        "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"algebra1IsAlgebra2", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"algebra1Questions", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 2\>\""}], 
        "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"algebra2IsCalc", "=", 
      RowBox[{"questionClassifier", "[", 
       RowBox[{"algebra2Qs", ",", " ", 
        RowBox[{"{", 
         RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<calc\>\""}], "}"}]}], 
       "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"algebra2IsAlgebra1", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"algebra2Qs", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 1\>\""}], 
        "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"algebra2IsAlgebra2", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"algebra2Qs", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 2\>\""}], 
        "}"}]}], "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.771158604958705*^9, 3.7711586688388205`*^9}, {
  3.771172530952365*^9, 3.7711725412987175`*^9}},
 CellLabel->
  "In[301]:=",ExpressionUUID->"de04e5c6-514e-4190-8ac5-8bd66302493d"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"ListPlot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#calcu", "/", "#alge"}], "&"}], "@", " ", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<calcu\>\"", "\[Rule]", " ", "calcIsCalc"}], ",", " ", 
       RowBox[{"\"\<alge\>\"", "\[Rule]", " ", 
        RowBox[{"Max", "[", 
         RowBox[{"calcIsAlgebra1", ",", " ", "calcIsAlgebra2"}], "]"}]}]}], 
      "|>"}]}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Training Set\>\"", ",", 
       "\"\<Calculus Probability divided by highest other\>\""}], "}"}]}]}], 
   "]"}], "*)"}]], "Input",
 CellChangeTimes->{{3.771158271668297*^9, 3.7711583575393267`*^9}, {
  3.771158458432547*^9, 3.771158592709983*^9}, {3.7711725459129972`*^9, 
  3.7711725536575017`*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"1571ed99-a23c-4960-8b79-e86ea7951882"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lp", "=", 
  RowBox[{"ListLogPlot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#right", "/", "#wrong"}], "&"}], "@", " ", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<right\>\"", "\[Rule]", " ", "algebra1IsAlgebra1"}], ",", 
       " ", 
       RowBox[{"\"\<wrong\>\"", "\[Rule]", " ", "algebra1IsAlgebra2"}]}], 
      "|>"}]}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Training Set\>\"", ",", 
       "\"\<Algebra 1 Probability divided by highest other\>\""}], "}"}]}], 
    ",", " ", 
    RowBox[{"GridLines", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", " ", 
       RowBox[{"{", "1", "}"}]}], "}"}]}], ",", " ", 
    RowBox[{"GridLinesStyle", "\[Rule]", "Red"}]}], "]"}], " "}]], "Input",
 CellChangeTimes->{{3.7711586979645214`*^9, 3.771158763987009*^9}, {
  3.7711589034919567`*^9, 3.7711589198291035`*^9}, {3.7711638938445168`*^9, 
  3.771163931375168*^9}, {3.7711726666542597`*^9, 3.7711726714516697`*^9}, {
  3.7711728159418964`*^9, 3.77117289478926*^9}, {3.7711729758869505`*^9, 
  3.7711729969018683`*^9}, {3.7711730367321424`*^9, 3.7711730394760923`*^9}, {
  3.771173076851448*^9, 3.7711731307854276`*^9}},
 CellLabel->
  "In[305]:=",ExpressionUUID->"a58ec1c8-41a6-4b44-8b8b-48c35008ce34"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.003666666666666667], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1: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

      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.003666666666666667],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.003666666666666667],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Training Set\"", TraditionalForm], 
    FormBox[
    "\"Algebra 1 Probability divided by highest other\"", TraditionalForm]},
  AxesOrigin->{0., -2.4684923254297773`},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{
     Charting`ScaledTicks[{Log, Exp}], 
     Charting`ScaledFrameTicks[{Log, Exp}]}, {Automatic, Automatic}},
  GridLines->{{}, {0}},
  GridLinesStyle->RGBColor[1, 0, 0],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 2798}, {-2.4684923254297773`, 15.686267958359322`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->FrontEndValueCache[{Automatic, 
     Charting`ScaledTicks[{Log, Exp}]}, {Automatic, {{0., 
       FormBox["1", TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {4.605170185988092, 
       FormBox["100", TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {9.210340371976184, 
       FormBox[
        TemplateBox[{"10", "4"}, "Superscript", SyntaxForm -> SuperscriptBox],
         TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {13.815510557964274`, 
       FormBox[
        TemplateBox[{"10", "6"}, "Superscript", SyntaxForm -> SuperscriptBox],
         TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-4.605170185988091, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.3025850929940455`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.302585092994046, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {6.907755278982137, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {11.512925464970229`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {16.11809565095832, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {18.420680743952367`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {18.51599092375669, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {18.60300230074632, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {18.683045008419857`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {18.75715298057358, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {18.82614585206053, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {18.890684373198102`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}}}]]], "Output",
 CellChangeTimes->{{3.771410694305224*^9, 3.7714107050439873`*^9}, 
   3.771411562908627*^9},
 CellLabel->
  "Out[305]=",ExpressionUUID->"9dde564c-3053-4f04-b515-4f2a98bb0a90"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxdXQ9clFXWHs2KynQytshMJ2OTNdPJSEkt3jUqKsvJqNDQJkUlJZ0UjQzl
VVFRMUdFRUQdla+wLKeili2KyazIKKcyY4t0tqioNZ2Sisrk433OOff6zvf7
7efv6Zx77rnnnvt37vtw+cSZYyZ3djgcdec4HNa/9H/R1I7/F/js0Wgd/wej
43+Rr+b8yjjOwq6GKUcZOy0cfP3mPxjHW9jsc1j0E6D/v6rfGPcy2tvbj8QP
/4uxy7Dqzr/4f4z7WvreC7+Q+hONTh2VHvacYnylJXdev0DKJ1n22ofPE3/6
W7juvbWtjAdY+jWet79iPNDCbT9O6BQi7Lbse40rT7L8GrS360NS/2BL7rlv
/hHG11rYN/blrxknW/X1yXjpG8bXob7m3Q62PwTxue5FicdQq7yZ2HyMcQri
s+OynxlfD//zD0p7hlnyQOpJkQ+3cKhTT/F3hGUvsmqYtPcGq/xne1/6kfGN
Fk59dbjop1p49O11XzI20N4bB3F7TWDv5g2/s/yfFq4s3tLOcmDj53ypbyTa
36mR9c2RVn+6LnriW5bfBH9vuqaN5cDpM95uZnmahU3/y+yvCZz86KeSTzdb
9k98WSHlb7bk/lX3Sv23ID4XL+L8MIFbH7lN8uNWCzuW38/5ZxJ23iX1p6P+
ilJpP3A090quz3Eb5Ps8Uh7Y8LeK/dth77XPfmD57VZ/+Pu3in93WHLnsQTu
PxPYOPPeEywfBfvnLGJ9c5RV3tHpfMmPO632vxtpa2H5nZa+54EPfmH5XRau
v6RI/Af2l/4o/Tca+b3pb++mknw0+qt4tOSXx9Jvuerr/xI2gFPiD/H4MIHj
cqW/Qh7kb0LOF1z+bkte/MuZbM8ANlZfw/6ZwOY1V3H/hIBDLWd8xuXHGM0d
Dh1YX0b+GWMsebitq7QH2Lcg8hOXH2PVb3w8Rdp/jyVPXPwa95cBfLLbO39y
eeCc9fkcj9A9VnnXY+9+zuUz0D/v/cX9awAnnWdw/5jA5tv53B+hDNS/L4f7
23GvhavnT2d9A9isy+X8MO+1ypdOmcnjPwTsef488f8+xOM5wQbhpwWbwIaS
h+5DfinsuN+Ojfst/eguVR7Y86wqD2xWqfKZVj50V/4YmXa5CexV8hDJlX3H
2JjyYy1/grr8WOOP9vbCQWf9m/o3NNYq735GlR9n6Ud3q/Lj7HIT8qCKR2gc
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
MOo5Gj8hlF+0bDPrh8neQB/vVyLAerxEgfX51FEAuZo/nAX2/ZcLeI/uf+if
dj4B1vnpKYi5ryqwj29fgf18aKK88/9U/wPr+4MAsB6PwQL7eh2CvdWqfJjs
6f1/TP1RyPV66pgPrPMfWI9H13z7/bQb8qDOf2Cfbj+wnm+98+3x8EFuKH/N
GHv++TH7X8j1/WMwxn4IWJ8fw/ONtg4DV8v8Gplvnx+i8+37IccCe7ycC+z9
44Jcrz9u4NPGP8n1+F9g2W/dcAmft72QB7/9gddTH3DbBWPk/A4c7bmH9f3A
xqufyH0WcCAjwuMxCNx8Yi2XD5E/E2/n3zfDC6z9bnRvGu8HIlT+md48vqLA
3oT18vtboYUb0q+KcPsLrf1x+7KHubwLcv+TM3m9dwP7/tMqv/cA5x1P5vHm
IX3d/8B6vvcV2vPJJH09/xXG9D/k+r4oCKzzJQSs7y/DMfoRYH2+jQLr8eow
7fXFmZZc/37hBHao8Z9gxuSHafzcMT/dKPmWBH09ft2mfb+QAvlpv1eY9t8/
0k37+ukx7fv/TLKv1xeyp8rnENbrDbCe7/KB9f7HBPYqebFpvz/0Qx5R9ZXF
xCsQU74qpr1ByPV+rSbG/xDJFa437efvMOR6fmmk9un9PbXnmkoeLy1k79gU
3l9G4e+yGaM4v9uo/MqH+fd8x0LjZIfCc/v+w/2/EPfB5RfxeuZciPVo/yu8
P09YaJU3ZhXwfbZrIX7PeSiR75OSFhpfdvyHL8LPUD64oW9228v+pcBecGpP
vj82gI92L+PxmQ57R0q/k/4HPuOR3dyezIXWfZLxkOSbF/b1eSpnob1/fQvt
8cyH/LT7h4X2fCuGXM+v/pjyZQvt8Q8QVvpVMfaDMf7VkH3d/wvt46ke9bn1
eI6RN1I89f6W2qvyvQVY72+jMf63QX7a75+LYF+t/3GL4K9an5yL7OtnAsn1
+Ef5dlV/EuR6fLuB9fkvZZF9/BhkT8nTF9nb71lk/X6cOk76OxP6erx4yb7u
f+CA8t8HrM+/+cB6PjCB9f6/GFjPj/5F9vmpbJF9/QygPX0UrkJ5PZ8HY+zX
LLL3RyjG//pF9vUhTOWVfiPFV8/vwIaStyyy3zdGyR/lfxth/fvnYqNLR/l+
Et+4xbB/ySdyHwQcaf2ZcQKwt+Qc3s+6Flv1JRz/me+/koCN36/h9yruxZgf
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
vx7InWc9zO3NBHbs+ozzwwt7dQ/6+HuUHMinVcp84yP/vpDvP/JXWvNFXU/1
+zPKt89I5P1PMdrnuOxa7k8/cOSHIu6vMtgLLw2xPLAS8991l3N+V0EefHIi
+xuEvH3jbZwvNSuxf0lU79OhH/3mB7ZXD1w0dQefd8LU3rTBXL4R2P12s8z/
5O+LTW9x/1O8/3WhnP+AfRPf5fHQBmzu+VK+rypBvg4dxfpxJWhf9DiPbyew
p3YX+5MAHPiup7wXLrHuY0Mpav6H3HHRKi7vBnadu4j7NwU4/+tN8r1OiRHX
Uf5yKZ9egvuR17/6lMc//Dvyy2CObyZwaqcKtu+FPbN0Fn/PlgMcrGzh/Z6P
5Ffkc335JRgP3qO7efxTe/os5nwsLjFqOyp464zl5I+/xBovhvp+pYzat/Ef
nP8Bwp9M4P1dFcXzQKd3uP8hz3nOKf2P9jkcf8r7FeifN/ko7xfrgf9c8LiM
f+qPjOVy/0PteTKN958RwseXyvxP9fdokPEPfOKue3l8tpVY+Weo9xeOVWj/
v37m81DcKqyn14rcCbmzrT+Pn4RVsF8n+i7gZc+Uy/kf+q7X/ybzP3Ao6Vae
D1OAjcLDYZ7/V2H+rp3F8UiHvO3OF1jfA/ujr13N4yMT8vrsNzieXmD3HYu5
f3NW4fcBtR/xofzUvh/weMkH7vOO+G+SvU//zriY/PNdKfc/q6z1qn3/3xu5
/yE3h34q+z9gT2i/7P9h/6XCt3l8BSFvOb8r77dqgB0Xjef5KkT+dPmHzP+r
rN9vU/+p1v9VmK/7pnN+N64yfu+Q/yTrewTl6xxP8/zUAv3ImVU8P0ap/9b/
XfofOP5fq+T7gycx//12itsT9yT0q+7m8e6E/Ph/7uR8S3jS6i/PZ6kcbxf0
HVd8x/UnAQcGzpX3UoTvdkr/o3ywva/c/zxpzY91Y9T4h9w1ewGPBw/Ku5bd
yfcdmcChHnIf4AWu3DWe8yMHOLJBznM+YGPMj7L/J3v5axib1N4p+TzeilF/
eGgK56P/Sft4KCN7S+6U9R/xefChW+X8j/IOo1bO/09a75fb/5T+qqHyl82R
/R9w+KoNcv8LXLbrGvY/TPG98ge21wjs++kr2f9RPC9ys78t1J4Pu3L5KHD0
2WZuXxv8rcu+g8enY7UlN1sLZP0HjsT35/5zAgd3yn1Iwmr83qvOQ67VOJ/d
I/NTEvQL1Pzlhtz1sIzXFMjd3/eR/l+N/Jrk4HxLJ3/Co+X+F/LCFw/z/Ufm
atyv3afOf5DXzZXvy3IIf5TK7fOR/84hcv8L7Ot+jNtjQn/b+v1y/7fa6q9U
t9j3Qz/Q/G/WL4P+Jzd+yetLgOy3T+L5owo4ap7D8iCwY+BKHl81KH9E5Xdo
NeaXD+7k8V0PfWPpPt4/han97zexf41kL+enau5/4JoNH3K8Wyh+ngFy/7fa
+n03Vd0ntJF/TSXyPbof9pwFPL93ATZXOHk9iSP5/CjnQ1dg/9o2+X3Ab/lf
p8778ZC7N/1P7ovInvkS+9/Lj/mjtUbmD799fk/0Y7/8xV/vkb0klA917cz+
DYD+pIGC3X77/iMZ+t66nRyPFMLT5PuFESj/dX6Y22/An5BPvv9Po/b+9gPH
L538H7ib5+9RKF/nep/lHsijw2V/m+G3fk+LZvXk+5xMP+bvQVcECWdRez79
SvYvqN9Y4uX9ZzaweYE6zwIHKkZyvHLJ3y1/Hub8hj97vkng9uahP1K7SPl8
1G/mf8HfXxRQ+xZN5PFkUvsuPcT7hSLYdzx8hONVDPtHLvmZcQn0I/vfZH/9
wAd961heSvH4Z0jGC+x5q+/keFfAv44DO/sXoPaMdvB9QiXq27Z4nqynsFdz
OMT7s91+a73oE/+onK/I36MTGVej/Hc9Jsl5m+Trxv+L6qul9n/4snyfCpx0
U+8uIeB95M+gi+U+Djj95XiOTwP0Ay8dkvnZb81HpmrPQYrnnbLfavTb97dN
1P/LN8j7fOqfL2Q8N5P9Z7bKfA484roHuH+PAntGXsg46sf7jRWyH2yl+I2p
4/5pw/hw7Pv3Lqr/JOJ3dukZwrexxrI3oNP/OB+7rEG+LTqX9wdxkBt/E/+7
Ake6fye/DwCnTx3I+vHAZlj2SwnARZFLOR96Ad91n3yf5aL6C2W9SFyD/cjj
F/B8kQQ8aJ3sXwZAv7LJJ78vkT/eHPYnmep/RfxLWYPfg9X6PQLyF4/GyffF
a7CeqPGWRu1V83U62T98guM1Cv5M/a/sFz2QO7q5WT8D8j5PXMf+ZyKezunX
83yYBf22YZtl/AMHx87m9mWvwXlxwvT3eT2D3H99Fa+PuZDfWib954N9R0st
ryd55P8NavwDt5yq4vYWQN+cdY/cf0EeWDiP41lE/rTLe5xisv/fX3l8lpD9
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
coXvo5T8OV/4PsqofZOF76MCOK+HvC8IUP6sE76PSuDaXOH7qNqE9xuG5Ntu
6l99/qd46/M/yfX5n/JJn/+B9X4tRO1T8d1Hcs3HEFO+geKn7/822efrg9Q/
+v4vZnw1xdQfiRkfzTH507LJvl4cpfL69z9gfV/cGpPfbZvs9zsnY9rjKLff
v3Qpt8c3rtzub1dgvd9zltvjFQ+s99sJwHr+6lVu7x9XuX3+TCy33pe2q+9V
ksrt8RsQg91kX+//gfV5OKXcHr8RkOv9tlFu/70rjdqj9NOB9Xw+Cvg0vj+q
T633GdQ+vf8H1vdjWaSvz//l9v1Idkz9OWRP+ZcLrPfvPrKn9//l9vkjH3Kd
XwXl1vvyQvUeyqR4JAjfRxG194TwfRRTfqwQvo+Scut+tiUqfB/+ctzvHhe+
j1LUX1gqfB9lsBe5Tfg+KoAD3YXvI0D1m8L3UQl8sJ98z1+F+h31wvexm/Lv
lPB9BCH3/ix8H9Uk9wrfR025fb6upXhp/pVy+35mX0z+1KN8SN//U/9rvrVy
+3n5YMx4aSR/9P1/uf3+K1Junz+aY8q3UHn9+z/lg+Yzpv7S63/MeG6LyZeT
Mfng2Gz3p8tmS673+3Gb7f53hb7+eyvOzXZ78cB6fkoA1uOn12asN3r9h9yl
13/IZyr7SZvt7R8ArM/vbmA9npOB9fhMAdbjY8Rme3yNzfb5JI30lX/pZE+P
f2BzhvB9eKj9p4TvI4Pae0T4PjJh33O98H1kbbbGS79C+f7Vi/a+e5nwfWST
/QeE7yNnM+679gnfRy7F62Xh+/BRf/UQvo88ko8Xvo981G8+IHwfBcDJh4Xv
w4T+FMX3UUTtVfEvJn9UPEpi4uHfbN/flG62/15ZRvFW/VUR0x8B4GTF91FJ
8VR8H1WwX/cP4fvYTXi2zA9Ban+W8H1Uk3+K76MGuOhp4fuoRfnCO4TvI0Tt
U3wf++B/6Avh+6gn+0Hh+2hA+dHnCt9HGPqGeo94EPqhqcL30UjxXyl8H03o
/6mHhO8jQvXPFL6PZuhHLhe+jxaqf5/wfRxF/du+Fr6PKNVXLXwfrSi/Y5Li
+6B87C18Hyc3W/e/dber778qLLl/tvB9dAF2jBa+j7gKe/u6Qm5cJ3wfTuDo
B8L3EU/2nhW+j4QKvPdrF76PXpCb84Tvw0V4k/B9JAK7gvJ9T1KF1d773xK+
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
APnMP3pyPi6g/rtkQVvd/wNobnTb
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Training Set\"", TraditionalForm], 
    FormBox[
    "\"Algebra 1 Probability divided by highest other\"", TraditionalForm]},
  AxesOrigin->{0., -2.9792564101116636`},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{
     Charting`ScaledTicks[{Log, Exp}], 
     Charting`ScaledFrameTicks[{Log, Exp}]}, {Automatic, Automatic}},
  GridLines->{{}, {0}},
  GridLinesStyle->RGBColor[1, 0, 0],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 2495}, {-2.9792564101116636`, 0.6756832599639893}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->FrontEndValueCache[{Automatic, 
     Charting`ScaledTicks[{Log, Exp}]}, {Automatic, {{-2.995732273553991, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.05\"", 0.05, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.3025850929940455`, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.10\"", 0.1, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.6931471805599453, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.50\"", 0.5, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {0., 
       FormBox["1", TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-4.605170185988091, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.912023005428146, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.506557897319982, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.2188758248682006`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.8134107167600364`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.659260036932778, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.5257286443082556`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.4079456086518722`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.6094379124341003`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.2039728043259361`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.916290731874155, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.5108256237659907, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.35667494393873245`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.2231435513142097, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.10536051565782628`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {0.6931471805599453, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.0986122886681098`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.3862943611198906`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.6094379124341003`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.791759469228055, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.9459101490553132`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.0794415416798357`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.1972245773362196`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.302585092994046, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.70805020110221, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.995732273553991, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}}}]]], "Input",
 CellChangeTimes->{3.7714106295127106`*^9},
 CellLabel->
  "In[250]:=",ExpressionUUID->"070561fe-1e21-4b84-a494-6640be04a0f8"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxdXQ9clFXWHs2KynQytshMJ2OTNdPJSEkt3jUqKsvJqNDQJkUlJZ0UjQzl
VVFRMUdFRUQdla+wLKeili2KyazIKKcyY4t0tqioNZ2Sisrk433OOff6zvf7
7efv6Zx77rnnnvt37vtw+cSZYyZ3djgcdec4HNa/9H/R1I7/F/js0Wgd/wej
43+Rr+b8yjjOwq6GKUcZOy0cfP3mPxjHW9jsc1j0E6D/v6rfGPcy2tvbj8QP
/4uxy7Dqzr/4f4z7WvreC7+Q+hONTh2VHvacYnylJXdev0DKJ1n22ofPE3/6
W7juvbWtjAdY+jWet79iPNDCbT9O6BQi7Lbse40rT7L8GrS360NS/2BL7rlv
/hHG11rYN/blrxknW/X1yXjpG8bXob7m3Q62PwTxue5FicdQq7yZ2HyMcQri
s+OynxlfD//zD0p7hlnyQOpJkQ+3cKhTT/F3hGUvsmqYtPcGq/xne1/6kfGN
Fk59dbjop1p49O11XzI20N4bB3F7TWDv5g2/s/yfFq4s3tLOcmDj53ypbyTa
36mR9c2RVn+6LnriW5bfBH9vuqaN5cDpM95uZnmahU3/y+yvCZz86KeSTzdb
9k98WSHlb7bk/lX3Sv23ID4XL+L8MIFbH7lN8uNWCzuW38/5ZxJ23iX1p6P+
ilJpP3A090quz3Eb5Ps8Uh7Y8LeK/dth77XPfmD57VZ/+Pu3in93WHLnsQTu
PxPYOPPeEywfBfvnLGJ9c5RV3tHpfMmPO632vxtpa2H5nZa+54EPfmH5XRau
v6RI/Af2l/4o/Tca+b3pb++mknw0+qt4tOSXx9Jvuerr/xI2gFPiD/H4MIHj
cqW/Qh7kb0LOF1z+bkte/MuZbM8ANlZfw/6ZwOY1V3H/hIBDLWd8xuXHGM0d
Dh1YX0b+GWMsebitq7QH2Lcg8hOXH2PVb3w8Rdp/jyVPXPwa95cBfLLbO39y
eeCc9fkcj9A9VnnXY+9+zuUz0D/v/cX9awAnnWdw/5jA5tv53B+hDNS/L4f7
23GvhavnT2d9A9isy+X8MO+1ypdOmcnjPwTsef488f8+xOM5wQbhpwWbwIaS
h+5DfinsuN+Ojfst/eguVR7Y86wqD2xWqfKZVj50V/4YmXa5CexV8hDJlX3H
2JjyYy1/grr8WOOP9vbCQWf9m/o3NNYq735GlR9n6Ud3q/Lj7HIT8qCKR2gc
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
MOo5Gj8hlF+0bDPrh8neQB/vVyLAerxEgfX51FEAuZo/nAX2/ZcLeI/uf+if
dj4B1vnpKYi5ryqwj29fgf18aKK88/9U/wPr+4MAsB6PwQL7eh2CvdWqfJjs
6f1/TP1RyPV66pgPrPMfWI9H13z7/bQb8qDOf2Cfbj+wnm+98+3x8EFuKH/N
GHv++TH7X8j1/WMwxn4IWJ8fw/ONtg4DV8v8Gplvnx+i8+37IccCe7ycC+z9
44Jcrz9u4NPGP8n1+F9g2W/dcAmft72QB7/9gddTH3DbBWPk/A4c7bmH9f3A
xqufyH0WcCAjwuMxCNx8Yi2XD5E/E2/n3zfDC6z9bnRvGu8HIlT+md48vqLA
3oT18vtboYUb0q+KcPsLrf1x+7KHubwLcv+TM3m9dwP7/tMqv/cA5x1P5vHm
IX3d/8B6vvcV2vPJJH09/xXG9D/k+r4oCKzzJQSs7y/DMfoRYH2+jQLr8eow
7fXFmZZc/37hBHao8Z9gxuSHafzcMT/dKPmWBH09ft2mfb+QAvlpv1eY9t8/
0k37+ukx7fv/TLKv1xeyp8rnENbrDbCe7/KB9f7HBPYqebFpvz/0Qx5R9ZXF
xCsQU74qpr1ByPV+rSbG/xDJFa437efvMOR6fmmk9un9PbXnmkoeLy1k79gU
3l9G4e+yGaM4v9uo/MqH+fd8x0LjZIfCc/v+w/2/EPfB5RfxeuZciPVo/yu8
P09YaJU3ZhXwfbZrIX7PeSiR75OSFhpfdvyHL8LPUD64oW9228v+pcBecGpP
vj82gI92L+PxmQ57R0q/k/4HPuOR3dyezIXWfZLxkOSbF/b1eSpnob1/fQvt
8cyH/LT7h4X2fCuGXM+v/pjyZQvt8Q8QVvpVMfaDMf7VkH3d/wvt46ke9bn1
eI6RN1I89f6W2qvyvQVY72+jMf63QX7a75+LYF+t/3GL4K9an5yL7OtnAsn1
+Ef5dlV/EuR6fLuB9fkvZZF9/BhkT8nTF9nb71lk/X6cOk76OxP6erx4yb7u
f+CA8t8HrM+/+cB6PjCB9f6/GFjPj/5F9vmpbJF9/QygPX0UrkJ5PZ8HY+zX
LLL3RyjG//pF9vUhTOWVfiPFV8/vwIaStyyy3zdGyR/lfxth/fvnYqNLR/l+
Et+4xbB/ySdyHwQcaf2ZcQKwt+Qc3s+6Flv1JRz/me+/koCN36/h9yruxZgf
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
vx7InWc9zO3NBHbs+ozzwwt7dQ/6+HuUHMinVcp84yP/vpDvP/JXWvNFXU/1
+zPKt89I5P1PMdrnuOxa7k8/cOSHIu6vMtgLLw2xPLAS8991l3N+V0EefHIi
+xuEvH3jbZwvNSuxf0lU79OhH/3mB7ZXD1w0dQefd8LU3rTBXL4R2P12s8z/
5O+LTW9x/1O8/3WhnP+AfRPf5fHQBmzu+VK+rypBvg4dxfpxJWhf9DiPbyew
p3YX+5MAHPiup7wXLrHuY0Mpav6H3HHRKi7vBnadu4j7NwU4/+tN8r1OiRHX
Uf5yKZ9egvuR17/6lMc//Dvyy2CObyZwaqcKtu+FPbN0Fn/PlgMcrGzh/Z6P
5Ffkc335JRgP3qO7efxTe/os5nwsLjFqOyp464zl5I+/xBovhvp+pYzat/Ef
nP8Bwp9M4P1dFcXzQKd3uP8hz3nOKf2P9jkcf8r7FeifN/ko7xfrgf9c8LiM
f+qPjOVy/0PteTKN958RwseXyvxP9fdokPEPfOKue3l8tpVY+Weo9xeOVWj/
v37m81DcKqyn14rcCbmzrT+Pn4RVsF8n+i7gZc+Uy/kf+q7X/ybzP3Ao6Vae
D1OAjcLDYZ7/V2H+rp3F8UiHvO3OF1jfA/ujr13N4yMT8vrsNzieXmD3HYu5
f3NW4fcBtR/xofzUvh/weMkH7vOO+G+SvU//zriY/PNdKfc/q6z1qn3/3xu5
/yE3h34q+z9gT2i/7P9h/6XCt3l8BSFvOb8r77dqgB0Xjef5KkT+dPmHzP+r
rN9vU/+p1v9VmK/7pnN+N64yfu+Q/yTrewTl6xxP8/zUAv3ImVU8P0ap/9b/
XfofOP5fq+T7gycx//12itsT9yT0q+7m8e6E/Ph/7uR8S3jS6i/PZ6kcbxf0
HVd8x/UnAQcGzpX3UoTvdkr/o3ywva/c/zxpzY91Y9T4h9w1ewGPBw/Ku5bd
yfcdmcChHnIf4AWu3DWe8yMHOLJBznM+YGPMj7L/J3v5axib1N4p+TzeilF/
eGgK56P/Sft4KCN7S+6U9R/xefChW+X8j/IOo1bO/09a75fb/5T+qqHyl82R
/R9w+KoNcv8LXLbrGvY/TPG98ge21wjs++kr2f9RPC9ys78t1J4Pu3L5KHD0
2WZuXxv8rcu+g8enY7UlN1sLZP0HjsT35/5zAgd3yn1Iwmr83qvOQ67VOJ/d
I/NTEvQL1Pzlhtz1sIzXFMjd3/eR/l+N/Jrk4HxLJ3/Co+X+F/LCFw/z/Ufm
atyv3afOf5DXzZXvy3IIf5TK7fOR/84hcv8L7Ot+jNtjQn/b+v1y/7fa6q9U
t9j3Qz/Q/G/WL4P+Jzd+yetLgOy3T+L5owo4ap7D8iCwY+BKHl81KH9E5Xdo
NeaXD+7k8V0PfWPpPt4/han97zexf41kL+enau5/4JoNH3K8Wyh+ngFy/7fa
+n03Vd0ntJF/TSXyPbof9pwFPL93ATZXOHk9iSP5/CjnQ1dg/9o2+X3Ab/lf
p8778ZC7N/1P7ovInvkS+9/Lj/mjtUbmD799fk/0Y7/8xV/vkb0klA917cz+
DYD+pIGC3X77/iMZ+t66nRyPFMLT5PuFESj/dX6Y22/An5BPvv9Po/b+9gPH
L538H7ib5+9RKF/nep/lHsijw2V/m+G3fk+LZvXk+5xMP+bvQVcECWdRez79
SvYvqN9Y4uX9ZzaweYE6zwIHKkZyvHLJ3y1/Hub8hj97vkng9uahP1K7SPl8
1G/mf8HfXxRQ+xZN5PFkUvsuPcT7hSLYdzx8hONVDPtHLvmZcQn0I/vfZH/9
wAd961heSvH4Z0jGC+x5q+/keFfAv44DO/sXoPaMdvB9QiXq27Z4nqynsFdz
OMT7s91+a73oE/+onK/I36MTGVej/Hc9Jsl5m+Trxv+L6qul9n/4snyfCpx0
U+8uIeB95M+gi+U+Djj95XiOTwP0Ay8dkvnZb81HpmrPQYrnnbLfavTb97dN
1P/LN8j7fOqfL2Q8N5P9Z7bKfA484roHuH+PAntGXsg46sf7jRWyH2yl+I2p
4/5pw/hw7Pv3Lqr/JOJ3dukZwrexxrI3oNP/OB+7rEG+LTqX9wdxkBt/E/+7
Ake6fye/DwCnTx3I+vHAZlj2SwnARZFLOR96Ad91n3yf5aL6C2W9SFyD/cjj
F/B8kQQ8aJ3sXwZAv7LJJ78vkT/eHPYnmep/RfxLWYPfg9X6PQLyF4/GyffF
a7CeqPGWRu1V83U62T98guM1Cv5M/a/sFz2QO7q5WT8D8j5PXMf+ZyKezunX
83yYBf22YZtl/AMHx87m9mWvwXlxwvT3eT2D3H99Fa+PuZDfWib954N9R0st
ryd55P8NavwDt5yq4vYWQN+cdY/cf0EeWDiP41lE/rTLe5xisv/fX3l8lpD9
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
coXvo5T8OV/4PsqofZOF76MCOK+HvC8IUP6sE76PSuDaXOH7qNqE9xuG5Ntu
6l99/qd46/M/yfX5n/JJn/+B9X4tRO1T8d1Hcs3HEFO+geKn7/822efrg9Q/
+v4vZnw1xdQfiRkfzTH507LJvl4cpfL69z9gfV/cGpPfbZvs9zsnY9rjKLff
v3Qpt8c3rtzub1dgvd9zltvjFQ+s99sJwHr+6lVu7x9XuX3+TCy33pe2q+9V
ksrt8RsQg91kX+//gfV5OKXcHr8RkOv9tlFu/70rjdqj9NOB9Xw+Cvg0vj+q
T633GdQ+vf8H1vdjWaSvz//l9v1Idkz9OWRP+ZcLrPfvPrKn9//l9vkjH3Kd
XwXl1vvyQvUeyqR4JAjfRxG194TwfRRTfqwQvo+Scut+tiUqfB/+ctzvHhe+
j1LUX1gqfB9lsBe5Tfg+KoAD3YXvI0D1m8L3UQl8sJ98z1+F+h31wvexm/Lv
lPB9BCH3/ix8H9Uk9wrfR025fb6upXhp/pVy+35mX0z+1KN8SN//U/9rvrVy
+3n5YMx4aSR/9P1/uf3+K1Junz+aY8q3UHn9+z/lg+Yzpv7S63/MeG6LyZeT
Mfng2Gz3p8tmS673+3Gb7f53hb7+eyvOzXZ78cB6fkoA1uOn12asN3r9h9yl
13/IZyr7SZvt7R8ArM/vbmA9npOB9fhMAdbjY8Rme3yNzfb5JI30lX/pZE+P
f2BzhvB9eKj9p4TvI4Pae0T4PjJh33O98H1kbbbGS79C+f7Vi/a+e5nwfWST
/QeE7yNnM+679gnfRy7F62Xh+/BRf/UQvo88ko8Xvo981G8+IHwfBcDJh4Xv
w4T+FMX3UUTtVfEvJn9UPEpi4uHfbN/flG62/15ZRvFW/VUR0x8B4GTF91FJ
8VR8H1WwX/cP4fvYTXi2zA9Ban+W8H1Uk3+K76MGuOhp4fuoRfnCO4TvI0Tt
U3wf++B/6Avh+6gn+0Hh+2hA+dHnCt9HGPqGeo94EPqhqcL30UjxXyl8H03o
/6mHhO8jQvXPFL6PZuhHLhe+jxaqf5/wfRxF/du+Fr6PKNVXLXwfrSi/Y5Li
+6B87C18Hyc3W/e/dber778qLLl/tvB9dAF2jBa+j7gKe/u6Qm5cJ3wfTuDo
B8L3EU/2nhW+j4QKvPdrF76PXpCb84Tvw0V4k/B9JAK7gvJ9T1KF1d773xK+
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
APnMP3pyPi6g/rtkQVvd/wNobnTb
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Training Set\"", TraditionalForm], 
    FormBox[
    "\"Algebra 1 Probability divided by highest other\"", TraditionalForm]},
  AxesOrigin->{0., -2.9792564101116636`},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{
     Charting`ScaledTicks[{Log, Exp}], 
     Charting`ScaledFrameTicks[{Log, Exp}]}, {Automatic, Automatic}},
  GridLines->{{}, {0}},
  GridLinesStyle->RGBColor[1, 0, 0],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 2495}, {-2.9792564101116636`, 0.6756832599639893}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->FrontEndValueCache[{Automatic, 
     Charting`ScaledTicks[{Log, Exp}]}, {Automatic, {{-2.995732273553991, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.05\"", 0.05, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.3025850929940455`, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.10\"", 0.1, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.6931471805599453, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.50\"", 0.5, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {0., 
       FormBox["1", TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-4.605170185988091, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.912023005428146, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.506557897319982, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.2188758248682006`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.8134107167600364`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.659260036932778, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.5257286443082556`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.4079456086518722`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.6094379124341003`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.2039728043259361`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.916290731874155, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.5108256237659907, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.35667494393873245`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.2231435513142097, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.10536051565782628`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {0.6931471805599453, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.0986122886681098`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.3862943611198906`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.6094379124341003`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.791759469228055, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.9459101490553132`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.0794415416798357`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.1972245773362196`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.302585092994046, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.70805020110221, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.995732273553991, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}}}]]], "Output",
 CellChangeTimes->{3.7714106296367183`*^9},
 CellLabel->
  "Out[250]=",ExpressionUUID->"a205b39d-05db-4fe4-8efa-3a4d5ba1046b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"lp1", "=", 
  RowBox[{"ListLogPlot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#right", "/", "#wrong"}], "&"}], "@", " ", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<right\>\"", "\[Rule]", " ", "algebra2IsAlgebra2"}], ",", 
       " ", 
       RowBox[{"\"\<wrong\>\"", "\[Rule]", " ", "algebra2IsAlgebra1"}]}], 
      "|>"}]}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Training Set\>\"", ",", 
       "\"\<Algebra 2 Probability divided by highest other\>\""}], "}"}]}], 
    ",", 
    RowBox[{"GridLines", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", " ", 
       RowBox[{"{", "1", "}"}]}], "}"}]}], ",", " ", 
    RowBox[{"GridLinesStyle", "\[Rule]", "Red"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Export", "[", 
  RowBox[{
  "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\2pset_trained_Automatic.pdf\>\"", ",", " ", 
   RowBox[{"{", 
    RowBox[{"lp", ",", " ", "lp1"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.771163950480488*^9, 3.771163966361644*^9}, {
  3.7711726416850667`*^9, 3.7711727266470737`*^9}, {3.7711728102008142`*^9, 
  3.771172811149503*^9}, {3.7711728436986227`*^9, 3.771172844611272*^9}, {
  3.7711729042891684`*^9, 3.7711729045893817`*^9}, {3.7711731459772415`*^9, 
  3.771173155041668*^9}, {3.7714078186095667`*^9, 3.771407818761632*^9}, {
  3.771410619264017*^9, 3.771410622004174*^9}, {3.771410726969519*^9, 
  3.7714107347740626`*^9}, {3.771411551143805*^9, 3.771411554360064*^9}},
 CellLabel->
  "In[306]:=",ExpressionUUID->"5f8ee03a-5a6c-4fc8-b268-7b1aba34af42"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1:eJxc3XF8lfP7P/AjSZJMkkkySSbJJJkkR5JJMkkmySSZJJPJZHJkMplMUpPJ
qSaTyapVq1aOJJNkkkySSTJJJskk+T5+j4/fH/fz+8/38fy8ruu67/t93+c+
9zmncsbw+wfe1SgUCj16eij0//7///6v/vLzbxzz0DcHzgz/9z+Eg26K43Ar
HI/b4oTwuwNOnbX6lrP+c3vcgfqOOBF3wp1xF5yEL8Bd8YW4G74Id8cX42R8
Ce6BL8U98WW4F74ch4OO4NAV5DjUmxyHriTHoT7kOHQVOQ71Je8bTth1d7/Z
lR3/y68OOoJDKeQ4dA35NeF+y1utHHzO/8/7BR3BoWvJcah/+OybHhg7t/Ou
y/+X49B15Dg0gByHrifHodTwr59WfdZs1L7/OYwjOIZDN9CPIzh2A8c/MJx8
/j1tFlV//+7/+gfSj2M4dCPbxxEcw6FB9A/ifOEY9aGb6McRHMOhwfTjCI7h
0M304wiO4VAa/WkcP45RH7qFfhy5hX4cGhJ0GEdwbAjbv5Xt4wiO4dBQ+oeG
h7Y/cmu7Nl3+2/5Qto9Dt9GPIziGQ8PoxxEcw6Hb6ccRHMOh9KAT0jkf6cH7
Xzr1ERzFMVyLQ3ewfRzG6TiCozh2R/B4anFoONvHYZyOIziKY7gWh+5k+ziM
03HkzuDxRMljuBaHRrB9HMbpOIKjI3i94FrqQ3exfRzG6TiCoziGa3FoJNvH
YZyOIyOD719R8hiuxaG72T4O3x1cv/S7w6kvbLlp7nGd/ucI9VEcw7U4lMH2
cTiD7WfwPISjGcH1iDGvFofuYfs4jNNxBEfv4fq7J7h/tfeE5ySlzjjt18T/
OTSK7eMwTscRHMWxUcH1qCUP3cv27+X+ey/3X/II/VEcw7U4NJrt4zBOxxEc
xTFci0P3Bd9vE+7j+HE6juDofWwf194XPB+hMRw/DuN0HMHRMVx/Y7j+yEP3
s30cxuk4gqP3s/37g8/7tTiUGVyPuEz2ByfhME7F6Tgzk/OXGVyfAuqjuAzH
cDWuxfU49EDQcTjhgeD+JuEw9ak4HWfiCPMKHuB++kDw/JTRH8PVuBbX49BY
jh8njOX4xwb3L0x9Kk7HmcyL4ALmR8dy/MyL4Wpcy/x6HHqQ48cJD3L85GHy
VPJ0nPlgOJwyo+6S/LP/O/4HwxOOf+zg/l+/+l9eQH0Ul7G9GHk1ee2Dwdd7
PfWhLI4fJ2Rx/DhMfSpOpz6TPIILqI+Sl+EYrqa/FtdTH3qI48cJOAmHH+L8
k6fjTOojuOAhrn/6y3AMVzOvFtdTHxoXzOPGcfzkSeRhnEp9+rjg81Ym9RHq
C3CU+jLyGK4ex/st/fU49DDn/+HgvISHg/ufRH0Yp+J05mWSR3ABjuIy5sVw
NfW1uJ76UDbHjxOyg/ffJPJwNtc/TseZ9EfIC8ij5GXkMfLqbM4/9fU49AjH
/wjnnzwJh3Eq/emPBPcnk/rII8H3gwL6o/SX0R/D1fTXktfj0HiOHyfgpPHc
/3Hq+OD1kk5/Jo7QX4Cj1JfhGPXV5LW4Hoce5f73aHC9Ex7l+HEYpzIvnTwT
R6gvwFH2p4z+GK7Gtbie+aEcjj+H48/h+KkP41T60+nPpD6CC6iPkpfhGPXV
uJb6ehx6jOsfJ+AkHH6M48fp1GeSR8gLyKPkZY+FP/24ZuGmW/97P4pRX/0Y
n/for8ehCZz/CcH+hAkcPw7jVJzO/EzyCC7AUfrLJgSvrxj11bgW1zMv9DjH
/zjX/+McPw7Tn0qeTp6JI9QXPB48v1H2p4z62OPB+201ee3jweeXevJQJOim
EdaDPB4n4EScxLxk8jBOwan0p5Gn4wzqM8mzcYT6vAjfR1BfiKP0l+Ay6itw
jPoqXE19DXkteV0k+H1aPfUNHF/oCc4/jnsi2B9PnoATqU96Ing/SaY+jFPo
T6U/jfp0nPEEnzfIs3EE5+GCJ4Kvr8In+HxGfQku43gq6I9RX4WrnwjeD2rI
a3Ed26tnew3UhyZy/nHcRM4/TpgYXJ9E8iTmJeMwTsGpzEsjT8cZ1Gfi7In8
fkF/3sTg66eA/kLqo7iE+jLyCvIY+1NFfTWuob+WvA7XU9+AQ09y/p8MXm9x
Twb3L576BJyIk57k/o/D1KfgVJz2ZPDzUjp5xpPhlT/OfXbp6nP+O/9sL/tJ
/jwM/Xm4gP5CHGVeCf1l7E8F/THWt+pJ3s+ZV0N/La7D9fQ3kIdyg26K43J5
/8cJ1CeSJ+UGX0/J5GGcglOZn4bTqc8gz8TZubz+6c+jvoC8EEdzg+erhP4y
tldBfwxX4Wrm1eBa6uvI63EDDj3F6/8pzj95PE7AifQn4WTqw+QpOPWp4Pql
0Z+OM+jPJM/GEZz3VPD39QLyQhzFJbiM/angeGLUV+FqXMO8WvI6XI8b6A9N
4vzjOByPEybx+idPwsk4TH8KeSpOw+k4g3mZOJv6CM6jvmBS8HwVUh/FJbiM
eRXkMVxFfTV5Da7FdfTXkzfg0NOcfxz3NM9/OOHp4Pok0p+Ek3GYeSnkqTiN
+nScQX0meTZ5BOfhAvoLOd4o9SW4DFc8zfc3zK+ivhrXUF9LXkdez/42UB/K
4/zjOByfF7w/JuTx/E99Ek7O4/mPPAWnUp+WF3zeSqc+A2fSn00eyQs+n+RR
X5DH65/+KC7BZaxPBXmM7VXlBZ9vq6mvwbXU15HX4wa2F3qG5z8c9wznnzyB
PBEn4WQcxinMTyVPw+k4g/5M8mwcwXn0F+BCHKW/hLwMVzzD+z/9Vbga1zCv
lnl11Nc/E/z80UB/aDKvfxw3OXj9xk/m+1HqE3ESTp7M6588BafiNPrTyTNw
JvXZ5BHyPFyAC+mPsj4l1JfhCvpjuGpy8P5aTV6Da3Ed26vHDZy/0LOcfxyH
43ECTnyW53/yZBzGKTiVeWk4nfoM8kzybPIIzqO+ABdSH8Ul1Jc9y/2fPEZ/
Fa5+Nni+auivxXW4nu03MC+Uz/nPD74fxuXz/Ed9Ak6kPok8mTxMnoJTqU/L
5/dF6jNwJv3Z9Eeoz6O+ABdSHyUvIS/DFfnB+3GMvApX4xq2V4vrcD39DTj0
HOf/Od7/cTz1CTgRJ+FkHH4ueL2lkKfiNJzO/mU8x5+3oD4bR+jPo7+A+kIc
xSXMK8MV1MfIq8ircQ2ufS74+q57jt/7qG/AoSmc/ymcf/J4nIAT6U8iT8Zh
nEJ/KnkaTqc+Ywrnn/psHMF5uID5heRRXILL6K9g/2LUV+FqXMO8WubVUV+P
G+gPPc/z//PBeXHPc/5xAv2J9CdRn4zDOOX54OfjVPI0nI4z6M8kz2Z/IziP
+gLyQhylvgSX4QocY14V61dNfQ31tbiO/nr6G3CoINjfuID7AW5OfVxBcHut
qI+nvi1OoL4DTqS+M3kS7kZ9MnlPHMZ96E/B/alPJR9EnoaH4nT6R+AM1nc0
/Zk4i/5s+nOoj+BcnMe8fPICPA0X4iLmRXEx+1tCfykuw+UFwe9DKphXSX0M
r8VVeAOuZv83k9eQb2N/aqnfievwHubV4/0FPO/TfwiHXgi68Qu8H+DmL/D5
gP5WOB63ZV4C8zpQn4g74yTcjfnJuCfbC9PfB6fg/sxLxYOoT8NDcToewbwM
PBpn0p+Fs3HOC/z9Ueblsj559OfjAjyNeYW4iPlR+otxCS7FZcwvZ34F9ZU4
htfiKryB7VWzvc3U1+BtuBbvZH4d3sP26unf/wKvf/JDODSV93/cdCrv/zgO
t8LxuC3zE6by+qc+EXfGSbgb85OZ35P6MO6DU5jXH6dSPwin4aE4nXkj2N8M
6kfjTJyFs3EOjrD9XJxHfT4uwNNwIfOKcJTjLaa/BJfiMlzO/ArmV1Ifw2tx
Fd6Aq9neZrZXQ/02XIt34jrm78H11O/HDVOD3wccoj/0YnB/G7/I8z9ujuNe
DM5rheNxW/oTcAfqE3Fn6pNwN5yMezIv/GLwftmH+hTcH6cybxBOw0PpT8cj
cAb9o3Em9Vk4G+e8yPs/83Kpz8P5uABPY14hLsJR+otxCS7FZcwrJ6/AlTiG
1+Iq5m/A1bx+NtNfg7fhWryT+XV4D66nfz9uwIfoD03j/X8ar3/cHMfR32pa
cD3iqW+LE3AHnMj8zjiJ7XWjPxn3xGHch/kpzO9PfSoehNPwUOan4xFsL4P+
0TgTZzEvG+fgCP25OA/n01/A/k6jvhAX4SguZn4JLmV7ZfSX4wpciWPMX4ur
8Ab6q/FmXEP/NvJavBPX4T3Mq8f7WZ8G+g/h0EtBN8ZNX+LzP47DreiPx21x
Av0dcOJLwePpTH8S7oaTcU/mh5nfh/oU3B+nvhT8PW8Q89OYP5T+dDwCZzBv
NPMyqc/C2TgHR3DuS8Hvz/LYfj71BezPNPJCXISjuBiXsP1StldGfTmuwJXM
i+G1zK+ifwOufin4/LiZeTV4G/NrmbcT1+E9L/H7HvP3U9+AD+HQdF7/04Pn
v+l0Xv/Ux+FWOJ7+tjhhOp//6U/EnXES7oaT2V5Pthemvg9Owf1xKh7E9tLY
3lDq0/EInMG80czLpD4LZ+Oc6cHrNcL8XObn0Z+PC/C06cH7YSHzi6iP4mJc
Qn8pLmN/y+mvwJU4htcyvwpvYHvV9G/GNXgbrsU72V4d29tDfT3ejxvwIRya
wfP/jOD2ms7g+R/H4VY4Hrdlewm4A/WJuDNOor/bjOD9K5n6njiM++AU5vdn
fVKpH4TT8NAZwd+n05k/gvkZ9I/GmTOCn+ezmJdNfQ6O4Fycx7x8XED9NFyI
i3AUFzO/BJdSXzYjeD8rJ6/AlcyL4bWsfxX9G3A13sy8GrwN19K/E9fhPbie
efu5/huoP4RDhbz/46aFvP/juMLgerWiPx63xQmFwddDB+YnUt8ZJ+FuOBn3
ZH6YvA9Owf1xKh7E/DTWZyj16XgEzijk93+cibPYfjbOwRGci/MKg3/fIh8X
4Gm4EBfhKC7GJaxHKS7D5bgCV+IYXsvxVxUG7y8bqK/Gm3EN3oZr8U5ch/ew
f/V4P/UN+BAOvczrHzfFzXEcboXjcVucgDvgRNz5Zb7/w92oT8Y9cZj+PjgF
98epeBDz0/BQnI5H4Aw8+mWe/9l+Fs6mPwdHcC7Ow/m4AE/DhbgIR3ExLsGl
HF/Zy8H7Xzn1FbgSx/BaXIU34Gq8GdfgbbiW49mJ66jfg+vxftyAD+HQTF7/
uClujuNwKxw/k8//5Am4A07EnXES7oaTcU/2J4z7UJ+C++NUPAin4aE4HY/A
GXg0zsRZOHtm8P0rhzyCc3EezscFrN+0mcHPI4XUF+EoLsYluBSXsf3ymfx7
C7iS9Ygxby2uwhtwNd6Ma/A29reW/ds5M/j9Xh39e3A93o8b8CEceiW4Ho1f
4fWPm7/C8/8r/Plf8nj62+IE3AEn4s44CXfDybgnDuM+OOUVfv/j+FLxIJyG
hzI/HY/gfGSQj8aZOAtn4xz2J8L5yyXPoz8fF+BpuBAXMT/6Cs//uIT1KGVe
GS7HFbgSx/Ba9q+K9dlAfTXejGvwNlyLd+I6vAfXs7/7cQP1h3CoiPd/3LSI
z/9F/P2QouD5aUV/PG6LE3AHnIg74yT2rxv7l0x9TxzGfZiXgvszP5XjH8S8
NDwUpzN/BM6gfjTOpD6LPJs8hzyCc4v4/a8o+O/T51NfgKexvULyIvJoEa9/
6ktwKS5jXjmuoL4Sx6hfS16FN1BfTb4Z1+Bt9NfindTX4T24Hu/HDcw/RB56
ldf/q8H6prj5q7z+6W+F43Fb5iXgDtQnkncmTyLvRp6Me1IffjX4vNWH+hTq
++NU6geRp+GhrF86/SNwBh7NvEz2P4v6bJyDI8zLJc/D+bgAT2NeIS6iPoqL
qS8hL8Vlr/L9P3kF8ypxDK+lv4p8A3k1+WbyGvJtnP9a6nfiOryHefXk+3ED
PkR/aFZwfxrP4v1/VvD9oPksnv/pb0V/PG5LfwJ5B5yIO+Mk3I35ybjnLP57
o/T3wSn098ep1A/CadQPJU/HI3AG/aNZ70zqs3A2zmFehDwX51GfjwvYn2n0
F+IiHMXFzC/BpWyvjP5y6itwJf0x+tdSX4U3UF9NvhnXUL8N11K/E9dRvwfX
4/24gXmHcOg13v9f4/2fvDl5HHmr14K/58VT3/Y1/n15+jvgRPo7059EfTec
jHviMPP7kKfg/jiV/kGv8e9VUj8Up+MRzMvAo5mfSX8WzqY/hzxCnovzqM/n
/BawP9OoL3wteL8tIo++Fnx+KSYvwaXsXxl5Oa7AlTjGvLXkVXgDrqZ/M3kN
3kZ9LflOXEf9Hta7nvr9uIH+QzgUDdY3wo2jwfomuCn1zcibk7eI8veHqW8Z
5XmC/tY4nv425G1xO+oTosH7SXvqO+CO9CfS34n6zrhLlP+eFHlX3A13x8nR
4OurB+vXk/peOMzx9Ka/D/V9cUo0eD/oR94fD2B7qWxvIPWD8GCcxrwheCjr
M4w8nXnD8Qg8EmcwbxT5aDyG+kw8lvXIon8cr59s+sdTn4MnUB8hn0iey/5M
oj4PT6Y/n3wKLqB+Kp5G/XSut0L2byb1RXgWjrK9ObiY+nm4BM+PBj8vlZIv
iAb/fGwZ21vE/aSc/qW4gv4VuJJ5q+mPsT9r6F/L+q7j9VTFvPX0b8AbcTX9
m8g34y24hv6teBv128lreT3tIN+Jd+E65u/Ge6jfS16P97He++k/QH0D+UF8
iPN1mP7Q7OD2Gs3m/R83wU1nB+c1w82pb0Eeh1viVvS3Jo8nb4Pb4nb0J+D2
1Hcg74gTWb9O9HfGXehPIu+Ku+Hus4O/ryeT98A9cS8cZn96czx9qO+LU3A/
5vUnH4BT8UD6B5EPxml4CB7KvGHk6Xg4HkH/SPIMPAqPxmOYl4nHUp+Fx1Gf
zfkaT30OnoAjzJtInosnUZ9HPhnn4yn0F5BPxdPwdFzIvJm4iPWZRX8Uz8HF
zJtHXoLnU1+KF1BfRr6IvBwvxRX0r+B4K6lfjWN4zezg89Va5q+jvgqvp34D
+UbyavZ3E/Wb8RZcg7dyf9w2O/j+t536WryD/dtJvgvXUb97dvB5aw/1e3E9
/fvI988OPp8coL6B9TtI/yF8GIfmBNen0Rze/+fw+X8Ofz+Q+ma4OfUtyONw
S7bXCrfG8fS3IW9L3g4n4Pa4A+7I/ETyTrgz7kJ/EnlX3A13pz8Z98A96e9F
Hsa95/D+T39fnIL7Ma8/8wZQnzon+PljIP2DqB+M07h+h7C9odQPw+l4ONsf
QT4SZ+BR9I8mH4MzqR9LnkU+Dmfj8fTnsD4TqI/gifTn4klzgvfXPPLJOB9P
YXsFeCrnbxr903EhnomL8Cy2FyWfg4vxPFzCvPm4lPoF5GXki8jL8VLqK/AK
6ivxaupjXB9ryNfSvw5Xcb7W078Bb8TVbH8T8zZTv2UO/74W+7OV+m14O/W1
5DvId5LvwnXU72b/91C/F9fTv4/+/dQfoL4BH6T+EPlh8tDcoBvNDd6PG5M3
wU1xs7l8/sctcBz9LXEr3Jr+eNyG+ra4HU7A7XGHucHrrSN5Iu6EO7N/Xeby
72NT3xV3o787/cnU98A9cS/mhXFv6vuQ9yVPwf1w/7nB1/eAucHfP1KpH4gH
4cHsTxr5EDwUD6M/nXw4HoFH0p9BPgqPpn4M5y+T+rE4C4/D2cwfT56DJ+AI
/RPZv1zqJ+E8PJl5+cybQn0Bnkr/NDydeYX0z8RF9M+iP0r9HFyM580Nfj4u
IZ+PS/EC+svIF7G/5Xgp9RXkK3Al9atxDK/Ba5m3jvWron499RvwRvqr6d+E
N9O/hbwGb6V+G9vbTn0t9TvwTup34Trqd5PvwXupryffh/fjA/Q34IPUHyI/
TB4q5v0fNy7m8z9uWhxc32b0N8ct6I+jvyX1rXBrHM+8NuRtcTucgNszrwPu
yP4m0t8Jd8ZdioPfhyQxryv13XB3nIx74J7sfy/yMHlv9qcP9X1xCu7HvP54
QHHweSCV/oF4EB7MvDQ8pJh/b4H+YTgdD2feCOaNpD4Dj8Kj8RjmZ+KxbC+L
/nE4G49nXg6eQH0ET8S5eBLz8vBknE//FFyApxYHv1+YxrzprE8h/TNxEZ7F
vCiew/xi+ufhEjwflzJ/AfPLqF+Ey/FSXIFXsL1Ktrea+hheg9fidcyvwuvZ
3gb6N/L6rybfhDczfwuuoX4r3oa341q8g/k7OZ5d1Nfh3XgP3sv8eubvo34/
PoAbmHcQH6L+MA69zvs/bvw67/+v8++DUd8MN8ctcBxuiVux/dY4nvo2uC1u
hxOY1x534Hg70p+IO+HOuAvzk5jflfpuuDtOxj1wT7bXi+2Fqe+N++C+OIX5
/XB/6gfg1NeD3wcMpH8Q+zuY/jQ8BA9l3jCcjofTPwKPpD4Dj6J+NB6DM/FY
5mW9HrxfjqM+G4/HOcybgCN4Iv25eBLOo38yzqd+Ci7AU1/n/Z9506kvxDNx
EZ7FvCieg4vpn4dL8HxcyrwF5GV4ES7HS3EF81fgSl4/q+mP4TV4LV7H/Cq8
Hm+gfyOuxpvo34y3UF+Dt+Jt9G9nPWqp34F34l24jvm78R62t5f+erwP78cH
mN/A/IPUH8KHcWge7//zgvMb4ybzeP+nvxlujlswLw63xK3ob43jcRv627K/
7ahPwO1xB9yR+Ym4E9vrTH8XnIS74m7M746TcQ/6e+JeOEx/b/I+uC9Owf2Y
1x8PYH1S6R+IB+HBOI35Q/BQPIz+dDwcj6B/JM7geEbRPxqPwZl4LPOzmD+O
+mw8HufMC/6eN4H5EeZPpD8XT8J5zJvMvHzqp+ACPBVPw9PnBb8/K2T7M6kv
Yn9mkUfxHFyM5+EStj+f7ZVSvwCX4UXMK8dLmV9B/wpcOS/4/LiaeTG8hvlr
mbcOV+H184LP8xuYv5H6arwJb8ZbOP81zN9K/Ta8HdfSvwPvZD120V+Hd+M9
eC+uZ3v72N5+6g/gBnwQH8KH2V7ojeD2Gr0RrG+Mm+CmbwTnNWNec+pb4Djc
8g3+PSHmt2Z+PP1tcFvc7o3g/TCB+e2p74A74kT6O+HO7G8X+pNwV9wNd2d+
Mu7B9nrS3wuHcW/cB/dleylsrx/1/fEAnIoH4kFsbzDbS6N+CB6Kh+F0PJzt
jcAjqc/Ao/Bo+se8Ebx/ZVI/FmfhcTib+eNZnxzqJ+AInvhG8PfpXOZPYn4e
/ZNx/hvBz/NTmFdA/VQ8DU/HhcybiYuon4WjeA4uxvOYX4LnU1/K/WwBeRle
xLxyvJT1r6B/Ba7Eq5kXw2vwWvrX4Sq8Hm9g3kau/2rqN+HNeAuuYf5WvI31
2k5/Ld6Bd/J62MX8Oup34z14L67H+5i/n/wAbsAH8SF8mPmhEt7/S3j/x01w
0xJ+/8fNcYsSPv/jlrgVbo3jS4J/36INbovb4QTcHnfAHXEi69EJd8ZdcBLu
irvh7hx/cgl//5/6nrgXDuPeuA/ui1NwP/avPx5AfSoeiAfhwTgND8FD8TCc
jofjEXgkzsCjON7ReAz1mXgszqJ/HM7G43EOnsD8CJ6Ic/EknIcncz/JZ/tT
cAH9U/E0PB0X4pm4CM/CUTwHF+N5uATP5/hKuf8toL4ML8LleCmuwCtwJV6N
Y3gNXsvxrMNV1K/HG/BGXI034c14C67BW/E2vB3Xcjw7yHfiXbgO78Z78F5c
j/exP/vxAeob8EF8CB/GoTeDboQb4ya4KW6Gm+MWOO7N4PtXS/JWuDWOx21w
2zeD69fuzeDnkQTq2+MOuCNOxJ1wZ7bf5U3+/D/uynp0Y153nIx74J64Fw7j
3uxvH/av75vB7/dS6O+H++MBOBUPxINYj8HkaXgI+z+U/R9Gnk7/cDwCj8QZ
eBQejcfgTDwWZ+FxOPvN4PvteI4vB0/AETyR+bl4Eucjj3wyzsdTcAGeyv5M
4/xNJy+kfyYuwrNwFM9hfvGbwef9ebiE9ZjPvFK8AJfhRbgcL2X/KlifFdRX
4tU4htfgtXgdrsLr8Qb2dyOupn4T3oy34BrmbWU9tnF+ttNfi3fgnXgXrsO7
8R72by/7V0/9PrwfH2BeAz7I/EMc/2Hmhebz/o8bz+f3f9yU+ma4OfUtyOPI
W5K3wq3nB78/ip8f/Pfp21DfFrdjewnk7ck7zOfzP/WJuBPuzLwuOIn6rrgb
9d3Jk3EP6nuS98Jh3Jv+Prgv9Sm4H+6PB+BU5g8kH4QHU5+Gh8zn7//TPwyn
4+HMG4FHUp9BPop8NPkY8kw8lvqs+cHnrXHUZ1M/HudQP4E8gieyfrn0T8J5
eDLz8tn/KdQX4Kl4GvOmkxfimbgIz2JeFM+hvhjPo76EfD4unc/3/+RlzFuE
y/FS+ivIV5BXkq8mj5Gv4fyvpX4drsLrmbeBfCOuxpvo38z+bKG+hveDrfRv
o387/bV4B/07yXfhOrwb78F7mV+P93G97Kf/AG6g/yA+RP1hHHorWN/oLd7/
cRPclP5mb/H9P/UtcBxuybxW5K1xPPVtcFv2px39Cbg97oA7Mj8Rd2J7nenv
Qn0S7kp/N/q7U5+Me1Dfk7wXDlPfG/ehvi9Oob4f7o8H4FTmDcSDqB9MnkY+
hHwo+bC3+O+vUz/8reDz3gj6R+IM+kfRP5r6MTgTj8VZzB9Hno3H4xz6J3B9
RaifiHPxJObl4cnMz6d/Ci6gfyr5NPLpuJD6mZzfIvZnFvXRt4L32znkxW8F
n1/mkZfg+exfKfkCXIYX4XLmLSWvwCtwJf2ryWN4DfVrydfhKurXs94bqN+I
q+nfhDdTvwXXUL8Vb6N+O3kt+Y63gt+n7aR+F8dXR/9uvIf+veT1eB/1+7mf
HKC+AR+k/xD9h6kPlQbdqDR4vTcmb4Kb4ma4eWnw9dWilP9+GPUtcatSfv+n
P576NrhtafB+0I48Abdnex3YXkfqE3En3Jl5XXAS69OVvBvzuuNk3AP3ZF4v
8jDuTX0f3Jf1SKG/Xyn/vVT6B1CfigdSP4h8MHka+zOE+qF4GP3p5MPxCOpH
4gzqR3G9jWb/xlCficfiLLY3DmdTPx7n4Amlwc9LEfKJpcE/H5vL9iaVBu8n
efRPxvn0T8EFzJtK/zT2Zzr9hazvTF5PRcybRX8Uz8HF9M8jL8HzcSn9C3AZ
9YvIy3k9LSWvwCtwJfNX4xj1a8jX4nWsdxX966nfQL4RV3O+NtG/me1tob8G
b8XbmLcd11K/g3wn3oXr6N9Nvod8L67H++jfjw9Q30B+EB9i/Q7TH3qb9/+3
g/2NyZvgprjZ28Hf15uTt8BxuCVuxf60fpv3f+rb4La4HfMSyNvjDrgj/Ynk
nXBn3AUnMa8reTfcHSfT34O8J+6Fw7g38/rgvtSn4H7U9+d8DaA+FQ/Eg5g3
mDwND6F+KPkwnI6H0z+CfCTOwKPwaOaNwZmsz1j6s/A4nM288eQ5eAL1ETyR
+lzySeR5eDLOp38Kx1tA/VQ8DU9/m//+D/NnUl+EZ1EfJZ9DXsz+zqO+BM/H
pXgB98eyt4Pvf4uoL8dL2b8K8hW4kvrVbweft2LUr8Fr6V9HXvV28PlkPfUb
WL+N9FfjTXgz67OFvIbtbX07+Hy7jfrtuJb6HeQ78S62V4d34z307yWvJ9+H
9+MDuAEfZP4h8sM4tID3/wW8/5M3wU1xM/qb4xY4jv6W5K1w6wW8/9PfBrfF
7ZiXwLz21HdYEPz80ZH+ROo74c4LgtdvF7aXRH1X3A13Z/vJ5D1wT9yL/jB5
b9yH+r7kKeT9cH88gP5U1mcg9YPwYPrT8JAFwfvrUPJhOB0PZ3sj8EjOXwb9
o/BoPAZn4rFsL4t8HM7G43EO8ybgCPUTyXPJJ5Hn4cnU5+Mp1BfgqdRP4/qY
Tl5I/0xcxPmaRX8Uz8HFbH8e80qon7+Av//P/iygvgwvor6cfCl5BfkKXEn9
avY/Rv0avJb+dfRXUb+e+g14I/XV5JvIN+Mt3I9ryLfibXg726vFO/BO+nfh
Oryb/j14L/X1eB/ejw/gBq63g+SH8GEceie4f43eCZ7fxu/w/o+b0t+M/ubU
t8BxuCXzWuHW1MeTtyFvi9vhhHeCr+/27wR//+hAfUeciDuxP53Ju+Ak3JX+
buTdcTLuQX9P8l44TH1vzl8f6vviFNwP92f+APJUPBAPon8w+5dG/RA8FA9j
XjrzhlM/Ao+kPwOPYt5o+sfgTPrH0p9F/Ticjce/E/x8nEM+AUfwRPpzySex
v3l4MvX55FNwAfVT8TQ8HRcybybrV0T9LOqjeA79xfTPwyX0zycvxQuoL2N7
i6gvp34prqB+Ba6kfjV5DK+hfi35OlyF19O/AW+kvpp8E/lmvAXX0L8Vb2N9
t9Nfi3fQv5P+XdTX4d14D/P2ktfjfXg/PsC8BnyQ/T1E/2EcKgv6iLLg9yGN
yoLzjqS+MT4KN8FH46Zlwf0/hrwZ+bHsT3Pqj8Mt8PHMi8MnlPH3Eek/EbfC
JzGvNT65jH+/iP5TcBt8KvPaMu806tvh03ECPoP57fGZbK8D/Wfhjvhs5iXi
c6jvhM/FnfF5zOuCz8dJ9F+Au+ILy4LfL3Rj3kWsT3f6L8bJ+BLm9cCXMr8n
/ZfhXvhyHGb+FczvTf2VuA++CvfFV7O9FLZ3DfX98LW4P76O+QPw9Wwvlf4b
eP0PJL8RD2L+TXgw9TfjNHwLHoJvZf5Qjuc26ofh23E6voP5w5l/J/Uj8F14
JPPuxhnU34NH4XvxaObdx/6Oof5+nIkfwGPxgziL7T+Ex1H/MM7Gj+DxzHsU
53C8j9E/AT+OI/gJ5k9k/pPU5+Kn8CT8NM5je8+wvcnUP4vz8XN4CvOfxwXU
v4CnlgW/D3iR/mns70v0T8czcCHzXsYz8Sv0F+FXqZ+FX6M+imfjOXgu84q5
X75O/Tz8Bi5h3pt4Pn6L/lL8Nl5A/zu4jPqFeBFezPt/OfOWUL8UL8MVeDnz
VuCVuJL+VXg1fhfHmPce+Rr8Pl6LP8DrmP8hruL18xH96/HHeAP+hPkb8ae4
mv7P8Cb8Of2b8RfUb8Ff4hr6v2I9tlL/Nd6Gv8Hbmf8trmV739G/A3+Pd+If
mL+L+T9SX4d/wrvxz8zfg39he3vp/xXX49+Ytw//jvfT/wc+gP+kv4H9/Yv6
g/hvfAj/w/zD+F+2F1oY7D8CN8JH4sYLg/OPwk3w0fQ3xcfgZvQfS94cH4db
4OOZF4dPWBhcn5b0n4hb4ZNwa+afjOPxKfS3wafitvSfhttxPKfTn4DPwO3x
mczvwPyzqO+Iz8aJC4O/553D/E7MP5f+zvg83IV55zMvifoLcFd8Ie6GL1oY
/P6sO9u/mPpk9ucS8h74UtwTX4Z7sf3L2V6Y+itwb3wl8/rgq5jfl/6rccrC
4PPjNczrh69lfn/mXYcH4OsX8t+fZv4N1A/EN+JB+CbO/2Dm30x9Gr4FD6H/
VjyU9biN/mH4dpyO78DD2d6dbG8E9XfhkfhunIHvYXuj2N691I/G9+ExzLuf
eZnUP4DH4ge5XrOY/xDzx9H/MM7Gj3A/HM/8R6nPwY/hCfQ/jiPs7xP0T8RP
4lz8FPMn4afZXh79z+DJ+Fmcj59je1PY3vPUF+AX8FT8Ip7G9l5ie9Opn4EL
8ct4Jn6F7RXhV6mfhV/DUfpnc/+aQ/1cXIxfx/OY/wbrU0L9m3g+fmth8Pfp
Uua/zfwF9L+DyxYGP88vZN4i6hfjcrwEL2XeMlxB/XK8Aq/ElXgV81fjd6mP
cT97j3wNfp95a/EHrP86+j/EVfgj5q3HH+MN9H+CN+JPcTXzPuP630T953gz
/gJvYf6XuIb1+or+rfhrvI3XwzfM3079t7gWf4d34O+Zv5P8B7wL/4jr8E/M
3836/Ez9HvwL3rswfP6NYx765sCZ/+v/Fdfj3/A+/Dvej//AB/CfuAH/hQ/i
v/Eh/A8+vDB8fe9NXS/POu9//ndh8O9/hBYF649YFMwbkR9J3pj8KPIm5EeT
NyU/hrwZ+bHkzcmPI29Bfvyi4HrEkZ+AW+ITcSt8Em6NT8bx+BTcBp+K2+LT
cDt8Ok5YFH53wKmzVt9y1v98Bnl7fCbugM/CHfHZi8ID5lz5zaHx/73fJpKf
gzvhc3FnfB7ugs/HSfgC3JXr5ULybvgi3B1fjJNZj0vIe+BLcU98Ge6FL8dh
fAXuja/EffBVi8JxWcede+wX/x1PX9bvaupT8DW4H74W98fX4QH4epyKb8AD
8Y14EL4JD8Y3c77TyG/BQ/CteCi+DQ/Dty8Kvr+mk9+Bh+M78Qh8Fx6J78YZ
+B6ul1Hk9+LR+D48Bt+PM/EDeCx+EGfhh/A4/DDOxo/g8YvCQwqq6l7qd+7/
/Ch5Dn6M9ZtA/jiOcD0+sSj821dnf/Py+bv+93lgIvVPkueSP0U+ifxp8jzy
Z8gnkz+L8/Fz3H+mkD+PC/ALeCp+EU/DL+HpeAYuxC/jmfgVXLQofNxbu2/c
G/3veF9dxN93ov41ro8o+Ww8B8/Fxfh1PA+/gUvwm3g+fguX4rfxAvwOLmM9
FpIvwotxOV6Cl+JluAIvxyvwSlyJV+HV+F0cWxT8vvE98jX4fbwWf4DX4Q9x
Ff4Ir8cf4w34E7wRf4qr8Wd4E/6c62Uz+Rd4C/4S1+Cv8Fb89aLwhzWFi8bO
/u98bSP/Bm/n+f5b8lr8Hd6Bv8c78Q94F/6R9asj/wnvxj/jPbw//kK+F/+K
6/FveB/+He/Hf+AD+E/cgP/i/e8g+d/kh8j/IT9M/i95aHEwP2JxMG9EfiR5
Y/KjyJuQH704eP6bkh+Dmy0Ont9jyZvj43ALfDyOwyfglvhE3AqfxP62Jj8Z
xy8OPq+cQt4Gn8r6tSU/DbfDp+MEfAZuvzj4fHgmeQd8Fu6Iz14cfF5JXBx8
XjmH+k7k55J3xufhLvh8nIQvwF3xhbgbvgh3xxfj5MXBz2OXkPfAl+Ke+DLc
i+vlctYzTP0VuDe+cnF4e6d/v67t8t/3433Ir8J9eT1cTZ6Cr8H98LW4P74O
D8DX41R8A+s1kPxGPAjfhAfjm3Ea63kL52cI9bfiofg2rqdh5LfjdHwHHo7v
xCPwXXgkvhtn4HvwKHwvHo3vw2Pw/TgTP4DHsp4Pkmfhh/A4/DCvh2zyR/B4
/CjOwY/hCfhxHOH4niCfiJ/EufgpXj+TyJ/GefgZPBk/i/Pxc3gKfh4XLA4+
T79APhW/yPvXNF6vL1E/Hc/Ahfhl1m8mz1OvUF9E/ir5LPLXyKN4Np6zOPj5
YS55MX4dz1sc/D3mDfIS8jfJ5+O3cCl+Gy/A7+Ayjm8h+SK8GJfjJcxbSr4M
V+DleAXX10pcSf0qrp/V5O/iGPej98jX4PfxWvwBz4vryD/EVfgjvB5/jDfg
T/BG/CmuZr0+I9+EP8eb8Rcc/xbyL3EN/gpvxV/jbfgb7mfbyb/Ftfg7rq8d
5N/jnfgHvAv/iOvwT4uD30ftJv8Z78G/4L34V1yPf8P78O94P/4DH8B/cr01
sN5/UX8Q/40P4X/wYfwvDpUHfQRuVB68nx1J3hgfhZvgo8uDx9uU/BjcrDy4
XseSN8fH4Rb4eByHT8At8Ym4FT4Jt8Yn43h8Cm6DT8Vt8Wm4HT4dJ+AzcHvW
/0zyDvgs3LE8+Ho+mzwRn4M7lQefX84l74zP43rtQn4+TsIX4K5s/0Lybvgi
3J39uZg8GV9CfQ/yS8uD7y89y4PPT5dR3wtfjsO8Hq8g783xX0neB1+F++Kr
cQq+BvfD13L8/cmvwwPw9VzPqeQ34IH4RtZrEPlNeDC+GafhW/CQ8uD7+a3k
Q/FteBi+HafjO/BwfCcege/CI/HdOIPr/R7yUfhePBrfh8fg+3EmfgCPxQ/i
LPwQHlce3nfFeTM7fv3f9zsPk2fjR/B4rtdHyXPwY3gCfhxH8BNc3xPJn8S5
5cHPw0+RT8JP4zz8DJ6Mn8X5+Dk8BT9fzt//J38BT8Uv0j+N/KXy4Oep6eQz
cCF+mdfDTPJXcBF+Fc/Cr+Eono3n4Lm4GL+O5+E3uJ5LyN/E8/FbuBS/jRfg
d3AZXogX8XpYTF6Ol+CleBmuwMvxCrwSV+JVeDXr/S55DL+H1+D38Vr8AV6H
P8RV+CO8Hn+MN/B6+YR8I/4UV+PP8Cb8Od6Mv8Bb8Je4hv3/inwrz89fk2/D
3+Dt+Ftci7/jeW8H+fd4J/U/kO/CP3I91tH/E/W78c/U7yH/Be+l/lfyetb/
N/J9+He8n/v9H+QH8J+4gf6/yA/iv/Eh3n//IT/M8f1LHloS3P4RS4L3u0ZL
gvVHLgnOa0x+FG6Cj8ZN8TG4GT4WN8fH4Rb4eByHT8At8Ym41ZLg9XwSeWt8
Mo5fEvz97xTWvw31p+K2+DTcDp/O/ATyM3B7zveZ9Heg/izcEZ+NE/E5uBM+
F3dm/84j77KEv/9PnoQvwF3xhbgbvgh3xxfjZHwJ7oEvxT3xZbgXvhyH8RW4
N74S98FXcT33Jb8ap+BrcD98Le6Pr8MD8PU4Fd+AB+Ib8SB8Ex7M/eFm8jR8
Cx6Cb8VD8W28Pofh26lPx3fg4fhOPALfxetxJPndOAPfg0fx/nQv+Wh8Hx6D
78eZ+AE8Fj+Is1jfh8jH4YdxNn4Ej8eP4hz8GJ6AH8cRrs8nyCfiJ3Euforz
P4n8adYrj/wZPBk/i/Pxc3gKfh4X4BfYv6nkL+Jp+CU8Hc9gfQrJX8Yz8StL
gt8HFpG/imfh13AUz8ZzlgT/fOJc8mL8Op6H38Al+E08H7+FS7l+3yZfgN/B
ZXghXoQX43K8hPO7lHwZrsDLOb8ryFfiSrxqSfDz4mryd3EMv4fX4Pfx2iXB
zx8fcD7WUf8h61NF/hHHv35J8PPbx9RvwJ8sCf4espH8U1zN/M/IN+HP8Wb8
Bd7C+nzJ/tVQ/xXeir/G2/A3HM921vtb6mvxd3gH/h7vxD/gXVyPP5LX4Z/w
bvwz3oN/wXvxr7ie6/U37v/7qP+d9dxP/gc+gP/EDfgvfBD/jQ/hf/Bh/C/7
H1oaPN4jlgbrG+EjcWN8FG6Cj8ZN8TFLg897zciPxc3xcbgFPh7H4RNwS3wi
bsX6nUTeGp+M4/EpuM3S4PV5KnlbfBpuh0/HCfiMpcHfV9uTn7k0eP10ID8L
d6T+bPLEpcHfx84h74TPxZ3xebgLPh8n4QtwV9b/QvJu+CLcnev5YvJkfAnu
gS9lPXuSX4Z74ctxGF/B/N7kV+I++Crcl3lXs54p1F+D++FrcX98HR7A9XU9
r9dU6m/AA/GNeBC+CQ/GN+M0ro9byIfgW/FQfBsehm9n/dPJ78DD8Z14BL4L
j+T47ibPwPfgUfhePBrfh8ew/fvJM/EDeCzXy4PkWfghPI7r/2HybPwI9ePJ
H10a/DyWszT4vPcY9RPw4zjC9p4gn8j7wZNLg8+vudQ/hSexf0+T5+Fn8GT8
LM7Hz3F9T2F/n6e+AL/A/WIq+/8i9dPwS3g66zuDvJD1fZl8Jn4FF+FX2d4s
8tdwFM/Gc/BcXIxf5/Uyj/wNXILfxPM5nrfIS/HbeAH977B/ZdQvxIvwYlyO
l+ClbH8ZeQXX63LyFXglrsSr8Gr87tLg57EY6/Ee9Wvw+3gt/gCvwx/iKvwR
Xo8/xhu4H35CvhF/iqvxZ3gT/hxvXhr8veML8i2c/y/Ja/BXeCv9X5Nvw9/g
7fhbXIu/Wxr8vmIH+fd4J/v3A9fzLup/xHX4J7wb/4z3cP3+Qr4X/4rr8W94
H88Pv5Pvx3/gA6znn+QN+C98EP/Neh8i/4f1OMz5+Jf60LLg76NHLAvmjZYF
j//IZfz3gak/Cjeh/2jypvgY3Awfi5vj45YF309bkB+P4/AJuOWy4HqfSN4K
n4Rb45NxPD4Ft1kW/D70VNa/LfWn4Xb4dJyAz8Dt8Zm4Az4Ld8Rn40R8Du60
LHj9nkveGZ+Hu+DzcRK+AHfl/F9I3o3r+yLy7vRfTJ68LPj+dcmy4PNmD+ov
xT2X8ef/2V4v6i9nfpj8CtwbX0l/H/KrcF/qryZPwddwPP3Ir+X4+pNfx/1s
APn1rHcq+Q14IL6R198g8pvwYK7fm8nTOJ5byIfgW/FQfBsehm/H6fgOPBzf
iUfgu/BIfDfOwPfgUfhe1ms0+X2s9xjy+3EmfgCPxQ/iLF7/D5GPww/j7GXB
54NHyMdzvI+S5+DH8AT8OO8nEfIn8ET8JM5l/54in7Qs+Hn6afI8/AyejJ/F
+fg5Xp9TyJ/HBZy/F8in4hfxNI7vJfLpeAYuxC/jmfgVru8i8lfxLPwa5yvK
es2mfg6ei4vx63gefoPtl5C/iefjt3ApfhsvwO/weisjX4gX4cW4nONZQr4U
L8MVeDnPryvIV+JKvAqvZv/eJY/h93j/XEP+Pl6LP8DruF4/JK/CH+H1y4Lf
V3xMvgF/gjfiT3E1/ozXwybyz/Fm1vcL8i34S+pryL/CW/HXeBv+Bm/H33I+
asm/wzvY3+/Jd+If8C5ebz+S1+Gf8G78M96Df8F78a+4Hv+G9+HfWb/9XC9/
UH8A/4kb8F/4IP4bH8L/4MP4XxyqCH5/dURFMG+Ej8SN8VG4CT4aN60IXl/H
kDerCF4/x1YE17859cfhFvh4HMf2TyBviU/ErfBJuDU+GcdXBD8fnULeBp9K
fVvy03A7fHoFf/6f/AzWoz3bO5P6Dvgs6juSn40TqT+HvBM+l/rO5OfhLvh8
ji+J/ALcFV+Iu+GLuD67k1+Mk/ElnJ8e5Jfinvgy3AtfjsP4CtwbX8n69SG/
qiL4/NKX/Gr6U8ivwf3wtbh/RfD5/TryAfh6nIpvYP8Gkt+IB3G+biIfjG/G
afgWPATfiofi2/AwfDtO53q9g3w4vhOPwHfhkfhu1iuD/B48Ct+LR+P7KoKf
x8aQ348z8QN4LH4QZ3E8D5GPww/jbNb/EfLxXI+PkudUBL/Peox8An4cRyqC
z9dPkE9k+0+S57L9p8gn4adxHn4GT8bP4nz8HJ7C+j7P+Sqg/gU8Fb+Ip+GX
8HQ8Axfil/FM/Ar7X0T+Kp6FX+N8Rcln4zl4Li7Gr+N5bO8NzkcJ9W/i+fit
iuD3V6Wsx9vUL8Dv4DK8EC/Ci3E5XoKX4mW4Ai/HK/BKXIlX4dX4XRzD7+E1
+H28lvvHBzyfraP+Q1yFP8Lr8cd4Q0Xw94JPyDfiT7leqtnfz7jfbaL/c67f
zfR/Qf0W/CWuwV/hrfhrnne2kX+Dt+NvOf5ajvc76nfg7/FO/APehX/Edfgn
vBv/zOfBPeS/4L34V55P68l/w/vw73g//gMfwH+y3g3kf5EfJP8bH8L/4MP4
XxxaHryej1gezBst59//I2+Mj8JN8NHLg89nTcmPwc3wsbg5Pg63wMfjOHwC
bolPxK3wSbg1Ppn1jic/BbfBp+K2+DTcDp+OE/AZuD0+E3fgfJ5F3hGfjRPx
ObgTPhd3xufhLvh8nIQvwF3xhbjb8uDzzUXk3fHFOBlfgnvgS5cH7989yS/D
vfDlOIyv4PrsTX4l7sP94SryvvhqnEL/NRxfP+qvxf25/q4jH8D868lTOX83
kA+k/0byQeQ3kQ/GN+O05fz5f/Ih+FY8lPW6jXwYvh2n4zvwcHzn8uDvQyPI
78Ijqb+bPGN58PnxHvJR+F48Gt+Hx+D7ub4zyR/AY/GDXC9Z5A/hcfhhnI0f
wePxozgHP4Yn4MdxBD+BJ+IncS5+itfDJPKnWf888mfon0z+LM7n+n+OfAp+
HhfgF/BU/CKetjz4+8lL5NPxDFyIX8Yz8SusXxH5q3gWfg1H8Ww8h/WdS16M
X8fz8Bu4BL+J5+O3cCl+Gy/A7+AyvJD1XUS+mOuznHwJ9/Ol5MtwBV6OV+CV
uBKvwqvZ33fJY/g9vAa/z7y15B9w/OvIP6S/ivwj+teTf4w34E/wRvwpruZ+
/hn5Jvw53oy/wFvwl7gGf4W34q/xNvwN3s71/C15Lf4O78Dfc/52kv+Ad+Ef
cR33l5/Id+Of8R78C96Lf2X/68l/w/vw73g/+/8H+QH8J25gf/4iP8jr4W/y
Qzxf/UN+eHnw+9J/yUMrgj4CN8JHruDf/yM/akXwebwJ+dH0NyU/ZkXwem1G
fixujo/DLdje8eRxK4Lv3yesCJ7PltSfiFvhk3BrfDKOx6fgNuz/qexfW+pP
w+3w6TgBn4Hb4zNxB3wW7ojPxokrgs//55B3wufizlxv55F3Yf3OJ09aEbz/
X0DeFV+Iu+GLcHd8Mdd3Mvkl7G8P8ktxT3wZ7oUvx2F8Be6Nr2T/+pBfhfvi
q3EKvgb3w9fi/vg61ncA+fU4Fd+AB+Ib8SB8Ex6Mb8Zp+BY8BN+Kh+LbuJ6H
kd+O0/EdeDi+E4/Ad+GR+G6unwzuZ/dQPwrfi0fj+/AYfD/bzyR/YEXw/XYs
+/cg9Vn4ITwOP4yzuV4fIR/P/j5KnoMfwxPw4yv48//kT+CJ+Emcy/49RT6J
9XuaPA8/gyfjZ3E+fo7jm0L+PC7AL+Cp+EU8Db+Ep+MZuBC/jGfiV3ARfhXP
wq/hKJ6N5+C5uJjr93XyefgNXILfxPPxW7gUv831uID8HVyGF/I8soh8MS7H
S/BSvAxX4OW8XlaQr8SVrP8q8tX4XRzD7+E1+H28Fn+A1+EPcRX+CK/HH+MN
+BO8EX+Kq1m/z8g34c/xZs7XF+Rb8Je4huv1K/Kt+Gu8DX+Dt+NvcS3PC99x
PDuo/x7vXBH8Pf4H8l34R1zH+v9Evhv/jPfgX/Be/CvHV8/6/0b9Pvw73o//
wAfwn7iB9f+L/TtI/d/4EP4HH8b/4tDKoI/AjfCRuDE+amXw83QT8qNxU3wM
boaPxc3xcbgFPn5l8PkgjvwE3BKfuDJ4vbYiPwm3xiezPvHkp+A2+FTcFp+G
2+HTcQI+A7fHZ+IO+CzcEZ+NE/E5uBPrfe7K4OujM/Xn4S74fJyEL8Bd8YW4
G76I/etOfjFOxpfgHvhS3HNl8P51GXmvlcE/73Q56xmm/grcG1+J++CrcN+V
weepq1mfFOqvwf3wtbg/vo75A8ivx6n4BvZ3IPmNeBC+CQ/GN+M0zsct5EPw
rXjoyuD3X7eRD8O343TuR3eQD8d34hH4LjwS340z8D14FL6X6300+X0rg++n
Y8jvx5n4ATwWP8j2s8gfwuPwwzgbP4LH40dxDn4MT+D18Dh5BD+BJ+IncS7r
/RTX8yTqn8Z5+Bn2dzL5szgfP4en4OdxAX4BT8Uv4mn4Ja6P6eQzcCF+Gc/E
r+Ai/CqehV/DUTwbz8FzcTF+nfM3j/wNXILfxPPxW7gUv40XcD2+Q16GF+JF
HM9i8nK8BC/Fy3AFXo5X4JW4kuttFflq/C6O4ffwGvw+Xos/wOvwh7hqZfD3
y49Y7/XUf4w34E/wRvwprsaf4U34c7wZf4G34C9xDf4Kb8Vf4234m5XBz+Pb
yb/Ftfg7vAN/z/W2k/wHvIv6H8nr8E+8XneT/4z34F/wXvwrrmf/fmP99lH/
O96P/2DeAfI/cQP+Cx/Ef+NDrNc/5Id5ff3L816oMlh/RGVw/xuRH4kb46Nw
E3w0boqPwc3wsbg5Pg63wMfjuMrg+pxA3pL1OJG8FT4Jt8Yn43h8Cm5TGbwe
TyVvi0/D7fDplcHrJYH8DI63PT6T+g7kZ5F3xGfjRHwO7oTPxZ3xebgLPh8n
sf8X4K6s14X0d8MX4e7Mu5g8mfwS8h7kl5L3JL+MvBf55eRhfAXuja/EfZh/
FXlffDVOwddUBr+v6Ed+LdvrT34dHoCvx6n4BjyQ838j+SDuHzeRD8Y34zR8
Cx6Cb8VD8W14GL4dp+M7WN/h5HfiEazPXeQjmXc3eQa+B49ife+tDL5/jab+
PjwG38/+ZJI/QD62Mvj59kHqs6h/iHwcfhhn40fweOY/yvHnUP8YnlAZ/D7r
cfIIfgJPZP2fZH9yqX8KT8JP4zyun2fIJ+NncT5+Dk/Bz1fy9//JX8BT8Yt4
Gn4JT8czWM9C8pfxTNbnFfIizser5LPwa9RHyWfjOXgu/cXkr+N5+A1cgt/E
8/FbbL+U9Xmb+gX4HVzGvIWVwe9TF1G/GJfjJcxbSr4MV+Dl9K8gX4kr8Sq8
Gr/L/Bj5e3hNZfD3svfJ1+IP8Dr8Ia7CH+H1+GO8gfvhJ+Qb8adcL9Xkn+FN
PI98Tr4Zf4G34C9xDf6K49lK/jXehr/B2/G3uBZ/h3fg7/FO1vMH8l34x8rg
n6+rI/8J78Y/4z1cz7+Q78W/4nr8G96Hf8f78R/4AJ/f/iRvwH9xPAfJ/8aH
8D/4MP4Xh1YFfQRuhI/EjfFRuAk+GjfFx6ziz/+TH4ub4+Nwi1XB1+/x5HH4
BNwSn7gq+DzYivwk3HpV8PyfTB6PT1kVfD5oQ34qbotPw+1Yz9PJE/AZuD0+
E3fAZ+GO+GzWI5H8HNwJn4s74/NwF3w+TsIX4K74QtwNX4S744txMr4E98CX
4p74MtwLX871ECa/AvfGV+I++CrcF1+NU/A1uB++FvfnerqOfAC+HqfiG/BA
1utG8kH4JjwY37wqeH9PI78FD8G34qH4NjwM3879MJ38Djwc34lH4LvwSHw3
zsD34FH4Xjwa34fH4PtxJn4Aj+V+/CB5Fn6I62Uc+cM4Gz+Cx+NHcQ5+DE/A
j+MIr58nyCfiJ3EufgpPwk+zPnnkz+DJ+Fmcz/l5jnwKfh4X4BfwVPwir99p
5C/h6XgGLlwV/D7iZfKZ+BVchF/Fs/BrOIpn4zl4Li7Gr+N5+A1cgt/E87le
3iIvxW/jBfgdXIYX4kV4MS7HS/BSvIzXWwX5crwCr8SVq4KfF1exXqupfxfH
VgU/j71Hvga/z/PvWvIP8Dr8Ia/XKvKP8Hr8Md6AP8Eb8ae4Gn+GN+HP8Wb8
Bd6Cv8Q1+Cu8lfPzNfk2/A3ejr/l+qgl/w7vwN/jnfgHvAv/iOu4fn8i341/
xnvwL3gv/pXnn3ry3/A+1ut38v34D3wA/4kb8F+8vg6S/40P4X/wYfwvDq3m
3/9fHcwb4SNXB39PaEx+FG6Cj8ZN8TG4GT4WN8fH4Rb4eByHT1gdfH9vSX4i
brU6eH2cRN4an4zj8Sm4DT4Vt8Wn4Xb4dJzA8Z5B3h6fuTr4/tWB/CzckfU5
mzwRn7M6eL/rRH4u7ozPw13w+TgJX4C74gtxN14/F5F3Xx18v7uY9Uim/hLc
A1+Ke+LLcC98OQ7jK3Bvju9K8j74qtX8+//kV+OU1cHfF65hffpRfy3uj69j
vQeQX49T8Q28HgaS34gHcbw3kQ/GN+M0fAsewnrcSj4U34aHcTy3k6fjO/Bw
fCcege/CI/HdOAPfw/GOIr8Xj8b34TH4fpyJH2C9xpI/iLPwQ3gcfhhn40fw
ePwozuF+/Bj5BPw4r+cI+RN4In4S5+Kn8CT8NM7Dz+DJ+Fmcj5/DU/DzuAC/
gKfyfvQi+TT8Ep6OZ6wOPt8Vkr+MZ3K+XiEvwq/yfDaL19Nr1EfxbDyH18Nc
8mLy18nn4TdwCX4Tz8dv4VL8Nse7gPwdXIYX4kV4McdbTr4EL8XLcAVejlfg
lWy/kuNdRf1q/C6O4ffwGvw+Xos/wOvwh7gKf4TX44853g3kn+CN+FNcjT/D
m/DneDP+Am/BX+Ia/BXeyv3na/Jt+BvuL9vJv8W1+Du8g/vP9+Q78Q//18Wd
dtUcBAAc7pSthEhRsiVbhbRpI0uL7IoioYX2LCWR79Z8G9qUshRCL515Xj7n
N+fcmTkz9/7vfXF5/Y/0T3gaz+BZPIfn8We8wHlZpH/BS3gZf2V93+jf8Q+8
glen4t9/f9J/4d94Df/Bf/E/5p8Q+P//EI9PxEkhft7YQN+IN4X4+XgzfQtO
xil4a4jvQyp9G96Od+A0vBPvYn/S6btxBs4M8fv1HvpenIWz8T6cg/fjA/gg
+3eIfpj55rL+I4zPw0fxMXwcn8AncT4uwIX4FD6Nz+AifDbE97GY9ZcwvhSX
4XJ8DlfgSlyFq3ENPs/9vECvxRfxJXwZX8F1If7+Xk9vwI34Km7C1/B1fAPf
xLfwbXwH38XNuIXzcI9+H7fiNvyA8/aQ3o4fMb6D/hg/wU+53530LtyNe/Az
9uM5vRf3hfh5op8+wPwG6UN4GI/gF/glfoVf41E+v8bob/A4+/GWPoHf4fd4
En/473Xs3D4y
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Training Set\"", TraditionalForm], 
    FormBox[
    "\"Algebra 2 Probability divided by highest other\"", TraditionalForm]},
  AxesOrigin->{0., -1.9253936336019095`},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{
     Charting`ScaledTicks[{Log, Exp}], 
     Charting`ScaledFrameTicks[{Log, Exp}]}, {Automatic, Automatic}},
  GridLines->{{}, {0}},
  GridLinesStyle->RGBColor[1, 0, 0],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 8059}, {-1.9253936336019095`, 15.051016629107089`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->FrontEndValueCache[{Automatic, 
     Charting`ScaledTicks[{Log, Exp}]}, {Automatic, {{0., 
       FormBox["1", StandardForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {2.302585092994046, 
       FormBox["10", StandardForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {4.605170185988092, 
       FormBox["100", StandardForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {6.907755278982137, 
       FormBox["1000", StandardForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {9.210340371976184, 
       FormBox[
        TemplateBox[{"10", "4"}, "Superscript", SyntaxForm -> SuperscriptBox],
         StandardForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {11.512925464970229`, 
       FormBox[
        TemplateBox[{"10", "5"}, "Superscript", SyntaxForm -> SuperscriptBox],
         StandardForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {13.815510557964274`, 
       FormBox[
        TemplateBox[{"10", "6"}, "Superscript", SyntaxForm -> SuperscriptBox],
         StandardForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.3025850929940455`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.6094379124341003`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.2039728043259361`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.916290731874155, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.6931471805599453, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.5108256237659907, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.35667494393873245`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.2231435513142097, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.10536051565782628`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {0.6931471805599453, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.0986122886681098`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.3862943611198906`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.6094379124341003`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.791759469228055, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.9459101490553132`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.0794415416798357`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.1972245773362196`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.995732273553991, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {3.4011973816621555`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {3.6888794541139363`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {3.912023005428146, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.0943445622221, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.248495242049359, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.382026634673881, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.499809670330265, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {5.298317366548036, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {5.703782474656201, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {5.991464547107982, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {6.214608098422191, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {6.396929655216146, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {6.551080335043404, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {6.684611727667927, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {6.802394763324311, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {7.600902459542082, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {8.006367567650246, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {8.294049640102028, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {8.517193191416238, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {8.699514748210191, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {8.85366542803745, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {8.987196820661973, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {9.104979856318357, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {9.903487552536127, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {10.308952660644293`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {10.596634733096073`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {10.819778284410283`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {11.002099841204238`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {11.156250521031495`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {11.289781913656018`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {11.407564949312402`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {12.206072645530174`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {12.611537753638338`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {12.89921982609012, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {13.122363377404328`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {13.304684934198283`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {13.458835614025542`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {13.592367006650065`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {13.710150042306449`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {14.508657738524219`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {14.914122846632385`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {15.201804919084164`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {15.424948470398375`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {15.60727002719233, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {15.761420707019587`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {15.89495209964411, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {16.012735135300492`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {16.11809565095832, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {16.811242831518264`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {17.216707939626428`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {17.50439001207821, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {17.72753356339242, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {17.909855120186375`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {18.064005800013632`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {18.197537192638155`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {18.31532022829454, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {18.420680743952367`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}}}]]], "Output",
 CellChangeTimes->{
  3.7714077783446074`*^9, {3.771409033504843*^9, 3.771409036301037*^9}, 
   3.771409096309222*^9, 3.77141036909923*^9, 3.771410642389591*^9, {
   3.7714107111204133`*^9, 3.771410735810136*^9}, 3.771411572616968*^9},
 CellLabel->
  "Out[306]=",ExpressionUUID->"b937c2dd-7ee5-4442-87d0-00774bc31d35"],

Cell[BoxData["\<\"C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\2pset_trained_Automatic.pdf\"\>"], "Output",
 CellChangeTimes->{
  3.7714077783446074`*^9, {3.771409033504843*^9, 3.771409036301037*^9}, 
   3.771409096309222*^9, 3.77141036909923*^9, 3.771410642389591*^9, {
   3.7714107111204133`*^9, 3.771410735810136*^9}, 3.771411573713045*^9},
 CellLabel->
  "Out[307]=",ExpressionUUID->"878e0191-d8ba-4dca-8bd1-fc5ed558acee"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"turnOffEquivFrac", "[", "question_", "]"}], ":=", 
   RowBox[{"StringMatchQ", "[", 
    RowBox[{"question", ",", " ", 
     RowBox[{"{", "\"\<*raction*implest form\>\"", "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"equivilentFraction", "[", 
       RowBox[{"x_", ",", " ", "y_", ",", " ", "n_"}], "]"}], ":=", " ", 
      RowBox[{"n", "*", 
       RowBox[{"x", "/", "y"}]}]}], " ", ";"}], "/", "turnOffEquivFrac"}], 
   "\[Equal]", "False"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"isMatrix", "[", "answer_", "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"answer", ",", " ", "MatrixForm"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"allpoints", "[", "question_", "]"}], ":=", 
   RowBox[{"StringMatchQ", "[", 
    RowBox[{"question", ",", " ", 
     RowBox[{"{", "\"\<*all points*\>\"", "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"eitherPointfirst", "[", 
   RowBox[{"a_", ",", " ", "b_", ",", "c_", ",", " ", "d_"}], "]"}], ":=", 
  " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", "a", ",", " ", "b", ",", " ", "\"\<)\>\""}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<(\>\"", "c"}], ",", " ", 
       RowBox[{"d", "\"\<)\>\""}]}], "}"}]}], "}"}], "\[Rule]", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<(\>\"", "c"}], ",", " ", 
       RowBox[{"d", "\"\<)\>\""}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", "a", ",", " ", "b", ",", " ", "\"\<)\>\""}], 
      "}"}]}], "}"}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"isPoint", "[", "answer_", "]"}], ":=", 
   RowBox[{"StringMatchQ", "[", 
    RowBox[{"answer", ",", " ", 
     RowBox[{"{", "\"\<(*,*)\>\"", "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"commutative", "[", 
    RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "+", "b"}], "\[Rule]", " ", 
    RowBox[{"b", "+", "a"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"distributive", "[", 
    RowBox[{"a_", ",", "b_", ",", " ", "c_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "*", 
     RowBox[{"(", 
      RowBox[{"b", "+", "c"}], ")"}]}], "\[Rule]", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"a", "*", "b"}], "+", 
      RowBox[{"a", "*", "c"}]}], "/;", " ", 
     RowBox[{"isMatrix", "\[Equal]", "False"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"commutativemulti", "[", 
      RowBox[{"a_", ",", " ", "b_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"a", "*", "b"}], "\[Rule]", " ", 
      RowBox[{"b", "*", "a"}]}]}], ";"}], "/;", 
   RowBox[{"isMatrix", "\[Equal]", "False"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"associative", "[", 
    RowBox[{"a_", ",", " ", "b_", ",", " ", "c_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "+", 
     RowBox[{"(", 
      RowBox[{"b", "+", "c"}], ")"}]}], "\[Rule]", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"a", "+", "b"}], ")"}], "+", "c"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"associativemulti", "[", 
    RowBox[{"a_", ",", " ", "b_", ",", "c_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "*", 
     RowBox[{"(", 
      RowBox[{"b", "*", "c"}], ")"}]}], "\[Rule]", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"a", "*", "b"}], ")"}], "*", "c"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"sin2", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "\[Rule]", " ", 
    RowBox[{"2", 
     RowBox[{"Sin", "[", 
      RowBox[{"x", "/", "2"}], "]"}], 
     RowBox[{"Cos", "[", 
      RowBox[{"x", "/", "2"}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"cos2", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], "\[Rule]", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"Power", "[", 
       RowBox[{
        RowBox[{"Cos", "[", 
         RowBox[{"x", "/", "2"}], "]"}], ",", " ", "2"}], "]"}], "*", "2"}], 
     "-", "1"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"cos2alt1", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], "\[Rule]", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "1"}], 
      RowBox[{"Power", "[", 
       RowBox[{
        RowBox[{"Sin", "[", 
         RowBox[{"x", "/", "2"}], "]"}], ",", " ", "2"}], "]"}], "*", "2"}], 
     "+", "1"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cos2alt2", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Cos", "[", "x", "]"}], "\[Rule]", " ", 
   RowBox[{
    RowBox[{"Power", "[", 
     RowBox[{
      RowBox[{"Cos", "[", 
       RowBox[{"x", "/", "2"}], "]"}], ",", " ", "2"}], "]"}], "-", 
    RowBox[{"Power", "[", 
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"x", "/", "2"}], "]"}], ",", " ", "2"}], "]"}]}]}]}]}], "Input",
 CellChangeTimes->{{3.7710690813754177`*^9, 3.7710691204935193`*^9}, 
   3.771069190433951*^9, 3.771102351223105*^9, {3.771182760383189*^9, 
   3.7711828691128426`*^9}, {3.771182984216877*^9, 3.7711830284306865`*^9}, {
   3.771235072613437*^9, 3.7712352026724358`*^9}, {3.7712352410053663`*^9, 
   3.7712353509382486`*^9}, {3.7713479525094604`*^9, 3.771348048363394*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"c7c8062e-a44d-44d6-9860-e4bb30b9612d"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771183039335494*^9, 3.7711830410035667`*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"075af11f-332b-44ef-b6ed-18482c0a4326"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "include", " ", "the", " ", "above", " ", "graphs", " ", "and", " ", "the",
     " ", "test", " ", "functions", " ", "to", " ", "show", " ", 
    "infeasiability", " ", "of", " ", "doing", " ", "the", " ", 
    "classifier"}], "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
   "questionClassifier", "[", 
    "\"\<Derivative of f(x)=\!\(\*SuperscriptBox[\(x\), \(2\)]\)\>\"", "]"}], 
   "\n", 
   RowBox[{"questionClassifier", "[", "\"\<Integral of x dx\>\"", "]"}], "\n",
    "\n", 
   RowBox[{"questionClassifier", "[", 
    RowBox[{"\"\<What is 10% of 110\>\"", ",", " ", 
     RowBox[{"{", "\"\<Probabilities\>\"", "}"}]}], "]"}], "\n", "\n", 
   RowBox[{"questionClassifier", "[", "\"\<sin(\[Pi]/5)\>\"", "]"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "Need", " ", "to", " ", "add", " ", "more", " ", "training", " ", 
      "about", " ", "sine", " ", "to", " ", "a2"}], ",", " ", 
     RowBox[{"derivative", " ", "to", " ", "calc"}]}], "*)"}], "\n", "\n", 
   RowBox[{"questionClassifier", "[", "\"\<35+3\>\"", "]"}], "\n", 
   RowBox[{"questionClassifier", "[", 
    RowBox[{
    "\"\<Derivative of \!\(\*SuperscriptBox[\(x\), \(6\)]\)\>\"", ",", " ", 
     RowBox[{"{", "\"\<Probabilities\>\"", "}"}]}], "]"}], "\n", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"questionClassifier", ",", " ", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<algebra 1\>\"", "\[Rule]", " ", "algebra1Questions"}], 
       ",", 
       RowBox[{"\"\<algebra 2\>\"", "\[Rule]", " ", "algebra2Qs"}]}], " ", 
      "|>"}], ",", "\"\<Accuracy\>\""}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.771088662797636*^9, 3.7710886895019336`*^9}, 
   3.7711017977833295`*^9, {3.7711019578388124`*^9, 3.7711019757038107`*^9}, 
   3.77110252488804*^9, {3.7711040215410056`*^9, 3.771104055131591*^9}, 
   3.7711051107461853`*^9, {3.771105347712582*^9, 3.7711053479387584`*^9}, {
   3.771150327390992*^9, 3.771150329615141*^9}, {3.7711510820919733`*^9, 
   3.771151103725484*^9}, {3.7711639811964626`*^9, 3.7711639823005247`*^9}, {
   3.771173181133225*^9, 3.7711731947498894`*^9}},
 CellLabel->
  "In[308]:=",ExpressionUUID->"1927aef9-607f-4a49-a59a-07062997209f"],

Cell[BoxData["\<\"algebra 1\"\>"], "Output",
 CellChangeTimes->{3.771407778988659*^9, 3.7714090462977333`*^9, 
  3.77141074576283*^9, 3.7714115815935955`*^9},
 CellLabel->
  "Out[308]=",ExpressionUUID->"f6b4d3c3-7628-4cc7-ab8b-b31c2f311bde"],

Cell[BoxData["\<\"algebra 1\"\>"], "Output",
 CellChangeTimes->{3.771407778988659*^9, 3.7714090462977333`*^9, 
  3.77141074576283*^9, 3.771411581597596*^9},
 CellLabel->
  "Out[309]=",ExpressionUUID->"5cc5e5cf-2819-46db-a46c-8d0a445105a4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"algebra 1\"\>", "\[Rule]", "0.999999845993051`"}], ",", 
    RowBox[{"\<\"algebra 2\"\>", "\[Rule]", "1.5400694897041617`*^-7"}]}], 
   "\[RightAssociation]"}], "}"}]], "Output",
 CellChangeTimes->{3.771407778988659*^9, 3.7714090462977333`*^9, 
  3.77141074576283*^9, 3.7714115816016045`*^9},
 CellLabel->
  "Out[310]=",ExpressionUUID->"3d290748-81f1-4676-80f0-5a884a1a1fb6"],

Cell[BoxData["\<\"algebra 2\"\>"], "Output",
 CellChangeTimes->{3.771407778988659*^9, 3.7714090462977333`*^9, 
  3.77141074576283*^9, 3.7714115816055975`*^9},
 CellLabel->
  "Out[311]=",ExpressionUUID->"10f9ebc1-347f-42fd-a778-7b8ce6f30299"],

Cell[BoxData["\<\"algebra 1\"\>"], "Output",
 CellChangeTimes->{3.771407778988659*^9, 3.7714090462977333`*^9, 
  3.77141074576283*^9, 3.771411581609596*^9},
 CellLabel->
  "Out[312]=",ExpressionUUID->"4a57afd3-a82d-46c4-87f3-ddf5df1017f2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"algebra 1\"\>", "\[Rule]", "0.999999845993051`"}], ",", 
    RowBox[{"\<\"algebra 2\"\>", "\[Rule]", "1.5400694897041617`*^-7"}]}], 
   "\[RightAssociation]"}], "}"}]], "Output",
 CellChangeTimes->{3.771407778988659*^9, 3.7714090462977333`*^9, 
  3.77141074576283*^9, 3.7714115816176133`*^9},
 CellLabel->
  "Out[313]=",ExpressionUUID->"f08267fc-4959-47a1-836a-b99d04431801"],

Cell[BoxData["0.9062356083632679`"], "Output",
 CellChangeTimes->{3.771407778988659*^9, 3.7714090462977333`*^9, 
  3.77141074576283*^9, 3.771411581917616*^9},
 CellLabel->
  "Out[314]=",ExpressionUUID->"17460b5b-8c87-4a6d-8009-9d3e038c5a12"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"questionClassifier", "[", 
  "\"\<A salesman is paid a monthly salary of $200 plus 6% commission on his \
monthly sales.\\nDetermine the amount of sales required for his total monthly \
income to be $5.\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.77117350100593*^9, 3.771173526311931*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"9a0f02f8-0dcb-4fa0-a434-3dab92e35e3d"],

Cell[BoxData["\<\"algebra 1\"\>"], "Output",
 CellChangeTimes->{3.77140777924067*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"e5f3b48f-7714-492a-9560-38992f8b9d91"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Have", " ", "a", " ", "working", " ", "classifier", " ", "on", " ", 
     "algebra", " ", "1", " ", "and", " ", "2"}], ",", " ", 
    RowBox[{
    "to", " ", "add", " ", "calc", " ", "would", " ", "need", " ", "an", " ", 
     "extra", " ", "data", " ", "set"}]}], "*)"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.771173538075275*^9, 3.771173570911613*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"410c0451-9b50-4726-838d-507ca1520553"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"correctAnswer", "[", 
   RowBox[{"answer_", ",", " ", "correct_"}], "]"}], ":=", 
  RowBox[{"MatchQ", "[", 
   RowBox[{"answer", ",", " ", "correct"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"setLevel", "[", 
   RowBox[{"question_", ",", " ", "tag_"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"UnsameQ", "[", 
     RowBox[{"tag", ",", " ", "\"\<\>\""}], "]"}], ",", " ", "tag", ",", " ", 
    RowBox[{"questionClassifier", "[", "question", "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.7711736593103347`*^9, 3.7711737074880314`*^9}, {
  3.771173871939076*^9, 3.771173874042588*^9}, {3.7712336619774513`*^9, 
  3.7712338084910626`*^9}, {3.771233866828873*^9, 3.771233956929276*^9}, {
  3.771347249512906*^9, 3.7713472771428676`*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"25eb0e56-d2cb-4e3c-833f-4d9862c278b6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tagAssociations", ":=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<algebra 1 theorems\>\"", "\[Rule]", " ", 
      RowBox[{"{", 
       RowBox[{
       "commutativeAddition", ",", " ", "commutativemulti", ",", " ", 
        "distributive", ",", " ", "associative", ",", " ", "associativemulti",
         ",", " ", "equivilentFraction"}], "}"}]}], ",", " ", 
     RowBox[{"\"\<algebra 2 theorems\>\"", "\[Rule]", " ", 
      RowBox[{"{", 
       RowBox[{
       "isMatrix", ",", " ", "sin2", ",", " ", "cos2", ",", " ", "cos2alt1", 
        ",", " ", "cos2alt2", ",", " ", "eitherPointfirst", ",", " ", 
        "isPoint", ",", " ", "commutativeAddition", ",", " ", 
        "commutativemulti", ",", " ", "distributive", ",", " ", "associative",
         ",", " ", "associativemulti", ",", " ", "equivilentFraction"}], 
       "}"}]}]}], "|>"}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.771234300395832*^9, 3.7712343261973624`*^9}, {
   3.7712349783800793`*^9, 3.7712350377545757`*^9}, {3.7713246875147505`*^9, 
   3.7713247160686665`*^9}, {3.771324750887334*^9, 3.7713248208968925`*^9}, 
   3.7713469260459433`*^9, {3.771346958148202*^9, 3.771346967732873*^9}, {
   3.7713473319306927`*^9, 3.7713473600851464`*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"66e41b82-96ad-4d5a-885b-44a2b04ac964"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7713403299709625`*^9, 3.7713403451194363`*^9}, {
  3.7713472317837057`*^9, 3.771347238884147*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"266398ea-08f6-44ac-9796-54783f49bc3b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"equivilentAnswer", "[", 
   RowBox[{
   "question_", ",", "tag_", ",", " ", "answer_", ",", " ", "correct_", ","}],
    " ", "]"}], ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"correctAnswer", "[", 
      RowBox[{"answer", ",", " ", "correct"}], "]"}], "\[Equal]", "False"}], 
    ",", " ", "\[IndentingNewLine]", 
    RowBox[{"If", "[", "\[IndentingNewLine]", "\t", 
     RowBox[{
      RowBox[{"turnOffEquivFrac", "[", "question", "]"}], ",", " ", "False", 
      ",", " ", "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"qTag", "=", 
        RowBox[{"AppendTo", "[", 
         RowBox[{
          RowBox[{"setLevel", "[", 
           RowBox[{"question", ",", " ", "tag"}], "]"}], ",", " ", 
          "\"\< theorems\>\""}], "]"}]}], ";", "\[IndentingNewLine]", "\t", 
       RowBox[{"(*", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"qTag", ",", " ", "\"\<calc theorems\>\""}], "]"}], ","}], 
         " "}], "*)"}], "\[IndentingNewLine]", "\t", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Series", "[", 
             RowBox[{"answer", ",", " ", 
              RowBox[{"{", 
               RowBox[{"x", ",", "0", ",", " ", "6"}], "}"}]}], "]"}], 
            "\[Equal]", 
            RowBox[{"Series", "[", 
             RowBox[{"correct", ",", " ", 
              RowBox[{"{", 
               RowBox[{"x", ",", " ", "0", ",", " ", "6"}], "}"}]}], "]"}]}], 
           ",", " ", "True", ",", " ", "False"}], "]"}], ","}], " ", "*)"}], 
       "\[IndentingNewLine]", "\t ", 
       RowBox[{"proof", "==", 
        RowBox[{"FindEquationalProof", "[", 
         RowBox[{
          RowBox[{"answer", "=", "correct"}], ",", " ", 
          RowBox[{"tagAssociations", "[", "qtag", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\t", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"ContainsAll", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"proof", "[", "\"\<ProofDataset\>\"", "]"}], "[", 
            RowBox[{"All", ",", " ", "\"\<Statement\>\""}], "]"}], ",", " ", 
           RowBox[{"tagAssociations", "[", 
            RowBox[{"Select", "[", 
             RowBox[{"tagAssociations", ",", " ", 
              RowBox[{
               RowBox[{"UnsameQ", "[", 
                RowBox[{
                 RowBox[{"#", "[", "All", "]"}], ",", " ", "qtag"}], "]"}], 
               "&"}]}], "]"}], "]"}]}], "]"}], ",", " ", "False", ",", " ", 
         "True"}], "]"}]}]}], "\[IndentingNewLine]", "\t\t\t", 
     "\[IndentingNewLine]", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7712339645218053`*^9, 3.7712340834723206`*^9}, {
  3.7712341214519916`*^9, 3.7712342880157833`*^9}, {3.771234329577595*^9, 
  3.7712346331069736`*^9}, {3.771346981397788*^9, 3.77134716216393*^9}, {
  3.771347286675481*^9, 3.7713473206139*^9}, {3.7713474013435993`*^9, 
  3.771347484110985*^9}, {3.7713475425553865`*^9, 3.7713475937449694`*^9}, {
  3.7713476722052555`*^9, 3.7713478773306417`*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"2c8ae09e-5141-49f8-bc2c-efd2a2324a89"],

Cell[BoxData[
 RowBox[{
  RowBox[{"pDiffProblem", "=", 
   RowBox[{
    RowBox[{"Import", "[", 
     RowBox[{"polydiffurl", ",", " ", "\"\<Data\>\""}], "]"}], 
    "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7712357417153225`*^9, 3.771235782034418*^9}, {
   3.7712358223189893`*^9, 3.7712358593789177`*^9}, 3.771236085297859*^9, 
   3.771236670446211*^9},
 CellLabel->"In[98]:=",ExpressionUUID->"7cf76789-eb97-4c2e-91e6-102698972f28"],

Cell[BoxData[
 RowBox[{
  RowBox[{"strippedQuestion", "=", 
   RowBox[{"\"\<question\>\"", "/.", "pDiffProblem"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.77123586515536*^9, 3.771235903687064*^9}, 
   3.7712365956914773`*^9, 3.771236674226424*^9},
 CellLabel->"In[99]:=",ExpressionUUID->"322b59e5-9d1b-4e2d-aeb2-b791e94df4bc"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771235907603317*^9, 3.7712359333726025`*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"957a51f1-e3b5-4fcc-a441-b5abb27dc864"],

Cell[BoxData[
 RowBox[{
  RowBox[{"strippedQuestion", "=", 
   RowBox[{
   "\"\<<math>\>\"", "<>", "strippedQuestion", "<>", "\"\<</math>\>\""}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7712359768419514`*^9, 3.771236017605138*^9}, 
   3.7712366770106707`*^9},
 CellLabel->
  "In[101]:=",ExpressionUUID->"d707c0a0-6561-43e9-9fd0-a43a755a3534"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ImportString", "[", 
    RowBox[{"strippedQuestion", ",", " ", "\"\<MathML\>\""}], "]"}], " ", "//",
    "RawBoxes"}], ";"}]], "Input",
 CellChangeTimes->{{3.7712360210094275`*^9, 3.771236051359496*^9}, {
  3.771236611469623*^9, 3.7712366126217575`*^9}, {3.7712366800468817`*^9, 
  3.771236682434343*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"e080f098-be02-4782-988d-080fb60799bf"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7712360976547728`*^9, 3.771236106727406*^9}, {
   3.7712362010749397`*^9, 3.7712362044232264`*^9}, {3.7712362370974526`*^9, 
   3.7712362649236383`*^9}, {3.771236347168664*^9, 3.7712364023625517`*^9}, {
   3.771236622058362*^9, 3.771236639479291*^9}, 3.7712368002319756`*^9},
 CellLabel->
  "In[103]:=",ExpressionUUID->"00aac20e-7712-4382-bdcd-1a0f47667dfa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pDiffStorage", "=", 
  RowBox[{"{", "}"}]}]], "Input",
 CellChangeTimes->{{3.771236318520415*^9, 3.7712363247768025`*^9}, {
  3.7712368523205495`*^9, 3.771236920349883*^9}, {3.7712371406349945`*^9, 
  3.771237142395172*^9}, {3.7714076858936605`*^9, 3.771407686761722*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"1d39c30e-2952-4c75-b7a7-9b9256359d5d"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.7714077801327343`*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"b16912a7-6bd9-43bb-a49d-5511231b6070"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["polydiffurl"], "Input",
 CellChangeTimes->{{3.7712383301870437`*^9, 3.7712383336152873`*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"8a2df4ce-9c44-47a1-bde1-ff1c4d183497"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/polynomial-differentiation.\
json\"\>"], "Output",
 CellChangeTimes->{3.7714077801647367`*^9},
 CellLabel->
  "Out[105]=",ExpressionUUID->"8f2b40e5-5806-465b-9e7a-d7300441eeee"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trigdiffurl", "=", 
  "\"\<https://math.ly/api/v1/calculus/trigonometric-differentiation.json\>\"\
"}]], "Input",
 CellChangeTimes->{{3.7712383828806543`*^9, 3.771238407866433*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"c65c0dd0-81b7-4955-8c52-e9b2bed36fa7"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/trigonometric-\
differentiation.json\"\>"], "Output",
 CellChangeTimes->{3.7714077802007384`*^9},
 CellLabel->
  "Out[106]=",ExpressionUUID->"1542070a-e517-4611-a234-849b11418754"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expodiffurl", "=", 
  "\"\<https://math.ly/api/v1/calculus/exponents-differentiation.json\>\""}]],\
 "Input",
 CellChangeTimes->{{3.7712384289872923`*^9, 3.771238464023595*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"9bdfa35f-8e9a-4070-8882-15d68d851348"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/exponents-differentiation.\
json\"\>"], "Output",
 CellChangeTimes->{3.771407780248741*^9},
 CellLabel->
  "Out[107]=",ExpressionUUID->"6b6e4ed5-53b9-4b6b-a4fb-968e16e8883c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"polyinturl", "=", 
  "\"\<https://math.ly/api/v1/calculus/polynomial-integration.json\>\""}]], \
"Input",
 CellChangeTimes->{{3.7712384945360937`*^9, 3.7712385164416804`*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"3917c014-4521-4d91-8543-b5d914f1cc18"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/polynomial-integration.json\
\"\>"], "Output",
 CellChangeTimes->{3.7714077802847433`*^9},
 CellLabel->
  "Out[108]=",ExpressionUUID->"cf65e442-89fa-406f-9041-f2d17d792c9d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"triginturl", "=", 
  "\"\<https://math.ly/api/v1/calculus/trignometric-integration.json\>\""}]], \
"Input",
 CellChangeTimes->{{3.7712385417954173`*^9, 3.7712385534442115`*^9}, {
  3.771238599654127*^9, 3.771238600526188*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"467d54c9-fca1-43d0-97cf-f2d46c7284b1"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/trignometric-integration.\
json\"\>"], "Output",
 CellChangeTimes->{3.7714077802967453`*^9},
 CellLabel->
  "Out[109]=",ExpressionUUID->"bee93cc0-1c3f-40f1-b350-34c12374ace2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trigdefinturl", "=", 
  "\"\<https://math.ly/api/v1/calculus/trignometric-definite-integrals.json\>\
\""}]], "Input",
 CellChangeTimes->{{3.7712385694564934`*^9, 3.771238570572569*^9}, {
  3.771238603426363*^9, 3.7712386239398203`*^9}, {3.771323928898393*^9, 
  3.771323930748708*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"f8bb0306-7bc5-4dc8-9d8e-1e8f7ab2e834"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/trignometric-definite-\
integrals.json\"\>"], "Output",
 CellChangeTimes->{3.7714077803327475`*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"c8eedc54-4381-4b1a-b93b-60e7e4880d18"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"expointurl", "=", 
  "\"\<https://math.ly/api/v1/calculus/exponents-integration.json\>\""}], "\
\[IndentingNewLine]", 
 RowBox[{"expodefinturl", "=", 
  "\"\<https://math.ly/api/v1/calculus/exponents-definite-integration.json\>\"\
"}]}], "Input",
 CellChangeTimes->{{3.771238670241479*^9, 3.7712387130644655`*^9}, {
  3.771238853404136*^9, 3.771238856744407*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"5e485a53-0caa-4994-a3a3-d3d69cde3b52"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/exponents-integration.json\"\
\>"], "Output",
 CellChangeTimes->{3.7714077803687673`*^9},
 CellLabel->
  "Out[111]=",ExpressionUUID->"0b612e65-5748-4321-8c95-046de8da445b"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/exponents-definite-\
integration.json\"\>"], "Output",
 CellChangeTimes->{3.771407780372753*^9},
 CellLabel->
  "Out[112]=",ExpressionUUID->"a00a3cf8-dfec-4d03-be68-f6c0042c65b2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["\"\<https://math.ly/api/v1/calculus/exponents-definite-\
integrals.json\>\""], "Input",
 CellChangeTimes->{{3.7713239365858574`*^9, 3.771323938260048*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"cfb0e200-36f9-494c-88e2-8eba067033a5"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/exponents-definite-\
integrals.json\"\>"], "Output",
 CellChangeTimes->{3.771407780408753*^9},
 CellLabel->
  "Out[113]=",ExpressionUUID->"2100db1b-2484-4291-a3e1-fb570003fb94"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"polydefinturl", "=", 
  "\"\<https://math.ly/api/v1/calculus/polynomial-definite-integrals.json\>\"\
"}]], "Input",
 CellChangeTimes->{{3.7712387241332893`*^9, 3.7712387427025843`*^9}, {
  3.7713239444234276`*^9, 3.7713239461686683`*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"9db4f7e5-a195-45b4-868f-2359598971c3"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/polynomial-definite-\
integrals.json\"\>"], "Output",
 CellChangeTimes->{3.7714077804207535`*^9},
 CellLabel->
  "Out[114]=",ExpressionUUID->"4220632d-b7c2-4123-a22c-a72ea1ab4542"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"getcalcPs", "[", 
   RowBox[{"url_", ",", " ", "dataarray_"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{"pDiffProblem", "=", 
      RowBox[{
       RowBox[{"Import", "[", 
        RowBox[{"url", ",", " ", "\"\<Data\>\""}], "]"}], 
       "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"strippedQuestion", "=", 
      RowBox[{"\"\<question\>\"", "/.", "pDiffProblem"}]}], ";", " ", 
     RowBox[{"strippedQuestion", "=", 
      RowBox[{
      "\"\<<math>\>\"", "<>", "strippedQuestion", "<>", "\"\<</math>\>\""}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"iS", "=", 
      RowBox[{
       RowBox[{"ImportString", "[", 
        RowBox[{"strippedQuestion", ",", " ", "\"\<MathML\>\""}], "]"}], " ", 
       "//", "RawBoxes"}]}], ";", " ", "\[IndentingNewLine]", " ", 
     RowBox[{"Append", "[", 
      RowBox[{"dataarray", ",", " ", "iS"}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7712387867010036`*^9, 3.7712388409796124`*^9}, {
  3.7713238410054216`*^9, 3.771323877530431*^9}, {3.7713240218104286`*^9, 
  3.7713240244493046`*^9}, {3.771324059714985*^9, 3.7713240915278735`*^9}, {
  3.7713241576472826`*^9, 3.771324185723219*^9}, {3.771324253192051*^9, 
  3.7713242609812126`*^9}, {3.7713242926597095`*^9, 3.7713242947501965`*^9}, {
  3.771324562719307*^9, 3.7713245902837057`*^9}, {3.7713246299600267`*^9, 
  3.771324636399604*^9}, {3.771340655579898*^9, 3.7713406586721134`*^9}, {
  3.7713462726215763`*^9, 3.771346352383828*^9}, {3.771346433079231*^9, 
  3.7713464332472515`*^9}, {3.7713465172028217`*^9, 3.7713465690705833`*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"87f57da9-00aa-4b46-ab12-6608300fc354"],

Cell[BoxData[
 RowBox[{
  RowBox[{"urls", "=", 
   RowBox[{"{", 
    RowBox[{
    "polydefinturl", ",", " ", "polydiffurl", ",", " ", "polyinturl", ",", 
     " ", "trigdefinturl", ",", " ", "trigdiffurl", ",", " ", "triginturl", 
     ",", " ", "expodefinturl", ",", " ", "expodiffurl", ",", " ", 
     "expointurl"}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.77123886244076*^9, 3.7712389039876523`*^9}, 
   3.771323949742208*^9},
 CellLabel->
  "In[116]:=",ExpressionUUID->"855d2f73-4d92-458c-92f8-4997982eeb95"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pdefint", "=", 
  RowBox[{"{", "\"\<integral of x^6 dx from 0 to 1\>\"", "}"}]}]], "Input",
 CellChangeTimes->{{3.771238920772838*^9, 3.771238974896619*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"c5d465ea-1c08-42a8-9ef9-344addb687c8"],

Cell[BoxData[
 RowBox[{"{", "\<\"integral of x^6 dx from 0 to 1\"\>", "}"}]], "Output",
 CellChangeTimes->{3.7714077804727583`*^9},
 CellLabel->
  "Out[117]=",ExpressionUUID->"26a1108c-aec8-4052-a1f4-54a489e40d07"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pint", "=", 
  RowBox[{"{", "\"\<integral of x^3 dx\>\"", "}"}]}]], "Input",
 CellChangeTimes->{{3.771238936982003*^9, 3.771238979260905*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"fbec490a-a8cf-4334-a943-dcc80a67bcec"],

Cell[BoxData[
 RowBox[{"{", "\<\"integral of x^3 dx\"\>", "}"}]], "Output",
 CellChangeTimes->{3.7714077805087585`*^9},
 CellLabel->
  "Out[118]=",ExpressionUUID->"1be33f40-f0ae-46bd-aa3c-ec5454975d5d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"tint", "=", 
   RowBox[{"{", "\"\<integral of cos(x) dx\>\"", "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"tdefint", "=", 
  RowBox[{
  "{", "\"\<integral of tan(x) dx from 0 to \[Pi]/4\>\"", "}"}]}]}], "Input",
 CellChangeTimes->{{3.7712389870494747`*^9, 3.771239047741536*^9}},
 CellLabel->
  "In[119]:=",ExpressionUUID->"53522faf-b64c-4e4b-98e4-8562af9b3595"],

Cell[BoxData[
 RowBox[{"{", "\<\"integral of tan(x) dx from 0 to \[Pi]/4\"\>", 
  "}"}]], "Output",
 CellChangeTimes->{3.771407780544761*^9},
 CellLabel->
  "Out[120]=",ExpressionUUID->"15a530b2-1aaf-455b-a918-6f54ca06bad8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tdiff", "=", 
  RowBox[{"{", "\"\<Derivative of 1+sec(x)\>\"", "}"}]}]], "Input",
 CellChangeTimes->{{3.771239053694174*^9, 3.7712390858044004`*^9}},
 CellLabel->
  "In[121]:=",ExpressionUUID->"cb59bb07-5383-42bf-81be-5f35fcdab709"],

Cell[BoxData[
 RowBox[{"{", "\<\"Derivative of 1+sec(x)\"\>", "}"}]], "Output",
 CellChangeTimes->{3.7714077805807652`*^9},
 CellLabel->
  "Out[121]=",ExpressionUUID->"ea3b66bf-8d65-428b-a370-494c2e125efc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"expodefint", "=", 
   RowBox[{"{", "\"\<Integral of ln(x) from 1 to e\>\"", "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"expodiff", "=", 
  RowBox[{
  "{", "\"\<Derivative of \!\(\*SuperscriptBox[\(e\), \(3 \
\*SuperscriptBox[\(x\), \(2\)]\)]\)\>\"", "}"}]}]}], "Input",
 CellChangeTimes->{{3.7712390904847517`*^9, 3.7712391509510117`*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"0355aab1-cd18-479e-ba9f-08006c50833e"],

Cell[BoxData[
 RowBox[{"{", "\<\"Derivative of \\!\\(\\*SuperscriptBox[\\(e\\), \\(3 \
\\*SuperscriptBox[\\(x\\), \\(2\\)]\\)]\\)\"\>", "}"}]], "Output",
 CellChangeTimes->{3.771407780624768*^9},
 CellLabel->
  "Out[123]=",ExpressionUUID->"d401f0a0-e92a-4537-ab30-25277a8fdb91"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expoint", "=", 
  RowBox[{"{", "\"\<Integral of ln(1-x)/x dx\>\"", "}"}]}]], "Input",
 CellChangeTimes->{{3.771239154995311*^9, 3.7712391824772387`*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"d08078e9-646b-410d-b3da-7b07d3631460"],

Cell[BoxData[
 RowBox[{"{", "\<\"Integral of ln(1-x)/x dx\"\>", "}"}]], "Output",
 CellChangeTimes->{3.771407780664771*^9},
 CellLabel->
  "Out[124]=",ExpressionUUID->"a424d34d-69fe-43ac-b971-0633d6f799c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"arrays", "=", 
  RowBox[{"{", 
   RowBox[{
   "pdefint", ",", " ", "pDiffStorage", ",", " ", "pint", ",", " ", "tdefint",
     ",", " ", "tdiff", ",", " ", "tint", ",", " ", "expodefint", ",", " ", 
    "expodiff", ",", " ", "expoint"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.771239190008418*^9, 3.771239264929635*^9}},
 CellLabel->
  "In[125]:=",ExpressionUUID->"42c8cf32-1946-44b8-9562-13038f11fb94"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "\<\"integral of x^6 dx from 0 to 1\"\>", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "\<\"integral of x^3 dx\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"integral of tan(x) dx from 0 to \[Pi]/4\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"Derivative of 1+sec(x)\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"integral of cos(x) dx\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"Integral of ln(x) from 1 to e\"\>", "}"}], ",", 
   RowBox[{
   "{", "\<\"Derivative of \\!\\(\\*SuperscriptBox[\\(e\\), \\(3 \
\\*SuperscriptBox[\\(x\\), \\(2\\)]\\)]\\)\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"Integral of ln(1-x)/x dx\"\>", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.771407780708791*^9},
 CellLabel->
  "Out[125]=",ExpressionUUID->"88409f04-04e6-41cf-8e81-d6f6917bd240"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"arrays", "[", 
    RowBox[{"[", "1", "]"}], "]"}], "=", 
   RowBox[{"getcalcPs", "[", 
    RowBox[{
     RowBox[{"urls", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
     ",", " ", 
     RowBox[{
     "arrays", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7712392766864295`*^9, 3.7712394164874935`*^9}, {
   3.771243280668398*^9, 3.7712433195398664`*^9}, {3.771243378474556*^9, 
   3.771243381457677*^9}, {3.771243572090003*^9, 3.7712436107423344`*^9}, {
   3.771323976371134*^9, 3.7713239941517715`*^9}, {3.77132412292959*^9, 
   3.7713241250761147`*^9}, {3.7713242760389147`*^9, 3.771324278193434*^9}, {
   3.771340683921874*^9, 3.7713406864540544`*^9}, 3.7713463338625298`*^9, {
   3.7713464526129932`*^9, 3.771346460481491*^9}, {3.771346578099216*^9, 
   3.7713466209861546`*^9}, {3.7713466756642265`*^9, 3.7713466864449787`*^9}, 
   3.7713534192736344`*^9, {3.771353450199747*^9, 3.771353454352031*^9}, {
   3.77140771499571*^9, 3.7714077193519974`*^9}},
 CellLabel->
  "In[325]:=",ExpressionUUID->"0ab75f01-46a1-4e5f-adf2-7d5307d5762b"],

Cell[BoxData[
 TemplateBox[{
  "FetchURL","httperr",
   "\"The request to URL \
\\!\\(\\*RowBox[{\\\"\\\\\\\"https://math.ly/api/v1/calculus/polynomial-\
definite-integrals.json\\\\\\\"\\\"}]\\) was not successful. The server \
returned the HTTP status code \
\\!\\(\\*RowBox[{\\\"\\\\\\\"429\\\\\\\"\\\"}]\\).\"",2,325,33,
   15902530251911880643,"Local","Utilities`URLTools`FetchURL"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{{3.771411758906165*^9, 3.7714117605302815`*^9}},
 CellLabel->
  "During evaluation of \
In[325]:=",ExpressionUUID->"1b9d096e-858b-4530-bf6b-059b6d4afb12"],

Cell[BoxData[
 TemplateBox[{
  "Part","partd",
   "\"Part specification \\!\\(\\*RowBox[{\\\"$Failed\\\", \\\"\
\[LeftDoubleBracket]\\\", \\\"2\\\", \\\"\[RightDoubleBracket]\\\"}]\\) is \
longer than depth of object.\"",2,325,34,15902530251911880643,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.771411758906165*^9, 3.7714117605382795`*^9}},
 CellLabel->
  "During evaluation of \
In[325]:=",ExpressionUUID->"a71344ec-a034-458c-b82d-a8ebb55bacba"],

Cell[BoxData[
 TemplateBox[{
  "ReplaceAll","reps",
   "\"\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"$Failed\\\", \\\"\
\[LeftDoubleBracket]\\\", \\\"2\\\", \\\"\[RightDoubleBracket]\\\"}], \\\"}\\\
\"}]\\) is neither a list of replacement rules nor a valid dispatch table, \
and so cannot be used for replacing.\"",2,325,35,15902530251911880643,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.771411758906165*^9, 3.7714117605502815`*^9}},
 CellLabel->
  "During evaluation of \
In[325]:=",ExpressionUUID->"02572768-66ea-4171-88fe-34ab3a4a3395"],

Cell[BoxData[
 TemplateBox[{
  "StringJoin","string",
   "\"String expected at position \\!\\(\\*RowBox[{\\\"2\\\"}]\\) in \
\\!\\(\\*RowBox[{\\\"\\\\\\\"<math>\\\\\\\"\\\", \\\"<>\\\", \
RowBox[{\\\"(\\\", RowBox[{\\\"\\\\\\\"question\\\\\\\"\\\", \\\"/.\\\", \\\"\
\[VeryThinSpace]\\\", RowBox[{\\\"$Failed\\\", \\\"\[LeftDoubleBracket]\\\", \
\\\"2\\\", \\\"\[RightDoubleBracket]\\\"}]}], \\\")\\\"}], \\\"<>\\\", \\\"\\\
\\\\\"</math>\\\\\\\"\\\"}]\\).\"",2,325,36,15902530251911880643,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.771411758906165*^9, 3.7714117605622807`*^9}},
 CellLabel->
  "During evaluation of \
In[325]:=",ExpressionUUID->"89d3ccdc-a04b-4353-8eae-625bce0f773c"],

Cell[BoxData[
 TemplateBox[{
  "ImportString","string",
   "\"First argument \\!\\(\\*RowBox[{\\\"\\\\\\\"<math>\\\\\\\"\\\", \
\\\"<>\\\", RowBox[{\\\"(\\\", RowBox[{\\\"\\\\\\\"question\\\\\\\"\\\", \
\\\"/.\\\", \\\"\[VeryThinSpace]\\\", RowBox[{\\\"$Failed\\\", \\\"\
\[LeftDoubleBracket]\\\", \\\"2\\\", \\\"\[RightDoubleBracket]\\\"}]}], \\\")\
\\\"}], \\\"<>\\\", \\\"\\\\\\\"</math>\\\\\\\"\\\"}]\\) is not a string.\"",
   2,325,37,15902530251911880643,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.771411758906165*^9, 3.7714117605743*^9}},
 CellLabel->
  "During evaluation of \
In[325]:=",ExpressionUUID->"e9156196-504e-4e15-973a-e1d1761de886"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"arrays", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.771239364927622*^9, 3.771239366876547*^9}, {
  3.771243590686597*^9, 3.7712436033828382`*^9}, {3.7713463724892244`*^9, 
  3.7713463764335003`*^9}, {3.7713466311588645`*^9, 3.7713466333150187`*^9}, {
  3.7714079136310825`*^9, 3.771407914043096*^9}},
 CellLabel->
  "In[145]:=",ExpressionUUID->"6140b4bf-cb5c-4e9a-960e-e3b85328145c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", 
    FractionBox["2000", "3"]}], ",", 
   FormBox[
    TagBox[
     RowBox[{
      SubsuperscriptBox["\[Integral]", "4", "5"], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", 
          SuperscriptBox["x", 
           RowBox[{"-", "1"}]]}], "+", 
         RowBox[{"5", 
          SuperscriptBox["x", 
           RowBox[{"-", "2"}]]}], "-", 
         RowBox[{"4", 
          SuperscriptBox["x", 
           RowBox[{"-", "3"}]]}]}], ")"}], 
       RowBox[{"\[DifferentialD]", "x"}]}]}],
     "MathMLPresentationTag",
     AutoDelete->True],
    TraditionalForm], ",", "$Failed", ",", "$Failed", ",", 
   FormBox[
    TagBox[
     RowBox[{
      SubsuperscriptBox["\[Integral]", 
       RowBox[{"-", "11"}], 
       RowBox[{"-", "3"}]], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "7"}], 
          SuperscriptBox["x", "2"]}], "-", 
         RowBox[{"3", "x"}], "-", "3"}], ")"}], 
       RowBox[{"\[DifferentialD]", "x"}]}]}],
     "MathMLPresentationTag",
     AutoDelete->True],
    TraditionalForm], ",", "$Failed", ",", "$Failed", ",", 
   FormBox[
    TagBox[
     RowBox[{
      SubsuperscriptBox["\[Integral]", "2", "7"], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "13"}], "+", 
         RowBox[{"8", 
          SuperscriptBox["x", 
           RowBox[{"-", "1"}]]}], "+", 
         RowBox[{"5", 
          SuperscriptBox["x", 
           RowBox[{"-", "2"}]]}], "-", 
         SuperscriptBox["x", 
          RowBox[{"-", "3"}]]}], ")"}], 
       RowBox[{"\[DifferentialD]", "x"}]}]}],
     "MathMLPresentationTag",
     AutoDelete->True],
    TraditionalForm], ",", 
   FormBox[
    TagBox[
     RowBox[{
      SubsuperscriptBox["\[Integral]", 
       RowBox[{"-", "3"}], 
       RowBox[{"-", "1"}]], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "3"}], "x"}], "+", "9"}], ")"}], 
       RowBox[{"\[DifferentialD]", "x"}]}]}],
     "MathMLPresentationTag",
     AutoDelete->True],
    TraditionalForm], ",", "$Failed", ",", 
   FormBox[
    TagBox[
     RowBox[{
      SubsuperscriptBox["\[Integral]", "1", "3"], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "-", 
         RowBox[{"6", 
          SuperscriptBox["x", 
           RowBox[{"-", "1"}]]}], "-", 
         SuperscriptBox["x", 
          RowBox[{"-", "2"}]]}], ")"}], 
       RowBox[{"\[DifferentialD]", "x"}]}]}],
     "MathMLPresentationTag",
     AutoDelete->True],
    TraditionalForm], ",", 
   ImportString[
    StringJoin["<math>", 
     ReplaceAll["question", 
      Part[$Failed, 2]], "</math>"], "MathML"]}], "}"}]], "Output",
 CellChangeTimes->{3.7714077830478125`*^9, 3.77140791470714*^9},
 CellLabel->
  "Out[145]=",ExpressionUUID->"2c8a68fa-28fd-4b96-b26a-74c993cc20ad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DumpSave", "[", 
  RowBox[{"\"\<final_progect.mx\>\"", ",", " ", "questionClassifier"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.771353313618944*^9, 3.7713533966804457`*^9}},
 CellLabel->
  "In[131]:=",ExpressionUUID->"dd10fb84-5fff-4fba-9083-85431c8f6cfd"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   RowBox[{
    TagBox["ClassifierFunction",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
     TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEBitmaps", "SquarePlusIconMedium"]], 
               ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
               Evaluator -> Automatic, Method -> "Preemptive"], 
              Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 3.5 CurrentValue["FontCapHeight"]/
                 AbsoluteCurrentValue[Magnification]}]], 
             GraphicsBox[{{
                PointSize[0.13], 
                GrayLevel[0.45], 
                
                PointBox[{{0.9821769431797024, -0.440194219686987}, {
                 1.1339776261519132`, 0.8056918676854272}, {
                 0.5279892326667741, 0.6574306661126254}, {
                 0.022147046479890797`, 1.4937877187998898`}}], 
                GrayLevel[0.7], 
                
                PointBox[{{-0.9815166384819979, 
                 0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                GrayLevel[0.55], 
                AbsoluteThickness[1.5], 
                LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
              Axes -> {False, False}, AxesLabel -> {None, None}, 
               AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                 AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
               Frame -> {{True, True}, {True, True}}, 
               FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
               Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
               GridLines -> {None, None}, 
               LabelStyle -> {FontFamily -> "Arial"}, 
               Method -> {"ScalingFunctions" -> None}, 
               PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
               True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
               Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
              ImageSize -> 
              Dynamic[{
                Automatic, 3.5 CurrentValue["FontCapHeight"]/
                 AbsoluteCurrentValue[Magnification]}], Frame -> True, 
              FrameTicks -> None, FrameStyle -> Directive[
                Opacity[0.5], 
                Thickness[Tiny], 
                RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
              GrayLevel[0.94]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Nominal\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   
                   TemplateBox[{
                    ",", "\",\"", "\"algebra 1\"", "\"algebra 2\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEBitmaps", "SquareMinusIconMedium"]], 
               ButtonFunction :> (Typeset`open$$ = False), Appearance -> None,
                Evaluator -> Automatic, Method -> "Preemptive"], 
              Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 3.5 CurrentValue["FontCapHeight"]/
                 AbsoluteCurrentValue[Magnification]}]], 
             GraphicsBox[{{
                PointSize[0.13], 
                GrayLevel[0.45], 
                
                PointBox[{{0.9821769431797024, -0.440194219686987}, {
                 1.1339776261519132`, 0.8056918676854272}, {
                 0.5279892326667741, 0.6574306661126254}, {
                 0.022147046479890797`, 1.4937877187998898`}}], 
                GrayLevel[0.7], 
                
                PointBox[{{-0.9815166384819979, 
                 0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                GrayLevel[0.55], 
                AbsoluteThickness[1.5], 
                LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
              Axes -> {False, False}, AxesLabel -> {None, None}, 
               AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                 AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
               Frame -> {{True, True}, {True, True}}, 
               FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
               Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
               GridLines -> {None, None}, 
               LabelStyle -> {FontFamily -> "Arial"}, 
               Method -> {"ScalingFunctions" -> None}, 
               PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
               True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
               Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
              ImageSize -> 
              Dynamic[{
                Automatic, 3.5 CurrentValue["FontCapHeight"]/
                 AbsoluteCurrentValue[Magnification]}], Frame -> True, 
              FrameTicks -> None, FrameStyle -> Directive[
                Opacity[0.5], 
                Thickness[Tiny], 
                RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
              GrayLevel[0.94]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Nominal\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   
                   TemplateBox[{
                    ",", "\",\"", "\"algebra 1\"", "\"algebra 2\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox[
                  "\"Number of training examples: \"", 
                   "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                  TagBox["1204", "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   ClassifierFunction[
    Association[
    "ExampleNumber" -> 1204, "ClassNumber" -> 2, "Input" -> 
     Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
         Association[
         "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
          "Output" -> 
          Association[
           "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
            Association["Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor["WrapMLDataset", 
                Association[
                "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
          "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
          "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
         Association[
         "Input" -> Association[
           "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
          Association[
           "f1" -> Association["Weight" -> 1, "Type" -> "NumericalVector"]], 
          "Processors" -> {
            MachineLearning`MLProcessor["ToVector", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
              Association[
               "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
              "Output" -> 
              Association[
               "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]],
               "Version" -> {12., 0}, "ID" -> 1537627216228573037]], 
            MachineLearning`MLProcessor["ImputeMissing", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
              Association[
               "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]],
               "VectorLength" -> 1, "Output" -> 
              Association[
               "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]],
               "Type" -> "NominalVector", "Version" -> {12., 0}, "ID" -> 
              4026204838636604962]], 
            MachineLearning`MLProcessor["EmbedNominalVector", 
             Association[
             "Invertibility" -> "Impossible", "Missing" -> "Allowed", "Input" -> 
              Association[
               "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]],
               "Index" -> {
                Association[
                "\n" -> 1, " \n" -> 2, "0 + 0 \n" -> 3, "0 + 10 \n" -> 4, 
                 "0 + 15 \n" -> 5, "0 + 2 \n" -> 6, "0 + 46 \n" -> 7, 
                 "0 + 8 \n" -> 8, "0 + 86 \n" -> 9, "0 + 95 \n" -> 10, 
                 "0 + 98 \n" -> 11, "1 + 0 \n" -> 12, "10" -> 13, "10 + 0 \n" -> 
                 14, "10 + 1 \n" -> 15, "10 + 10 \n" -> 16, "10 + 29 \n" -> 
                 17, "10 + 33 \n" -> 18, "    10 + 3x = 10  \n" -> 19, 
                 "10 + 49 \n" -> 20, "    10 + 5x = 10  \n" -> 21, 
                 "    10 + 5x = 60  \n" -> 22, "10 + 60 \n" -> 23, 
                 "10 + 69 \n" -> 24, "10 + 7 \n" -> 25, "10 + 75 \n" -> 26, 
                 "10 + 78 \n" -> 27, "10 + 8 \n" -> 28, "10 + 83 \n" -> 29, 
                 "10% of 11" -> 30, "    - 10 + x = 1  \n" -> 31, 
                 "    10 + x = 1  \n" -> 32, "1 + 1 \n" -> 33, "11" -> 34, 
                 "11+12" -> 35, "1113 + 3615 \n" -> 36, "11 + 14 \n" -> 37, 
                 "1+12" -> 38, "1 + 14 \n" -> 39, "1148 + 4232 \n" -> 40, 
                 "116" -> 41, "1 + 17 \n" -> 42, "117" -> 43, "118" -> 44, 
                 "119" -> 45, "    11 = x + 10  \n" -> 46, "1 + 2 \n" -> 47, 
                 "12" -> 48, "120" -> 49, "121" -> 50, "122" -> 51, "123" -> 
                 52, "12 + 8 \n" -> 53, "    12 = x + 7  \n" -> 54, "13" -> 
                 55, "1313 + 3009 \n" -> 56, "1329 + 9063 \n" -> 57, 
                 "1383 + 3834 \n" -> 58, "    13 = x + 1  \n" -> 59, 
                 "1 + 4 \n" -> 60, "14" -> 61, "1400 + 7429 \n" -> 62, 
                 "14 + 4 \n" -> 63, "1+5" -> 64, "15" -> 65, "15+12" -> 66, 
                 "1521 + 2554 \n" -> 67, "1531 + 4977 \n" -> 68, "15 + 6 \n" -> 
                 69, "1570 + 5887 \n" -> 70, "1570 + 8699 \n" -> 71, 
                 "1583 + 6324 \n" -> 72, "    15 = x + 4  \n" -> 73, "16" -> 
                 74, "1616 + 5751 \n" -> 75, "1630 + 8860 \n" -> 76, 
                 "1632 + 9300 \n" -> 77, "16 + 6 \n" -> 78, "1664 + 8135 \n" -> 
                 79, "16 + 70 \n" -> 80, "1 + 69 \n" -> 81, "1692 + 5818 \n" -> 
                 82, "1721 + 5812 \n" -> 83, "1723 + 5702 \n" -> 84, 
                 "1726 + 9260 \n" -> 85, "1 + 73 \n" -> 86, "1 + 75 \n" -> 87,
                  "1750 + 5035 \n" -> 88, "1816 + 6956 \n" -> 89, "186" -> 90,
                  "18 + 64 " -> 91, "187" -> 92, "188" -> 93, "1 + 89 \n" -> 
                 94, "189" -> 95, "    18 = x + 8  \n" -> 96, "1 + 9 \n" -> 
                 97, "190" -> 98, "191" -> 99, "192" -> 100, "1930 + 4841 \n" -> 
                 101, "1967 + 3600 \n" -> 102, "1985 + 4928 \n" -> 103, 
                 "    -1 + x = -1  \n" -> 104, "2 + 0 \n" -> 105, 
                 "2005 + 8361 \n" -> 106, "200% of 3" -> 107, "20 + 3 \n" -> 
                 108, "2087 + 5640 \n" -> 109, "20% of 33" -> 110, "2 + 1 \n" -> 
                 111, "2 + 14 \n" -> 112, "2143 + 8202 \n" -> 113, "2 + 2 \n" -> 
                 114, "22 + 10 \n" -> 115, "2219 + 2574 \n" -> 116, 
                 "2 + 25 \n" -> 117, "2259 + 6033 \n" -> 118, 
                 "2267 + 6108 \n" -> 119, "2278 + 6186 \n" -> 120, 
                 "    2 - 2x = - 22  \n" -> 121, "2 + 3 \n" -> 122, "2+3" -> 
                 123, "23 + 5 \n" -> 124, "2 + 39 \n" -> 125, "239" -> 126, 
                 "2390 + 5199 \n" -> 127, "2/3 x+3 =15" -> 128, "240" -> 129, 
                 "241" -> 130, "242" -> 131, "2420 + 4220 \n" -> 132, "243" -> 
                 133, "2433 + 5845 \n" -> 134, "244" -> 135, "245" -> 136, 
                 "246" -> 137, "25 + 2 \n" -> 138, "2551 + 8585 \n" -> 139, 
                 "25 + 6 \n" -> 140, "2 + 57 \n" -> 141, "2587 + 4970 \n" -> 
                 142, "2590 + 3048 \n" -> 143, "2 + 6 \n" -> 144, 
                 "2648 + 2854 \n" -> 145, "2653 + 5175 \n" -> 146, 
                 "2 + 68 \n" -> 147, "2697 + 5880 \n" -> 148, 
                 "2729 + 6856 \n" -> 149, "2 + 73 \n" -> 150, 
                 "2751 + 4607 \n" -> 151, "2757 + 2994 \n" -> 152, 
                 "27 + 6 \n" -> 153, "2815 + 5126 \n" -> 154, 
                 "2829 + 1933 \n" -> 155, "28 + 35 \n" -> 156, "2 + 85 \n" -> 
                 157, "28 + 5 \n" -> 158, "2 + 9 \n" -> 159, "293" -> 160, 
                 "294" -> 161, "2940 + 6608 \n" -> 162, "2943 + 8463 \n" -> 
                 163, "295" -> 164, "296" -> 165, "2968 + 7604 \n" -> 166, 
                 "297" -> 167, "298" -> 168, "299" -> 169, "    2x = 2  \n" -> 
                 170, "    2 = x - 3  \n" -> 171, "    2x + 5 = - 7  \n" -> 
                 172, "    2x - 7 = 13  \n" -> 173, "    2x + 8 = 10  \n" -> 
                 174, "    - 2x + 8 = 32  \n" -> 175, "300" -> 176, 
                 "30 + 1 \n" -> 177, "3018 + 2248 \n" -> 178, 
                 "3021 + 8010 \n" -> 179, "30+30" -> 180, "30+40" -> 181, 
                 "3096 + 2460 \n" -> 182, "3 + 10 \n" -> 183, 
                 "3109 + 7046 \n" -> 184, "3 + 11 \n" -> 185, "3 + 13 \n" -> 
                 186, "3147 + 6538 \n" -> 187, "3160 + 1245 \n" -> 188, 
                 "3 + 24 \n" -> 189, "32 + 6 \n" -> 190, "3277 + 7411 \n" -> 
                 191, "3 + 28 \n" -> 192, "33 + 1 \n" -> 193, "33 + 4 \n" -> 
                 194, "3 + 37 \n" -> 195, "3 + 38 \n" -> 196, 
                 "    3 - 3x = - 30  \n" -> 197, "3 + 4 \n" -> 198, "34+1" -> 
                 199, "3434 + 9380 \n" -> 200, "    3 + 4x = - 45  \n" -> 201,
                  "3523 + 8800 \n" -> 202, "3 + 55 \n" -> 203, "35 + 6 \n" -> 
                 204, "35 + 7 \n" -> 205, "362" -> 206, "363" -> 207, "364" -> 
                 208, "365" -> 209, "366" -> 210, "3661 + 5756 \n" -> 211, 
                 "367" -> 212, "368" -> 213, "369" -> 214, "3 + 7 \n" -> 215, 
                 "3 + 73 \n" -> 216, "3740 + 4179 \n" -> 217, 
                 "3782 + 1330 \n" -> 218, "3825 + 6015 \n" -> 219, 
                 "3850 + 4435 \n" -> 220, "3880 + 6919 \n" -> 221, 
                 "3 + 90 \n" -> 222, "39 + 10 \n" -> 223, "3928 + 9719 \n" -> 
                 224, "3979 + 4765 \n" -> 225, "39 + 8 \n" -> 226, 
                 "-3(\!\(\*SuperscriptBox[\(x\), \(2\)]\)-2x+7)" -> 227, 
                 "    - 3 = x + 2  \n" -> 228, "    3 = x + 3  \n" -> 229, 
                 "    - 3 = x - 4  \n" -> 230, "    3x - 6 = - 6  \n" -> 231, 
                 "    3x + 7 = 25  \n" -> 232, "4 + 0 \n" -> 233, 
                 "4027 + 2502 \n" -> 234, "4064 + 9078 \n" -> 235, 
                 "4096 + 5082 \n" -> 236, "4 + 10 \n" -> 237, 
                 "4116 + 6636 \n" -> 238, "41 + 2 \n" -> 239, "41+2" -> 240, 
                 "4154 + 9932 \n" -> 241, "41 + 6 \n" -> 242, "416" -> 243, 
                 "417" -> 244, "418" -> 245, "4189 + 5839 \n" -> 246, 
                 "41 + 9 \n" -> 247, "419" -> 248, "420" -> 249, "421" -> 250,
                  "422" -> 251, "423" -> 252, "4261 + 8473 \n" -> 253, 
                 "4270 + 9940 \n" -> 254, "4272 + 1001 \n" -> 255, 
                 "4292 + 9179 \n" -> 256, "43 + 4 \n" -> 257, "44 + 1 \n" -> 
                 258, "4419 + 1814 \n" -> 259, "4420 + 6691 \n" -> 260, 
                 "4447 + 4604 \n" -> 261, "44 + 5 \n" -> 262, "44 + 85 \n" -> 
                 263, "4 + 49 \n" -> 264, "4 + 5 \n" -> 265, "45 + 0 \n" -> 
                 266, "4 + 55 \n" -> 267, "45 + 8 \n" -> 268, "4 + 60 \n" -> 
                 269, "4609 + 2756 \n" -> 270, "46 + 2 \n" -> 271, 
                 "4662 + 2032 \n" -> 272, "46 + 8 \n" -> 273, 
                 "    4 + 6x = 16  \n" -> 274, "470" -> 275, "471" -> 276, 
                 "472" -> 277, "473" -> 278, "4731 + 1603 \n" -> 279, 
                 "4731 + 9595 \n" -> 280, "4 + 74 \n" -> 281, "474" -> 282, 
                 "4741 + 6938 \n" -> 283, "47 + 5 \n" -> 284, "475" -> 285, 
                 "4 + 76 \n" -> 286, "47 + 6 \n" -> 287, "476" -> 288, 
                 "4764 + 7711 \n" -> 289, "4781 + 7748 \n" -> 290, 
                 "4810 + 7408 \n" -> 291, "48 + 2 \n" -> 292, "4 + 83 \n" -> 
                 293, "4832 + 1852 \n" -> 294, "4 + 86 \n" -> 295, 
                 "4880 + 1099 \n" -> 296, "4896 + 8505 \n" -> 297, "4 + 9 \n" -> 
                 298, "4 + 90 \n" -> 299, "4910 + 8680 \n" -> 300, 
                 "4918 + 3236 \n" -> 301, "    4x = - 44  \n" -> 302, 
                 "    4x + 7 = 15  \n" -> 303, "    4x - 8 = 8  \n" -> 304, 
                 "    4x - 9 = 19  \n" -> 305, "    - 4x + 9 = - 27  \n" -> 
                 306, "5 + 0 \n" -> 307, "5035 + 9586 \n" -> 308, 
                 "5048 + 8140 \n" -> 309, "50 + 5 \n" -> 310, 
                 "5074 + 7065 \n" -> 311, "50 + 9 \n" -> 312, "50 + 93 \n" -> 
                 313, "5 + 1 \n" -> 314, "51 + 0 \n" -> 315, "5 + 2 \n" -> 
                 316, "5219 + 1965 \n" -> 317, "5278 + 2794 \n" -> 318, 
                 "5282 + 9116 \n" -> 319, "5290 + 8994 \n" -> 320, "5(2x+4)" -> 
                 321, "5361 + 5519 \n" -> 322, "5 + 37 \n" -> 323, "537" -> 
                 324, "538" -> 325, "539" -> 326, "5396 + 5061 \n" -> 327, 
                 "5 + 4 \n" -> 328, "540" -> 329, "541" -> 330, "542" -> 331, 
                 "543" -> 332, "5465 + 8277 \n" -> 333, "5465 + 9956 \n" -> 
                 334, "55 + 10 \n" -> 335, "5519 + 6804 \n" -> 336, 
                 "55 + 4 \n" -> 337, "5571 + 3857 \n" -> 338, 
                 "5571 + 5676 \n" -> 339, "55 + 9 \n" -> 340, 
                 "5610 + 6137 \n" -> 341, "5626 + 9732 \n" -> 342, 
                 "5642 + 6535 \n" -> 343, "5 + 69 \n" -> 344, 
                 "5712 + 2107 \n" -> 345, "5745 + 7730 \n" -> 346, 
                 "5750 + 9568 \n" -> 347, "57 + 7 \n" -> 348, 
                 "    - 5 + 7x = 79  \n" -> 349, "5 + 82 \n" -> 350, 
                 "5840 + 1828 \n" -> 351, "5 + 86 \n" -> 352, "587" -> 353, 
                 "5 + 88 \n" -> 354, "588" -> 355, "589" -> 356, 
                 "5893 + 2493 \n" -> 357, "58 + 95 \n" -> 358, 
                 "5898 + 8735 \n" -> 359, "59 + 0 \n" -> 360, "590" -> 361, 
                 "59 + 1 \n" -> 362, "591" -> 363, "59 + 10 \n" -> 364, "592" -> 
                 365, "593" -> 366, "5930 + 4357 \n" -> 367, "5980 + 1855 \n" -> 
                 368, "5% of 112" -> 369, 
                 "-(5\!\(\*SuperscriptBox[\(x\), \(4\)]\)-8)" -> 370, 
                 "    - 5x = - 10  \n" -> 371, "    5 + x = 12  \n" -> 372, 
                 "    - 5x - 2 = - 27  \n" -> 373, "    5x + 5 = 10  \n" -> 
                 374, "    - 5x + 5 = 25  \n" -> 375, "    5x + 7 = - 33  \n" -> 
                 376, "    - 5x + 7 + 6x = 18  \n" -> 377, 
                 "    - 5x + 8 = 28  \n" -> 378, "    5x + 9 = -1  \n" -> 379,
                  "    5x - 9 = - 19  \n" -> 380, "6 + 0 \n" -> 381, 
                 "6 + 13 \n" -> 382, "6 + 16 \n" -> 383, "6174 + 2651 \n" -> 
                 384, "6178 + 2038 \n" -> 385, "6 + 2 \n" -> 386, 
                 "6213 + 8955 \n" -> 387, "6221 + 2277 \n" -> 388, "63" -> 
                 389, "63 + 0 \n" -> 390, "63 + 10 \n" -> 391, "6 + 32 \n" -> 
                 392, "6 + 33 \n" -> 393, "63 + 5 \n" -> 394, 
                 "6379 + 2448 \n" -> 395, "6 + 4 \n" -> 396, "64" -> 397, 
                 "6 + 5 \n" -> 398, "65" -> 399, "6529 + 4391 \n" -> 400, 
                 "6534 + 8733 \n" -> 401, "66" -> 402, "6618 + 9094 \n" -> 
                 403, "66 + 2 \n" -> 404, "6639 + 6370 \n" -> 405, 
                 "6669 + 6330 \n" -> 406, "6671 + 7814 \n" -> 407, 
                 "6682 + 8481 \n" -> 408, "6 + 7 \n" -> 409, "67" -> 410, 
                 "6703 + 2453 \n" -> 411, "6710 + 5531 \n" -> 412, 
                 "6719 + 9083 \n" -> 413, "67 + 3 \n" -> 414, 
                 "6753 + 2906 \n" -> 415, "6775 + 7738 \n" -> 416, "68" -> 
                 417, "68 + 4 \n" -> 418, "6842 + 8050 \n" -> 419, "69" -> 
                 420, "6963 + 4488 \n" -> 421, "6980 + 6177 \n" -> 422, 
                 "6987 + 5576 \n" -> 423, "6997 + 8056 \n" -> 424, 
                 "    6x + 1 = 61  \n" -> 425, "    6x - 3 = - 75  \n" -> 426,
                  "    6x = - 48  \n" -> 427, "    6x - 5 = 67  \n" -> 428, 
                 "    6x + 7 = 25  \n" -> 429, "    - 6 + x + x = 14  \n" -> 
                 430, "70 + 10 \n" -> 431, "70 + 17 \n" -> 432, "70 + 2 \n" -> 
                 433, "70 + 4 \n" -> 434, "7067 + 9862 \n" -> 435, "7 + 1 \n" -> 
                 436, "7102 + 2281 \n" -> 437, "7 + 11 \n" -> 438, 
                 "7131 + 1009 \n" -> 439, "7136 + 8596 \n" -> 440, 
                 "7143 + 8177 \n" -> 441, "7 + 15 \n" -> 442, "71 + 6 \n" -> 
                 443, "7 + 21 \n" -> 444, "72 + 10 \n" -> 445, 
                 "7250 + 7530 \n" -> 446, "7272 + 6191 \n" -> 447, 
                 "7280 + 3811 \n" -> 448, "73 + 2 \n" -> 449, 
                 "7333 + 2722 \n" -> 450, "7338 + 3228 \n" -> 451, 
                 "7379 + 6677 \n" -> 452, "7 + 38 \n" -> 453, 
                 "7430 + 5558 \n" -> 454, "7438 + 3315 \n" -> 455, 
                 "7459 + 4738 \n" -> 456, "7498 + 1176 \n" -> 457, 
                 "7524 + 7480 \n" -> 458, "7542 + 3349 \n" -> 459, 
                 "7 + 56 \n" -> 460, "7614 + 5986 \n" -> 461, "76 + 3 \n" -> 
                 462, "7635 + 7934 \n" -> 463, "7665 + 3538 \n" -> 464, 
                 "7748 + 4445 \n" -> 465, "77 + 70 \n" -> 466, "7 + 79 \n" -> 
                 467, "7796 + 7881 \n" -> 468, "    7 - 7x = 63  \n" -> 469, 
                 "78 + 10 \n" -> 470, "78 + 6 \n" -> 471, "7 + 90 \n" -> 472, 
                 "7900 + 6469 \n" -> 473, "7946 + 9908 \n" -> 474, 
                 "7948 + 9978 \n" -> 475, "7949 + 9040 \n" -> 476, 
                 "7982 + 5589 \n" -> 477, "7988 + 5800 \n" -> 478, 
                 "    7x = 0  \n" -> 479, "    7 + x = 13  \n" -> 480, 
                 "    - 7 + x = 2  \n" -> 481, "    - 7x - 5 = - 26  \n" -> 
                 482, "    7x + 6 = - 78  \n" -> 483, "8 + 0 \n" -> 484, 
                 "8011 + 9651 \n" -> 485, "8059 + 1271 \n" -> 486, 
                 "8074 + 7521 \n" -> 487, "8088 + 3140 \n" -> 488, 
                 "8088 + 7921 \n" -> 489, "8 + 10 \n" -> 490, "8 + 11 \n" -> 
                 491, "8118 + 4430 \n" -> 492, "8119 + 9714 \n" -> 493, 
                 "8158 + 7658 \n" -> 494, "8168 + 4402 \n" -> 495, 
                 "8192 + 7500 \n" -> 496, "82 + 10 \n" -> 497, 
                 "    8 + 2x = 14  \n" -> 498, "8325 + 1106 \n" -> 499, 
                 "8327 + 6129 \n" -> 500, "83 + 72 \n" -> 501, 
                 "8378 + 2232 \n" -> 502, "8 + 4 \n" -> 503, "8 + 44 \n" -> 
                 504, "8 + 47 \n" -> 505, "84 + 7 \n" -> 506, 
                 "8544 + 3707 \n" -> 507, "8589 + 7764 \n" -> 508, 
                 "    - 8 - 5x = 17  \n" -> 509, "    8 + 5x = 48  \n" -> 510,
                  "8 + 6 \n" -> 511, "8719 + 6369 \n" -> 512, 
                 "8759 + 8868 \n" -> 513, "8 + 76 \n" -> 514, 
                 "8784 + 3944 \n" -> 515, "    - 8 - 7x = 62  \n" -> 516, 
                 "8826 + 6933 \n" -> 517, "8880 + 2001 \n" -> 518, 
                 "8932 + 7141 \n" -> 519, "8 + 95 \n" -> 520, "8 + 98 \n" -> 
                 521, "8x-2=22" -> 522, "9" -> 523, "9 + 0 \n" -> 524, 
                 "90+200" -> 525, "9043 + 3293 \n" -> 526, "90 + 8 \n" -> 527,
                  "90 + 9 \n" -> 528, "9 + 1 \n" -> 529, "9 + 10 \n" -> 530, 
                 "9 + 11 \n" -> 531, "9 + 12 \n" -> 532, "9260 + 1150 \n" -> 
                 533, "9 + 29 \n" -> 534, "9300 + 2212 \n" -> 535, 
                 "9320 + 6116 \n" -> 536, "9346 + 8468 \n" -> 537, 
                 "9361 + 9434 \n" -> 538, "9 + 39 \n" -> 539, 
                 "    9 - 3x = - 21  \n" -> 540, "    9 + 3x + 7x = 39  \n" -> 
                 541, "94 + 2 \n" -> 542, "9422 + 5414 \n" -> 543, 
                 "94 + 5 \n" -> 544, "94 + 6 \n" -> 545, "9474 + 9705 \n" -> 
                 546, "9 + 5 \n" -> 547, "9503 + 3152 \n" -> 548, 
                 "9514 + 3323 \n" -> 549, "9525 + 2244 \n" -> 550, 
                 "9532 + 5499 \n" -> 551, "9577 + 7198 \n" -> 552, 
                 "9 + 58 \n" -> 553, "9 + 6 \n" -> 554, "96 + 0 \n" -> 555, 
                 "9600 + 7472 \n" -> 556, "9618 + 8587 \n" -> 557, 
                 "96 + 2 \n" -> 558, "96 + 43 \n" -> 559, "96 + 7 \n" -> 560, 
                 "9681 + 2776 \n" -> 561, "9 + 7 \n" -> 562, "9827 + 8472 \n" -> 
                 563, "9857 + 3068 \n" -> 564, "9 + 88 \n" -> 565, 
                 "9927 + 9121 \n" -> 566, "9964 + 6451 \n" -> 567, 
                 "    - 9 + x = - 5  \n" -> 568, "    - 9 + x = - 7  \n" -> 
                 569, "Add 1/2 and 1/3" -> 570, 
                 "A salesman is paid a monthly salary of $2,300 plus 7% \
commission on his monthly sales.\nDetermine the amount of sales required for \
his total monthly income to be $3,000." -> 571, 
                 "A salesman tells you that the $140 earrings are already \
marked 20% off. What\nwas the original price?" -> 572, 
                 "A $750 watch is on sale for 15% off. Find the sale price." -> 
                 573, "Combine like terms of 3a-6a+10a-a" -> 574, 
                 "Combine like terms of 3n-5\!\(\*SuperscriptBox[\(n\), \(\(2\
\)\(\\ \)\)]\)+6n-10+2\!\(\*SuperscriptBox[\(n\), \(2\)]\)" -> 575, 
                 "Combine the like terms of 5x-10y+6z-3x" -> 576, "cos(45)" -> 
                 577, "cos(\[Pi]/13)" -> 578, 
                 "Evaluate 2\!\(\*SuperscriptBox[\(x\), \(2\)]\)-9 for x=-3" -> 
                 579, "Evaluate a-\!\(\*SuperscriptBox[\(b\), \(2\)]\) when \
a=4 and b=2" -> 580, 
                 "Evaluate \!\(\*SuperscriptBox[\(a\), \(2\)]\)+b when a=7 \
and b=1" -> 581, 
                 "Evaluate \!\(\*SuperscriptBox[\(a\), \
\(2\)]\)-\!\(\*SuperscriptBox[\(b\), \(2\)]\) when a=5 and b=3" -> 582, 
                 "Expand (a+b\!\(\*SuperscriptBox[\()\), \(3\)]\)" -> 583, 
                 "express 12 1/3 as an improper fraction" -> 584, 
                 "express 3 2/7 as an improper fraction" -> 585, 
                 "Express 42/5 as a mixed number" -> 586, 
                 "Express 53/9 as a mixed number" -> 587, 
                 "Find a perpedicular line of y=3x+2 with y intercept of the \
origin" -> 588, "Find the equation of best fit for the below listed data" -> 
                 589, "Graph the inequality y<3x+4" -> 590, 
                 "Graph the parabola give by \!\(\*SuperscriptBox[\(x\), \
\(2\)]\)+3x+2. Find the zeros, vertex and intercept" -> 591, 
                 "How many miutes are in a day?" -> 592, 
                 "Identify the property used in the equations below as \
distributive, inverse or associative" -> 593, 
                 "Is x=-8 a solution to 1/2x+6>3?" -> 594, 
                 "Multiply 24/3 and 27/8" -> 595, "Multiply 8 and 3/24" -> 
                 596, "Plot 1.25, 2/3 and 2 on a number line" -> 597, 
                 "Simplify 10-(7+1)" -> 598, "Simplify 10-7+1" -> 599, 
                 "Simplify (15-3)/(1+5)" -> 600, 
                 "Simplify 24/(4-2\!\(\*SuperscriptBox[\()\), \(3\)]\)" -> 
                 601, "Simplify (2-5\!\(\*SuperscriptBox[\()\), \(2\)]\)" -> 
                 602, "Simplify 2-\!\(\*SuperscriptBox[\(5\), \(2\)]\)" -> 
                 603, "Simplify 4+5(1+12/6\!\(\*SuperscriptBox[\()\), \
\(2\)]\)" -> 604, "sin(121)" -> 605, "sin(40)" -> 606, "sin(\[Pi]/3)" -> 607, 
                 "sin(\[Pi]/5)" -> 608, "Solve 3|x-5|=12" -> 609, 
                 "Solve 3(x-5)+4=10" -> 610, "Solve 4x-9=11" -> 611, 
                 "Solve 8(x-5)+4=10" -> 612, "Solve 9(x-3)+4=10" -> 613, 
                 "Solve and graph the solution to 2x-3<7" -> 614, 
                 "Solve and graph the solution to |3x-1|\[GreaterEqual]10" -> 
                 615, "Solve (\!\(\*SuperscriptBox[\(x\), \(2\)]\)-5)=20" -> 
                 616, "Solve (x-1/2)=(2x+3)" -> 617, "tan(63)" -> 618, 
                 "Tommy\[CloseCurlyQuote]s grandma gave him a $50 gift card \
to Toys R Us for his birthday.\nSales tax is currently 9%. Determine the \
price of the most expensive toy Tommy can buy with\nthe $50 gift card." -> 
                 619, "Use the law of sines to find the missing side of this \
triangle" -> 620, 
                 "What are the discontiuities in the function \
y=(x+2)/(x+3x+2). Which are fundamental and which are removable?" -> 621, 
                 "What are the domain and range of \
\!\(\*SuperscriptBox[\(e\), \(x\)]\) and ln(x)" -> 622, 
                 "What are the domain and range of the trigonometric \
functions?" -> 623, "What is |1|" -> 624, "What is 10% of 100" -> 625, 
                 "What is 1+1" -> 626, "What is 1+15+21" -> 627, 
                 "What is  1/2 + 1/3" -> 628, 
                 "What is 12 1/3 as an improper fraction" -> 629, 
                 "What is 20+22" -> 630, "What is 2+2" -> 631, "What is 2+3" -> 
                 632, "What is  24/3 * 27/8" -> 633, "What is |-30|" -> 634, 
                 "What is 3/18 in simplest form" -> 635, "What is 3-(-2)?" -> 
                 636, "What is 33+5+8" -> 637, "What is -3+4" -> 638, 
                 "What is 42/54 in simplest form" -> 639, 
                 "What is 42/5 as a mixed number" -> 640, "What is 45+300+4" -> 
                 641, "What is 4% of 16?" -> 642, 
                 "What is 53/9 as a mixed number" -> 643, 
                 "What is 5% of 100?" -> 644, "What is  8 * 3/24" -> 645, 
                 "What is (a+b\!\(\*SuperscriptBox[\()\), \(n\)]\) (Hint: \
What theorem is this?)" -> 646, "What is ln(1)?" -> 647, "What is sin(60)" -> 
                 648, "What is tan(30)" -> 649, 
                 "What is the absolute value of -1?" -> 650, 
                 "What is the largest value for the missing side of this \
triangle" -> 651, 
                 "What is the most specific subset of the real numbers that \
-7 is a part of?" -> 652, "What is the next term in the series " -> 653, 
                 "What is the sum from 1 to 5 of a=10n+3" -> 654, 
                 "what is the sum of the geometric series from 1 to infinity \
of 9(1/10\!\(\*SuperscriptBox[\()\), \(n\)]\)?" -> 655, 
                 "Wrie the standard form of y=3/2 x+2" -> 656, 
                 "Write 30 degrees in radians" -> 657, 
                 "write 3/18 in simplest form" -> 658, 
                 "What is 3 2/7 as an improper fraction" 
                  "write 42/54 in simplest form" -> 659, 
                 
                 "Write slope intercept form for a slope of 2 and y-intercept \
of 12" -> 660, "Write \[Pi]/4 in degrees" -> 661, "    x + 10 = 12  \n" -> 
                 662, "    x - 1 = - 10  \n" -> 663, "    x / - 2 = 1  \n" -> 
                 664, "-x-2=12" -> 665, "    x - 2 = 3  \n" -> 666, 
                 "    x + 2 = 3  \n" -> 667, "    x - 2 = - 8  \n" -> 668, 
                 "    x + 2 = - 8  \n" -> 669, "    x + 2 = 8  \n" -> 670, 
                 "    x / 3 = 3  \n" -> 671, "    x - 4 = 0  \n" -> 672, 
                 "    x + 4 = 16  \n" -> 673, "    x + 4 = - 4  \n" -> 674, 
                 "    x + 4 = - 6  \n" -> 675, "    x / 4 = 7  \n" -> 676, 
                 "    x + 5 = -1  \n" -> 677, "    x / - 5 = - 3  \n" -> 678, 
                 "    x - 5 = 7  \n" -> 679, "    x / 6 = 5  \n" -> 680, 
                 "    x + 6 = 6  \n" -> 681, "    x / 6 = 6  \n" -> 682, 
                 "    x + 6 = 8  \n" -> 683, "    x + 7 = 13  \n" -> 684, 
                 "    x + 7 = 18  \n" -> 685, "    x / 7 = 2  \n" -> 686, 
                 "    x + 8 = 12  \n" -> 687, "    x + 8 = 14  \n" -> 688, 
                 "    x + 8 = 3  \n" -> 689, "    x + 9 = 13  \n" -> 690, 
                 "    x + 9 = 2  \n" -> 691]}, "Output" -> 
              Association[
               "f1" -> Association[
                 "Weight" -> 1, "Type" -> "NumericalVector"]], 
              "EmbeddingVectors" -> CompressedData["
1:eJyUvXVUFe0X9z02KnYnI4rdiT12YRdYjN2KHSiOomKAIgqKoI4oNoKKKAaO
gd0dqGNgi931/O794Y93vc9fz73Wvc46eM6Za65r53d/954SA8Z2GZxOUZQ0
//s/Nq2iZFX+r/+M/8f3//+//3//XW2hXjvyv1ezeZb4xv971bKm2frfqzk0
V5S8j0p58t+/a4579/z3ai+fcPy/V3Xp0QPyOb3BYXkf6Hz9v/eGg7Ve3jfs
dlTex7U7It+L6nTzv/dW11wP5fVwyRf/vaqJdy/K7wR2l+spvsU2/vd5/dqr
43L934NP/feqd3JMlHUuTZDfMbqEy+9oP5slyfcbnI+XdT6uf1Wuf88hVj5f
Mvzxf69K7YKyLnN+tP3fq6X47ZN1NTt3Wq73zfmu/Pv5JZH/vRrpnYPkunum
nJffLbFL1mMU3L9HXitP5HejkmbL9z13y30q7i6m/M7IPtHy/QW+++W9eeCg
vN7afUbWHTaf6+Y6dEL+XrvEGbnuSt8Q2ZcL6iPZj6/vuY/cF+T39dLHnsj+
eRd5/N+rPW+D7IOR4dJteV9u/Aa57rx2CfL5Dxvusv8nH8p9B24/KZ+7vPqc
/I5ThueyXwuv8v1+Z5Pl87GTb8vfH4bK+ViBlebK/e25Jeet1z8ov6uv6sX1
TyXKOpWsviIHWsvocbKOvb+fynWH/JDfM5t5yfnomdLL/qu3/nE/a+vJvlg5
qx2TfWjV/ZR8/vrhTfL9iC4in9YwP1vO2ytQ5ELdfUjuS5l2RuTW8PkjcqLN
d9otf789/6z8TrDLTfn7UZdpcn9NNLlfNa4l5/qrk+y/0u7HVVm/R+uDsv9e
58NkvV+Hy/r0801j5PuT+hyWdbRxk3PSphy9JOtWfy6T9V5fuUs+v3rwfvnc
iY+yX0bAa7lv8+uzO3K9YrWRa//LIifWK/bVzKvNk/XNyZIovzPc5alcJ+R1
kuxbn2umvDffPpL1bZ16Wa4zpIiszyp4SM5Zb+8n8mgcLityb4QlbJfv3V9w
SPYzl4ecl53+zR35fLwq+m0VLXJM/t5u3AL53crtZX+06ynn5Pqh/2Tderbv
6Nuz0L3yuXn55si+jfeRfdPuRcs5WOOj5LyUVTss2e+KJ/bK96d8kHUrOyck
I6+ePvJ7NZbzu72n75DfSXfzkOxX2OGTsv8vGogcGN4NVsjvT18i+6JYuUVe
jIPTL8rfr126IvfZP17kUCuZT/ROKzJE9s3eYGJf/McFyfWPddks/+7gK/ZL
3dlF7JHRp1ys/I5btSOyL38eWnJOHaceld/pvUXOWT3mKvtohKdHP875eslr
9Qj0Kc1l1jWyRpxcd4wp56LNbhYs+1eoIusaVPy6/L3oRPmevujNPXktOlfs
n3a4Ef9eKmi3XDcw6Jm8rp8i52C4pn8g6+vWUuTNcr65T9a9eL3IvVkip+iX
2nxPgnwvu9c1Wc+95jHyPu0KuY6SVF3uV+v78Zb8bqvOZ+X91nXP5XcOpcj3
tfJFxI7Z15uckM+ZbdbK9++OEHnUvvwVe2l6bJJ9szP2Ev+hPxksemAu7Cf2
ShtTUH7H+uwWJ/te2nWXfH6lIu/Nem0C5Hv7z4t8mMP9RX6sU5miZX8GrZ8v
1w0YGiavZZMfyDobmmKPTK+L2+V7c+/ckM9v2SZybNRuJvtsOC4TeTECw0W+
FOevsh7t+Wyx+9rIX8j97C/y3lo4Q37HnhYp52mX7yf3p7dkH81+J6fL72X4
u1r2W/mFnD3PJnKgbtKRz0JvxI7ZIRPl/KzETRfk+wHTxW6pDufF3iiBR8RO
GM36iJ1UDeO0XHfVjwOyzsj12MkaF0SPtX0vfeX6V6ugT9pIsefG3HiRe2Nd
/HH2bc9W+d107cTuGYveyr5qS17KPqhZx1yW71cpK+uzX/mK3VTOfZLPqWeu
y/0obu1i0ZfZIi/muvGso9xbsfN2z5wr5Pfv7Rc5MbsXRP57F50tv+P/VfyL
UnOJ/L7qOTNc7ifPSJFba3PVS/L3GXnkPuzNXs/k8y0fiX6ovzKIX1MOeMl1
ja6DsRMpl8Rf6hNCDDn/LlFi/7Rhq9HHWS1EzoxjQfflc8d/se6DFW7J3ys8
FXuu3PoSIec0IQe/m+OC6JFSK17snertL/qv/cbOq682iF3SYzfdk/UaP5bL
91cdFHlRIu6JPGtqHuzBh0ZR8nvzV8l52z8cguX6czKIPdL6/xP/pK6ImS+/
44Z82GN7yX7pr9eI3TY6+eDXb9a4Ie8LD5Lz1g7UQG+WtP0g9/1+k+yL9nmL
2BG9yHCRX3Vt9nC57v41xA/9St+X92cPct4pAyQuVC4Ol/3Rfcq/ldf9Z4kP
9D3416XN5XyVmzdY59xK2InnzcRuWiVOYGe2PJPragemcx/qHYlLlbBYievM
RpdFz1Qzq1zf3rNW7svyfCdxnZU1P7/v1VriVK16iMif5XdR7I+y7L34b2Xs
TOTuoo/4A6VhT/GTht58h1x3Tkmxk8q7c2I3tPRNkKPYBLkPPWazvKr19iE3
13OLHzbMDtiTW1VEH1WXrWeRP0fs7ZvNF+R6QWVlv8wBe0bJegt98ZR1Lpsi
/tWecor7WF41Wb7nMlfsg9I2QPZDr7XpnVy3tLP8Xc3zHfu9w5DrW4tfih03
ihwWe2urE7ArpzrLfuuDF+E35lcX+2QNrMn64jJJHKB2D+P7Dx/I54xDAcRH
EysQv9dfLX7QWFFI5MVOp0o8pfq9E70zFh+7Iu8r3l4nr/ULiV1WnSuL/TCT
8qLvhyZI3K6Nzyj7r325J3qkLcwqcZQemF78mRlVFjv7NZk8ZXf2KXJO9TuK
PtpVgsVuK8fyy30Yhb5I/K5kHHZXvld2psTd9tCjEnfYh4jz1K8ush5tZ9bL
6H203L9+Yjl2dmhliaPVrg3Pyzr+ZJH71x+PIa95lUnkUP96YZq8ft4o52W/
rop/ynFV7ssaXAD73nOmyKVx6ckGWd/Gz3JdveFIzm1ZH9l380ZBia/sDzOR
nx2jsDftX8j3lV43RC71wefl+oZXyDb5+8k40R8jzzjRL93ZEPuojC8qv2s7
FRE7pPk3Ebtl+VQWO6/7nBC9VjsOFrm0iheV81OeXI+Qf48YLedvl3EXf6N5
fxU/Y0V4yHmbVXZgV6dfk/3W17aXdeszF8t9GYOOybnqH8eHynq7thL7ZDot
Ezuk3P0i+2vP70+8OuAV/qjoP+LjHVWID5VhrGNyd5FndfM44v4AVa5vNL4m
+ZGxrJDEJ3rVriK/5p3GEjcot/PIdfW/BnHIwkeyT8rUunIdW3MWeVKXtRW5
s27NnSHXs67byMVEsbtG3zI75fopDlvk+4vPy+9pGbOL3bDe/5D4Tat+Rn5H
cU4Uf2D9y40d+d4Qv94qC3FC7tH48ZSXkmeaJ7qtlOtWSiv+zN68S+yV8mer
3KfyvcYrWcf5r+i36SH5gdpgCn7r0gKJ9219raxXv1VC7Il10Vgj621XR+JC
ZcQN4qnGdcXvaTXGil6rxdpKnK19/yL+Snd5it96PRi7/v2E6JHidEa+rw/5
JuvXY06S/1SPlzjO7BEr+ZjVOKvon3ptjNhF5dU4id/1IvHcj99H+b5ZKRfy
8Pgx8e5CT+LOL6VkXw1lt+inNTVW7Kj6of4QWe+HuSJ35poGIh/W1WT834CG
Yt+Nm6qf/E7+vb7o6xLk/+Q88pWSbSVe0kcH7OXfF8h+KZXCxY6ob/aLH1Eu
3QTnuF5e8jBzdrjsg7lqvuiLOSVM5F25WFdwDHPhCYkT1eIrJd5RS46U8zSD
+svf7cEbRE6NBtlFHozdK8Wf2hlzkr93ihK5VJ3OyflqbQLQ4zhb9N8q/UXW
q+TdjLxnn03eeGLxYvl70274WT1B4l192UjRB2XFN+zXwjbye9r0YqKv1uLZ
Yg/MRQEi11bkWIlH1LbNxB4pRzbK+Zk7ckgcYbtVE7umNxkBrrK7lZyDFtAT
e7mF31ffenIfD3aQv4YW4fzcZ4qc2GMXEUdUKiB4kB08TeIWM8EB+Tj1Udar
vAzHf5xKI/KiDNkJblLmlORz1r+qYgfVOE/ig8G/Vsn57x6GPL205HpG5m+S
d9i+WfDDJZ/IevXwnuIftQx5Ja7QigZxvdql5bysr4OIe8L3cn/dkuV+ldBP
Yof0Qp7gAetGizyprotl3fbGnejpuTixA2bYLNkHtYfbZrnO/Mtyfva2h8ST
Q9qD+/S/IfuuPx0HHjLtMOsaXxe7HVMOeX90jrxky2+RI/Wlq8ih9rUwdtaR
eF5JCZD4xqgYIHqr1h8i92sOrSp+VZ3aCJyqbGX87NDW+Pno1eIH1F4n5ffU
6zfBZQ5XFz9mtm0LbhWWjvw71zS5f3PeYTlXtYyL4CH656HiP82Jr+X+7JQB
Io9WtKvot74qAb30mifno5XaKuuwCpwiv1wWKf5M31VR9sGOviWv6vCnYq+s
0uPZ7y1X8fPO/djf+6/JZ/Km4/znjZH1WltcRG6M/sVk35Rx3djv8TdEn7X5
dcEREu/KPinVVwteofrORF5zbsP/tjtN/p99FPax5D7yLMfLcm720A743crH
yd/VbMTvCQEjZB13xol+WHnjRG/N/j04xwGrRb/MExfA08rVQD+HBq6X9V5d
hv97VeKt/Hv9BPxdSE75fXt+H871cxrii9vExUp+8DMt12nytNAPYo+V++3J
s/uUk/vXY46tk3WUqCByoU3NJ/7Fnush/259vEn+l3cHenZ3Pnmm1zjsw9ed
Et8pf97iN6fnxf8uCBB/oLSvI/ej1okkbj4/HtytdC3Bc7RdbuKntN0PwXu9
E9DDzJ/JS7+Zcn7K/AxiB4wFw8Gf93WQ+zZqhoHXeZ4WObZ355L7NMu1kn3V
0i0U+6ntmMjvj+nN6xEXid8MO4vYDW24C59/don8o8NkcLFijeW6auv82J3e
4wRXM5rPJY49/5743a6/Sf7e8UwUcjGJeNe1pOiP0WUDefVmD+KGJmFy3/q1
ostEHxJucH/HiovdNF3d+f7K62KHlPzJ5JuzOop8Knsy4CcSxpBv/xgo52bU
30KcfP4Y99VXw/5mqI09KdQC/ciQlTil6ieJc/T5HuBazQqKHFtJtdbIdees
wn4W8xW/YC2cj31c25T80b8wfntQNPZpdUfigaWO7GPYBcHVzER3wYn0D/Oo
M0TmkThIKXqVuC/pL3mT6zjuu/qduVx3C7jcOB+Jd/TEXnId/V6GnbKOB8Ho
y4/Ncr+W+0rilAUHF8m+lNvLvrv4SP5idBsseJa69KHkc6ZrM+LMqf6CE5iz
isu+2HeuSzymFa4k+6qWqyB1AvVHVfRiytuFsr5Tt8VuWlkX4RcjbfINr4GC
c6rDhsp+mhEeEk8rLVmvoZ6k/hJ6Grsx/TOfU8IEZ1eP+OMnHGL85XXkGJEb
tWB+ib+UrWnxtzGVRQ+tv03k99VPJ7zk+7kWSByohx98Ka9zak+QdT9xZT/u
uEgcrc5SyDsXHJZ4yMwXLvKoNwyWuoaycf8S+dwZ6kH64Rji+MKB6N3rg5If
Gu8M7PhO9Mz+Z4GDf6gjemR5jBb/p7zODl6UbjB6WX6c5I32ssqpeHMS+tbz
B/6wXkmRby2sGHlLx1/4lfmlJO+0r+4X3FhPU1rkU9vjDf7f6IjYH23eGZH3
/wkecUTXJJE7Y07xCXzeFntk5XwAzhvvJfpgvx0D/pfSrqtcN8jmdzOvBxf4
M07ssFpnwgv5ve2RQ+X7myLkd82078Q/aUdyiz8wti0WOTPyzZN90jI1AMff
1oW6z9WD8ne7fCvJRxSXCPKd2GEb5Xd2Xca+7h2GfG46L+/N9S0lv7cf9BRc
z45LS7xZM6/kF6pTLYnvrKIV+X7uAPJ28wTxS7mu5LshUdjru8khsp5mOcjr
LFfxd3b2wuCvGzuKPzD3ZBku359wRvRG1/4RJywexz6d2yZ2UH92ReTTrPAR
3Dl3BzlvIyQBHCr5B+sZfI962dXbxOm/GohfMUoel30zhy0ReTbc1kmcbGhF
qW/l+oJ/7FjiKfeVg/ys/YZo7vu54Ih2WAlwCKe8sj5jaFXJO4wh/uj5B1fw
oqItwN8aR+I/a9wXHNdy9UIeft4VvTauFNmA3k8VfbTTRmLPVz0FR+0bAa4Z
PU32Rym3EvterPA2WU/IN+qHS69JnG/8cJX6i5L/jPhXO+K01FO0Qy6yr1r8
UeIoV/JUJbww8fukqwtlHRGl5HyVDrcknlFba5xfqyjsafHn2Anf7RJ/m4eX
E890zSH21PaijqROvyL7YgWXIp9/9YC4r95Z/O2NDdRf67iLnKnbNORx91fi
/r9ZyDOelsDPKA/BoesUlThOmTRT9Nc6+5V4q1BmsdNqn6ng1GExcl1j5R/i
iCHp5Vzsmq8EvzC984yT14gW1Fk21kKf17nxGphZ9NPu15r648juYhfN5Bfk
nc4j8aeTc0gcZJaoAr4xrD7x8OUc3MfERZIPKyOuyeeUPJ/RR78LEl9bt3MQ
h316LO9V93fo1/5O4CpqZlm3fsdd4lx1ySz5u3GshuDcesHnglfqdVZg73u0
3iLrqBzBPgcXxI9WnS1yq9fuInqqLsskftp4HQJulPOd3JfVaLbcl7b+A3WK
7PZq9KYcdYUxj0W/1F2VwJFGaOKHjR1bwU2ieoi9tt5r4m+1V3vAIe/ekOvb
tZ5QN9Gd2Nc/uvxddRpMnuA7RuIy5UBP9sEhq9hTZa0Lcf+iH5znmhPU5cae
FT3TR60R+dAWJIPr/xsGjlav1n3uQ2Xf5vngT64FEW94T5Z4SIlwxQ/2a/RS
/n6UuqG+aILgtpqtiZwZtR6Bg87NxzkPXiRxlJH7iuBuyhNb8ndrQFb4CN/C
ia8drlHPbpSbuPLVTuqy553I03IWBRfzSZTrqJux00qF3uDLzwfi1zpdRc/0
eZKvqJNnEs/MKge+UrQ19nHlW7HDxjbyW7PFFXAPt3ycw7l92KV0gavlde4T
8PEn+/Bz60eI3bD3LpXfsUY5DpDPuXlJ/q7V7yd+1K7cn3MbFIj9CiiBfCR4
UPfZ7kudLkd96i//toG71WkLjtTjeKTs9/c84K/qKbF/6h/4HNaxnCKfmnd7
1nFuieAldqI3cvagAHXqMrWJ87fmx18XWgS/oFIC8VxcLuqH55zAc7MHiD+0
KlajfnQwo5yL1q4/8jq/EnnwhGsif9bLWeAAY1qA3y+9JPVX7Wwd6hn3NoGv
DEshzrpQAXzn2UzytcwjBS+0JoCvmpNryu/oD0+IP9KcHcG7ll4iLtuxgjrD
phDJExTve8iFgyvyXP2y6LXeuula+Xt0afgavtHgDQ2GL5fvVRsncZo1gjqc
lcmPvLrBGKmf6f7vsLurI4m7gm388NOF1CV+bqcuHRRH/aV+Enjz2/TUcz90
4v7yXQTv6lkOXkCWSHg2xfzEj2hPm4L3jZkG7t8C+27m8pY4yexSHl5DzvES
pxn1SoFnjgU/UJtEk1d4hYN3nIgR/bazNpP1aadTyKf9FOoR2T6Kv1ZWbaRO
dzkGfXoW2lbWW2Yl6zgYgZ/qdIA48fIa/PzldYFyvocmyf7ZHi74/dZp8Atj
chNnHwuSOMLs8gB/Oq6+4DrGaFfBpbRsodQdms+RvMQaMgecdHov2Tdjy0SJ
+40SXbHz5XTiGMcpwovQXjWU/dC95xMPR/vL9ew258RvG4d+Uxc40mmW/H3K
K+Kceauoi129NFd+/8pn4s3r+/GXJ1YTd27tz3XXZyaOScoJrnXXlDqFMvkr
efSBOcT1O8uJvmpF3LBjAy2Jw+2/rrKfduu8Jzl3B7En5g5b4ke9TVd4LGdP
yP2Yr7qSLxVLFHlVp0+Dp+OSN1Tu5/d9sXNKgarwTgJdwW8OzANHXDpQ4ibb
5yZ5bMOG2OMFzsT1vY6Tb9aOmSm/57qW+38w6QL7NB38quAFcIs7Kvn4whjw
wIoleK01WuTZ3jKW/ObnBPBTr5oSbynXn/O+SxXyyNDC4N1TjmLP46+QLwyf
IuvXNzQkfulz3VvWpZ4We2fff0Kdq2AXcJ2CNrwJ/x7H0ZOB4ECN4mTfLbW6
7JthFCYPO7MK3NM2kJ/xOnnIpeayH2qpdeCoKTfBFXc9Ih67/Y24ckcteBxd
H4LvlIkVPTDDwPXt5kXFL5u+IeQHvwaK/9YO1qRule40+PYvlXjg0yzqCFHV
kbecjWV95t+ZYletl5vBr/OcRr9vXcWujarIeRatKXULdcICsePa/vzUITdk
Ro/zflgs73+cJe+KbyTr1H6spM62Npm8NPK+4Pnmi6XiN4xCFVlPvrVif9Qa
r+R65sSvsj9ajsnUH3unQ45m3YA/U3C51Av1GdXBj/1aST6vubmD632/Td35
x2OxR2rgDer1E1oQv19cLPwStd967jM5ke+d3YQdKz8C+9wa/og9KFiup1wZ
wflPaUBeUuUycc3P7JL3KE6n4S+MWAQPZVRZ+X2lQyXJa5WQdNSJ7OwX2O8q
koeYzXri/30uUrc9GI8/d2tCfpC7gPgl6+kR6sGbZhOXfQkROTULn6CePN6g
XnM/lnyr8OdzfG+kxNf6RlXspPGtPHUt5z/kfS0riz3Q92jgsBM/wkNxO4Sd
8VkjfAXd7IneXKwOv+drX/Sq5HzyvJxfxS5bZcADjRfwOKzevwQn0m70Qo/X
phe7qURtpb6xZTZ5Tbaz4CgJ1ZDzkAfwHoIySBxolukCj8u/HDxW5yas/0s0
eUTEIOS6W0fqjz+yi94YjRPhI5x5Bd8veg54x6Zz2J99U+Uc1Ow+xM3r3lA3
bFdNvm959YU/UuIReXCWi8Qhwan5/OXm8G/jc4LTRX2W+FOb0x3+SO4r4Hjp
a8p9qZHvqD8MrIlduTADHmaDvOLn9a9FJZ/TV13kvJJjWXfBb/A5ylDP0Ndv
knjOqnhZ8hvrT07q4U33gIN/7A5O0CQ99fWjA4inoiy5H+McOKq6ugr8l04x
rH9TA+LOA4PkVW3eAfxoNvmE8XKJrN/IuQt9v1Kc/MRxIv9er6Ock3J2JPtS
bSR2bd1pkWc7yRF/FxAMzzWnBS9qRh3Bw6wupclLfkcSz5cZfRv5CSJfenpA
6gbGj73id81LseRLnqe5zwt94VGmT891yrQDR7p1k7g6cIzsl5LUBt5GygD5
PXWKp8iFdfSxr6xrcQ7qfmNiyR9XzAUndB5HfSzjN9lfM7EA8VFiEeqJPQfL
7+qjvcjrajWFh6ZSrzGez6YOOeEC+PSBxyNEDhs6wcsocVPsrTVqltgBdfku
waP1TXe5vv8z6irto4nnOwwSv2rcqEO80a4eeNSpheRhpSahj7+yYnfyryIe
yliCPGjRbezBkyTJMwy/neRZrrroh/Yq8LXczyB/frdabnD0dSb12l/B8G0i
r2NvKkdQd/QGj9bLr5XztffFsm8NR2I/xk9A34Y9hR/wIZ2P/Pv4gWLXzZHV
wCOi3uDvfi2CL2m2Y/25zxPX918CPnYtG+sLdyE/eRAs+L1yxVv0R18xUHAa
ffdL/MvZcRJvqS3iZL3G/v6yf1q9puDekV16Ix+1xX+ZDTaBr7tnJg79eAx+
5p0ii+S1ewfu3287uFPTONFjKyWBusqr1dS30rYhX9r+UPJJc3gmcPjdJSWP
tDPfhr96bQXyEL4afPvgNHlvaR/gxRj/wOOinfALF1fLftorvERvrIq1p8q/
TxnEeZT6BR60Oy/xf6tfxK8TG+BnnAuB2zdZJjw39VI2sUvmvFpnkfPC4MNK
EvYz/Cf2ulRN9vsDvBx9X6J8zl45j/pXownU/9/mkLhG73aJes9nb3jgOaeJ
/trn/qXWpTpShxt3FTvgPhN7d80PvK3qUOLSE9S17dNtyV/OeWBnbx4QXqEd
MJ37dRtBvDbWk7wlPFrybFWfSpz7qTq883bx+OfMv+VzevVKxAcdllNXMzfK
uVpHDeowPaIlL9HrvJR8x/IeB76wgLqZHrZc8lLrSDvxc0p1W/IRvcNx9n1v
dvK8wiuop+w+CC5+oyK4cub9cl07fXPRf833BXlUI3AKs6EXePFT6tha8lni
+nffRd/0K7cEF9LqtJH7UV435jwOboNP8PAb+eKnz+ibZ1X8/wNwfzP9QXiu
Vf05jym/yHuONhB51NWykhepnouJf4MmijyrHp3F3hs3ssKfj94IPz9jhNgz
bdVY4vDZD+BtZa6LPgWlga/Zbyo4xo8SkXz+g+Q5ZiNvcMo2o8ALHx/Hfqa/
if1/P41468EgeMjLPIVvZv/pBc+uoSN8xrSDyRfnbkGeMneB3/V1leSnVtQK
cKiWbyXusjsVl7/rvfbD02gH7mL23ULfwqqJol+mvRa9vpOR9VcLhu+wc5bE
L+rqlqJPyk/qYUrEfTkn5cMd7HhyLHXeMf0E37AcHOB9P29GH0uD1+Q3t4dI
HK6u+Alukq26/Lse01/2yywWInU+PWtu8dva4zVSL/pfgkw/z/FGUt+wbp2h
Hj8b+2D1by3nbR/tKvinpu6HZxJh0m+SZYHIr9a0O3nM8Upif80cidRNS+ck
rut+D7s2qLPolz01SPBRrc0F8RP2jbIiH+ruLJKnae2XwtuJrgav6eleqcPZ
jbODG7/wwH9FnqL+4uZEXdt5E3p0aKDEDeaGs/BzmpngvKezEj96PYTXrvmL
fGiVyQP0xIvEE0NWwB816rMPKxqKndValsEOr5tAvf2eN/r2shT1hCzhKfL5
4dFif+yEMOKiiqPhwzoeEtzHDgmQfTUCD7LehTEij0qWxhJnGAWnsC8emalL
5swFfuG9izzRJZE4aHwt7LthkC8Wrg5P+PgL0Q91CTi4od0Fv2qQJHphpLsk
cqmMu3yO+39L30SbmsSX8SsEF9CiS8ADqfuefD7bMvZbLUN+s7EC9vlYAHLY
fA/5RmlP4vUyJ5C/XsvhLd8cCD+5RHPqyhc6UX940FXsoXr2Lv0vDk3xlxF+
Em/orTvSZ5Y7l+D8xu3f2O9gF+LaHk7obyx2XndOpl6kZpS6iv5iHf0qy+BD
quWy05eywR15HNgROVW+wVs8Rl+TtmQG/S0fM8MfD7wPjyNgFvyCfPslTzZv
30AfG7UV/6eV/ov/ul0Wf7ZvsuDOdv9x9I2FxpNfmp3p+/IrKjwQrV2S6Lmx
JHakyFFAIfTA+ZHYV2OMG3ruQXxrXozDDm/0BY9JroFfdJoDruo0mnzrrS+4
RO9mnH97X/C8HQ/Ie9fslLjBuv0Pe1lO5fxCrxHvtomVeFg/Rl+OmXcFOEDK
cVm/uf49ecrbLeCgu9JIvqO+NOAP3ugq8YWa1RZ7pvb3pX8nspXsm3XBh3yx
8Qlw8N3T4A8cqQPP5tJ87GB6VfZB0eLIG6OpLxiOofTT5dPAxbvflHXaJYLp
S5qjYw98n8qrUaPjUlnv8T3Y5b70n1k/T8l7K2gVuEeaePr6QlXeZ84Injki
AhxizQCJH83Qj6q8xoDDannv0q/Wohx1LRcX8HKPNuSR17+R357rFiDr9L9L
vvcEnMKIcBb+vZbjOXHRqprE6Rl+S91QmTlF6p6mtoe/59xB/b3uYPDgiXXg
DR8cD2/oXR36wpYeFJ661WtADHK9AX7J+v3wFhrZfP9LVexJyRfwztaP5ftf
liJ33aej78OjiMNnJZKHuE6RczRHTqHPLaw1du19Jeovo09Jv4Z93wIXCXQU
+VG9C4mdM+/9xm8Wqke/wa8R1AsOvieOLFFQXpXfeehPqTta4hVt30lw87YZ
kNcXU7Ez1wvhJ9KPhRfzuSh22fMffis4CjzjZxvyhA2zyT+dG4HbTXvGOlpM
pa64tT3vVz0Cp7reR+I8I7cL/Sztf+Ov7hQCn3/YFf1UD+BXP38Cd3NZjx3q
NhS7fGen4F9qr6rwVpcMJW6dkpF6kTf9VsqCnpKna/nKyHtjVWvyyeGrxK9Y
XwbAD+vcgfj1dwN4SL2SibP7rpL8W8kbS99se03k266ZnzpesS/YrbHEAdqg
UKmD2Ls/U/85uxm76BZN3JPlFThuXZO4ZsN28eP22QXwFY4Ok/jTCKgDTj36
EXWeB22ol3Z7Tdxzv4L4faWRJ3Zp1BD89nX4CMb9+8T9Ps+JK7Z9o/8h5xHO
4SP4n9osI3mOny18EbvndOxJo6nDZL8vB2DHzAbEseUnYs+z+9E/4lAEO3Py
DefkcZl+lP0XqS9eUeFpNO9DXFq1uuDwZlJ69m38Bfxo2gB45dEZpe6tnFGx
P52jyd+vLpfzUhe+AG96kQE+pOch6gZTTmDfpnclPijXQepBVtRQ8ucpDeHl
5/0qftncfJc4Jd9k8KTGv8E3DhRFDnpmY5/S/oSvHppfzlWNeQdf3ZwkfZL6
yUZiz7RsJSbKesrPk7jQblmO+HDFL+kjUkt95vzu1pE+ACXXcKljKMVKwYsY
tExwcv1JF+oB3UaTV789I+ehVhpKf2jKLngaI3PAr/OyyRNr7RJ7YVTZLzip
NfAP/XdbvOir/TwFu6v9FPtnNHCUfVAyp8bRz1tJ3cYcWY3vFV0CPz84t6xf
mxBAXWnMKuxcm4fEwxVHwzs5u0jySWtiW/DsqT3pT3dzoz7bKZj+2calyDMP
fqXePcSdeOTtMbFDilVC5ElPgKdtvptDvDChlcQD2q262NWFBbFXu4cRF+lV
ZD+sNJExyFlN+hj+0FegFDbwW7knw69JiqRe/tuF+HswfFXVK5/4CfvID/hq
j2bS1+6YnT6EKmH4q+lpyGMrDCXvyemMH0xoLnJqlEgiX337lL7yIPeyco4Z
jsA7bBGLnvsl0H9SeTr52ZKN4ADfZkkeq/quRO5/P5P+TSWmM3Hunhjh/+vl
PKl3Higkea2Ww5n+lDYDyUu3TWRdeUZJncO8vR7e/wxvkXcj6iy/1/E4/OOC
4APa44FyfSWPt3zfzpKbffvkBg4ZuR29uzSZfXryiTgp0EDfD8bDbw0vDI6/
uxX+s54TOP2Ki/RvJ/ajbnWkk+yX5hSDHBzfBS6f1AyeVPVl4MjjO9HftvMi
cdq2jMh/mfbw1ffRZ2c1eUd8c1Qhz/w3FDlZ0ol8INJC/txS4Is/z0jdcG64
6K0WB1/SWlqP+8o2Hjmu90fiW2vYaPHHainiBb32AuqoeYuyb7eW0ze+ua7Y
D2v0OeLqjVeIr1Y4gN/N6E38q/cA32qlsk9tgsl/po4l/m3yVPJFY3hz8JRq
H+S+Df+F8Cv7esNrf74cu6zkgc9zuDF4YYRKHT3pWaBcv2B1iZ8NhzD43Nox
cOM6qX3P106AbyxpJPU8IzoLPP2By4V/qq4rLjibsilZcBfre0fi8iNPRP70
RC/qaMNDxN/ag1/Ivpqt+sKTeLBMztHKVFjiPv3WMjk3/cl2+j0HV8WPDQmE
VxLAPAKtzTjBxbW0W8lv7v7g95Y34LWajp5eqkCfbOXC1LlWv6H+F5zK18ny
Cn7/qBvwL4ILUffN/pr6dz0n5Dr3a+qAQ+YSn6+JFX6KVX4OvJGpPyUvVy7c
w++lc4KHW68xddG5nlLXM38r8Np/9ANn2UJdyHhPP7pVtLD8vhnqBv8y7ijn
12rzKllXWIzst3lkEn5x1lnqKYPLit0zPuVEXrqWx+7lewD+Oq8HdvHkNbk/
/ZIH9bYMo+hvU3ZQf8hUVfq09cdjyUu8XeGDZLoET2KmP/ybQX/Ii2oEgjut
eMY5TekGzh3Zkji13mXwg0fZhIdnDg9Cv/4pyFXJ9dRJvL6Dm5bvjx/cm4M8
dcM08LMCVyRu0xeDcyi1KhO3TluEf6qchnrJCH/qaIsHEh82fo1dH12VvCgG
foDm8Ffk0z4bIfZQyThb1mndJP63J59jXW6D4deXT+3PGFZa7LNyZAk432J3
5qdU/sC57luIP0guKHbZbAZPyRrzh7w3aSP4Qcc14+V7rb3os5ySEx7Xq2XU
10b/hge8bbXoqZlAfd68cpr7KjpA6h76tlzg8l1aS7+/9aqF2AH7bXvqr0fr
wpM0ycet/j+xIzPa0fcxx439KNuH/LPVN/z/8T+cW3gQcxye/hD/oB53lN9R
RwRSH8vXCD+Y+SJyvHEQena1DXVD/1Cx5/ZODf3NdwO858UVXt8OhwflMgd+
xYr6zJWIZa6IdaTIG3nN7QwvYXEO+skefIRH+Gsm/m7eHvgnsa2QkxcvxO6q
fTtgt+tnJu7yGCp/N4p9Jl6+Wgd/P8afvpdLS4m/9+SkjjO0tOCS6sLD9DW5
HkXubx+GB7S/FvXi395cJ/035G9HIvFq4xh42b8+on+10sCTmjGeeDl3iMQl
6oEJ5DvH2sjnlKvwprQYZ+q011vBP6u7QeRC3fRB8Cql8DXq03nPME/ilz/2
e0IpcKNVVak/l4+Gr+ToJvGwcvkX6640lz6liFz4wR/T4eXUbw6v+Xsv6l6z
V8n8DsW3DTzffG7gJTtSRH+ssi7EH8vGS35vLriH3X0cCw46xAt7ZdFnbDZ+
Dt+w3RD66e5n9ZZ931mOuUIdsol/s3In02//8IzkBVqRnsQLrk70k3Qphf3J
H7iR94NS+6+v0rf/4Sn91z8787v+CvXzqRvhD/bxZP5B3Gz6IvLvgA97uxf1
4NK3Off96dGnkAupPLWFveT1ZRR4c4/ur+R71RTqy/lOkx+W8gN3i/hNH8+j
COYH1RlI/8ec9eCqtyaLnChjm8E/2pWCPwz6PFm+n+USvOErXcnz7wfjx9do
5Pd78mI/wx6l9g96S1ymrpnFXIY91+HljmT+i717MfzwuCzYmbjT5AWeO+D3
T90i8Yk93I1zy+neXuTG4TJ2fscN5MP3LfZsdRnqNBmLEB/kyiF20v5z9xp6
/Jc+0sfD4eueo/6uTziFvdrqAT7T66jg7WrZePxtfIKsT/vcnnrqjtor5T7z
NAI3T3SHd1M7TPAfa2IFkVc1sBbx38xIwf3stLWpV3pMERzf/tKEes6AhfTn
RW4GV3C4zr7ka7GM/XUmj1z+GDx1zRqxW1bGrfTlN9eIT31qSLxiT4wlz7p2
lvhy6BL4xZOYh2GtH8B+nbsOHl/yE36kbU/4Dw2rgkdW95T5V9aUhfAwJzdh
7ljoDcE3lOJ70Ff/UvAvsxnwXEbeJz51PiH+QG06kvx6WCK45LIh9HcnXKbe
Glee+o5/H87PsS5y/oz+N9XvPXzcEcflVffaAC5X1wu7VXZaD1lH9dv0f59s
hVyHujN3ou1ewUfN7Ffww/0fMc8jsAl+V31G/HrnA/18o/cJX02ffB7cb2Yh
2Tf11hz6aI5sg7908xbxysBuxN2J1NnUucPgKYypBp41OIk8P+iu6JV6vyHx
XMPcwtMwS/2g7+5ZlMinfdcD3OhcL3CS8/S36pcGob+t47Dfm2PBifcMou40
f534TWXeU/rQ4wbI/Vgxg6U+as0+gH4nzIW3OjOGOP9pIvh2ppvUHRuuAB+a
Eyx4vHW/FrzNhTXQ7yOWnJsScx9cvjK8MbNqceplmeEV27dP4jdu9AcX9VmM
P0+cC3+49x/y6Rn54clPLM11chYhb9hwgPj0ayh42c1t1BXtfOhrsU1jRC/H
lIFvkhjCfIpmbvRvTH0P3v18M3F6wRPIk9d66vDlPDivWyZ5YcX79E32fMdc
q5Mu1MfX5sS+Dw0fJr8/oTT9CJc8mROV6SjXe+hFn9/SavBbWmcgX3Ftze8d
sSWuUK8NF9zFapIBfTp2l34Qjzn0t+dqBm9sRXbiz8lHpd9HtfLQ9/N+IfXW
u5nQq4tNiaNafRac3lqWlny9+xfmKU3fCs8o4yPmDqTR4U94xeEHwwfgh+eP
krxBv9aLekrzZ+zrLF9w+fmR9EtH5QRHnLKcz/ULIs644UOcmRxIP3MI/ZRa
x1ixj3b1XtifxP7oT3A4fKq7r6mz+waCr9cfQf42/Cq88U+Lpe6rvabP0S5c
E37hw0niv5V024h3m1j8/QVzWoyPhui9fcGHfutXdaj/eQ+FvzjuGfd9fBPy
WWIGvKCS7sK/sRolyb6qbScRhy9qKP5GO+AKfuToCW823aqFfN+Xet3RMtSN
HBzQz4L0y5rGAvxmrczw8x48og6Qf7F8X1EiqFdMbAh+/EFZIOvvXoW68d5x
2Nv9bshfpibUF1Kq4l8XT6NP6Xsp5kcYJvvxMxzee+aMEjfoG8oSh2ZLtWNf
9og9Nndkh68w8xN1wcPJ2IE9u8DJk86CcyYcJN/pMYZ6eeQ18JCEAvQTrS8J
v8+5OvjR/SnwCCNKkp/k+0if7Olr4NvXNjC/MqGQ2HN75Gfqh922EJ9WGil6
Y8YtY13dQ+BvTH+9EX0OlbxOW0Q9U727o5Zct9Y++o3bZADHiI8mLmjoxhy8
oyc4r8kNwMu/1WH+SKZz1BX8RjKvoJsj1/+xhXpq1ofE6TdnERceiqBu4HGb
V5dS8Nb2n0UvdmUDf/rcQXBKbU5x6k+TZhE3DWeehb4sB3y1W7rEi0be4ez/
5Ov0rbUtD45x7gT52YCD5A0tf1Fne/4FnqG5jjzOsx31nvmdZS6m2b4wcrOO
/NFKjY/N3NWQ846R8FAqpdY5xg8gbsx2SuRXSRwi+2a22wSf7SL94Oq8cuQd
gzbD5821lrrS3QjijiwnJZ9Q81dgvx950r8yIQO8+Lx16eeZNg78xrcCuJo/
c86sCX7UP46OSZHPj1oDHl7OAX/+7BQ4xyz6cHTtAX0rzRaiNy8scMNdM8Hz
+hcCd3AvKPi/0fMJ/a0uM/AvG7/jF84HMWfhYmVw+HRlmAs2tY2f/H5t/Jl9
0FX8mR5WED7N8EvkFfsi4WX+dIW3NNQBHO9oJLhWMV/pL9GWG8h/A/gVZmhv
4qdbD5kDdagP+fPZSOY/ZH8j9WWlTjr6vDdlZ26fMod6Wfds8J7Sd2JOwtH2
7EPXUPpIs5djDuCWZ/DVy71Ez7R3+Ptuf6nP5aZfTS+wA38ZvFXqDOrK7syJ
8fkLTyXRifmauTT4T+M2EJdfdKev8OAb+mkePKVvvdxEia/sDtfhnzsvjOec
vsp1zZB3Yl9NuwZ1kcOz4EcahQW3tJecgCc23ZN61M7a2JHMFfEzWknisRZV
wYHq2W+5j6+p9YCJEnfbSx2wI40Og/c8virxqta9RVdZ9w9n7r858xV0993g
Hp094aPuCcFuFtoMH27zQ+LWv1Gcw4rHou9mynjOZ9EziTvVWx3oR+xZlDkO
q17D80y/FjmedJs60eDuEvdYL99I36HerhQ8rU4fyNPjM3Ofc4aD8ybHYmc9
LoFLjBgP7z3qpcSB5hwbfXGqiv16exZ5+7gFf14wLzjk6zfYIZeHxCHx9FvZ
z+ORw6ZpmH+w6DZ6/lQlDmkUIfiqNnkY/WK/C1FPXrwMfnu1ZvB0L81GTo60
g8fomsI8q5Bw6gTaQ/LZ87fQf59G1KOzpM7pHRlKH9QcR3iLcWmXyPU+HP6e
8N/vZfgHrnMqhDy8pk19vepk5hfEtf/Y6L/3TZ+x/lKFuB+XP/SNLF0s8Ye1
fBr9j34fwZX+1AW3fFaDODttG3iuToeJx9rSt2FmqybybqdUGinnXOwJctq/
AnydWYXws5UbUBc2yEuUN23wB3Yo8fCF+vAV0qeVeptycz94R6/W8IaG/xW9
Nf/kp89wxGLkJlM97EyetvQ/lY1jXlzGbehV0mb44D/rIbfDD+BXnpWg/yJl
OX1VFeYwrzNtHPZytpPETdrQrsy3PFADP2NvwL665MN+Ro+kzrPzBrz+tD3g
57agD1OZ3pS607sn8P8+F4VPeLopc6L6ODFX6ehd+AVOvcnfAjuDYz1tIH5O
6fsEnu/RZHD0cnfgJ97/ityvmghP69wW+k5n3AJXLdyBPkmtU+o8z1HY/xZN
4RP2Gkx9psNXwUeNi8XAbSOC6X92ygI/pM1e5DdrOfr1Ps2FJ7fTknjEGH0N
fsOufOAX3yqLvzAGjqUP+GA18vM+abB/cX3gGVy4cw85mUOe36s3+fH9JJFj
5YcPvPNPTejvbDlf6p12rtS5P7vnM1e1QWfysOz0TdtBnoJX6bO5rpHdGbue
aFGneLOPfv7UOpH5di71h+716X/4WJ84O+1q9u2LSZwa7S64gxa2BLwv71L4
7QuPYm+y3qbuPLoIPI1H7iL3aoX74FT/5sDPqN2LPGttDHjLtXnkVTfTk+e3
t+C3jTyGP/jqC57beDx2ecYS8tzF58Fh8/cRubAXelNX31iPPLnxD7Gnyvhh
5K2ZI+griTkIzt3ka+r87+rcf43s3eR6kVGpfJfn8F1yfZP7VtzXSRyjRNzD
LrtPYx1OncDRHhTl3B4lE9cmdAdX63uJvpO84fDg01+ZLOseEEFe/VPzkM9f
9xI+kXnAhbjvqS/2Qe1GnlS/D/amdAvs7b5S8BuGuNJXcZp5Ofb+gvCc9Q78
vus86g3aYPFHijKafqCbfvjXDUMFH1EHBdMXkS4781JyPIVPlb0dc+LrTITf
+GyFnIs59A84zq8A6rqr6Iu1zkVRbyn6Gr5WrnbUzQsWkv363w/Sf5rPHii/
vyIHuP4spymyXw9Og5dq0dTph5Yjn7i8k3pdRz6vdlkKH27JcXgWfcLxm/uZ
b20ve0A+1H4e8WZeZ3hog3qCm30pDk/7ceFU/upyiYuMNePIa086kh+U3CDz
tIxRPuAxyeckbtdKVkEPNmwlvliam/pGERNeUTL2QntRjHrbfObGm297wddK
U4hzO/GdvOTYFbFj+um5+ImFK6mDFRoMLvIuK/F6hQT43vE1yTs8c4rc2EVG
EPf7TSaujZ5OXXRhFa5/6wj9fQPpb7S0QOTiVnr4hJfGgION/Ytdi1yNvfeY
yBzXpDHUg8uYEs/a9T/Dp1sdTz6x64H4IbvcH87vcHv2I0N/+KZ9YmXfzFnk
pdr0UszDqLpN5vno7kslHzfVJcw1SHYWO2Z/ySL7rgzMT5x8mL5Ie9Az/EqN
SPrMd3dfKveVdi762LOL4CiWwxPm+WX/DD9oeijx5oYN1HebN6HeNYH6gZb5
AX6+oT/5/xAd/uOS/YLvaXsc4Ov71GLe+hYn4pNBc+lXDPkt+Iq97yX73wq+
u7q2Hs93iEsA/3rjD69k4iv0Z352eM5ZKpL/ZO9Ofaj5Qfi3zj3hZ5oH8Cuj
XbD7yy9KXGRlqSc4rpb2FvHl3WzgWpui6IP8U4b8pusT/P3GsfL7Wp0r+P34
Uch9vb/wgdZ7ggfXgheqv5sH/jy1MfH2uW38vXsj+mNSwvCb284hzxuHSJ1C
71uKuWyfNsML2HoGfmeBNcLvNG684j7G+MDDqd5G/LgWs4B+q/qnsCMxfF9b
Sxytj0sGvz1Fv7H1eRdxsidzMLSY41zHsQvre7eY/PxSkOidmW8jcpI2G/zK
JfHot3Mu5idM/0uf/hP6YMzpmeBJvtoDzub0jD7l6fAgzaUd0YO9YeQLNc++
lt89Uw88stgl/HaKF3NQC+SgvqElsm9XL8pcN3tVCYkLrNN5iAOX1sV+XnlF
X/6gjPQHN24mcbz5/Rlz3yqMFN6mOl4h7uw4FztYL476xlbwBF2fSX7u/l30
x27ak3i1TxL54p7KxCHRwwWXMsu2Jd719xP51acjr9agJ9iv1fvhpSS/YT7z
VPg3evY3Ujc0/mnUF4algFs9uC59V3aZssTB/qHs75a9zOkIhO+rK/TbKYPi
6dP7QV+D+u05/KY5zNU1p/8gXy9wg7lwjR5gt/2bc78dhsAf3Mv8et3lO+f9
JZT+Yz9H8JHIk9jFclH4yfh+4L6LzuInajoTXxbqDP7xMSd+7G4h+EdlM8ED
z0VdVj2WAI86LpH6dIM12KtSwdjFkTsFD7aTX0v8rORfiTyuOCD7qd25Ludh
Bn2kz/vQCeo5SyPocy/dE/7buhatOK8E8N5Zn4h7Q3mOgTXUif04mxGc9kY4
fXFxc5nXsuo98XL+UNZfGvnXLzJHwAqeyrnciZ0pv//jOv63QgB1WJeL+OdQ
5oPbbzLCM8rhSH3iXHN4SDs+MEdXCRNev/bjjtR5DHsLdl1/RX56JR91390f
yLN/dqOfYWpzeFtPBwjvRs1YDN5HkMVciSbw8u2dW+BrXGyI3R/Ygzrc5fLU
NbWHwm8xK/eirzXwDXPf5n1kDlOd0/S778iBPPkV5Ht9z6Av+VswzypgMHl+
nknkwdOmUw/c013svxLThPh2/Wb0+VQR+DJfB2Bncn6Sfj19xRrysYSZxHnr
9tMXmLEDONwd5ieaA2/gRy+FMTeo3ll4msHeUqc0sr8HJzyyjnr22Mv0PTdp
g/9euwF/ULEL9Zbbqf1nfqOlzq38y4y/r5aNelomX3D/hPsi97pHIZFDvbUC
T+bmV5mzpqxOCy7WrhT8ON/M4AoPilHv7zFN/Lh5dQLzPRv3kvq7eidoG/rj
AQ8q6wTisx7HsPPzCnLOxzbCn9/UR+aOaHt90Jct9eA7RTowX/SuBv/zSzPq
N/0V/J7uQt3bIXUO59La6Pnt3zzfJMCZ+sn1vujH5Y/wRbc3hy8wiPmOxqEq
1IEHt8Pft+tNXJXmL/t6djh2YlU0de4BQ8FRPBaKfdFPjeQ5BMNnyRw/Kzw/
fXe/O6Hfx7dj3970IC7YxNx+q6cD860CJzBvfIMbOMv4NPS9dHdn7sZs5lQq
P0dTv0haAV7W+oDwx7S8r+Cd3/GkLrsygD6VpE/455cVsccVj1CP/vYP3MCt
OzihR1W+3yEI3uaxl+DthQuTd3zswNyvPYtbyvVWFWS+aL72cn3FiflAeh7q
UubxbMzbKLoA//ToJHPl+v0Te268m0P+k5iHvMLtNfXgWfA/rNodwDeKJ1Av
2nOevs2yTsyRaA0/055aHv9xPQf7ejIWPHTdIvbpdQx68HQx878W9sO+Z9lC
vpijAuus2hqeespU7EuhGPKRicxrtIJHEve+YB6C0u+krF9p1oc+j4rMfVYf
M7dCKXWG58V8+MH5BLR4i96u5L5rBTEPSH9KvLuiLPPx9QLY1SpNiN/e3uM5
CQO/gVM0uk0f7fIayM/xn3x+7Ff05W0y/NVMXzn3rjfgITxj/q1RdM1ouQ/H
lIHyvf06/Inqk6j/W19Zf6aO1LncHQVPtbs/oG6lFgP3npwJe7bdgb5MZTpz
uh2WwHv5O2IJch4NbpG9IPMHQl3nyLobfaVe9+E+/mNzCjzhDIfhLc44Dd+2
0BXwpGgDfGvFTp7nsyM38V6GGeBZH3vC4w+vQJ54qqDYI/PEh9T4ZxBx9+xI
+MmHfJGr9iY85odDqX+Vv4I/uNwOntqCb+QNP0+AkzfOTh/ah7XMSc4zDJ5a
Jp08NykcfsOhrcQtjSryfuMI/PQQT+x3uUX41/6zwIcuZaDvLX9n7ieqHP3L
iVf92ReeA6RmBRc1BmTivD0jsBvlcoDD57tDXPxq70bkeGLqHOVPxKVPc8Cb
meQj/G/9zyfwnz4l8UPd6jJH4NNN+GmRY/vLuoNzSX1TX1YY+93oPLy9S5Ph
D3YcgL0KLwOPxuURfSsTipCXDVzF/LWIDcxh+DgX/VvPc5fsVqPl+3rRfsj5
r+rgbD3CyM/HtpE+OfvISvpgug5mfmkQuKL2FL9qjWsA7yWoD3Yk/BJxhNca
qffYdVXy+t2ZmKOZLwr+TDqV+u5NcGn1+E724WQ++r7jDnMubkPGy991nsNi
X42gbjuqB3H0+tfg4Bd2gafHn5M+GCXcn+eyxSViNz56gGuc+k5dZ3hu4oId
S8HvVjIv2TjjBF5t+8KXKF8fHDN4Mvb6WUuJw+2ELSJv2jMVf+bgDt/0zhb8
lvsceDH1KjP36E0qz8njNH0RuzNyP45DxI8ZNaKY01MUPVNW/Yb3sJj54fpl
jT6I4MPg+q/K8hyE0ZOIEzsVoR+4cQP86gVfeIehy2Q/1B7wULUXSTwPb1hN
sUv2xjzwsDca9Jl1mQE/Mt9W8LpIW+pXVv4ayPH0UuKH1RP16Kvo40G896KY
zK1SzkWRPw2wyW8qHQHnSEPd1WyVETv9oA7xaVU/eG8TS8ILat6UvrmCXcEp
fZKor23Iz7zZsEnEZf+ewfNo2gL7qPXke41Hw7/s5iZ2yc7pCP8wMpI69XB/
7H4anmuidPOkTlUqnfC89TTdmJv68B51hPFPpS9YOTqW/sW5dYgP0oTxfMST
/sjFwRvUXz12Ml9l5Trw+NAK8EW6GvA0jj/Hrpy8T97U+xT41cto7F61dvBa
xj5Cf9cwz8foMoD8osN98NCy27HHHRZSnx9G3VUL0uU87euV8Uc+IeCrIbXh
y42/DN6/cTv5TQpzm+y+w5kf4lqFfP8GOKGVFAxfY1wV7PHN9sQxMxojZ/38
4DVM/kRe/b4j/KRevUTelf45sBPd7wj/Wy83F3vmkEvkx2pOv4L+dB28hAyt
ydeanydffUV9WB28i+sve8+8o4gkcJ8QeP5W87+S7yvTm9Cn33Za6twjnTl6
alZ4ZD7p8bt7NoErpXeDJ/j1HterCy9HueTAOW/pwX1dfACfenzq3NsvfSXv
UurWZC7CmqU8d3JtW/KRW5OpJ/ot5vlN1XOAy2QbCH+sqS849oCB+Ino2vAf
jDTUQ4pslXkzxsnf4Hov8jC3wjOr8EPtg//o4y6ahnPMnQEcpeF56nLDz8GH
S1MX/k7ZnfB90/cRXE/9dpM62vxMzE9p+hj8s1YHeGRnm1Anj6+J/c4zUOri
mtMT7GIP5nCpdWsxlziGubBmXeYLG1FnqddmfEd8MfEU8fDirMQdq//hxxpv
Zu6gkpm81X2R4Jr6deZo6g3diIevPZB8VLGdyZ+/HRQ9NpQn1NN8BlD3nQ4P
QU/XUeyX1W4Ben7DhzkR9+6JfOghsZz7xjD4IqW7M+/kdB3wFoce+M07p1nX
1efMgaxGX4c5oTt6tnsR+cv1LFzn+xephxgOTclTwmrz90ZXwAlujwCvjYxH
zyq5gHcE+IEzuCwFT31dkfpf1BDiwMPzRV6NzmWRr6zgheqdGeCQNvmlva4x
eNv7F/Nk/VsjyAcTotjP9/XAeWbeQI+bniKveX9A9FXf1Q0+UbHz0hdjv0rL
7855SB52yIm8o9d+5GCHv6zD/DAUntrpzCI/ep8R8j3L6krcVT2f4HfahlPw
cb3PUW8ufhG52Vef+aJ/eK6HFVuKueon4GsoJ84K/mwn3GFOxecS8l6JTwsf
1icNdZzSG6hXD2tEf+z9X+Tbfa+InzEOYQdM8yv8khaVyOv3V0IO2zVjLlBv
5ixr8Q+oD0S3oQ40SIVfvb8qdTAX+tqMppuw70oF8jSNPhRDe4rduWbAW7gO
LqrPbMI5bxtHvl9pB/GfV1XyrNnu8LKivrCusfuQu7Eq/mp2NvZ7SFlwy/LT
Jd5St35kvxOWwgu/+AYe97hD2CP3c+QL9RfiH3YVxu9mz4jfvJws9Xe9lDN2
tAjPfdQfehAnZijIeVfvQX1+QA/w4A8F4BHfG0v8NO4s+dQnFZzn3DXqdVY1
8OeBxDHqvsvwY9Op8CZ+dILP79iR/oPkn6yzf0PqZ3FX8bcrwubJ/a0Loj9m
6XGel+D9nP6/X8zjMKd1os+i1294R32d6fv24/laRvAb4uD0FdC3NtThlI7g
6EbzmpzD+l70P71eCI7c9B14llcC+7S+LnXlt2HgOb5/5LkMyoIhcg5GUKD4
c8vFSZ4PYjsGUc9M05DnJTrWoR8zaB79gGnc6Ffwuwtu5wguoAbkA0/Jdgb9
6LgevD7Jkf7Y08S11pYS8IJ+T6J++Mib/pN9n5lnN8aP/HTbcK7THX+qZptE
/F36IHhaylTs1qnanWQdTdqAs6ybB775Iz/4Rrvq7OeSvlJ/sro9Y07X3uz4
0/bYQSv/XK4/tJjopdX5KHX0toOYqzqwJffZKJHnjz2byPtMOcnXfjuC19Qa
Dk/48jvy8n2J8KxuMXdZXe7BHO+X/SU/Udc6M7+j9HB4bsYc8tf3Z5gvmoF5
Ktb25eCjHYaDI53YLHZDG7mHeR07OmPXvZfDc7sXif68j8Fu7s7GfbuPIK5f
NIz4JS4//uIXc3dsnXhWXzSS+Di+AOfZANzE3hIkdUHr2XG5TyvpMn1DJ/qC
P24MAa/ZtJe6SfPjzLPo4gOv6SZxpXE7EBxrnzvzNhx7ETeV9Bd7Ye04K/qp
ru6P3ipXqWtG1eN5L2nbMB8i2T11josLfMzBh5jfGFye+L99C/DkOUXEnyjd
mS9lxVjwFeOHkz93GsV5rnmN3b38mXNp24Q4xYW5/kbxYJkTYo1OB17TawFz
y540JQ4rCa/B2lmX+KW7j3xej3aV/Tc3V2UO0a+V2D3/bdInYH1uDI59rwi4
f+9S8D7sIPL3qTp2efNRzi3sLHmUZwT8qYbIh/U+meesFNglfs1wY26H/ZC+
CPMFdVfzWDz148HX4MtkMMijxhYEB3I5C4904Xzmbq8dSRz6L1Tkz3o8l/66
ckUk39B+72Q+b1IIfi3jGfQ4dj68g9zOUjfWHuWX+FGNKyxyY+lL4Hc0fk5d
rN9u8prkA/SLZkqL/m/2IM/sSL+F6uQo/kcvPYF5RSXrpPabTCaOHvGP+tWG
zvSlp/8KLrF8NXlAiEb8MLcOcn5cB5eNvsI5XV1EHre0zBT08r7osVaoJXjO
6xrU/zq9Bf9q5Eq+7+9IPTU0E/Ptx5bA73syT03NmRO58fvG3LftM+kvWe0i
cyaVXB/Ej2l6HZ4P4viePPq5E3NUr7qBX2c8SVw+3QW+VRzP0zJ9o8E9H0wg
L32UahcfJzPnvEcwfmNQB/oarifjx4cGgfP1sYgblqTOr/uqEg/pzNc0283E
nvuVoa7VZTZ46Ev4Rfp5J/jFF5hnZwVO5L6jJyCvL2sxryvyKXyi+FPMjb5Z
jbiteG3koVpu/GNRnTkseVfhBx/wvAd14xXimm1dotG3DKn9LGWoL19YBn63
/h68udMLJb9QbvoS5y25DY6xdh5zAvtXhVcZzjkaDakv20G7sIslesLXTZnG
fPIiH5j79+s21+uT+pzFujxvVzldCXuZcCQ1bv0DT65jVpl7b174zLzKEQ3F
vhnruwi+qvu9kfkd5oFQ5KJdb5ETq3d+4pKW1KutLGXw294bwD2ahSEXNSOw
Y+syoR/+/uDwnWL5+5809BPsGoL8lQynTyWfM88vutuFeG7FN/Tm3j3qAFE9
OI/vG8Hd8t0l3oidiF41mMP5RmQRfVH3HiSvKp6dfLJwBfCHGTxHR1+ym7rq
r134gzu9wTHau5AXJO9hHTNGwheb+R55KeANnzqiEnnBtOnU5Tr3FDzF2lAZ
3t9u6q367E7wOc41J0+K2Y6eZnlOnWi4P3MFL91Gn9K44r/zRlLvuXYEHOBS
AryvyK3U3Z82x78c+i3yYyzqAx49Nob85/wU5LzdbvTjeBfqf4Pbw3cPph6v
TLtG/BbzlXjcdQ/9Pmss8ut0SeT5Q1zoq4/cK88B0vaspx/qbXf04hF9DPZv
5hMopVPnT3UIoz4WmA+emHMz5rwnzQKXrKyjJzcT4U1feM36p9Ugn80YKnGh
cbQB+5DE8yK0TM/hg875Ah72VE+dN7KHOUiNK8F3GeROnD9xBvzIHCfJN777
U5dpVpt6p/dvwensnqupd95mjrnqkvqcRt8S8EaXfwLnzlybPnk35gMYGXek
9v3nAl917UYfUt1k+PPJz+FtVJwFb/XYAfLX8s2Q5yHH4FW1LcTnzo0C9w98
nDpP+iV1i9js8Iae2jynwymQOZfVvKg3bFokOLW2/RJxQcoc5rHMCsae5+sD
PyGHM/tRYQj18ti1Im9W6Er4E3Fv4IU61DfkuitP0jfRuBb8kg034RvE1Pwg
6119jL7qx+Oo67xugN1t/YO6+frWzJPONYnnrrlOBveu8xx+8JUK1ONqZaF/
YVZT5PNFOniX447wPJCcV8nvniWBExYbglyGzcavlZ5CHtg8dR5p+s/MEZ66
QOJdM3Q2uPX5UOq5P8qBN7y0sFc+z2ROkzWgNn2MFs9HNFv0lnqquWMWevvq
BTyJESPFDymFPsG79T6Hn1r2Q+o8ejpX+N0FzhD3ZK1OX2P3L/Cw+r7Hb7k0
EDzaapvK616cRuan6m9WkEdOzYddORgqvAFtZj14fo7HqJfvnIm+PvswSfbx
6V5w0x4NBV+0T3/Dvx39RT/84ffwaQJOg481SJT9V2feETnRZ9GvbvpfB5c8
Ap/F+t0afPBwOfR82wrirMDe8BFfl6JvYkUQfLqPzegP8xxIfaN8EeZDfZlH
/lp6H/hS1rzg7KHNxQ8p7Q+QP/zsJXbVKFGJ5x58jGdeT/6P8Fd/2NTjV68g
b1w6in6Z5f48f+hbLYlflZYXmOc9vRV5zNq/8OsG/KFPcV1a6h9pE6i7tjwq
cq8O5TkoZnsH/v4LPpXul4i/+DfoIp+fI3i86rGTuHozfHD9CM+ttGuDdxvT
KpB/H10Mbn25DfzaeufJR/xGghcceCH22PhQmj7J9ffgO7vD2zeqZAAPGXqK
53k8nyxxsGEcJN7LNQaeVD544uapfuQ52jPmPzScwvOI3JkLYx1Mpv6dawV6
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
               "], "Version" -> {12., 0}, "ID" -> 8874117158160028988]]}, 
          "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], 
     "Output" -> Association[
      "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
         Association[
         "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
          "Output" -> 
          Association[
           "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
            Association["Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor["WrapMLDataset", 
                Association[
                "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
          "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
          "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
         Association[
         "Input" -> Association[
           "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
          Association[
           "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
          "Processors" -> {
            MachineLearning`MLProcessor["ToVector", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
              Association[
               "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
              "Output" -> 
              Association[
               "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]],
               "Version" -> {12., 0}, "ID" -> 9350965027122040]], 
            MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
              Association[
               "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]],
               "Index" -> {
                Association["algebra 1" -> 1, "algebra 2" -> 2]}, 
              "MissingCode" -> 0, "Version" -> {12., 0}, "ID" -> 
              4646141061865841929, "Output" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NominalVector", "Weight" -> 1]]]], 
            MachineLearning`MLProcessor["FromVector", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]],
               "Output" -> 
              Association[
               "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
              "Version" -> {12., 0}, "ID" -> 5413477685440795795]], 
            MachineLearning`MLProcessor["FirstValues", 
             Association[
             "Info" -> Association[
               "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
              "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
          "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
       "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
       Association[
        "algebra 1" -> 0.9601990049751244, "algebra 2" -> 
         0.03980099502487562]], "Prior" -> Automatic, "Utility" -> 
     SparseArray[
      Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
     "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
     "Quality", "BatchProcessing" -> Automatic, "Model" -> 
     Association["Method" -> "NeuralNetwork", "Network" -> NetChain[
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Linear", "Arrays" -> 
              Association["Weights" -> CompressedData["
1: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
UnRUs8N/AWB+Pz0=
                 "], "Biases" -> 
                RawArray[
                  "Real32",{-0.014219971373677254`, -0.008390722796320915, \
-0.01925794780254364, -0.01775827445089817, 0.012931115925312042`, 
                  0.024045327678322792`, 
                  0.0033668482210487127`, -0.01450364664196968, \
-0.016741931438446045`, 0.01665191352367401, -0.02091415412724018, 
                  0.021659841760993004`, -0.00026187030016444623`, \
-0.016922548413276672`, 0.011069797910749912`, 0.0037715111393481493`, 
                  0.008574344217777252, 
                  0.00955519825220108, -0.012632432393729687`, \
-0.0002680719189811498, -0.01619068719446659, 
                  0.012651240453124046`, -0.005069066770374775, \
-0.019227072596549988`, -0.018176063895225525`, 0.017087170854210854`, 
                  0.013170750811696053`, -0.016980180516839027`, \
-0.015785202383995056`, 0.01265804748982191, 
                  0.005608792882412672, -0.013070055283606052`, \
-0.0027584703639149666`, -0.017754778265953064`, 
                  0.01696954108774662, -0.016421472653746605`, \
-0.006315331440418959, -0.006881357170641422, 
                  0.010776691138744354`, -0.019758734852075577`, \
-0.00206612516194582, -0.013365511782467365`, 
                  0.02168169431388378, -0.01915561780333519, \
-0.015327349305152893`, -0.01677614636719227, -0.02654552459716797, 
                  0.011467947624623775`, 0.021266786381602287`, 
                  0.007068729493767023}]], "Parameters" -> 
              Association[
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                11, "$InputDimensions" -> {11}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "2" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[2], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                "$Dimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "3" -> 
            Association[
             "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
              "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "4" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association["Weights" -> CompressedData["
1:eJwtl2lUjo/Tx0uoKJRSaadIKaW9+5pBi6ylEpWlsiR7iMJPkrRIG5W1siRL
2YrQfc1UCCFk3yMSpSIRZXn8z3lezJwzZ97NmfnM92s4Z7l3SDcZGZlVCv+S
d3DEmJUrg9f69PxfMT94ifXIJf9rjvz/mP78Nuk+1OZ5+nrovNCVSl5qsUdp
NMMuT1H3Wy6Ea4YKx95rUpONMaSEpKHaoSi6dd4FWxUlGLmvQOSWFMHzZj50
OftTdHQmZG6Mo0SnKpC9NYdP2ctipJk8Ou3rw9Yd03BCr5U0YWalpGD6eKyL
nkBK9q1UfGAsDbPP5O9laviqayKb/NYS2xr7U8HXbRL92eqUZVkKGR45ThVb
8+lSpC52ZJhAfVQzTLy1Eo5GXQbnA8ZoucUR755eAj/H+HChqw+UH0+AwvSL
tE53j1OIiz2vX/tU7Ph2je/m23Lf/lL6mDvMyap1GU9elScuVEoUi1vXCzG2
f+jTbDfs1PoMfHO2VKu8N1/z0wXTUTPo4YAkWDKugiwvqIPM72jst/s4Dxg/
kXdr34BW/a3SgP5DQGOsEUcZmfF/c8uFfgv3QPbWObTsrT7vUYhD+1hPSG7X
Y78j38T8OY506GIVKK+ZQoNXvoJGxTRO/BbLPwZ7Qt2TLSgjnMNdj+ZzlEGq
WC17jOWzw2lSzly0T87loGWLYVDwH/I/Okvyw2Inr3oyisqMdHFC1BOYOUWG
Cy8sw7aKiRSyyQCLeu+g/iMjOPBvhrjXrDvpbEqgQ/uUuLlpPUZI1KjRdDYX
NW0m0aVdIpUZD3NNmkQtnzpIKd1Kv9Y2sEtDCk2Mlec7Vqq8QG8Lt56dLri8
dIHZ/cuozGs/TBsupbzERXRa6ReZFLaS+oT+KJg1g4f+Egx9eUWQk++C0ikK
vNlxHF7MPSkIY3yxNtoAV610QpuYRdimaQPBm6ZDz4oxWNwexKdlCtDykyqN
UDwk3m6xkKhr1paWTNvDRRU1tCSzQkxNahN+O16iu3YH0MB2ErmodON5z3P4
uqoruVW7s4G1Dg+tjAKZvwStO21w6WFLWPb4AsQlRKOa1Q56U3yODD8sw+qy
GchLm0XvVS6YHbaFN2k6QbR0GW7Q+kNRtyygsu437FYpJw/zrw7T3g5i6+Am
uj/Mh+c5u0Bi7nLu1uOueNpZA+d2bxS9mwvB0HGsoGL5Hh5Yq1Ga8kdBpWaD
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
                 "], "Biases" -> 
                RawArray["Real32",{-0.004677269607782364, 0.0182024072855711, 
                  0.014909295365214348`, -0.01904447190463543, \
-0.017199372872710228`, -0.017936332151293755`, 
                  0.01034516654908657, -0.02483738213777542, 
                  0.005593493580818176, 
                  0.014321517199277878`, -0.016901928931474686`, \
-0.018371177837252617`, -0.017420750111341476`, -0.011217344552278519`, \
-0.013560398481786251`, -0.014345601201057434`, 0.02046070247888565, 
                  0.0009755283244885504, -0.012391741387546062`, \
-0.008676379919052124, -0.011529273353517056`, -0.019419144839048386`, 
                  0.009033767506480217, -0.007057793904095888, \
-0.0036800072994083166`, -0.014375338330864906`, -0.005155949387699366, 
                  0.015301935374736786`, -0.018655121326446533`, \
-0.012813462875783443`, 
                  0.017316056415438652`, -0.021588478237390518`, \
-0.01298624649643898, 0.011465963907539845`, 0.013914467766880989`, 
                  0.025555064901709557`, -0.006218734197318554, \
-0.024299561977386475`, -0.02068089321255684, 0.0037291394546628, 
                  0.01055687852203846, 0.019132068380713463`, 
                  0.018618609756231308`, 
                  0.009547569788992405, -0.01481543481349945, 
                  0.028295345604419708`, -0.014645951800048351`, \
-0.01899939961731434, 0.01585252583026886, -0.01641693338751793}]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "5" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[2], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                "$Dimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "6" -> 
            Association[
             "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
              "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "7" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association["Weights" -> CompressedData["
1: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

                 "], "Biases" -> 
                RawArray["Real32",{0.0044943057000637054`, 0.0254659503698349,
                   0.02373005449771881, 
                  0.02349044196307659, -0.020812401548027992`, 
                  0.015173508785665035`, 
                  0.016261763870716095`, -0.028129946440458298`, \
-0.011557629331946373`, 0.017643840983510017`, 0.014887656085193157`, 
                  0.0024811909534037113`, -0.00741411279886961, 
                  0.001075347769074142, 0.016083749011158943`, 
                  0.004919718019664288, -0.019205346703529358`, 
                  0.02740822173655033, -0.025037134066224098`, \
-0.008567326702177525, 0.018536409363150597`, 
                  0.021259982138872147`, -0.02083679847419262, \
-0.011453867889940739`, -0.00455976277589798, -0.015075378119945526`, \
-0.0077283247373998165`, 
                  0.029880361631512642`, -0.01266927644610405, \
-0.01996348612010479, 0.009226345457136631, 
                  0.019962919875979424`, -0.0166824609041214, \
-0.020138787105679512`, 0.02157563529908657, -0.019636375829577446`, 
                  0.0012388636823743582`, -0.02141542360186577, \
-0.0022245205473154783`, 0.004987578839063644, 
                  0.016963280737400055`, -0.016119299456477165`, 
                  0.019688673317432404`, 0.024327270686626434`, 
                  0.016114206984639168`, 
                  0.017664402723312378`, -0.01083811093121767, 
                  0.01625884883105755, 0.01923867128789425, 
                  0.002737176138907671}]], "Parameters" -> 
              Association[
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[2], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                "$Dimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
              "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association["Weights" -> CompressedData["
1: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

                 "], "Biases" -> 
                RawArray["Real32",{0.012672399170696735`, 
                  0.0167919360101223, -0.01949238032102585, 
                  0.0036298197228461504`, 0.01567179709672928, 
                  0.018000908195972443`, 0.0070649501867592335`, 
                  0.018062185496091843`, -0.023623932152986526`, 
                  0.012500317767262459`, 0.001136362669058144, 
                  0.023395346477627754`, 
                  
                  0.02344183437526226, -0.017543718218803406`, \
-0.018840497359633446`, -0.0136978505179286, -0.015657292678952217`, 
                  0.019043488427996635`, -0.014189793728291988`, \
-0.022055864334106445`, -0.015924643725156784`, -0.011688475497066975`, \
-0.022916549816727638`, 0.007737933192402124, 
                  0.008809502236545086, -0.0032047193963080645`, 
                  0.019691133871674538`, -0.015042400918900967`, 
                  0.023572629317641258`, -0.019663777202367783`, \
-0.0017446670681238174`, 0.018938321620225906`, 
                  0.01871323212981224, -0.0007426048978231847, \
-0.017355771735310555`, 0.017233937978744507`, 
                  0.013564465567469597`, -0.022274645045399666`, 
                  0.018837913870811462`, 0.01728791743516922, 
                  0.017257245257496834`, 
                  0.014226733706891537`, -0.02332366816699505, \
-0.024497507140040398`, 0.017533062025904655`, 0.02080821432173252, 
                  0.015779143199324608`, -0.02165430225431919, \
-0.018120814114809036`, 0.012667982839047909`}]], "Parameters" -> 
              Association[
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[2], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                "$Dimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "12" -> 
            Association[
             "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
              "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "13" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association["Weights" -> CompressedData["
1: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
                 "], "Biases" -> 
                RawArray["Real32",{
                  0.018763260915875435`, -0.02048816904425621, 
                  0.018465949222445488`, -0.01980866864323616, 
                  0.017937298864126205`, -0.030852776020765305`, 
                  0.015847785398364067`, -0.006064843386411667, 
                  0.01806885004043579, -0.026434898376464844`, 
                  0.018733004108071327`, 0.014287051744759083`, 
                  0.015511523000895977`, 0.019917767494916916`, 
                  0.022512171417474747`, 0.02289334498345852, 
                  0.020351560786366463`, -0.013651360757648945`, \
-0.025057746097445488`, 0.023236948996782303`, -0.01780305802822113, 
                  0.00890724640339613, -0.016178632155060768`, 
                  0.025338131934404373`, 
                  0.018892081454396248`, -0.02339313179254532, 
                  0.022230073809623718`, -0.019924484193325043`, \
-0.022207388654351234`, -0.01890530250966549, -0.01931050419807434, 
                  0.007724237162619829, 0.018929246813058853`, 
                  0.026929572224617004`, 0.01661665365099907, 
                  0.025968460366129875`, 0.016180962324142456`, 
                  0.015058803372085094`, 
                  0.01576840877532959, -0.0216046255081892, 
                  0.023729726672172546`, 
                  0.02567608840763569, -0.0156379546970129, 
                  0.01262296549975872, -0.017962351441383362`, 
                  0.019535675644874573`, 
                  0.015411603264510632`, -0.012145803309977055`, \
-0.018913524225354195`, 0.026993798092007637`}]], "Parameters" -> 
              Association[
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "14" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[2], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                "$Dimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "15" -> 
            Association[
             "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
              "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "16" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association["Weights" -> CompressedData["
1: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
XadYxxUwRDcTJ7xWhQkmn+h5UCEPXpcDm+7MwPTVcbAzLpmstPexatV7GHqN
hX6aFvhmtA48X2eDHrNMsVTRQbiXlk5VA+agqXkuvQk5JwRd/Sgq/PhCl27Y
ofux8QgW5+BX8RlyDlyET5uqBGlJFB3/K092icZYka0P9TPXouRuHtT4OeAM
a01M+aFM3cbZXJUylmZlDKPL09oEBRjO6um7YHx6vOCsVg8BT4P4bUWOmDy1
Wtws3wxLTM5z+rcvtORCBaXctsGXwaPYYKku3yl1FxJNP4kmlWquzYGb+Pne
OL506B2ZTRMgbnsi25hNoOG71TD+7x7Jqcu9aPq/drG4PIJrwJBlzDW5oaqG
bFSVcNvt/3gmXhMj54bTm6VXoaVtOzy/YgR5qvvAJ1+L/w2qp4jrM4UFBn5O
ESmx2HfbAD7TcR06n+WLvu4WpFHkAD8Kh9DvfEWMGOBPFxsqKbVnEFFUIFkc
lGWZVTfEg0VGiGq36I1Rf57fsIJe/jPEw2fGwaTXl8FwQyaPqaqGmClDUc75
EO03KhYi3yYKWZ7a2P+kJqeu/AhyP3eKqkei6GrjYuav18Sfdca8fk82DCt0
pqnfI8XUJdu5cnYujApTgpHtU2hHT1MalTwIxywpFnwfbBevq1rj4yhj1pmC
1PbQFUzMrol3Pa9T+92eZHJQkQ/7biLTFh2ete0fzXUU0L86B8okbZBbdIEi
22P5ydNcvmWSRnqZR0lh+T+InP+QNMuS6eYdOT404yidfNcN3mX+vCVNnjS6
f8EA1RhKbGpAczlDkGRHid5Xl+Gabg1MLTvOc2IHcf/uLNbP7CM+yu6J/t1u
otFWP85KA34y8q7LtzG7ST++mgJsd3DNq1b4rlFNE2wicKFiJFaV6KFcVSy1
Fjly9JND4nElKV69zgn3NZXQucfHhI0v5bgzOQo+Hbgn5gerYJjdY/p5IRRm
Gv6FGhVbDnqaITmX54inJLFwbNMjuLPImP3bqyFeVkV0K9ghxGxVwL/Jszl+
Vxjs00jGm+uGsZZbs9BHV4Z/r7GnT+69UXZlL3SOiOXbgacp7V6AJHRqvfB1
XwWVXvwtPAn1pL0R+vxu5ye4dGs7f9ZscFF312enc7s55qABm8yajkXVKZDV
ZxrM/xgk0Y9nsaBYC0xbT/KDUleUXllD1w6WQg9BE7aU6NCpr9NgvFcbGXjY
4AWZTGpOeCnsuReNL0/eAePtMXhwdCWMqBoP0zvP0+6u1ei6pFK4uSlIUH5p
hiYH78B5O2+4X1smHO+rjw/9PFHtzmZS+G5PvWZnMw8+TnNjE2DNu2WceHkH
dlo7CYsWHYEr4SoY+uQXTfP+Q4pjCmGl1TBe1GZO/vFq7BC8luZW7Odrp9oo
zOEwOfm44ahtsRQT4oNJneqUMqg3qneZ8Z+Jdnzld5u4Z0sM3ehvyraWe+Bq
7EWabN9GHT6uPOqeO27r1QXDPOZzQ8ozyd26EHZx7k/2sQ2UMyQe2u70hPaH
UWKKxX5x3MZICHt7GeR61dCz3e2kN1CE84UVkKxtxGtnXIRsKUXK/eAn0Tkq
Cg7uXrwyxod/tUzhu9OmiLMlipCVshEFVkHZ7uvi0r1zxJ/zNPCV0UoYePih
sGzkJFSTUePTzv04deMhrHMYhu1SUmAZGwL/BxLMEb4=
                 "], "Biases" -> 
                RawArray["Real32",{
                  0.029126860201358795`, -0.01872669905424118, 
                  0.01908004842698574, -0.02106461301445961, \
-0.02178063802421093, 0.019857561215758324`, 0.015257746912539005`, 
                  0.003886705730110407, 0.019821327179670334`, 
                  0.028560202568769455`, -0.012105193920433521`, \
-0.02155754528939724, 0.018479811027646065`, -0.008085298351943493, 
                  0.016863711178302765`, 
                  0.021621622145175934`, -0.01841966062784195, \
-0.019767219200730324`, -0.021811284124851227`, 0.017250696197152138`, 
                  0.005966793745756149, 0.008290030062198639, 
                  0.01890457049012184, -0.018673766404390335`, 
                  0.019505588337779045`, -0.0020668436773121357`, \
-0.018132563680410385`, -0.012350698001682758`, 0.01881508342921734, 
                  0.018738824874162674`, -0.021611757576465607`, \
-0.01982264406979084, -0.02783443033695221, -0.028704822063446045`, \
-0.020844483748078346`, 
                  0.026097895577549934`, -0.014355425722897053`, \
-0.025643330067396164`, 0.020431874319911003`, 0.023363925516605377`, 
                  0.019481074064970016`, -0.021461226046085358`, \
-0.0201251357793808, 0.022336333990097046`, 
                  0.019901761785149574`, -0.023781051859259605`, 
                  0.020437126979231834`, 0.007906614802777767, 
                  0.018578561022877693`, -0.035126909613609314`}]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "17" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[2], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                "$Dimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "18" -> 
            Association[
             "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
              "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "19" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association["Weights" -> CompressedData["
1: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
                 "], "Biases" -> 
                RawArray["Real32",{
                  0.017296630889177322`, -0.025197045877575874`, 
                  0.02503150701522827, -0.019182054325938225`, 
                  0.01637253910303116, 0.02008182741701603, 
                  0.021009372547268867`, -0.021706249564886093`, \
-0.021764975041151047`, 0.006988979410380125, -0.024806160479784012`, 
                  0.02037597820162773, 
                  0.02051401324570179, -0.019635656848549843`, 
                  0.017919287085533142`, 0.018883660435676575`, 
                  0.02360399253666401, 0.017532970756292343`, 
                  0.01893436722457409, -0.024700284004211426`, 
                  0.02095041051506996, 
                  0.0041910321451723576`, -0.013082007877528667`, \
-0.019278747960925102`, 0.009068408980965614, 0.019329536706209183`, 
                  0.021095793694257736`, 
                  0.019642939791083336`, -0.025174427777528763`, 
                  0.021182693541049957`, 
                  0.01996673084795475, -0.01882988214492798, \
-0.02219504676759243, -0.018508581444621086`, -0.017520125955343246`, \
-0.02443285845220089, 
                  0.008877057582139969, -0.02151372842490673, \
-0.013689596205949783`, -0.019931694492697716`, -0.02112925983965397, \
-0.02056940272450447, -0.022378239780664444`, -0.019776269793510437`, \
-0.025638025254011154`, 0.01637476123869419, 
                  0.01982070505619049, -0.020080335438251495`, \
-0.020545590668916702`, 0.010311230085790157`}]], "Parameters" -> 
              Association[
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "20" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[2], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                "$Dimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "21" -> 
            Association[
             "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
              "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "22" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association["Weights" -> CompressedData["
1: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

                 "], "Biases" -> 
                RawArray[
                  "Real32",{-0.020680958405137062`, -0.020530492067337036`, \
-0.020448407158255577`, 0.02043999172747135, -0.02025863155722618, 
                  0.02286321297287941, 
                  0.021439624950289726`, -0.021957680583000183`, \
-0.021703917533159256`, -0.020671812817454338`, -0.021410947665572166`, \
-0.020374231040477753`, -0.02083176001906395, 0.0211435966193676, 
                  0.02094275876879692, 
                  0.02090648002922535, -0.02097974717617035, 
                  0.021988520398736, -0.021974213421344757`, 
                  0.02112419717013836, 0.02317427098751068, 
                  0.02150958962738514, -0.021038386970758438`, \
-0.01988491788506508, -0.020012909546494484`, 0.020081786438822746`, 
                  0.01814720407128334, -0.021635951474308968`, \
-0.023062365129590034`, 0.0197750236839056, -0.024108033627271652`, 
                  0.020492417737841606`, 
                  0.02099958248436451, -0.021102525293827057`, \
-0.024037912487983704`, -0.020142478868365288`, 
                  0.02036750689148903, -0.0229486133903265, \
-0.021309131756424904`, 0.020189855247735977`, -0.021408628672361374`, 
                  0.016822533681988716`, 
                  0.021212583407759666`, -0.021997256204485893`, \
-0.020864341408014297`, 0.019587311893701553`, -0.022022703662514687`, 
                  0.02082967758178711, 
                  0.020000703632831573`, -0.02124970778822899}]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "23" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[2], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                "$Dimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "24" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association["Weights" -> CompressedData["
1:eJwBvgFB/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
AgAAADIAAABazJW9gOOYPaqEKL6gUp29ihalvqaz2b0MXls+/g6dvTLBEz4x
n3K+mPAdvmGspr43MCm+PHdOPoDjPT0m/Bs+jB+dvkuypz6IZZO+DulMvU8Z
vb3Bj7o9g6tkvV3Pcr7xbMy8Fqs/vvZ4lb04yPm8X9AgvX2Paz4ql8q9W4lu
PRQ4ez4lc948/OydvkJerTycBY0+93kmPT3hQD7nGyM+UKJsviItkL20IZ4+
wXaYvi2ka74nGEI+0gCvvddAnz5U8389tiUWvhFThz4Kd1Y+afm2PQ33hL6d
tu29HbYhvgkGlb5GcUs+E0JUPr+YgrzwubC8ibeTO7CwiT0tu4y8r1Bivisn
kb4IJgU9ubvwPTZ9KL7l0XS+mozsvZwrC75wb4E+u846vi8E7j1HGIO+Ryag
vVlwpT75yRK8maaUvGuhob0VeJm+62knvjRtij7sEJG+nzJnPrnRTb02ZdQ9
6YKcPh5Aer6X1eU9U4yFvZwLoD3jqu29dDK6vTKodT0uh50+kVeSvTrYSL51
qws+bv7NRA==
                 "], "Biases" -> 
                RawArray["Real32",{
                  0.020896997302770615`, -0.020896995440125465`}]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
                50, "$InputDimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "15", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "16", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "17", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "18", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "19", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "20", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "21", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "23", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "22", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "24", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "23", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "24", "Outputs", "Output"]}, 
          "Inputs" -> 
          Association[
           "Input" -> NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
          "Outputs" -> 
          Association[
           "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
         Association["Version" -> "12.0.10", "Unstable" -> False]], 
       "Training" -> 
       Association[
        "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
         TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
         "TotalTrainingTime" -> 0.6309646856322195, "MeanInputsPerSecond" -> 
         16229.117465963463`], "InputType" -> "NumericalVector", "Processor" -> 
       MachineLearning`MLProcessor["Sequence", 
         Association[
         "Input" -> Association[
           "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
          "Output" -> 
          Association[
           "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
          "Processors" -> {
            MachineLearning`MLProcessor["Standardize", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]], 
              "Mean" -> {0.028612078907386, -0.037663669434233285`, 
               0.11812144334514217`, 0.16675370720289667`, 
               0.24134863941771068`, 0.07398214393914918, 
               0.019591640793431297`, -0.008548603241697445, 
               0.053821906974201715`, 
               0.08444435906764197, -0.06202280872843538}, 
              "StandardDeviation" -> {0.26209968487792235`, 
               0.24153980478299075`, 0.28885750014885697`, 0.328885801894885, 
               0.4673814222365112, 0.26010690725500724`, 0.24280485814746022`,
                0.23888662897734442`, 0.24292139294259735`, 
               0.24928328799884103`, 0.2468752774208303}, "Output" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]], 
              "Version" -> {12., 0}, "ID" -> 1054146331557663832]], 
            MachineLearning`MLProcessor["FirstValues", 
             Association[
             "Info" -> Association[
               "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> "f1", 
              "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
          "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
       "FeatureNumber" -> 11, "PostProcessor" -> 
       MachineLearning`MLProcessor["Identity"], "Options" -> 
       Association[
        "NetworkType" -> 
         Association["Value" -> "FullyConnected", "Options" -> Association[]],
          "NetworkDepth" -> 
         Association["Value" -> 8, "Options" -> Association[]], 
         "NumberOfParameters" -> 
         Association["Value" -> 18150, "Options" -> Association[]], 
         "ActivationFunction" -> 
         Association["Value" -> "SELU", "Options" -> Association[]], 
         "L2Regularization" -> 
         Association["Value" -> None, "Options" -> Association[]], "Dropout" -> 
         Association["Value" -> 0.01, "Options" -> Association[]], 
         "NetInitializationMethod" -> 
         Association["Value" -> Automatic, "Options" -> Association[]], 
         "OptimizationMethod" -> 
         Association[
          "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> 
           Association[]], MaxTrainingRounds -> 
         Association["Value" -> 10, "Options" -> Association[]], 
         ValidationSet -> 
         Association["Value" -> Automatic, "Options" -> Association[]], 
         "EarlyStopping" -> 
         Association["Value" -> False, "Options" -> Association[]], 
         TrainingProgressReporting -> 
         Association["Value" -> None, "Options" -> Association[]], 
         "NetTrainOptions" -> 
         Association[
          "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
           "Options" -> Association[]], "LossFunction" -> 
         Association["Value" -> Automatic, "Options" -> Association[]], 
         "ValidationSetRatio" -> 
         Association[
          "Value" -> 0.15033222591362128`, "Options" -> Association[]]]], 
     "TrainingInformation" -> 
     Association[
      "PanelCell" -> CellObject[27425], "TrainingFunction" -> Classify, 
       "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
       "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
       5.1283545`8.161523031861748, "LossName" -> "MeanCrossEntropy", 
       "BestModelInformation" -> Dataset[
         Association[
         "MeanCrossEntropy" -> 
          Around[0.1262442450282116, 0.04836819419323194], "Accuracy" -> 
          Around[0.9675011347985654, 0.01818462024220615], "EvaluationTime" -> 
          0.0002376019615287575, "TestSize" -> 241, "ModelMemory" -> 196400, 
          "ModelUtility" -> 3.298181316091816, "TrainingSize" -> 963, 
          "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 785968, 
          "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
            Around[0.1262442450282116, 0.034201478107782096`]}, 
          "AccuracyHistory" -> {
            Around[0.9675011347985654, 0.012858468286566126`]}, 
          "Configuration" -> {
           "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
            8, "NumberOfParameters" -> 18150, "ActivationFunction" -> "SELU", 
            "L2Regularization" -> None, "Dropout" -> 0.01, 
            "NetInitializationMethod" -> Automatic, 
            "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
            MaxTrainingRounds -> 10, ValidationSet -> Automatic, 
            "EarlyStopping" -> False, TrainingProgressReporting -> None, 
            "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
          "FinalTrainingSize" -> 1204], 
         TypeSystem`Struct[{
          "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
           "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
           "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
           "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
          TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Tuple[{
             TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
           TypeSystem`Atom[Integer]}], 
         Association["ID" -> 16505733188705]], "Configurations" -> Dataset[
         Association[
         Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 8], 
              "NumberOfParameters" -> Association["Value" -> 18150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> None], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
              Association["Value" -> Automatic], "EarlyStopping" -> 
              Association["Value" -> False], TrainingProgressReporting -> 
              Association["Value" -> None], "NetTrainOptions" -> 
              Association["Value" -> Automatic], "LossFunction" -> 
              Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.2972982316285973, 0.042355116767231096`], "Accuracy" -> 
               Around[0.9096721874274586, 0.012179950895005072`], 
               "EvaluationTime" -> 0.00005358012459431202, "TestSize" -> 1194,
                "ModelMemory" -> 170896, "ModelUtility" -> 1.676627757162993, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.6309573444801932, 
               "TrainingMemory" -> 2356768, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.2972982316285973, 0.029949590284057147`]}, 
               "AccuracyHistory" -> {
                 Around[0.9096721874274586, 0.008612525872377244]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.32955769786521644`, 0.050850558309700235`], 
               "Accuracy" -> Around[0.9098908477703732, 0.01231970359881095], 
               "EvaluationTime" -> 0.0000488147467786613, "TestSize" -> 1164, 
               "ModelMemory" -> 170896, "ModelUtility" -> 1.465999786002261, 
               "TrainingSize" -> 40, "TrainingTime" -> 0.31622776601683794`, 
               "TrainingMemory" -> 477352, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.32955769786521644`, 0.035956774607910975`]}, 
               "AccuracyHistory" -> {
                 Around[0.9098908477703732, 0.008711345956927536]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.18608547183177598`, 0.02232263240447896], "Accuracy" -> 
               Around[0.9444441914215189, 0.010898903646935965`], 
               "EvaluationTime" -> 0.00006380911080551212, "TestSize" -> 1004,
                "ModelMemory" -> 170896, "ModelUtility" -> 
               2.6224600076312523`, "TrainingSize" -> 200, "TrainingTime" -> 
               1., "TrainingMemory" -> 635992, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.18608547183177598`, 0.015784484747141638`]}, 
               "AccuracyHistory" -> {
                 Around[0.9444441914215189, 0.007706688676247213]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.1516843572813437, 0.048276604855579136`], "Accuracy" -> 
               Around[0.9587017648170406, 0.019492219137500096`], 
               "EvaluationTime" -> 0.00019137050000062923`, "TestSize" -> 241,
                "ModelMemory" -> 170896, "ModelUtility" -> 2.9552652264269, 
               "TrainingSize" -> 963, "TrainingTime" -> 3.981071705534973, 
               "TrainingMemory" -> 753384, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.1516843572813437, 0.03413671466604341]}, 
               "AccuracyHistory" -> {
                 Around[0.9587017648170406, 0.013783080332500513`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00019137050000062923`, "MeanCrossEntropy" -> 
              Around[0.1516843572813437, 0.048276604855579136`], 
              "ModelMemory" -> 170896, "TrainingMemory" -> 753384, 
              "TrainingTime" -> 5.608330484110627], "Index" -> 1], 
          Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 2], 
              "NumberOfParameters" -> Association["Value" -> 3150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> 0.01], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
              Association["Value" -> Automatic], "EarlyStopping" -> 
              Association["Value" -> False], TrainingProgressReporting -> 
              Association["Value" -> None], "NetTrainOptions" -> 
              Association["Value" -> Automatic], "LossFunction" -> 
              Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.34203039427180004`, 0.050367922391680295`], 
               "Accuracy" -> Around[0.9082341119338734, 0.0120681057073581], 
               "EvaluationTime" -> 0.00002780612074512992, "TestSize" -> 1194,
                "ModelMemory" -> 66448, "ModelUtility" -> 1.3944605469502647`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.15848931924611134`, 
               "TrainingMemory" -> 237136, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.34203039427180004`, 0.035615499477434885`]}, 
               "AccuracyHistory" -> {
                 Around[0.9082341119338734, 0.008533439381748989]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.3482327752214321, 0.0366812609609199], "Accuracy" -> 
               Around[0.8756394643530573, 0.01403105673654073], 
               "EvaluationTime" -> 0.00003511202413505656, "TestSize" -> 1164,
                "ModelMemory" -> 66448, "ModelUtility" -> 1.37487479128386, 
               "TrainingSize" -> 40, "TrainingTime" -> 0.15848931924611134`, 
               "TrainingMemory" -> 239200, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.3482327752214321, 0.025937568367939836`]}, 
               "AccuracyHistory" -> {
                 Around[0.8756394643530573, 0.009921455365621138]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.20817396486940898`, 0.025349629315852718`], 
               "Accuracy" -> 
               Around[0.9357993423454368, 0.011584129626100004`], 
               "EvaluationTime" -> 0.00003704332103236729, "TestSize" -> 1004,
                "ModelMemory" -> 66448, "ModelUtility" -> 2.3974405148625486`,
                "TrainingSize" -> 200, "TrainingTime" -> 0.5011872336272722, 
               "TrainingMemory" -> 291640, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.20817396486940898`, 0.017924894789804757`]}, 
               "AccuracyHistory" -> {
                 Around[0.9357993423454368, 0.008191216612759298]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.16393993375138782`, 0.0570775109792664], "Accuracy" -> 
               Around[0.9618727620165243, 0.01890249635531241], 
               "EvaluationTime" -> 0.00008655935377960106, "TestSize" -> 241, 
               "ModelMemory" -> 66448, "ModelUtility" -> 2.788683587185264, 
               "TrainingSize" -> 963, "TrainingTime" -> 1.9952623149688797`, 
               "TrainingMemory" -> 554536, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.16393993375138782`, 0.04035989506668889]}, 
               "AccuracyHistory" -> {
                 Around[0.9618727620165243, 0.013366083354195403`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00008655935377960106, "MeanCrossEntropy" -> 
              Around[0.16393993375138782`, 0.0570775109792664], "ModelMemory" -> 
              66448, "TrainingMemory" -> 554536, "TrainingTime" -> 
              2.6530851938281788`], "Index" -> 2], 
          Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 2], 
              "NumberOfParameters" -> Association["Value" -> 3150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> None], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 1000], 
              ValidationSet -> Association["Value" -> Automatic], 
              "EarlyStopping" -> Association["Value" -> False], 
              TrainingProgressReporting -> Association["Value" -> None], 
              "NetTrainOptions" -> Association["Value" -> Automatic], 
              "LossFunction" -> Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.5352864318396858, 0.09083309975473798], "Accuracy" -> 
               Around[0.9120272631172549, 0.011779968342329809`], 
               "EvaluationTime" -> 0.000027958585430474564`, "TestSize" -> 
               1194, "ModelMemory" -> 62352, "ModelUtility" -> 
               0.48996069690463395`, "TrainingSize" -> 10, "TrainingTime" -> 
               1., "TrainingMemory" -> 222688, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.5352864318396858, 0.06422870079276935]}, 
               "AccuracyHistory" -> {
                 Around[0.9120272631172549, 0.00832969549702426]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.6605478739253331, 0.08705725507713104], "Accuracy" -> 
               Around[0.8698556793836825, 0.014142961346108159`], 
               "EvaluationTime" -> 0.00003431904531202071, "TestSize" -> 1164,
                "ModelMemory" -> 62352, "ModelUtility" -> 0.0841399595643243, 
               "TrainingSize" -> 40, "TrainingTime" -> 1., "TrainingMemory" -> 
               228384, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.6605478739253331, 0.061558775416526344`]}, 
               "AccuracyHistory" -> {
                 Around[0.8698556793836825, 0.010000583873892301`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00003431904531202071, "MeanCrossEntropy" -> 
              Around[0.6605478739253331, 0.08705725507713104], "ModelMemory" -> 
              62352, "TrainingMemory" -> 228384, "TrainingTime" -> 
              13.040000000000001`], "Index" -> 3], 
          Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 4], 
              "NumberOfParameters" -> Association["Value" -> 8150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> None], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 10], ValidationSet -> 
              Association["Value" -> Automatic], "EarlyStopping" -> 
              Association["Value" -> False], TrainingProgressReporting -> 
              Association["Value" -> None], "NetTrainOptions" -> 
              Association["Value" -> Automatic], "LossFunction" -> 
              Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.4589506901166671, 0.027291747763020638`], "Accuracy" -> 
               Around[0.8037157065520296, 0.016430390167311897`], 
               "EvaluationTime" -> 0.00003695986088766776, "TestSize" -> 1194,
                "ModelMemory" -> 95328, "ModelUtility" -> 0.8407754361567714, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.12589254117941673`, 
               "TrainingMemory" -> 303288, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.4589506901166671, 0.01929817991366468]}, 
               "AccuracyHistory" -> {
                 Around[0.8037157065520296, 0.011618040304847014`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.3745076658373685, 0.015358671947670086`], "Accuracy" -> 
               Around[0.8638401012354882, 0.014453357895895835`], 
               "EvaluationTime" -> 0.00003847118997296744, "TestSize" -> 1164,
                "ModelMemory" -> 95328, "ModelUtility" -> 1.2547451078461933`,
                "TrainingSize" -> 40, "TrainingTime" -> 0.12589254117941673`, 
               "TrainingMemory" -> 308840, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.3745076658373685, 0.010860221084217116`]}, 
               "AccuracyHistory" -> {
                 Around[0.8638401012354882, 0.010220067379104074`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.23383662411950284`, 0.023409316949674408`], 
               "Accuracy" -> 
               Around[0.9269670010104156, 0.012169035270696411`], 
               "EvaluationTime" -> 0.000050074320013998985`, "TestSize" -> 
               1004, "ModelMemory" -> 95328, "ModelUtility" -> 
               2.1734132066676852`, "TrainingSize" -> 200, "TrainingTime" -> 
               0.15848931924611134`, "TrainingMemory" -> 344976, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.23383662411950284`, 0.016552886758059958`]}, 
               "AccuracyHistory" -> {
                 Around[0.9269670010104156, 0.008604807360407706]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.1444922949998901, 0.04207583760290429], "Accuracy" -> 
               Around[0.9618727620165243, 0.01890249635531241], 
               "EvaluationTime" -> 0.00010897177010162124`, "TestSize" -> 241,
                "ModelMemory" -> 95328, "ModelUtility" -> 3.0626409573696893`,
                "TrainingSize" -> 963, "TrainingTime" -> 0.31622776601683794`,
                "TrainingMemory" -> 524576, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.1444922949998901, 0.029752110093117547`]}, 
               "AccuracyHistory" -> {
                 Around[0.9618727620165243, 0.013366083354195403`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00010897177010162124`, "MeanCrossEntropy" -> 
              Around[0.1444922949998901, 0.04207583760290429], "ModelMemory" -> 
              95328, "TrainingMemory" -> 524576, "TrainingTime" -> 
              0.5212593431360864], "Index" -> 4], 
          Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 4], 
              "NumberOfParameters" -> Association["Value" -> 8150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> 0.01], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 30], ValidationSet -> 
              Association["Value" -> Automatic], "EarlyStopping" -> 
              Association["Value" -> False], TrainingProgressReporting -> 
              Association["Value" -> None], "NetTrainOptions" -> 
              Association["Value" -> Automatic], "LossFunction" -> 
              Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.24336419981388743`, 0.03023826022996178], "Accuracy" -> 
               Around[0.9086678584932287, 0.012209899387134179`], 
               "EvaluationTime" -> 0.00003695986088766776, "TestSize" -> 1194,
                "ModelMemory" -> 104056, "ModelUtility" -> 
               2.0840937265945314`, "TrainingSize" -> 10, "TrainingTime" -> 
               0.15848931924611134`, "TrainingMemory" -> 335744, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.24336419981388743`, 0.021381678859889466`]}, 
               "AccuracyHistory" -> {
                 Around[0.9086678584932287, 0.008633702654248048]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.2686107237776057, 0.028158834711217905`], "Accuracy" -> 
               Around[0.8912764410606714, 0.014318008633564215`], 
               "EvaluationTime" -> 0.00003845590980819735, "TestSize" -> 1000,
                "ModelMemory" -> 104056, "ModelUtility" -> 
               1.8942793970516645`, "TrainingSize" -> 40, "TrainingTime" -> 
               0.15848931924611134`, "TrainingMemory" -> 341504, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.2686107237776057, 0.019911302974613316`]}, 
               "AccuracyHistory" -> {
                 Around[0.8912764410606714, 0.010124360997880789`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.21735145945338524`, 0.02705865526629138], "Accuracy" -> 
               Around[0.9362658966016556, 0.011530679564473682`], 
               "EvaluationTime" -> 0.00004080457792799495, "TestSize" -> 1004,
                "ModelMemory" -> 104056, "ModelUtility" -> 2.310086267489546, 
               "TrainingSize" -> 200, "TrainingTime" -> 0.31622776601683794`, 
               "TrainingMemory" -> 377512, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.21735145945338524`, 0.01913335862858372]}, 
               "AccuracyHistory" -> {
                 Around[0.9362658966016556, 0.008153421711728486]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.13924405733018155`, 0.04988749347692917], "Accuracy" -> 
               Around[0.9618727620165243, 0.01890249635531241], 
               "EvaluationTime" -> 0.0001035871181990104, "TestSize" -> 241, 
               "ModelMemory" -> 104056, "ModelUtility" -> 3.111440457749185, 
               "TrainingSize" -> 963, "TrainingTime" -> 1., "TrainingMemory" -> 
               629128, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.13924405733018155`, 0.035275784933936266`]}, 
               "AccuracyHistory" -> {
                 Around[0.9618727620165243, 0.013366083354195403`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.0001035871181990104, "MeanCrossEntropy" -> 
              Around[0.13924405733018155`, 0.04988749347692917], 
              "ModelMemory" -> 104056, "TrainingMemory" -> 629128, 
              "TrainingTime" -> 1.4087489246459037`], "Index" -> 5], 
          Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 8], 
              "NumberOfParameters" -> Association["Value" -> 18150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> 0.01], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 10], ValidationSet -> 
              Association["Value" -> Automatic], "EarlyStopping" -> 
              Association["Value" -> False], TrainingProgressReporting -> 
              Association["Value" -> None], "NetTrainOptions" -> 
              Association["Value" -> Automatic], "LossFunction" -> 
              Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.3675290740997242, 0.02124318109424432], "Accuracy" -> 
               Around[0.8017791475905568, 0.016501706050455003`], 
               "EvaluationTime" -> 0.000046498813059500966`, "TestSize" -> 
               1194, "ModelMemory" -> 196400, "ModelUtility" -> 
               1.2856910782380848`, "TrainingSize" -> 10, "TrainingTime" -> 
               0.19952623149688792`, "TrainingMemory" -> 554664, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.3675290740997242, 0.015021197405714021`]}, 
               "AccuracyHistory" -> {
                 Around[0.8017791475905568, 0.011668468249423811`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.24067699783131705`, 0.01962054505473038], "Accuracy" -> 
               Around[0.8999695925593484, 0.012870406410342617`], 
               "EvaluationTime" -> 0.000048255991427579856`, "TestSize" -> 
               1164, "ModelMemory" -> 196400, "ModelUtility" -> 
               2.123025825292703, "TrainingSize" -> 40, "TrainingTime" -> 
               0.19952623149688792`, "TrainingMemory" -> 560216, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.24067699783131705`, 0.013873820458776031`]}, 
               "AccuracyHistory" -> {
                 Around[0.8999695925593484, 0.009100751649380075]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.19380464144445964`, 0.03827247786963545], "Accuracy" -> 
               Around[0.952330341212412, 0.010270588208262524`], 
               "EvaluationTime" -> 0.00005586777857382548, "TestSize" -> 1004,
                "ModelMemory" -> 196400, "ModelUtility" -> 2.511110180653808, 
               "TrainingSize" -> 200, "TrainingTime" -> 0.31622776601683794`, 
               "TrainingMemory" -> 596224, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.19380464144445964`, 0.027062728634431297`]}, 
               "AccuracyHistory" -> {
                 Around[0.952330341212412, 0.007262402568837023]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.1262442450282116, 0.04836819419323194], "Accuracy" -> 
               Around[0.9675011347985654, 0.01818462024220615], 
               "EvaluationTime" -> 0.0002376019615287575, "TestSize" -> 241, 
               "ModelMemory" -> 196400, "ModelUtility" -> 3.298181316091816, 
               "TrainingSize" -> 963, "TrainingTime" -> 0.6309573444801932, 
               "TrainingMemory" -> 785968, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.1262442450282116, 0.034201478107782096`]}, 
               "AccuracyHistory" -> {
                 Around[0.9675011347985654, 0.012858468286566126`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.0002376019615287575, "MeanCrossEntropy" -> 
              Around[0.1262442450282116, 0.04836819419323194], "ModelMemory" -> 
              196400, "TrainingMemory" -> 785968, "TrainingTime" -> 
              0.9883867120307952], "Index" -> 6], 
          Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 8], 
              "NumberOfParameters" -> Association["Value" -> 18150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> None], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 1000], 
              ValidationSet -> Association["Value" -> Automatic], 
              "EarlyStopping" -> Association["Value" -> False], 
              TrainingProgressReporting -> Association["Value" -> None], 
              "NetTrainOptions" -> Association["Value" -> Automatic], 
              "LossFunction" -> Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.3545302870606928, 0.05645850652876433], "Accuracy" -> 
               Around[0.9114710638574073, 0.012079315322534366`], 
               "EvaluationTime" -> 0.000051719860345939955`, "TestSize" -> 
               1194, "ModelMemory" -> 170896, "ModelUtility" -> 
               1.3179955676474637`, "TrainingSize" -> 10, "TrainingTime" -> 
               1.5848931924611136`, "TrainingMemory" -> 471608, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.3545302870606928, 0.03992219282215422]}, 
               "AccuracyHistory" -> {
                 Around[0.9114710638574073, 0.008541365776654618]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.5279179517615998, 0.07943182515558952], "Accuracy" -> 
               Around[0.8953933277401639, 0.013094786513483827`], 
               "EvaluationTime" -> 0.000051049768182987075`, "TestSize" -> 
               1164, "ModelMemory" -> 170896, "ModelUtility" -> 
               0.5251103165881499, "TrainingSize" -> 40, "TrainingTime" -> 
               1.5848931924611136`, "TrainingMemory" -> 477224, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.5279179517615998, 0.056166782209541535`]}, 
               "AccuracyHistory" -> {
                 Around[0.8953933277401639, 0.009259412341874561]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.19359576138072215`, 0.023791737869754144`], 
               "Accuracy" -> 
               Around[0.9403881617145154, 0.010853288545754167`], 
               "EvaluationTime" -> 0.00005770154387100172, "TestSize" -> 1004,
                "ModelMemory" -> 170896, "ModelUtility" -> 2.542181525821517, 
               "TrainingSize" -> 200, "TrainingTime" -> 7.943282347242816, 
               "TrainingMemory" -> 672008, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.19359576138072215`, 0.016823299183915938`]}, 
               "AccuracyHistory" -> {
                 Around[0.9403881617145154, 0.007674433928877054]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00005770154387100172, "MeanCrossEntropy" -> 
              Around[0.19359576138072215`, 0.023791737869754144`], 
              "ModelMemory" -> 170896, "TrainingMemory" -> 672008, 
              "TrainingTime" -> 49.403452922862876`], "Index" -> 7], 
          Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 2], 
              "NumberOfParameters" -> Association["Value" -> 3150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> None], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
              Association["Value" -> Automatic], "EarlyStopping" -> 
              Association["Value" -> False], TrainingProgressReporting -> 
              Association["Value" -> None], "NetTrainOptions" -> 
              Association["Value" -> Automatic], "LossFunction" -> 
              Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.39673309255873684`, 0.04220856448355949], "Accuracy" -> 
               Around[0.8646104113498946, 0.014384937660756672`], 
               "EvaluationTime" -> 0.00003151863482519127, "TestSize" -> 1164,
                "ModelMemory" -> 62352, "ModelUtility" -> 1.113677364431521, 
               "TrainingSize" -> 40, "TrainingTime" -> 0.15848931924611134`, 
               "TrainingMemory" -> 228240, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.39673309255873684`, 0.02984596217047458]}, 
               "AccuracyHistory" -> {
                 Around[0.8646104113498946, 0.010171686966866794`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.2142743802249852, 0.02633056431212375], "Accuracy" -> 
               Around[0.9341994355144627, 0.011425329815783484`], 
               "EvaluationTime" -> 0.00003094525013969571, "TestSize" -> 1004,
                "ModelMemory" -> 62352, "ModelUtility" -> 2.3392411612756634`,
                "TrainingSize" -> 200, "TrainingTime" -> 0.3981071705534972, 
               "TrainingMemory" -> 367824, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.2142743802249852, 0.018618520577571206`]}, 
               "AccuracyHistory" -> {
                 Around[0.9341994355144627, 0.00807892819003335]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.16053683529895368`, 0.053288780553961725`], 
               "Accuracy" -> Around[0.9618727620165243, 0.01890249635531241], 
               "EvaluationTime" -> 0.00008228217273919545, "TestSize" -> 241, 
               "ModelMemory" -> 62352, "ModelUtility" -> 2.8367127565056207`, 
               "TrainingSize" -> 963, "TrainingTime" -> 1.5848931924611136`, 
               "TrainingMemory" -> 410592, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.16053683529895368`, 0.03768085809086816]}, 
               "AccuracyHistory" -> {
                 Around[0.9618727620165243, 0.013366083354195403`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00008228217273919545, "MeanCrossEntropy" -> 
              Around[0.16053683529895368`, 0.053288780553961725`], 
              "ModelMemory" -> 62352, "TrainingMemory" -> 410592, 
              "TrainingTime" -> 2.14001725665336], "Index" -> 8], 
          Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 2], 
              "NumberOfParameters" -> Association["Value" -> 3150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> None], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 10], ValidationSet -> 
              Association["Value" -> Automatic], "EarlyStopping" -> 
              Association["Value" -> False], TrainingProgressReporting -> 
              Association["Value" -> None], "NetTrainOptions" -> 
              Association["Value" -> Automatic], "LossFunction" -> 
              Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.6704046259462205, 0.027535828579700567`], "Accuracy" -> 
               Around[0.6864079144599124, 0.019300442039214532`], 
               "EvaluationTime" -> 0.00003081520351473887, "TestSize" -> 1164,
                "ModelMemory" -> 62352, "ModelUtility" -> 0.09018938627999751,
                "TrainingSize" -> 40, "TrainingTime" -> 0.07943282347242814, 
               "TrainingMemory" -> 228304, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.6704046259462205, 0.019470771114296608`]}, 
               "AccuracyHistory" -> {
                 Around[0.6864079144599124, 0.013647473445826511`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.3462836255886271, 0.01513315466666841], "Accuracy" -> 
               Around[0.8999326783861983, 0.013662577314143423`], 
               "EvaluationTime" -> 0.000045826476049472674`, "TestSize" -> 
               1004, "ModelMemory" -> 62352, "ModelUtility" -> 
               1.41039350600031, "TrainingSize" -> 200, "TrainingTime" -> 
               0.12589254117941673`, "TrainingMemory" -> 270976, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.3462836255886271, 0.01070075628554608]}, 
               "AccuracyHistory" -> {
                 Around[0.8999326783861983, 0.009660901067316301]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.000045826476049472674`, "MeanCrossEntropy" -> 
              Around[0.3462836255886271, 0.01513315466666841], "ModelMemory" -> 
              62352, "TrainingMemory" -> 270976, "TrainingTime" -> 
              0.8373059213725169], "Index" -> 9], 
          Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 4], 
              "NumberOfParameters" -> Association["Value" -> 8150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> None], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
              Association["Value" -> Automatic], "EarlyStopping" -> 
              Association["Value" -> False], TrainingProgressReporting -> 
              Association["Value" -> None], "NetTrainOptions" -> 
              Association["Value" -> Automatic], "LossFunction" -> 
              Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.3479904820653324, 0.04649308166291719], "Accuracy" -> 
               Around[0.8967133610757196, 0.013036044634608371`], 
               "EvaluationTime" -> 0.00004649584961623782, "TestSize" -> 1164,
                "ModelMemory" -> 95328, "ModelUtility" -> 1.3652163494144007`,
                "TrainingSize" -> 40, "TrainingTime" -> 0.31622776601683794`, 
               "TrainingMemory" -> 308904, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.3479904820653324, 0.03287557332210867]}, 
               "AccuracyHistory" -> {
                 Around[0.8967133610757196, 0.009217875560982088]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.2590086922700906, 0.038725523217087165`], "Accuracy" -> 
               Around[0.9315233686955358, 0.011856788268770742`], 
               "EvaluationTime" -> 0.000051537651960239414`, "TestSize" -> 
               1004, "ModelMemory" -> 95328, "ModelUtility" -> 
               1.9496546032622497`, "TrainingSize" -> 200, "TrainingTime" -> 
               0.6309573444801932, "TrainingMemory" -> 466168, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.2590086922700906, 0.027383080071799418`]}, 
               "AccuracyHistory" -> {
                 Around[0.9315233686955358, 0.008384015387940896]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.000051537651960239414`, "MeanCrossEntropy" -> 
              Around[0.2590086922700906, 0.038725523217087165`], 
              "ModelMemory" -> 95328, "TrainingMemory" -> 466168, 
              "TrainingTime" -> 4.114590979787601], "Index" -> 10]], 
         TypeSystem`Assoc[
          TypeSystem`Struct[{"Value", "Options"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["NeuralNetwork"]], 
            TypeSystem`Assoc[TypeSystem`AnyType, 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
          
          TypeSystem`Struct[{
           "Experiments", "PredictedPerformances", "Index"}, {
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
               "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory",
                "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, 1], 
               TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
             TypeSystem`AnyLength], 
            
            TypeSystem`Struct[{
             "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
              "TrainingMemory", "TrainingTime"}, {
              TypeSystem`Atom[Real], TypeSystem`AnyType, 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real]}], 
            TypeSystem`Atom[Integer]}], 10], 
         Association["ID" -> 16501438221409]], "MaxTrainingSize" -> 1204, 
       "PreprocessorEvaluationTime" -> 4.6752423564858`3.*^-6, 
       "PreprocessorMemory" -> 147208, "InputDimension" -> 11, 
       "OutputDimension" -> 1, 
       "BaselineLogProbability" -> -0.1673111827253364, "VariableBudget" -> 
       True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
       "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
       "LastReportingTime" -> 3.7713933763564681`17.32907682314892*^9, 
       "RoundPartitioning" -> Dataset[{
          Association[
          "TrainingSizes" -> 10, "TimeBudgets" -> 3.1405597883393983`, 
           "ElapsedTimes" -> 4.5683169, "ExperimentCounts" -> 7], 
          Association[
          "TrainingSizes" -> 40, "TimeBudgets" -> 4.486513983341997, 
           "ElapsedTimes" -> 5.3003707, "ExperimentCounts" -> 10], 
          Association[
          "TrainingSizes" -> 200, "TimeBudgets" -> 6.409305690488567, 
           "ElapsedTimes" -> 12.697123699999999`, "ExperimentCounts" -> 9], 
          Association[
          "TrainingSizes" -> 963, "TimeBudgets" -> 9.156150986412245, 
           "ElapsedTimes" -> 10.4300514, "ExperimentCounts" -> 6]}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
            "ExperimentCounts"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 4], 
         Association[
         "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
            Dataset`DatasetHandle[16510028156001]], "ID" -> 16514323123297]]],
      "Log" -> Association["Example" -> MachineLearning`MLDataset[
         Association[
         "f1" -> Association[
           "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"0 + 98 \n"}, 
            "ID" -> 7700397199614135015]], 
         Association[
         "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0,
           "RawExample" -> False]], "TrainingTime" -> 35.16241590889479, 
       "MaxTrainingMemory" -> 23828048, "DataMemory" -> 61392, 
       "FunctionMemory" -> 586584, "LanguageVersion" -> {12., 0}, "Date" -> 
       DateObject[{2019, 7, 6, 9, 16, 17.3485381`8.991837826999385}, 
         "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
       "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
       "Evaluations" -> {}]]],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",
 CellChangeTimes->{3.771407783227825*^9},
 CellLabel->
  "Out[131]=",ExpressionUUID->"77531a54-6546-4191-bd16-6f9fe76c5d3b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Need", " ", "to", " ", "create", " ", "the", " ", "Gui", " ", "using", " ",
    "Dynmaic", " ", "Module"}], "*)"}]], "Input",
 CellChangeTimes->{{3.7713536464785004`*^9, 3.771353664571615*^9}},
 CellLabel->
  "In[132]:=",ExpressionUUID->"504bd9cc-d90b-476c-be9f-d82b78e41ae7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DumpSave", "[", 
  RowBox[{"\"\<final_progect.mx\>\"", ",", " ", "arrays"}], "]"}]], "Input",
 CellChangeTimes->{{3.7713616243121543`*^9, 3.7713616393978906`*^9}, {
  3.7713616722922544`*^9, 3.7713616744753747`*^9}},
 CellLabel->
  "In[133]:=",ExpressionUUID->"a0308418-3e41-4b79-b3be-d01011649c9a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"-", 
      FractionBox["2000", "3"]}], "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "\<\"integral of x^3 dx\"\>", "}"}], ",", 
    RowBox[{"{", "\<\"integral of tan(x) dx from 0 to \[Pi]/4\"\>", "}"}], 
    ",", 
    RowBox[{"{", "\<\"Derivative of 1+sec(x)\"\>", "}"}], ",", 
    RowBox[{"{", "\<\"integral of cos(x) dx\"\>", "}"}], ",", 
    RowBox[{"{", "\<\"Integral of ln(x) from 1 to e\"\>", "}"}], ",", 
    RowBox[{
    "{", "\<\"Derivative of \\!\\(\\*SuperscriptBox[\\(e\\), \\(3 \
\\*SuperscriptBox[\\(x\\), \\(2\\)]\\)]\\)\"\>", "}"}], ",", 
    RowBox[{"{", "\<\"Integral of ln(1-x)/x dx\"\>", "}"}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7714077833078327`*^9},
 CellLabel->
  "Out[133]=",ExpressionUUID->"eadd6488-4368-407b-adeb-a8b45b0bccd4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra2Qs", "\[LeftDoubleBracket]", 
   RowBox[{"120", ";;", "130"}], "\[RightDoubleBracket]"}], "//", 
  "InputForm"}]], "Input",
 CellChangeTimes->{{3.77140794464546*^9, 3.7714079578276772`*^9}, {
  3.7714091443685756`*^9, 3.771409220976266*^9}, {3.771409791809289*^9, 
  3.771409793773464*^9}},
 CellLabel->
  "In[206]:=",ExpressionUUID->"c152a1f2-bf7c-435c-8fac-a14c7491d047"],

Cell["\<\
{\" \\r\", \" \\r\", \" \\r\", \" \\r\", \" \\r\", \" \\r\", \" \\r\", \" \\r\
\", \" \\r\", 
 \"    - 5 + 5x = 3x -    /   \\r\", \"77\"}\
\>", "Output",
 CellChangeTimes->{
  3.7714079583436947`*^9, 3.7714091230470867`*^9, {3.7714091700045404`*^9, 
   3.771409221820342*^9}, 3.7714097943854933`*^9, 3.7714099026922617`*^9},
 CellLabel->
  "Out[206]//InputForm=",ExpressionUUID->"cf357641-0adb-4f7d-b564-\
983b4ecb0a61"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra2Qs", "=", 
   RowBox[{"algebra2Qs", "/.", 
    RowBox[{
     RowBox[{"WhitespaceCharacter", ".."}], "\[Rule]", "Nothing"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.77140981597823*^9, 3.771409876978485*^9}},
 CellLabel->
  "In[204]:=",ExpressionUUID->"1efddd34-8aca-4eb7-83c5-9214d7e9b2d9"],

Cell[BoxData[
 RowBox[{"Dimensions", "[", "algebra2Qs", "]"}]], "Input",
 CellChangeTimes->{{3.771409858725211*^9, 3.771409886163163*^9}},
 CellLabel->
  "In[205]:=",ExpressionUUID->"1116899d-8fc6-4a3e-ab24-2005f84130e2"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"callAPI", "[", "\[IndentingNewLine]", "\t", 
    RowBox[{
    "problemType_String", ",", " ", "\[IndentingNewLine]", "\t", 
     "howmany_Integer", ",", " ", "\[IndentingNewLine]", "\t", 
     RowBox[{"difficulty_", " ", ":", " ", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Beginner\>\"", " ", "|", " ", "\"\<Intermediate\>\"", " ", "|", 
        " ", "\"\<Advanced\>\""}], ")"}]}], ",", "\[IndentingNewLine]", "\t", 
     RowBox[{"showAnswers_", " ", ":", " ", 
      RowBox[{"(", 
       RowBox[{"True", " ", "|", " ", "False"}], ")"}]}]}], " ", "]"}], " ", ":=",
    " ", "\[IndentingNewLine]", 
   RowBox[{"URLExecute", "[", "\[IndentingNewLine]", 
    RowBox[{
    "\"\<https://www.wolframcloud.com/objects/erinc/WPGform\>\"", ",", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"\"\<ProblemType\>\"", " ", "\[Rule]", " ", "problemType"}], 
       ",", " ", "\[IndentingNewLine]", "\t", 
       RowBox[{"\"\<HowMany\>\"", " ", "\[Rule]", " ", "howmany"}], ",", 
       "\[IndentingNewLine]", "\t", 
       RowBox[{"\"\<Difficulty\>\"", " ", "\[Rule]", "  ", "difficulty"}], 
       ",", " ", "\[IndentingNewLine]", "\t", 
       RowBox[{"\"\<SimpleOrFull\>\"", " ", "\[Rule]", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"TrueQ", "[", "showAnswers", "]"}], ",", " ", 
          "\"\<Full\>\"", ",", " ", "\"\<Simple\>\""}], "]"}]}], ",", " ", 
       "\[IndentingNewLine]", "\t", 
       RowBox[{"\"\<_key\>\"", " ", "\[Rule]", " ", "\"\<WSC2019\>\""}]}], 
      " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"necessary", " ", "permission", " ", "key"}], " ", "-", " ", 
        RowBox[{"DO", " ", "NOT", " ", "SHARE"}]}], " ", "*)"}], " ", 
      "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}]}]], \
"Input",
 CellChangeTimes->{{3.7714107918700476`*^9, 3.7714108092832623`*^9}, 
   3.7714109118466578`*^9, {3.771411027682988*^9, 3.7714110381397114`*^9}},
 CellLabel->
  "In[289]:=",ExpressionUUID->"7c7431ae-110e-42b8-bb56-b54ba12e1049"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"callAPI", "[", 
  RowBox[{
  "\"\<IntegerAddition\>\"", ",", " ", "3", ",", " ", "\"\<Advanced\>\"", ",",
    " ", "False"}], "]"}]], "Input",
 CellChangeTimes->{{3.7714110458842516`*^9, 3.77141110989114*^9}},
 CellLabel->
  "In[292]:=",ExpressionUUID->"1f66a9a9-94bf-4e4c-9195-abd0380ffb92"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"\"Compute \"",RowBox[{
       TagBox["Plus", HoldForm], "[", 
       RowBox[{"471", ",", "138"}], "]"}],"\".\""},
    "RowDefault"], ",", 
   TemplateBox[{"\"What is \"","337","\" more than \"","577","\"?\""},
    "RowDefault"], ",", 
   TemplateBox[{"\"What is \"","342","\" more than \"","364","\"?\""},
    "RowDefault"]}], "}"}]], "Output",
 CellChangeTimes->{{3.771411088529594*^9, 3.7714111105151453`*^9}},
 CellLabel->
  "Out[292]=",ExpressionUUID->"141c35d2-36f3-4a52-94ab-519a7b6e8900"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7714110410599174`*^9, 
  3.771411041063916*^9}},ExpressionUUID->"17a92354-4aef-4606-8032-\
e8e9e6238fd8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1Questions", "=", 
   RowBox[{"AppendTo", "[", 
    RowBox[{"algebra1Questions", ",", " ", 
     RowBox[{"callAPI", "[", 
      RowBox[{
      "\"\<IntegerAddition\>\"", ",", " ", "100", ",", " ", 
       "\"\<Advanced\>\"", ",", " ", "False"}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.77141111890777*^9, 
  3.771411230243497*^9}},ExpressionUUID->"9e358958-2066-4c09-b911-\
0db3a4cff49b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1Questions", "=", 
   RowBox[{"Flatten", "[", "algebra1Questions", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7714112332757053`*^9, 3.771411254477025*^9}, 
   3.7714114513156786`*^9},
 CellLabel->
  "In[298]:=",ExpressionUUID->"0f4d8182-7287-4694-b4bc-38892ec81f4a"]
},
WindowSize->{1536, 781},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 1641, 26, 113, "Input",ExpressionUUID->"2333ef13-77fd-4cdf-b6bd-0173171dc2ca"],
Cell[CellGroupData[{
Cell[2224, 50, 971, 19, 143, "Input",ExpressionUUID->"2d263997-c8cc-4cfe-a7ea-3727e1faf43b"],
Cell[3198, 71, 816, 15, 147, "Output",ExpressionUUID->"5a51fcff-2435-4c7b-956b-4f6b96456cac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4051, 91, 1830, 42, 209, "Input",ExpressionUUID->"6c60326b-e42a-4217-9c4b-5a627cce92a1"],
Cell[5884, 135, 488, 9, 71, "Output",ExpressionUUID->"a73ad4f1-965a-451f-8b72-535a32dddef2"],
Cell[6375, 146, 502, 10, 59, "Output",ExpressionUUID->"a4ec7dd7-fa0a-4ab7-b4e6-0422c865bd43"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6914, 161, 600, 11, 67, "Input",ExpressionUUID->"13a45433-da7c-48b3-b716-61b7e0f7a0b0"],
Cell[7517, 174, 502, 10, 71, "Output",ExpressionUUID->"abe71e69-95f5-41d1-8dff-ca16f0b41750"]
}, Open  ]],
Cell[8034, 187, 562, 12, 55, "Input",ExpressionUUID->"a7ae84c8-e77e-4163-a09b-03f6288de0b4"],
Cell[8599, 201, 508, 11, 32, "Input",ExpressionUUID->"965f7365-78f2-4e84-8c81-fb88f95c8219"],
Cell[9110, 214, 381, 9, 28, "Input",ExpressionUUID->"e9cacc85-48d6-4d31-ab94-5d755d539cc0"],
Cell[9494, 225, 589, 12, 32, "Input",ExpressionUUID->"7421c56f-d5af-4df6-8034-ece5d5384058"],
Cell[10086, 239, 1630, 26, 200, "Input",ExpressionUUID->"e86a1b17-fc00-41b9-8941-ba78eb4e043a"],
Cell[11719, 267, 646, 13, 67, "Input",ExpressionUUID->"5d0e39cd-11b1-4595-aeb9-0fdbd16ece9d"],
Cell[CellGroupData[{
Cell[12390, 284, 322, 6, 28, "Input",ExpressionUUID->"a315aa41-887f-4376-b5a7-9f6614771663"],
Cell[12715, 292, 439, 11, 21, "Message",ExpressionUUID->"81478dec-76c8-415e-8a00-e01f4bb8dc0c"],
Cell[13157, 305, 259, 4, 32, "Output",ExpressionUUID->"641b6a9f-9191-45f2-bf1e-eb0a3e7a6de7"]
}, Open  ]],
Cell[13431, 312, 3530, 57, 474, "Input",ExpressionUUID->"82a03de3-0e12-4c59-bb42-528749c4d97e"],
Cell[16964, 371, 2616, 45, 381, "Input",ExpressionUUID->"a376c96d-0f17-43df-a243-6359725f0331"],
Cell[19583, 418, 3380, 57, 419, "Input",ExpressionUUID->"222a3863-676a-4a91-8ed5-bf086815e19f"],
Cell[22966, 477, 2705, 44, 261, "Input",ExpressionUUID->"82bd9a2c-9f48-402b-90c8-7cb9d90eee9e"],
Cell[25674, 523, 447, 10, 28, "Input",ExpressionUUID->"9c835307-f52b-4c42-8b0e-c58da6c73503"],
Cell[26124, 535, 224, 3, 28, "Input",ExpressionUUID->"d1ec6521-5d52-4665-927a-fa1d165f502a"],
Cell[CellGroupData[{
Cell[26373, 542, 181, 2, 28, "Input",ExpressionUUID->"92ef74ea-3f9f-40e0-96ef-8699243bb53a"],
Cell[26557, 546, 161, 2, 32, "Output",ExpressionUUID->"a949bb7a-a4bf-4517-95ee-fff31b4a867d"]
}, Open  ]],
Cell[26733, 551, 1589, 32, 143, "Input",ExpressionUUID->"75320f2e-dcf8-44e4-a6d6-2ae166718cea"],
Cell[CellGroupData[{
Cell[28347, 587, 214, 4, 28, "Input",ExpressionUUID->"b66b3ba1-ab74-45a5-8467-dbae2cc45c3d"],
Cell[28564, 593, 180, 4, 32, "Output",ExpressionUUID->"1bda458b-b2f2-4d0c-80c7-0a6ba55f0ae6"]
}, Open  ]],
Cell[28759, 600, 308, 7, 28, "Input",ExpressionUUID->"4d882cf2-cadf-422e-aa45-f2e75454a042"],
Cell[29070, 609, 852, 19, 48, "Input",ExpressionUUID->"c682d2c2-cecf-4416-9beb-d00d0da3e4f3"],
Cell[29925, 630, 173, 2, 28, "Input",ExpressionUUID->"568cbba2-205d-43c3-b6bd-e23a73e39cba"],
Cell[30101, 634, 772, 18, 124, "Input",ExpressionUUID->"b11e39b9-7017-44bc-a385-0b07d552a794"],
Cell[30876, 654, 459, 9, 28, "Input",ExpressionUUID->"f2914d32-3898-4e48-bf07-c89efc28a175"],
Cell[31338, 665, 286, 7, 28, "Input",ExpressionUUID->"45bf30fe-2ff2-417c-b0d5-9bcaed87df8f"],
Cell[31627, 674, 284, 6, 28, "Input",ExpressionUUID->"cf4f547c-9e66-4b6e-b324-93cb9ff9ea9f"],
Cell[31914, 682, 720, 17, 124, "Input",ExpressionUUID->"102780d6-70d9-4d69-b9aa-dab665404545"],
Cell[32637, 701, 283, 6, 28, "Input",ExpressionUUID->"796a2e9c-8057-4199-a61d-18737ea5c77f"],
Cell[CellGroupData[{
Cell[32945, 711, 414, 9, 28, "Input",ExpressionUUID->"5e97059b-605d-41af-bf6a-9add47d91f50"],
Cell[33362, 722, 225, 5, 32, "Output",ExpressionUUID->"4248e821-a147-4083-895e-cb19278b6fa8"]
}, Open  ]],
Cell[33602, 730, 175, 2, 28, "Input",ExpressionUUID->"a34bd91b-332e-47df-9227-c111d8b411a5"],
Cell[CellGroupData[{
Cell[33802, 736, 334, 6, 28, "Input",ExpressionUUID->"3622a052-38d9-47fa-b1f3-baec31be1a1e"],
Cell[34139, 744, 223, 3, 32, "Output",ExpressionUUID->"40804649-e1d7-4cf7-ad23-48c9fd54c124"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34399, 752, 811, 15, 48, "Input",ExpressionUUID->"caaa5ecf-7ab4-401d-a3be-1c829e3f17a2"],
Cell[35213, 769, 340, 5, 32, "Output",ExpressionUUID->"1879eb5e-eecd-4bf1-af82-b0af6380d325"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35590, 779, 2813, 46, 48, "Input",ExpressionUUID->"4a6c27e2-f698-4942-9e0f-b4b815b04b6b"],
Cell[38406, 827, 10998, 219, 90, "Output",ExpressionUUID->"3ecd25e2-38a3-4aa2-ab1e-46a8b0463e2f"]
}, Open  ]],
Cell[49419, 1049, 1366, 33, 67, "Input",ExpressionUUID->"5652c7f2-04fa-4c09-af67-9f4f252f0675"],
Cell[50788, 1084, 1981, 50, 124, "Input",ExpressionUUID->"de04e5c6-514e-4190-8ac5-8bd66302493d"],
Cell[52772, 1136, 902, 23, 28, "Input",ExpressionUUID->"1571ed99-a23c-4960-8b79-e86ea7951882"],
Cell[CellGroupData[{
Cell[53699, 1163, 1333, 32, 48, "Input",ExpressionUUID->"a58ec1c8-41a6-4b44-8b8b-48c35008ce34"],
Cell[55035, 1197, 11765, 221, 166, "Output",ExpressionUUID->"9dde564c-3053-4f04-b515-4f2a98bb0a90"]
}, Open  ]],
Cell[CellGroupData[{
Cell[66837, 1423, 27602, 491, 162, InheritFromParent,ExpressionUUID->"070561fe-1e21-4b84-a494-6640be04a0f8"],
Cell[94442, 1916, 27603, 491, 166, "Output",ExpressionUUID->"a205b39d-05db-4fe4-8efa-3a4d5ba1046b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[122082, 2412, 1724, 41, 67, "Input",ExpressionUUID->"5f8ee03a-5a6c-4fc8-b268-7b1aba34af42"],
Cell[123809, 2455, 38238, 700, 166, "Output",ExpressionUUID->"b937c2dd-7ee5-4442-87d0-00774bc31d35"],
Cell[162050, 3157, 503, 8, 89, "Output",ExpressionUUID->"878e0191-d8ba-4dca-8bd1-fc5ed558acee"]
}, Open  ]],
Cell[162568, 3168, 5458, 164, 295, "Input",ExpressionUUID->"c7c8062e-a44d-44d6-9860-e4bb30b9612d"],
Cell[168029, 3334, 173, 2, 28, "Input",ExpressionUUID->"075af11f-332b-44ef-b6ed-18482c0a4326"],
Cell[CellGroupData[{
Cell[168227, 3340, 2227, 46, 267, "Input",ExpressionUUID->"1927aef9-607f-4a49-a59a-07062997209f"],
Cell[170457, 3388, 241, 4, 65, "Output",ExpressionUUID->"f6b4d3c3-7628-4cc7-ab8b-b31c2f311bde"],
Cell[170701, 3394, 239, 4, 32, "Output",ExpressionUUID->"5cc5e5cf-2819-46db-a46c-8d0a445105a4"],
Cell[170943, 3400, 466, 10, 36, "Output",ExpressionUUID->"3d290748-81f1-4676-80f0-5a884a1a1fb6"],
Cell[171412, 3412, 241, 4, 32, "Output",ExpressionUUID->"10f9ebc1-347f-42fd-a778-7b8ce6f30299"],
Cell[171656, 3418, 239, 4, 32, "Output",ExpressionUUID->"4a57afd3-a82d-46c4-87f3-ddf5df1017f2"],
Cell[171898, 3424, 466, 10, 36, "Output",ExpressionUUID->"f08267fc-4959-47a1-836a-b99d04431801"],
Cell[172367, 3436, 241, 4, 32, "Output",ExpressionUUID->"17460b5b-8c87-4a6d-8009-9d3e038c5a12"]
}, Open  ]],
Cell[CellGroupData[{
Cell[172645, 3445, 393, 6, 28, "Input",ExpressionUUID->"9a0f02f8-0dcb-4fa0-a434-3dab92e35e3d"],
Cell[173041, 3453, 164, 2, 32, "Output",ExpressionUUID->"e5f3b48f-7714-492a-9560-38992f8b9d91"]
}, Open  ]],
Cell[173220, 3458, 526, 12, 48, "Input",ExpressionUUID->"410c0451-9b50-4726-838d-507ca1520553"],
Cell[173749, 3472, 886, 18, 48, "Input",ExpressionUUID->"25eb0e56-d2cb-4e3c-833f-4d9862c278b6"],
Cell[174638, 3492, 1354, 25, 67, "Input",ExpressionUUID->"66e41b82-96ad-4d5a-885b-44a2b04ac964"],
Cell[175995, 3519, 226, 3, 28, "Input",ExpressionUUID->"266398ea-08f6-44ac-9796-54783f49bc3b"],
Cell[176224, 3524, 3216, 74, 200, "Input",ExpressionUUID->"2c8ae09e-5141-49f8-bc2c-efd2a2324a89"],
Cell[179443, 3600, 487, 10, 28, "Input",ExpressionUUID->"7cf76789-eb97-4c2e-91e6-102698972f28"],
Cell[179933, 3612, 327, 6, 28, "Input",ExpressionUUID->"322b59e5-9d1b-4e2d-aeb2-b791e94df4bc"],
Cell[180263, 3620, 177, 3, 28, "Input",ExpressionUUID->"957a51f1-e3b5-4fcc-a441-b5abb27dc864"],
Cell[180443, 3625, 346, 9, 28, "Input",ExpressionUUID->"d707c0a0-6561-43e9-9fd0-a43a755a3534"],
Cell[180792, 3636, 435, 10, 28, "Input",ExpressionUUID->"e080f098-be02-4782-988d-080fb60799bf"],
Cell[181230, 3648, 407, 6, 28, "Input",ExpressionUUID->"00aac20e-7712-4382-bdcd-1a0f47667dfa"],
Cell[CellGroupData[{
Cell[181662, 3658, 379, 7, 28, "Input",ExpressionUUID->"1d39c30e-2952-4c75-b7a7-9b9256359d5d"],
Cell[182044, 3667, 172, 4, 32, "Output",ExpressionUUID->"b16912a7-6bd9-43bb-a49d-5511231b6070"]
}, Open  ]],
Cell[CellGroupData[{
Cell[182253, 3676, 190, 3, 28, "Input",ExpressionUUID->"8a2df4ce-9c44-47a1-bde1-ff1c4d183497"],
Cell[182446, 3681, 227, 4, 32, "Output",ExpressionUUID->"8f2b40e5-5806-465b-9e7a-d7300441eeee"]
}, Open  ]],
Cell[CellGroupData[{
Cell[182710, 3690, 288, 6, 28, "Input",ExpressionUUID->"c65c0dd0-81b7-4955-8c52-e9b2bed36fa7"],
Cell[183001, 3698, 230, 4, 32, "Output",ExpressionUUID->"1542070a-e517-4611-a234-849b11418754"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183268, 3707, 284, 6, 28, "Input",ExpressionUUID->"9bdfa35f-8e9a-4070-8882-15d68d851348"],
Cell[183555, 3715, 224, 4, 32, "Output",ExpressionUUID->"6b6e4ed5-53b9-4b6b-a4fb-968e16e8883c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183816, 3724, 282, 6, 28, "Input",ExpressionUUID->"3917c014-4521-4d91-8543-b5d914f1cc18"],
Cell[184101, 3732, 223, 4, 32, "Output",ExpressionUUID->"cf65e442-89fa-406f-9041-f2d17d792c9d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[184361, 3741, 333, 7, 28, "Input",ExpressionUUID->"467d54c9-fca1-43d0-97cf-f2d46c7284b1"],
Cell[184697, 3750, 225, 4, 32, "Output",ExpressionUUID->"bee93cc0-1c3f-40f1-b350-34c12374ace2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[184959, 3759, 392, 8, 28, "Input",ExpressionUUID->"f8bb0306-7bc5-4dc8-9d8e-1e8f7ab2e834"],
Cell[185354, 3769, 232, 4, 32, "Output",ExpressionUUID->"c8eedc54-4381-4b1a-b93b-60e7e4880d18"]
}, Open  ]],
Cell[CellGroupData[{
Cell[185623, 3778, 471, 10, 48, "Input",ExpressionUUID->"5e485a53-0caa-4994-a3a3-d3d69cde3b52"],
Cell[186097, 3790, 222, 4, 32, "Output",ExpressionUUID->"0b612e65-5748-4321-8c95-046de8da445b"],
Cell[186322, 3796, 229, 4, 32, "Output",ExpressionUUID->"a00a3cf8-dfec-4d03-be68-f6c0042c65b2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186588, 3805, 252, 4, 28, "Input",ExpressionUUID->"cfb0e200-36f9-494c-88e2-8eba067033a5"],
Cell[186843, 3811, 227, 4, 32, "Output",ExpressionUUID->"2100db1b-2484-4291-a3e1-fb570003fb94"]
}, Open  ]],
Cell[CellGroupData[{
Cell[187107, 3820, 345, 7, 28, "Input",ExpressionUUID->"9db4f7e5-a195-45b4-868f-2359598971c3"],
Cell[187455, 3829, 230, 4, 32, "Output",ExpressionUUID->"4220632d-b7c2-4123-a22c-a72ea1ab4542"]
}, Open  ]],
Cell[187700, 3836, 1802, 37, 86, "Input",ExpressionUUID->"87f57da9-00aa-4b46-ab12-6608300fc354"],
Cell[189505, 3875, 521, 12, 28, "Input",ExpressionUUID->"855d2f73-4d92-458c-92f8-4997982eeb95"],
Cell[CellGroupData[{
Cell[190051, 3891, 264, 5, 28, "Input",ExpressionUUID->"c5d465ea-1c08-42a8-9ef9-344addb687c8"],
Cell[190318, 3898, 214, 4, 32, "Output",ExpressionUUID->"26a1108c-aec8-4052-a1f4-54a489e40d07"]
}, Open  ]],
Cell[CellGroupData[{
Cell[190569, 3907, 249, 5, 28, "Input",ExpressionUUID->"fbec490a-a8cf-4334-a943-dcc80a67bcec"],
Cell[190821, 3914, 202, 4, 32, "Output",ExpressionUUID->"1be33f40-f0ae-46bd-aa3c-ec5454975d5d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[191060, 3923, 406, 10, 48, "Input",ExpressionUUID->"53522faf-b64c-4e4b-98e4-8562af9b3595"],
Cell[191469, 3935, 224, 5, 32, "Output",ExpressionUUID->"15a530b2-1aaf-455b-a918-6f54ca06bad8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[191730, 3945, 256, 5, 28, "Input",ExpressionUUID->"cb59bb07-5383-42bf-81be-5f35fcdab709"],
Cell[191989, 3952, 206, 4, 32, "Output",ExpressionUUID->"ea3b66bf-8d65-428b-a370-494c2e125efc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[192232, 3961, 467, 11, 59, "Input",ExpressionUUID->"0355aab1-cd18-479e-ba9f-08006c50833e"],
Cell[192702, 3974, 278, 5, 44, "Output",ExpressionUUID->"d401f0a0-e92a-4537-ab30-25277a8fdb91"]
}, Open  ]],
Cell[CellGroupData[{
Cell[193017, 3984, 260, 5, 28, "Input",ExpressionUUID->"d08078e9-646b-410d-b3da-7b07d3631460"],
Cell[193280, 3991, 206, 4, 32, "Output",ExpressionUUID->"a424d34d-69fe-43ac-b971-0633d6f799c5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[193523, 4000, 429, 9, 28, "Input",ExpressionUUID->"42c8cf32-1946-44b8-9562-13038f11fb94"],
Cell[193955, 4011, 818, 16, 73, "Output",ExpressionUUID->"88409f04-04e6-41cf-8e81-d6f6917bd240"]
}, Open  ]],
Cell[CellGroupData[{
Cell[194810, 4032, 1167, 23, 28, "Input",ExpressionUUID->"0ab75f01-46a1-4e5f-adf2-7d5307d5762b"],
Cell[195980, 4057, 603, 13, 21, "Message",ExpressionUUID->"1b9d096e-858b-4530-bf6b-059b6d4afb12"],
Cell[196586, 4072, 475, 10, 21, "Message",ExpressionUUID->"a71344ec-a034-458c-b82d-a8ebb55bacba"],
Cell[197064, 4084, 567, 11, 23, "Message",ExpressionUUID->"02572768-66ea-4171-88fe-34ab3a4a3395"],
Cell[197634, 4097, 714, 13, 23, "Message",ExpressionUUID->"89d3ccdc-a04b-4353-8eae-625bce0f773c"],
Cell[198351, 4112, 682, 13, 23, "Message",ExpressionUUID->"e9156196-504e-4e15-973a-e1d1761de886"]
}, Open  ]],
Cell[CellGroupData[{
Cell[199070, 4130, 436, 8, 28, "Input",ExpressionUUID->"6140b4bf-cb5c-4e9a-960e-e3b85328145c"],
Cell[199509, 4140, 2903, 100, 51, "Output",ExpressionUUID->"2c8a68fa-28fd-4b96-b26a-74c993cc20ad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[202449, 4245, 283, 6, 28, "Input",ExpressionUUID->"dd10fb84-5fff-4fba-9083-85431c8f6cfd"],
Cell[202735, 4253, 258927, 4338, 71, "Output",ExpressionUUID->"77531a54-6546-4191-bd16-6f9fe76c5d3b"]
}, Open  ]],
Cell[461677, 8594, 320, 7, 28, "Input",ExpressionUUID->"504bd9cc-d90b-476c-be9f-d82b78e41ae7"],
Cell[CellGroupData[{
Cell[462022, 8605, 323, 6, 28, "Input",ExpressionUUID->"a0308418-3e41-4b79-b3be-d01011649c9a"],
Cell[462348, 8613, 874, 21, 81, "Output",ExpressionUUID->"eadd6488-4368-407b-adeb-a8b45b0bccd4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[463259, 8639, 416, 9, 28, "Input",ExpressionUUID->"c152a1f2-bf7c-435c-8fac-a14c7491d047"],
Cell[463678, 8650, 431, 10, 62, "Output",ExpressionUUID->"cf357641-0adb-4f7d-b564-983b4ecb0a61"]
}, Open  ]],
Cell[464124, 8663, 338, 9, 28, "Input",ExpressionUUID->"1efddd34-8aca-4eb7-83c5-9214d7e9b2d9"],
Cell[464465, 8674, 221, 4, 28, "Input",ExpressionUUID->"1116899d-8fc6-4a3e-ab24-2005f84130e2"],
Cell[464689, 8680, 2145, 45, 316, InheritFromParent,ExpressionUUID->"7c7431ae-110e-42b8-bb56-b54ba12e1049"],
Cell[CellGroupData[{
Cell[466859, 8729, 316, 7, 28, "Input",ExpressionUUID->"1f66a9a9-94bf-4e4c-9195-abd0380ffb92"],
Cell[467178, 8738, 552, 13, 32, "Output",ExpressionUUID->"141c35d2-36f3-4a52-94ab-519a7b6e8900"]
}, Open  ]],
Cell[467745, 8754, 154, 3, 28, InheritFromParent,ExpressionUUID->"17a92354-4aef-4606-8032-e8e9e6238fd8"],
Cell[467902, 8759, 450, 12, 28, "Input",ExpressionUUID->"9e358958-2066-4c09-b911-0db3a4cff49b"],
Cell[468355, 8773, 313, 7, 85, "Input",ExpressionUUID->"0f4d8182-7287-4694-b4bc-38892ec81f4a"]
}
]
*)

