(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1004784,      17140]
NotebookOptionsPosition[    987841,      16876]
NotebookOutlinePosition[    988182,      16891]
CellTagsIndexPosition[    988139,      16888]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsPEMDAS", "=", 
   RowBox[{"{", " ", 
    RowBox[{
    "\"\<What is 2+2\>\"", ",", " ", "\"\<2+3\>\"", ",", 
     "\"\<What is 2+3\>\"", ",", " ", "\"\<What is 1+1\>\"", ",", " ", 
     "\"\<What is 20+22\>\"", ",", " ", "\"\<What is 1+15+21\>\"", ",", " ", 
     "\"\<What is 33+5+8\>\"", ",", " ", 
     "\"\<Simplify (2-5\!\(\*SuperscriptBox[\()\), \(2\)]\)\>\"", ",", " ", 
     "\"\<Simplify 2-\!\(\*SuperscriptBox[\(5\), \(2\)]\)\>\"", ",", " ", 
     "\"\<Simplify 10-7+1\>\"", ",", " ", "\"\<Simplify 10-(7+1)\>\"", ",", 
     " ", "\"\<Simplify 24/(4-2\!\(\*SuperscriptBox[\()\), \(3\)]\)\>\"", ",",
      " ", "\"\<Simplify 4+5(1+12/6\!\(\*SuperscriptBox[\()\), \(2\)]\)\>\"", 
     ",", " ", "\"\<Simplify (15-3)/(1+5)\>\"", ",", " ", "\"\<1+12\>\"", ",",
      " ", "\"\<10% of 11\>\"", ",", " ", "\"\<30+40\>\"", ",", " ", 
     "\"\<15+12\>\"", ",", " ", "\"\<20% of 33\>\"", " ", ",", " ", 
     "\"\<11+12\>\"", ",", " ", "\"\<What is 5% of 100?\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7710111217256823`*^9, 3.7710111540272284`*^9}, {
  3.7710111885866814`*^9, 3.7710113104444427`*^9}, {3.771011349072077*^9, 
  3.7710114614252415`*^9}, {3.7710717742904773`*^9, 3.7710717974684796`*^9}, {
  3.7710825794066696`*^9, 3.7710825944885254`*^9}, {3.7710828568271475`*^9, 
  3.7710828576980124`*^9}, {3.77109972947976*^9, 3.77109975449656*^9}, {
  3.7710997929256735`*^9, 3.7710998004862556`*^9}, {3.7711007075997024`*^9, 
  3.771100733777379*^9}, {3.771101333629407*^9, 3.7711013629989295`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"2333ef13-77fd-4cdf-b6bd-0173171dc2ca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a1QsFractions", "=", 
  RowBox[{"{", 
   RowBox[{
   "\"\<express 3 2/7 as an improper fraction\>\"", ",", " ", 
    "\"\<express 12 1/3 as an improper fraction\>\"", ",", " ", 
    "\"\<Express 42/5 as a mixed number\>\"", ",", " ", 
    "\"\<Express 53/9 as a mixed number\>\"", ",", " ", 
    "\"\<write 3/18 in simplest form\>\"", ",", " ", 
    RowBox[{
    "\"\<write 42/54 in simplest form\>\"", " ", 
     "\"\<What is 3 2/7 as an improper fraction\>\""}], ",", 
    "\"\<What is 12 1/3 as an improper fraction\>\"", ",", 
    "\"\<What is 42/5 as a mixed number\>\"", ",", 
    "\"\<What is 53/9 as a mixed number\>\"", ",", 
    "\"\<What is 3/18 in simplest form\>\"", ",", 
    "\"\<What is 42/54 in simplest form\>\""}], "}"}]}]], "Input",
 CellChangeTimes->{{3.7710119043974237`*^9, 3.771012096049966*^9}, {
  3.771071582527122*^9, 3.77107158335518*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"2d263997-c8cc-4cfe-a7ea-3727e1faf43b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"express 3 2/7 as an improper fraction\"\>", 
   ",", "\<\"express 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"Express 42/5 as a mixed number\"\>", 
   ",", "\<\"Express 53/9 as a mixed number\"\>", 
   ",", "\<\"write 3/18 in simplest form\"\>", ",", 
   RowBox[{"\<\"What is 3 2/7 as an improper fraction\"\>", 
    " ", "\<\"write 42/54 in simplest form\"\>"}], 
   ",", "\<\"What is 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"What is 42/5 as a mixed number\"\>", 
   ",", "\<\"What is 53/9 as a mixed number\"\>", 
   ",", "\<\"What is 3/18 in simplest form\"\>", 
   ",", "\<\"What is 42/54 in simplest form\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.771510174096757*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"274edfd9-ab05-4757-a26f-8ff52ef29019"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"{", 
  RowBox[{
  "\"\<express 3 2/7 as an improper fraction\>\"", ",", 
   "\"\<express 12 1/3 as an improper fraction\>\"", ",", 
   "\"\<Express 42/5 as a mixed number\>\"", ",", 
   "\"\<Express 53/9 as a mixed number\>\"", ",", 
   "\"\<write 3/18 in simplest form\>\"", ",", 
   "\"\<write 42/54 in simplest form\>\""}], "}"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"a1QsOppFrac", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Multiply 24/3 and 27/8\>\"", ",", " ", "\"\<Multiply 8 and 3/24\>\"",
      ",", " ", "\"\<Add 1/2 and 1/3\>\"", ",", " ", 
     "\"\<What is  24/3 * 27/8\>\"", ",", " ", "\"\<What is  8 * 3/24\>\"", 
     ",", " ", "\"\<What is  1/2 + 1/3\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"a1QsAbsoluteVal", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<What is the absolute value of -1?\>\"", ",", " ", 
     "\"\<What is |1|\>\"", ",", " ", "\"\<What is |-30|\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"a1QsNegatice", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<What is 3-(-2)?\>\"", ",", " ", "\"\<What is -3+4\>\""}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"a1QsIntovars", "=", 
  RowBox[{"{", 
   RowBox[{
   "\"\<Evaluate \!\(\*SuperscriptBox[\(a\), \
\(2\)]\)-\!\(\*SuperscriptBox[\(b\), \(2\)]\) when a=5 and b=3\>\"", ",", 
    " ", "\"\<Evaluate a-\!\(\*SuperscriptBox[\(b\), \(2\)]\) when a=4 and \
b=2\>\"", ",", " ", 
    "\"\<Evaluate \!\(\*SuperscriptBox[\(a\), \(2\)]\)+b when a=7 and \
b=1\>\""}], "}"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7710183957665844`*^9, 3.771018693615785*^9}, {
  3.7710715604288125`*^9, 3.7710715669824667`*^9}, {3.771071599899954*^9, 
  3.771071624993181*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"6c60326b-e42a-4217-9c4b-5a627cce92a1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"express 3 2/7 as an improper fraction\"\>", 
   ",", "\<\"express 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"Express 42/5 as a mixed number\"\>", 
   ",", "\<\"Express 53/9 as a mixed number\"\>", 
   ",", "\<\"write 3/18 in simplest form\"\>", 
   ",", "\<\"write 42/54 in simplest form\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7715101741647625`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"b93245ec-03bc-4fcf-a576-9dea6fdff793"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Evaluate \\!\\(\\*SuperscriptBox[\\(a\\), \
\\(2\\)]\\)-\\!\\(\\*SuperscriptBox[\\(b\\), \\(2\\)]\\) when a=5 and \
b=3\"\>", 
   ",", "\<\"Evaluate a-\\!\\(\\*SuperscriptBox[\\(b\\), \\(2\\)]\\) when a=4 \
and b=2\"\>", 
   ",", "\<\"Evaluate \\!\\(\\*SuperscriptBox[\\(a\\), \\(2\\)]\\)+b when a=7 \
and b=1\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.771510174168762*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"50a9a7bf-2c90-478a-8b67-6f8038260d64"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "\"\<express 3 2/7 as an improper fraction\>\"", ",", 
   "\"\<express 12 1/3 as an improper fraction\>\"", ",", 
   "\"\<Express 42/5 as a mixed number\>\"", ",", 
   "\"\<Express 53/9 as a mixed number\>\"", ",", 
   "\"\<write 3/18 in simplest form\>\"", ",", 
   "\"\<write 42/54 in simplest form\>\"", ","}], " ", "}"}]], "Input",
 CellChangeTimes->{{3.771071389445044*^9, 3.7710714057846594`*^9}, {
   3.771071505249978*^9, 3.7710715347214036`*^9}, 3.7710715778464785`*^9},
 CellLabel->"In[8]:=",ExpressionUUID->"13a45433-da7c-48b3-b716-61b7e0f7a0b0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"express 3 2/7 as an improper fraction\"\>", 
   ",", "\<\"express 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"Express 42/5 as a mixed number\"\>", 
   ",", "\<\"Express 53/9 as a mixed number\"\>", 
   ",", "\<\"write 3/18 in simplest form\"\>", 
   ",", "\<\"write 42/54 in simplest form\"\>", ",", "Null"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7715101742127647`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"ad0dfe0e-b4be-49eb-a95a-a874c15bad9b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsCombineLikeTerms", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Combine like terms of 3a-6a+10a-a\>\"", ",", " ", 
     "\"\<Combine the like terms of 5x-10y+6z-3x\>\"", ",", " ", 
     "\"\<Combine like terms of 3n-5\!\(\*SuperscriptBox[\(n\), \(\(2\)\(\\\ \
\)\)]\)+6n-10+2\!\(\*SuperscriptBox[\(n\), \(2\)]\)\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7710187153865156`*^9, 3.7710188213954906`*^9}, 
   3.771101374565879*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"a7ae84c8-e77e-4163-a09b-03f6288de0b4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsDistrbutive", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<5(2x+4)\>\"", ",", " ", 
     "\"\<-3(\!\(\*SuperscriptBox[\(x\), \(2\)]\)-2x+7)\>\"", ",", " ", 
     "\"\<-(5\!\(\*SuperscriptBox[\(x\), \(4\)]\)-8)\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7710188742668247`*^9, 3.7710188984740705`*^9}, {
   3.771019155256483*^9, 3.7710192378708935`*^9}, 3.771101371539567*^9},
 CellLabel->"In[10]:=",ExpressionUUID->"965f7365-78f2-4e84-8c81-fb88f95c8219"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsSolving", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<8x-2=22\>\"", ",", " ", "\"\<-x-2=12\>\"", ",", " ", 
     "\"\<2/3 x+3 =15\>\""}], "}"}]}], " ", ";"}]], "Input",
 CellChangeTimes->{{3.7710193041936626`*^9, 3.771019361406973*^9}, 
   3.771101382125491*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"e9cacc85-48d6-4d31-ab94-5d755d539cc0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsPolynomials", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Factor 3\!\(\*SuperscriptBox[\(x\), \(2\)]\)+4x+1\>\"", ",", " ", 
     "\"\<Factor \!\(\*SuperscriptBox[\(n\), \(2\)]\)+5n+6\>\"", ",", " ", 
     "\"\<Factor \!\(\*SuperscriptBox[\(a\), \(2\)]\)+3a+2\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771019367476872*^9, 3.7710193984622173`*^9}, {
  3.7710194762827587`*^9, 3.7710195744093504`*^9}, {3.7711013112902584`*^9, 
  3.7711013126543474`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"7421c56f-d5af-4df6-8034-ece5d5384058"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsPercent", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<A $750 watch is on sale for 15% off. Find the sale price.\>\"", ",", 
     " ", "\"\<A salesman tells you that the $140 earrings are already marked \
20% off. What\nwas the original price?\>\"", ",", " ", 
     "\"\<Tommy\[CloseCurlyQuote]s grandma gave him a $50 gift card to Toys R \
Us for his birthday.\nSales tax is currently 9%. Determine the price of the \
most expensive toy Tommy can buy with\nthe $50 gift card.\>\"", ",", " ", 
     "\"\<A salesman is paid a monthly salary of $2,300 plus 7% commission on \
his monthly sales.\nDetermine the amount of sales required for his total \
monthly income to be $3,000.\>\"", ",", " ", "\[IndentingNewLine]", 
     "\"\<What is 10% of 100\>\"", ",", " ", "\"\<What is 4% of 16?\>\"", ",",
      " ", "\"\<200% of 3\>\"", ",", " ", "\"\<What is 45+300+4\>\"", ",", 
     " ", "\"\<30+30\>\"", ",", " ", "\"\<90+200\>\"", ",", " ", 
     "\"\<1+5\>\"", ",", " ", "\"\<34+1\>\"", ",", " ", "\"\<10% of 11\>\"", 
     ",", " ", "\"\<5% of 112\>\"", ",", " ", "\"\<41+2\>\""}], " ", "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.77101961019419*^9, 3.7710196924983225`*^9}, {
   3.77107136787315*^9, 3.7710713732095246`*^9}, {3.7710825303308954`*^9, 
   3.771082555173584*^9}, 3.7711013068393455`*^9, {3.771103600684926*^9, 
   3.771103646960228*^9}, {3.7711039584884386`*^9, 3.771103975026537*^9}, {
   3.7711041538209133`*^9, 3.7711041766438804`*^9}, {3.7711049603491745`*^9, 
   3.771104971313301*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"e86a1b17-fc00-41b9-8941-ba78eb4e043a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1Questions", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"{", 
     RowBox[{
     "a1QsAbsoluteVal", ",", " ", "a1QsCombineLikeTerms", ",", " ", 
      "a1QsDistrbutive", ",", " ", "a1QsFractions", ",", " ", "a1QsIntovars", 
      ",", " ", "a1QsPEMDAS", ",", " ", "a1QsSolving", ",", " ", 
      "a1QsOppFrac", ",", " ", "a1QsPercent", ",", " ", "a1QsNegatice"}], 
     "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7710197639313936`*^9, 3.77101991115589*^9}, {
  3.7711012946740265`*^9, 3.7711012982787495`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"5d0e39cd-11b1-4595-aeb9-0fdbd16ece9d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra2Qs", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<What is the most specific subset of the real numbers that -7 is a \
part of?\>\"", ",", " ", "\"\<Plot 1.25, 2/3 and 2 on a number line\>\"", ",",
      " ", "\"\<Identify the property used in the equations below as \
distributive, inverse or associative\>\"", ",", " ", 
     "\"\<Evaluate 2\!\(\*SuperscriptBox[\(x\), \(2\)]\)-9 for x=-3\>\"", ",",
      "  ", "\"\<Expand (a+b\!\(\*SuperscriptBox[\()\), \(3\)]\)\>\"", ",", 
     " ", "\"\<What is (a+b\!\(\*SuperscriptBox[\()\), \(n\)]\) (Hint: What \
theorem is this?)\>\"", ",", " ", "\"\<Solve 4x-9=11\>\"", ",", " ", 
     "\"\<Solve 3(x-5)+4=10\>\"", ",", " ", "\"\<Solve 3(x-5)+4=10\>\"", ",", 
     " ", "\"\<Solve 9(x-3)+4=10\>\"", ",", " ", 
     "\"\<Solve (x-1/2)=(2x+3)\>\"", ",", "\"\<Solve 3|x-5|=12\>\"", ",", 
     "\"\<Solve 8(x-5)+4=10\>\"", ",", 
     "\"\<Solve (\!\(\*SuperscriptBox[\(x\), \(2\)]\)-5)=20\>\"", ",", "  ", 
     "\"\<Use the law of sines to find the missing side of this triangle\>\"",
      ",", " ", 
     "\"\<What is the largest value for the missing side of this \
triangle\>\"", ",", " ", "\"\<What is sin(60)\>\"", ",", " ", 
     "\"\<What is tan(30)\>\"", ",", " ", 
     "\"\<Write 30 degrees in radians\>\"", ",", " ", 
     "\"\<Write \[Pi]/4 in degrees\>\"", ",", " ", 
     "\"\<Is x=-8 a solution to 1/2x+6>3?\>\"", ",", "  ", 
     "\"\<Solve and graph the solution to 2x-3<7\>\"", ",", " ", 
     "\"\<Solve and graph the solution to |3x-1|\[GreaterEqual]10\>\"", ",", 
     "  ", "\"\<How many miutes are in a day?\>\"", ",", " ", 
     "\"\<Wrie the standard form of y=3/2 x+2\>\"", ",", " ", 
     "\"\<Write slope intercept form for a slope of 2 and y-intercept of 12\>\
\"", ",", " ", 
     "\"\<Find a perpedicular line of y=3x+2 with y intercept of the origin\>\
\"", ",", 
     "\"\<What are the domain and range of the trigonometric functions?\>\"", 
     " ", ",", " ", "\"\<Graph the inequality y<3x+4\>\"", ",", " ", 
     "\"\<Find the equation of best fit for the below listed data\>\"", ",", 
     " ", "\"\<Graph the parabola give by \!\(\*SuperscriptBox[\(x\), \
\(2\)]\)+3x+2. Find the zeros, vertex and intercept\>\"", ",", " ", 
     "\"\<What is the sum from 1 to 5 of a=10n+3\>\"", ",", " ", 
     "\"\<What is the next term in the series \>\"", ",", " ", 
     "\"\<what is the sum of the geometric series from 1 to infinity of \
9(1/10\!\(\*SuperscriptBox[\()\), \(n\)]\)?\>\"", ",", " ", 
     "\"\<What are the discontiuities in the function y=(x+2)/(x+3x+2). Which \
are fundamental and which are removable?\>\"", ",", " ", 
     "\"\<What is ln(1)?\>\"", ",", " ", 
     "\"\<What are the domain and range of \!\(\*SuperscriptBox[\(e\), \(x\)]\
\) and ln(x)\>\"", ",", " ", "\"\<sin(40)\>\"", ",", " ", "\"\<cos(45)\>\"", 
     ",", " ", "\"\<tan(63)\>\"", ",", " ", "\"\<sin(121)\>\"", ",", " ", 
     "\"\<sin(\[Pi]/3)\>\"", ",", " ", "\"\<sin(\[Pi]/5)\>\"", ",", " ", 
     "\"\<cos(\[Pi]/13)\>\""}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7710582068470354`*^9, 3.771058864236945*^9}, {
   3.77105889644958*^9, 3.771059060194398*^9}, {3.771059094253581*^9, 
   3.7710591689725113`*^9}, {3.771059213441484*^9, 3.771059436664031*^9}, {
   3.771083696942418*^9, 3.7710837178362527`*^9}, 3.7711012136346254`*^9, {
   3.771103066357688*^9, 3.771103174458703*^9}, {3.7711034741487684`*^9, 
   3.771103548963587*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"82a03de3-0e12-4c59-bb42-528749c4d97e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"calcQspcalc", "=", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Evaluate f(x)=3-5x-2\!\(\*SuperscriptBox[\(x\), \(2\)]\) for the \
below values: f(0), f(x+h), f(6-t)\>\"", ",", " ", 
      "\"\<Compute  the difrence quotient for the given function\>\"", ",", 
      "  ", "\"\<Find the domain of (\!\(\*SuperscriptBox[\(w\), \
\(3\)]\)-3w+1)/(12 w-7)\>\"", ",", 
      "\"\<Find the inverse of f (x) = 6x +15\>\"", ",", " ", 
      "\"\<Find inverse of W (x) =  (9 \[Minus]11x\!\(\*SuperscriptBox[\()\), \
\(1/5\)]\)\>\"", ",", " ", 
      "\"\<Find the exact value of cos(5 \[Pi]/6) without using a \
calculator\>\"", ",", " ", 
      "\"\<Find the exact value of sin(-4 \[Pi]/3) without using a calculator\
\>\"", ",", " ", "\"\<Solve  4sin (3t ) = 2\>\"", ",", " ", 
      "\"\<Solve 4sin (3t ) = 2 in [0, 4\[Pi]/3], 2cos(x/3) \
+\!\(\*SuperscriptBox[\(2\), \(0.5\)]\) = 0 in [\[Minus]7\[Pi] ,7\[Pi] }\>\"",
       ",", " ", "\"\<Solve 4y sec(7 y) = \[Minus]21y\>\"", ",", " ", 
      "\"\<Solve 3\[Minus]14sin (12t + 7) =13\>\"", ",", " ", 
      "\"\<Solve 3sec(4 \[Minus] 9z) \[Minus] 24 = 0\>\"", ",", " ", 
      "\"\<Sketch the graph of f(x)=\!\(\*SuperscriptBox[\(3\), \(1 + 2  x\)]\
\)\>\"", ",", " ", 
      "\"\<Sketch the graph of h(x)=8+3\!\(\*SuperscriptBox[\(e\), \(2  t - 4\
\)]\)\>\"", ",", "  ", 
      "\"\<Determine ln(\!\(\*SuperscriptBox[\(e\), \(4\)]\))\>\"", ",", " ", 
      "\"\<Combine 2 \!\(\*SubscriptBox[\(log\), \(4\)]\)x +5 \
\!\(\*SubscriptBox[\(log\), \(4\)]\)y - 1/2 \!\(\*SubscriptBox[\(log\), \
\(4\)]\)x\>\"", " ", ",", " ", 
      "\"\<For the function W(x)=ln(1+\!\(\*SuperscriptBox[\(x\), \(4\)]\)) \
and the point x=1, find the secants at point Q and the tangenet line\>\"", 
      ",", " ", 
      "\"\<For the function f(x)=(8-\!\(\*SuperscriptBox[\(x\), \(2\)]\))/(\!\
\(\*SuperscriptBox[\(x\), \(2\)]\)-4), find the values at the below listed \
points and th limit as x aproaches 2\>\"", ",", "  ", ",", " ", 
      "\"\<For the function f(y)= sin(y)/y find the value at the below listed \
points and the limit as y approaches 0\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7710601633187313`*^9, 3.7710602840576377`*^9}, {
   3.7710603739809523`*^9, 3.7710610326160107`*^9}, {3.7710611060732737`*^9, 
   3.771061255410469*^9}, {3.7710613977488184`*^9, 3.771061607861419*^9}, {
   3.7710707202458553`*^9, 3.7710707343529253`*^9}, {3.771083528708667*^9, 
   3.7710835661734114`*^9}, 3.7711012380737867`*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"a376c96d-0f17-43df-a243-6359725f0331"],

Cell[BoxData[
 RowBox[{
  RowBox[{"calcQsderivs", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<For the function f(x)=(8-\!\(\*SuperscriptBox[\(x\), \(2\)]\))/(\!\(\
\*SuperscriptBox[\(x\), \(2\)]\)-4), use L'Hoptial's rule to find the limit \
as x aproaches 2\>\"", ",", "  ", 
     "\"\<For the function (2-(\!\(\*SuperscriptBox[\(t\), \
\(2\)]\)+3\!\(\*SuperscriptBox[\()\), \(1/2\)]\))/(t+1), L'Hoptial's rule to \
find the limit as x approaches -1\>\"", ",", " ", 
     "\"\<Use the definition of the derivative to find the derivative of \
f(x)=6\>\"", ",", " ", 
     "\"\<Use the definition of the derivative to find the derivative of V (t \
) = 3\[Minus]14t\>\"", ",", " ", "\[IndentingNewLine]", " ", 
     "\"\<Use the definition of the derivative to find the derivative of \
z(n)= (n+1)/(n+4)\>\"", ",", "\[IndentingNewLine]", 
     "\"\<Use the chain rule to find the derivative of \
Q(t)=(3\!\(\*SuperscriptBox[\(t\), \(3\)]\)-4\!\(\*SuperscriptBox[\()\), \
\(1/2\)]\)\>\"", ",", " ", 
     "\"\<Use the quotient rule to find the derivative of z(n)= \
(z+1\!\(\*SuperscriptBox[\()\), \(1/2\)]\)/(z+4)\>\"", ",", " ", 
     "\[IndentingNewLine]", 
     "\"\<Find the deriviative of f (x) = 2cos(x) \[Minus] 6sec(x) + 3\>\"", 
     ",", " ", 
     "\"\<Find the deriviative of g (z) =10 tan (z) \[Minus] 2cot (z)\>\"", 
     ",", " ", "\"\<Find the deriviative of  tan (w)sec(w)\>\"", ",", " ", 
     "\"\<Find the deriviative of R(t)=(t+ tan(t))/(1+csc(t))\>\"", ",", " ", 
     "\"\<Find the derivative of f(x)=2\!\(\*SuperscriptBox[\(e\), \
\(x\)]\)-\!\(\*SuperscriptBox[\(8\), \(x\)]\)\>\"", ",", " ", 
     "\"\<Find the derivative of g(t)=4 \!\(\*SubscriptBox[\(log\), \
\(3\)]\)(t)-ln(t)\>\"", ",", " ", 
     "\"\<Find the derivative of 2 cos(x)+arccos(x)\>\"", " ", ",", " ", 
     "\"\<Find the derivative of \!\(\*SuperscriptBox[\(x\), \
\(2\)]\)/\!\(\*SuperscriptBox[\(y\), \(3\)]\)=1\>\"", ",", " ", 
     "\"\<Find extrema of f(x)=12+6\!\(\*SuperscriptBox[\(x\), \
\(2\)]\)-\!\(\*SuperscriptBox[\(x\), \(3\)]\)\>\"", ",", " ", 
     "\"\<Find extrema of g(w)=tan (w)sec(w)\>\"", ",", " ", 
     "\"\<find the taylor expanision of g(w)=tan (w)sec(w) at w=\[Pi]/4\>\"", 
     ",", " ", 
     "\"\<Find the MacLauren Expanision of z(n)= (z+1\!\(\*SuperscriptBox[\()\
\), \(1/2\)]\)/(z+4)\>\"", ",", " ", "\"\<Find the Derivative\>\"", ",", " ", 
     "\"\<What is the Deriviative\>\"", ",", " ", 
     "\"\<Evaluate the derivative\>\"", ",", " ", 
     "\"\<Integral of ln(x) dx\>\"", ",", " ", 
     "\"\<Integral of f(x)=x ln(x) from 0 to 10\>\"", ",", " ", 
     "\"\<Integral of tan(x)\>\"", ",", " ", 
     "\"\<Integral of (1+x\!\(\*SuperscriptBox[\()\), \(1/2\)]\)\>\""}], 
    "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7710613709186153`*^9, 3.771061384907164*^9}, {
   3.7710616124774094`*^9, 3.7710616655644417`*^9}, {3.7710617100829606`*^9, 
   3.7710618108407326`*^9}, {3.771061850599373*^9, 3.7710619681588216`*^9}, {
   3.771062006314955*^9, 3.7710621511121435`*^9}, {3.771062535101706*^9, 
   3.7710626530990715`*^9}, {3.771062685514902*^9, 3.771062905169672*^9}, {
   3.771083128947034*^9, 3.7710831451490726`*^9}, 3.7710834388275137`*^9, {
   3.771083811256686*^9, 3.7710838448272*^9}, 3.771101228641127*^9, {
   3.771103378443286*^9, 3.771103451873962*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"222a3863-676a-4a91-8ed5-bf086815e19f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"calcQsIntegral", "=", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Find \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) \
\[Minus]18\!\(\*SuperscriptBox[\(x\), \(2\)]\) + 7 dx\>\"", ",", " ", 
      "\"\<Find \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) dx \
\[Minus]18x + 7\>\"", ",", " ", 
      "\"\<Evaluate \[Integral]z^6 + 4z^4 \[Minus] z^2 dz\>\"", " ", ",", 
      "\"\<Determine f (x) given that f'(x) = 6x^8 \[Minus] 20x^4 + x^2 + 9\>\
\"", ",", " ", "\"\<Find \[Integral] 2cos (w) \[Minus] sec(w) tan (w)dw\>\"", 
      ",", " ", 
      "\"\<Find \[Integral]12 + csc(\[Theta] ) [sin (\[Theta] ) + \
csc(\[Theta] )] d\[Theta]\>\"", ",", "\[IndentingNewLine]", 
      "\"\<What is \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) \
\[Minus]18\!\(\*SuperscriptBox[\(x\), \(2\)]\) + 7 dx\>\"", ",", " ", 
      "\"\<Find \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) dx \
\[Minus]18x + 7\>\"", ",", "\[IndentingNewLine]", 
      "\"\<What is the integral of sin(2x)?\>\"", ",", " ", 
      "\"\<Find the area under the curve of |x| from -1 to 1\>\"", ",", " ", 
      "\"\<What is the area under the curve \!\(\*SuperscriptBox[\(sin\), \(2\
\)]\)x from 0 to \[Pi]/2\>\"", ",", " ", "\"\<Find the integral\>\"", ",", 
      " ", "\"\<What is the integral of x dx\>\"", ",", " ", 
      "\"\<Derivative of f(x)=\!\(\*SuperscriptBox[\(x\), \(2\)]\)\>\"", ",", 
      " ", "\"\<Integral of x dx\>\"", ",", " ", 
      "\"\<Integral of \!\(\*SuperscriptBox[\(e\), \(y\)]\) dy\>\"", ",", 
      " ", "\"\<Derivative of \!\(\*SuperscriptBox[\(x\), \(3\)]\)\>\"", ",", 
      " ", "\"\<Derivative of x\>\"", ",", " ", 
      "\"\<Derivative of f(x)=20 ln(x)\>\"", ",", " ", 
      "\"\<Derivative of x/(x+1\!\(\*SuperscriptBox[\()\), \(2\)]\)\>\"", ",",
       " ", "\"\<Derivative of \!\(\*SuperscriptBox[\(x\), \(n\)]\)\>\"", ",",
       " ", "\"\<Derivative with respect to x\>\"", ",", " ", 
      "\"\<Derivative of \!\(\*SuperscriptBox[\(x\), \(3\)]\)\>\""}], "}"}]}],
    ";"}], " "}]], "Input",
 CellChangeTimes->{{3.7710629557064366`*^9, 3.771063175011337*^9}, {
  3.7710705208432536`*^9, 3.7710706472117586`*^9}, {3.771083157663864*^9, 
  3.7710831939580765`*^9}, {3.771083409161805*^9, 3.7710834215095205`*^9}, {
  3.7710838521801443`*^9, 3.771083899380905*^9}, {3.77108395416064*^9, 
  3.7710839612743645`*^9}, {3.7710840024611387`*^9, 3.7710840037268524`*^9}, {
  3.7710893022644253`*^9, 3.7710893039790277`*^9}, {3.771100980753831*^9, 
  3.771101027715567*^9}, {3.7711029731478615`*^9, 3.771103032713256*^9}, {
  3.771104068418116*^9, 3.7711041148737974`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"82bd9a2c-9f48-402b-90c8-7cb9d90eee9e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"calcQs", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"{", 
     RowBox[{
     "calcQspcalc", ",", " ", "calcQsIntegral", ",", " ", "calcQsderivs"}], 
     "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771063178168848*^9, 3.771063202032632*^9}, {
   3.7710832208648396`*^9, 3.7710832477843122`*^9}, 3.7711030484073133`*^9},
 CellLabel->"In[19]:=",ExpressionUUID->"9c835307-f52b-4c42-8b0e-c58da6c73503"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"algebra2set", "=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{
      "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\algebra_2_set.pdf\>\"", ",", " ", "\"\<Plaintext\>\""}], 
      "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<.)\>\"", ",", " ", "\"\< \\r\\n\>\""}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"algebra2set", "=", 
   RowBox[{"algebra2set", "/.", 
    RowBox[{"\"\<\>\"", "\[Rule]", "Nothing"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7711120076672792`*^9, 3.7711120625554457`*^9}, {
   3.7711121558516006`*^9, 3.771112156475644*^9}, {3.7711123345075665`*^9, 
   3.7711123519011602`*^9}, {3.7711124575278187`*^9, 
   3.7711125792356033`*^9}, {3.7711129500643063`*^9, 
   3.7711129744580154`*^9}, {3.7711135154660063`*^9, 3.771113528502914*^9}, {
   3.7711135747654824`*^9, 3.7711136239169626`*^9}, {3.7711136598725877`*^9, 
   3.7711136673051133`*^9}, {3.7711138005283823`*^9, 3.771113882444995*^9}, {
   3.771113923861324*^9, 3.7711139967667465`*^9}, 3.7711140366803074`*^9, {
   3.771115247995644*^9, 3.771115290794779*^9}, {3.7714075129150295`*^9, 
   3.7714075212076015`*^9}, {3.7714079867932816`*^9, 
   3.7714079961101527`*^9}, {3.771408041492993*^9, 3.771408086566082*^9}, {
   3.77140893564396*^9, 3.7714089415483866`*^9}, {3.7714099626364465`*^9, 
   3.7714100979099627`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"75320f2e-dcf8-44e4-a6d6-2ae166718cea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.7714100755563707`*^9, 3.771410080688718*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"b66b3ba1-ab74-45a5-8467-dbae2cc45c3d"],

Cell[BoxData[
 RowBox[{"{", "3470", "}"}]], "Output",
 CellChangeTimes->{3.7715101766089344`*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"28257d28-3b86-41c2-94c6-e5cd13bca960"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"algebra2set", "[", 
  RowBox[{"[", 
   RowBox[{"120", ";;", "130"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7714929809860134`*^9, 3.7714930123642015`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"f8211263-5caf-4966-8332-3088ef6adc52"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"53\"\>", ",", "\<\"    - 7x + 10 = - x + 4 \"\>", 
   ",", "\<\"54\"\>", ",", "\<\"    - 4x + 7 = 6x - 83 \"\>", 
   ",", "\<\"\\r\\n\"\>", ",", "\<\"197     3\\r\\n55\"\>", 
   ",", "\<\"    7x + 1 =     /  +  / x \"\>", ",", "\<\"5     5\\r\\n\"\>", 
   ",", "\<\"56\"\>", ",", "\<\"    x + 3 = 7x + 63 \"\>", 
   ",", "\<\"57\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7715101766689367`*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"5cfd8b3b-a27f-4902-bbe7-013f21110686"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"algebra2Qs", ",", " ", "algebra2set"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.7711153238971057`*^9, 3.7711153701043634`*^9}, 
   3.7714075253799353`*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"4d882cf2-cadf-422e-aa45-f2e75454a042"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"algebra2Qs", "=", 
    RowBox[{"Flatten", "[", "algebra2Qs", "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Algebra", " ", "2", " ", "eats", " ", "eaverything", " ", "now"}], ",", 
    " ", 
    RowBox[{"but", " ", "this", " ", "is", " ", "good"}], ",", " ", 
    RowBox[{
    "can", " ", "do", " ", "for", " ", "the", " ", "rest", " ", "of", " ", 
     "the", " ", "types"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.771112075136426*^9, 3.771112125458478*^9}, {
   3.7711123851826544`*^9, 3.7711124082559347`*^9}, {3.7711140417686634`*^9, 
   3.7711140462529755`*^9}, 3.7711140840312815`*^9, {3.7711141663660173`*^9, 
   3.7711141784225335`*^9}, {3.7711142415860786`*^9, 3.7711142709325714`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"c682d2c2-cecf-4416-9beb-d00d0da3e4f3"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7711121110671053`*^9, 3.771112115205637*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"568cbba2-205d-43c3-b6bd-e23a73e39cba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1set", ":=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{
      "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\algebra_1_set.pdf\>\"", ",", " ", "\"\<Plaintext\>\""}], 
      "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<.)\>\"", ",", "  ", "\"\< \\r\\n\>\""}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771114780231673*^9, 3.771114802941305*^9}, {
  3.7711149655562925`*^9, 3.771115000928453*^9}, {3.7711150811480117`*^9, 
  3.771115086204361*^9}, {3.771410103166297*^9, 3.77141010406636*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"b11e39b9-7017-44bc-a385-0b07d552a794"],

Cell[BoxData[
 RowBox[{
  RowBox[{"settoappend", "=", 
   RowBox[{"algebra1set", "/.", 
    RowBox[{"\"\<\>\"", "\[Rule]", "Nothing"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7711148118338814`*^9, 3.771114908463847*^9}, {
  3.7711150974731426`*^9, 3.7711151965200577`*^9}, {3.771408232430397*^9, 
  3.7714082604615946`*^9}, {3.7714101141711454`*^9, 3.771410134840543*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"f2914d32-3898-4e48-bf07-c89efc28a175"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"algebra1Questions", ",", " ", "settoappend"}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771115205960713*^9, 3.771115225430067*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"45bf30fe-2ff2-417c-b0d5-9bcaed87df8f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1Questions", "=", 
   RowBox[{"Flatten", "[", "algebra1Questions", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7711152299584055`*^9, 3.77111523891906*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"cf4f547c-9e66-4b6e-b324-93cb9ff9ea9f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1Questions", "=", 
   RowBox[{"AppendTo", "[", 
    RowBox[{"algebra1Questions", ",", " ", 
     RowBox[{"StringSplit", "[", 
      RowBox[{
       RowBox[{"Import", "[", 
        RowBox[{
        "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\Maths Question Generator.pdf\>\"", ",", " ", 
         "\"\<Plaintext\>\""}], "]"}], ",", " ", "\"\<\\n\>\""}], "]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771149045287571*^9, 3.771149110757823*^9}, {
  3.771151025984123*^9, 3.7711510342007504`*^9}, {3.7714101914471455`*^9, 
  3.771410213824761*^9}, {3.7715085208047056`*^9, 3.7715085368418107`*^9}, {
  3.77150973366519*^9, 3.771509746962172*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"102780d6-70d9-4d69-b9aa-dab665404545"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771149127407035*^9, 3.771149145932294*^9}, {
  3.7715094615774612`*^9, 3.7715094637096634`*^9}, {3.7715097583109093`*^9, 
  3.7715097631713*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"796a2e9c-8057-4199-a61d-18737ea5c77f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1Questions", "=", 
   RowBox[{"AppendTo", "[", 
    RowBox[{"algebra1Questions", ",", " ", 
     RowBox[{"StringSplit", "[", 
      RowBox[{
       RowBox[{"Import", "[", 
        RowBox[{
        "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\Addition Question Generator.pdf\>\"", ",", " ", 
         "\"\<Plaintext\>\""}], "]"}], ",", " ", "\"\<\\n\>\""}], "]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771509774276024*^9, 3.7715097756161165`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"a2e10f07-4728-467e-9476-720a45f82e9f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Length", "[", "algebra1Questions", "]"}], "/", 
  RowBox[{"Length", "[", "algebra2Qs", "]"}]}]], "Input",
 CellChangeTimes->{{3.771149200951104*^9, 3.771149240069831*^9}, 
   3.771173306999384*^9, {3.7714102298938265`*^9, 3.771410249607214*^9}, {
   3.771509504488511*^9, 3.77150954152309*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"5e97059b-605d-41af-bf6a-9add47d91f50"],

Cell[BoxData[
 FractionBox["663", "1757"]], "Output",
 CellChangeTimes->{3.7715101773529854`*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"96fd058e-7b89-4311-adfc-1d47e1116932"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"polydiffurl", "=", 
  "\"\<https://math.ly/api/v1/calculus/polynomial-differentiation.json\>\""}]]\
, "Input",
 CellChangeTimes->{{3.7711514475428724`*^9, 3.7711514768209143`*^9}, {
  3.7711518244068594`*^9, 3.771151863997607*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"3622a052-38d9-47fa-b1f3-baec31be1a1e"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/polynomial-differentiation.\
json\"\>"], "Output",
 CellChangeTimes->{3.7715101774369907`*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"86ef8658-b23f-4fa7-9bf6-6badb8c9ca49"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"s", "=", 
   RowBox[{
    RowBox[{"Import", "[", 
     RowBox[{"polydiffurl", ",", " ", "\"\<Data\>\""}], " ", "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{"s", "=", 
  RowBox[{"\"\<question\>\"", "/.", "s"}]}]}], "Input",
 CellChangeTimes->{{3.7711514831933584`*^9, 3.7711515672774487`*^9}, {
   3.7711517082965136`*^9, 3.771151743302946*^9}, {3.7711518471804204`*^9, 
   3.7711518890793953`*^9}, {3.7711520237376146`*^9, 3.771152169092266*^9}, {
   3.7711528706872387`*^9, 3.77115295321529*^9}, {3.771153038758667*^9, 
   3.771153051718769*^9}, 3.771153756577385*^9, {3.771157365990517*^9, 
   3.7711573666509705`*^9}, 3.7711575213869724`*^9},
 CellLabel->"In[36]:=",ExpressionUUID->"caaa5ecf-7ab4-401d-a3be-1c829e3f17a2"],

Cell[BoxData["\<\"<mfrac><mo>&DifferentialD;</mo><mrow><mo>&DifferentialD;</\
mo><mi>x</mi></mrow></mfrac><mo> ( </mo><mn>10</mn><mo> + \
</mo><mn>4</mn><msup><mi>x</mi><mrow><mrow><mo> - \
</mo><mn>1</mn></mrow></mrow></msup><mo> + \
</mo><mn>7</mn><msup><mi>x</mi><mrow><mrow><mo> - \
</mo><mn>2</mn></mrow></mrow></msup><mo> + \
</mo><mn>2</mn><msup><mi>x</mi><mrow><mrow><mo> - \
</mo><mn>3</mn></mrow></mrow></msup><mo> ) </mo>\"\>"], "Output",
 CellChangeTimes->{3.7715101777530146`*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"84ee8c29-4d06-4501-87c6-dba2ee940272"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"callAPI", "[", "\[IndentingNewLine]", "\t", 
    RowBox[{
    "problemType_String", ",", " ", "\[IndentingNewLine]", "\t", 
     "howmany_Integer", ",", " ", "\[IndentingNewLine]", "\t", 
     RowBox[{"difficulty_", " ", ":", " ", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Beginner\>\"", " ", "|", " ", "\"\<Intermediate\>\"", " ", "|", 
        " ", "\"\<Advanced\>\""}], ")"}]}], ",", "\[IndentingNewLine]", "\t", 
     RowBox[{"showAnswers_", " ", ":", " ", 
      RowBox[{"(", 
       RowBox[{"True", " ", "|", " ", "False"}], ")"}]}]}], " ", "]"}], " ", ":=",
    " ", "\[IndentingNewLine]", 
   RowBox[{"URLExecute", "[", "\[IndentingNewLine]", 
    RowBox[{
    "\"\<https://www.wolframcloud.com/objects/erinc/WPGform\>\"", ",", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"\"\<ProblemType\>\"", " ", "\[Rule]", " ", "problemType"}], 
       ",", " ", "\[IndentingNewLine]", "\t", 
       RowBox[{"\"\<HowMany\>\"", " ", "\[Rule]", " ", "howmany"}], ",", 
       "\[IndentingNewLine]", "\t", 
       RowBox[{"\"\<Difficulty\>\"", " ", "\[Rule]", "  ", "difficulty"}], 
       ",", " ", "\[IndentingNewLine]", "\t", 
       RowBox[{"\"\<SimpleOrFull\>\"", " ", "\[Rule]", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"TrueQ", "[", "showAnswers", "]"}], ",", " ", 
          "\"\<Full\>\"", ",", " ", "\"\<Simple\>\""}], "]"}]}], ",", " ", 
       "\[IndentingNewLine]", "\t", 
       RowBox[{"\"\<_key\>\"", " ", "\[Rule]", " ", "\"\<WSC2019\>\""}]}], 
      " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"necessary", " ", "permission", " ", "key"}], " ", "-", " ", 
        RowBox[{"DO", " ", "NOT", " ", "SHARE"}]}], " ", "*)"}], " ", 
      "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7714107918700476`*^9, 3.7714108092832623`*^9}, 
   3.7714109118466578`*^9, {3.771411027682988*^9, 3.7714110381397114`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"ecc237eb-c7c5-4f4c-802d-a347edb29d8d"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7714110458842516`*^9, 3.77141110989114*^9}, {
   3.771428209703794*^9, 3.7714282311370287`*^9}, {3.771429002195444*^9, 
   3.7714290156219864`*^9}, 3.771492072930728*^9},
 CellLabel->"In[39]:=",ExpressionUUID->"27ab713a-2eff-460c-a212-f7c044730315"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"For", " ", "[", 
   RowBox[{
    RowBox[{"i", "<", "0"}], ",", " ", 
    RowBox[{"i", "<", "2000"}], ",", " ", 
    RowBox[{"i", "++"}], ",", " ", 
    RowBox[{
     RowBox[{"calcQs", "=", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"calcQs", ",", " ", 
        RowBox[{"callAPI", "[", 
         RowBox[{
         "\"\<CalculusSummary\>\"", ",", " ", "1", ",", 
          "\"\<Intermediate\>\"", ",", " ", "False"}], "]"}]}], "]"}]}], 
     ";"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"algebra1Questions", "=", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"algebra1Questions", ",", " ", 
       RowBox[{"callAPI", "[", 
        RowBox[{
        "\"\<ArthematicSummary\>\"", ",", " ", "1000", ",", " ", 
         "\"\<Intermediate\>\"", ",", " ", "False"}], "]"}]}], "]"}]}], ";"}],
    "*)"}]}]}], "Input",
 CellChangeTimes->{{3.771431233399534*^9, 3.771431347410571*^9}, {
  3.771492059437797*^9, 3.7714920638300953`*^9}, {3.7714927926328416`*^9, 
  3.771492796225038*^9}, {3.7715105635792522`*^9, 3.771510599345747*^9}},
 CellLabel->
  "In[126]:=",ExpressionUUID->"d115907f-0489-4c18-846c-70d8b91076f7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"calcQs", "=", 
   RowBox[{"Flatten", "[", "calcQs", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7714256793003793`*^9, 3.7714256913789573`*^9}},
 CellLabel->
  "In[127]:=",ExpressionUUID->"30fa7177-112c-4b2f-8d75-ad044976cb11"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"algebra1Questions", "=", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"algebra1Questions", ",", " ", 
       RowBox[{"callAPI", "[", 
        RowBox[{
        "\"\<AlgebraSummary\>\"", ",", " ", "100", ",", " ", 
         "\"\<Beginner\>\"", ",", " ", "False"}], "]"}]}], "]"}]}], ";"}], 
   "*)"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.771492005559911*^9, 3.771492045824831*^9}, 
   3.771492088143782*^9, {3.771492781980096*^9, 3.7714927883764925`*^9}, {
   3.7715100309315467`*^9, 3.7715100437484407`*^9}, 3.771510090047671*^9},
 CellLabel->"In[42]:=",ExpressionUUID->"1b4a1e63-2ed8-4e94-980a-6acdb5398e92"],

Cell[BoxData[
 RowBox[{
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{"i", "=", "0"}], ",", " ", 
    RowBox[{"i", "<", "1000"}], ",", " ", 
    RowBox[{"i", "++"}], ",", " ", 
    RowBox[{
     RowBox[{"algebra1Questions", "=", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"algebra1Questions", ",", " ", 
        RowBox[{"callAPI", "[", 
         RowBox[{
         "\"\<IntegerAddition\>\"", ",", " ", "1", ",", " ", 
          "\"\<Beginner\>\"", ",", " ", "False"}], "]"}]}], "]"}]}], ";"}]}], 
   "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.7714313525622272`*^9, 3.7714313674528093`*^9}, 
   3.771509489419403*^9, {3.771509879611565*^9, 3.771509941909337*^9}, {
   3.77151009671859*^9, 3.771510121956356*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"c6ef38bf-5447-41ad-a628-b450c1060117"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1Questions", "=", 
   RowBox[{"Flatten", "[", "algebra1Questions", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7714110410599174`*^9, 3.771411041063916*^9}, {
   3.7714249605062957`*^9, 3.7714249914366302`*^9}, {3.771425024068718*^9, 
   3.7714252819487343`*^9}, 3.771425322528574*^9, {3.7714919749740715`*^9, 
   3.771491999523827*^9}, {3.7715099457696066`*^9, 3.7715099611906815`*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"668f10c3-844a-457f-8a43-219bf32e4678"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "algebra1Questions", "]"}]], "Input",
 CellChangeTimes->{{3.771510223852228*^9, 3.77151023279286*^9}},
 CellLabel->
  "In[125]:=",ExpressionUUID->"f6d4d22f-6a89-4e27-873a-76ae645cd594"],

Cell[BoxData["3052"], "Output",
 CellChangeTimes->{3.7715105191161156`*^9},
 CellLabel->
  "Out[125]=",ExpressionUUID->"f3a8f4a2-9c84-4bd7-9af0-b01e7ae37e27"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Clear", "[", "questionClassifier", "]"}], "\[IndentingNewLine]", 
 RowBox[{"questionClassifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<algebra 1\>\"", "\[Rule]", "algebra1Questions"}], ",", " ", 
      RowBox[{"\"\<algebra 2\>\"", "\[Rule]", "algebra2Qs"}], ",", " ", 
      RowBox[{"\"\<calc\>\"", "\[Rule]", "calcQs"}]}], "|>"}], " ", ",", " ", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}], ",", " ", 
    RowBox[{"Method", "\[Rule]", "\"\<NeuralNetwork\>\""}]}], 
   "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.771063215443462*^9, 3.7710633502457542`*^9}, 
   3.771071823090603*^9, 3.7710828946484957`*^9, {3.771083581540978*^9, 
   3.7710835945884523`*^9}, {3.771084258837575*^9, 3.771084260138427*^9}, {
   3.771089106079487*^9, 3.771089118126458*^9}, {3.771089317703972*^9, 
   3.7710893251804914`*^9}, {3.771089589321455*^9, 3.7710895907860775`*^9}, {
   3.771101595283745*^9, 3.7711015962158113`*^9}, {3.771101911187518*^9, 
   3.771101914767723*^9}, {3.771101993407687*^9, 3.771101997373905*^9}, {
   3.7711020881095395`*^9, 3.771102097689073*^9}, {3.7711022108895693`*^9, 
   3.771102212561736*^9}, {3.771102244507637*^9, 3.7711022454461393`*^9}, {
   3.7711023227187014`*^9, 3.7711023237187867`*^9}, {3.7711024319268856`*^9, 
   3.7711024687285357`*^9}, {3.7711026925353866`*^9, 
   3.7711027066808434`*^9}, {3.7711027405195894`*^9, 
   3.7711027412324157`*^9}, {3.7711028088330135`*^9, 
   3.7711028648262777`*^9}, {3.7711029558182993`*^9, 3.77110295696642*^9}, {
   3.7711032411393385`*^9, 3.7711032422553596`*^9}, {3.7711032955593557`*^9, 
   3.7711032996276913`*^9}, {3.771103336061694*^9, 3.771103338980618*^9}, {
   3.771103370475107*^9, 3.7711033714511166`*^9}, {3.771103765164311*^9, 
   3.771103786799837*^9}, {3.7711038503910933`*^9, 3.771103876489087*^9}, {
   3.7711039191807985`*^9, 3.7711039200623417`*^9}, {3.7711042220788345`*^9, 
   3.7711042229363375`*^9}, {3.7711048598276873`*^9, 3.771104865050381*^9}, {
   3.7711051200758305`*^9, 3.7711051210515237`*^9}, {3.7711052010468435`*^9, 
   3.7711052118901978`*^9}, {3.7711052803879633`*^9, 
   3.7711053140416017`*^9}, {3.7711053727435007`*^9, 
   3.7711053821161613`*^9}, {3.771105449918454*^9, 3.7711054605800343`*^9}, {
   3.771105546996733*^9, 3.7711055473579893`*^9}, {3.7711058366348667`*^9, 
   3.771105838832412*^9}, {3.7711059259343805`*^9, 3.771105934874683*^9}, {
   3.771115446077047*^9, 3.7711154471611223`*^9}, {3.7711502712421603`*^9, 
   3.7711502722062826`*^9}, {3.771158783329757*^9, 3.771158784547639*^9}, {
   3.771172246946286*^9, 3.771172250715967*^9}, {3.771410605095007*^9, 
   3.7714106062590704`*^9}, {3.77141065532251*^9, 3.771410665411251*^9}, {
   3.7714257129443073`*^9, 3.771425716612913*^9}, {3.771425930412616*^9, 
   3.771425935242029*^9}, {3.771426020951641*^9, 3.771426021861288*^9}, {
   3.7714262381336164`*^9, 3.771426238932184*^9}, {3.771426482848578*^9, 
   3.7714264833619432`*^9}, {3.771428755019416*^9, 3.771428759832837*^9}, {
   3.771428844102657*^9, 3.771428845100365*^9}, 3.771431208331509*^9, {
   3.7714919681764016`*^9, 3.7714919688372135`*^9}, {3.771492694844021*^9, 
   3.771492698736273*^9}, 3.771492752928042*^9, {3.7714929364909267`*^9, 
   3.771492941707288*^9}, {3.7715093978410177`*^9, 3.771509398721078*^9}, 
   3.771509633945117*^9, {3.771509699330548*^9, 3.771509705191008*^9}, {
   3.7715098338765893`*^9, 3.7715098350606723`*^9}, {3.7715104743929787`*^9, 
   3.771510493494311*^9}, {3.77151060575416*^9, 3.771510609334444*^9}},
 CellLabel->
  "In[128]:=",ExpressionUUID->"4a6c27e2-f698-4942-9e0f-b4b815b04b6b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Nominal\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"algebra 1\"", "\"algebra 2\"", 
                    "\"calc\""}, "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Nominal\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"algebra 1\"", "\"algebra 2\"", 
                    "\"calc\""}, "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["7569", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 7569, "ClassNumber" -> 3, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association[
          "f1" -> Association["Weight" -> 1, "Type" -> "NumericalVector"]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 1537627216228573037]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "VectorLength" -> 1, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Type" -> "NominalVector", "Version" -> {12., 0}, "ID" -> 
             4026204838636604962]], 
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[
               "\n" -> 1, " " -> 2, "\n\n" -> 3, "0 + 0 \n" -> 4, "0 + 10 \n" -> 
                5, "0 + 15 \n" -> 6, "0 + 2 \n" -> 7, "0.36 \.00\.99 0.9 \n" -> 
                8, "0 + 38 \n" -> 9, "0 + 46 \n" -> 10, 
                "0.47 \.00\.99 0.2 \n" -> 11, "0.55 \.00\.99 9 \n" -> 12, 
                "0 + 8 \n" -> 13, "0.8 \.00\.99 0.46 \n" -> 14, 
                "0.8 \.00\.99 4 \n" -> 15, "0 + 86 \n" -> 16, "0 + 90 \n" -> 
                17, "0 + 95 \n" -> 18, "0 + 98 \n" -> 19, "1" -> 20, 
                "1 + 0 \n" -> 21, "10" -> 22, "10\n\n\n\n" -> 23, "10 + 0 \n" -> 
                24, "100" -> 25, "10 + 1 \n" -> 26, "101" -> 27, "10 + 10 \n" -> 
                28, "10              2\n\n" -> 29, "10 \.00\.b9 2 \n" -> 30, 
                "102" -> 31, "10 + 29 \n" -> 32, "    10 + 2x = 30 " -> 33, 
                "    - 10 + 2x = 4 " -> 34, "    10 - 2x = - 4 " -> 35, 
                "    10 - 2x = 6 " -> 36, "    - 10 + 2x = 8 " -> 37, "103" -> 
                38, "10 + 33 \n" -> 39, "    10 + 3x = 10 " -> 40, 
                "    10 + 3x = - 2 " -> 41, "104" -> 42, "104\n\n269" -> 43, 
                "10 + 49 \n" -> 44, "10        5\n\n" -> 45, 
                "10 \.00\.b9 5 \n" -> 46, "105" -> 47, 
                "105\:036d 22 as a mixed number \n" -> 48, 
                "    - 10 + 5x = - 10 " -> 49, "    10 + 5x = 10 " -> 50, 
                "    10 + 5x = 55 " -> 51, "    10 + 5x = 60 " -> 52, "106" -> 
                53, "10 + 60 \n" -> 54, "10 + 69 \n" -> 55, 
                "    - 10 - 6x = - 10 " -> 56, "    - 10 - 6x = - 34 " -> 57, 
                "10 + 7 \n" -> 58, "107" -> 59, "10 + 75 \n" -> 60, 
                "10 + 78 \n" -> 61, "10\n\n780" -> 62, "    10 - 7x = - 25 " -> 
                63, "    - 10 + 7x = - 3 " -> 64, "    - 10 - 7x = 32 " -> 65,
                 "    10 - 7x = 6x + 49 " -> 66, "10 + 8 \n" -> 67, "108" -> 
                68, "10 + 83 \n" -> 69, "109" -> 70, "109\n\n302" -> 71, 
                "10% of 11" -> 72, "    - 10 + x = 1 " -> 73, 
                "    10 + x = 1 " -> 74, "    10x  + 10x +    /  = 0 " -> 75, 
                "    - 10x  + 10x + 1 = 0 " -> 76, "    10x  + 10x + 12 = 0 " -> 
                77, "    10x  + 10x + 3 = 0 " -> 78, 
                "    10x  - 10x - 6 = 0 " -> 79, 
                "    - 10x  + 11x +    /    = 0 " -> 80, 
                "    10x  + 12x +  /  = 0 " -> 81, "    10x  + 16x + 6 = 0 " -> 
                82, "    10x  + 17x + 7 = 0 " -> 83, "    10 + x = 18 " -> 84,
                 "    10 + x = 20 " -> 85, "    10 + x = 21 " -> 86, 
                "    10 + x = 22 " -> 87, "    10x  + 2x + 11 = 0 " -> 88, 
                "      10x - 2y = 56 " -> 89, "       - 10x + 2y = 84 " -> 90,
                 "    10x  - 3x -  /    = 0 " -> 91, 
                "    10 +  / x = - 3x + 10 " -> 92, "    10x  + 3x + 11 = 0 " -> 
                93, "    10x  + 3x + 12 = 0 " -> 94, 
                "       - 10x - 4y = - 56 " -> 95, "    10 + x = 5 " -> 96, 
                "    - 10x  + 54x - 56 = 0 " -> 97, 
                "    10x  + 5x +  /  = 0 " -> 98, "    10x  + 5x + 11 = 0 " -> 
                99, "    10x  + 5x + 5 = 0 " -> 100, "    10x  + 5x + 7 = 0 " -> 
                101, "    10x  - 6x - 12 = 0 " -> 102, 
                "    10x  - 6x + 12 = 0 " -> 103, "    10x  + 6x + 4 = 0 " -> 
                104, "    10x  +  / x +  /  = 0 " -> 105, 
                "    10x  - x + 10 = 0 " -> 106, "    10x  + x - 10 = 0 " -> 
                107, "    - 10x  +  / x + 11 = 0 " -> 108, "1 + 1 \n" -> 109, 
                "11" -> 110, "11\n\n" -> 111, "110" -> 112, 
                "1      107\n\n457" -> 113, 
                "-1                         109\n\n58" -> 114, "111" -> 115, 
                "1\n\n110" -> 116, "{}[[1]][[{}[[1]],{}[[1]],{}[[1]]]]" -> 
                117, "-11 + 11 \n" -> 118, "11          11\n\n" -> 119, 
                "11+12" -> 120, "1113 + 3615 \n" -> 121, "11 + 14 \n" -> 122, 
                "1      117\n\n564" -> 123, "1+12" -> 124, "112" -> 125, 
                "-11    2   1\n\n1114" -> 126, "-112\n\n237" -> 127, 
                "1\n\n124" -> 128, "113" -> 129, 
                "113\:036d 22 as an improper fraction \n" -> 130, 
                "1               -138\n\n197" -> 131, "1 + 14 \n" -> 132, 
                "114" -> 133, "-1       1       41\n\n51" -> 134, 
                "1      145\n\n327" -> 135, "1\n\n148" -> 136, 
                "1                         -14\n\n809" -> 137, 
                "1148 + 4232 \n" -> 138, "1\n\n149" -> 139, "115" -> 140, 
                "\n\n116" -> 141, "116\:036d 23 as an improper fraction \n" -> 
                142, "1 + 17 \n" -> 143, "117" -> 144, "-1\n\n171" -> 145, 
                "1      17\n\n463" -> 146, "-1      1\n\n782" -> 147, "118" -> 
                148, "11\n\n800" -> 149, "-1\n\n183" -> 150, "119" -> 151, 
                "119\:036d 12 as a mixed number \n" -> 152, 
                "    11 = x + 10 " -> 153, "    11x  + 10x + 5 = 0 " -> 154, 
                "    11x  - 11x - 3 = 0 " -> 155, "    11x  + 11x - 9 = 0 " -> 
                156, "    11x  - 12x - 2 = 0 " -> 157, 
                "    11x  + 18x + 7 = 0 " -> 158, "    11 = x + 2 " -> 159, 
                "    11 = - x + 2x + 1 " -> 160, "    11x  - 3x -  /  = 0 " -> 
                161, "    11x  + 4x + 11 = 0 " -> 162, "    11 = x + 5 " -> 
                163, "    11x  + 5x - 6 = 0 " -> 164, "    11 = x + 6 " -> 
                165, "    11x  - 9x - 11 = 0 " -> 166, 
                "    11x  +  / x - 2 = 0 " -> 167, "    11x  +  / x + 3 = 0 " -> 
                168, "1 + 2 \n" -> 169, "12" -> 170, "12\n\n" -> 171, 
                "12 - 0 \n" -> 172, "120" -> 173, "1      208\n\n589" -> 174, 
                "121" -> 175, "-1   2\n\n1029" -> 176, "1   2\n\n1089" -> 177,
                 "1   2\n\n1121" -> 178, 
                "1       2             -11\n\n       / x +  / y =     /  " -> 
                179, "-1\n\n213" -> 180, "1       2             -13\n\n261" -> 
                181, "-12 + 15 \n" -> 182, "12 \.00\.b9 2 \n" -> 183, "122" -> 
                184, "12       3\n\n" -> 185, "123" -> 186, 
                "1             -23\n\n      5x +  / y =     /  " -> 187, 
                "1      2\n\n382" -> 188, 
                "1      23\n\n      - x +  / y =    /  " -> 189, 
                "12 \.00\.b9 4 \n" -> 190, "124" -> 191, "124\n\n735" -> 192, 
                "125" -> 193, "1      25\n\n494" -> 194, 
                "1             -25\n\n      - x -  / y =     /  " -> 195, 
                "126" -> 196, "127" -> 197, "1             -271\n\n276" -> 
                198, "1\n\n274" -> 199, "\n\n1             27\n\n539" -> 200, 
                "12 + 8 \n" -> 201, "128" -> 202, "1\n\n282" -> 203, 
                "1\n\n283" -> 204, "1\n\n286" -> 205, "129" -> 206, 
                "-1   2\n\n944" -> 207, 
                "1             -29\n\n       - 4x -  / y =     /  " -> 208, 
                "    12 = x + 10 " -> 209, "    - 12x  + 10x -  /  = 0 " -> 
                210, "    12x  + 10x + 10 = 0 " -> 211, 
                "    12x  + 10x + 12 = 0 " -> 212, "    12x  - 11x + 1 = 0 " -> 
                213, "    12x  - 11x - 15 = 0 " -> 214, 
                "    - 12x  + 14x - 4 = 0 " -> 215, "    12x  + 14x + 4 = 0 " -> 
                216, "    1 + 2x = - 17 " -> 217, "    12x  + 24x + 12 = 0 " -> 
                218, "    - 12x  - 24x - 9 = 0 " -> 219, 
                "    12x  + 2x + 9 = 0 " -> 220, "       - 12x + 2y = - 22 " -> 
                221, "    12x  - 46x - 8 = 0 " -> 222, 
                "    12x  + 4x + 2 = 0 " -> 223, "      12x + 4y = - 36 " -> 
                224, "    12x  - 64x + 64 = 0 " -> 225, 
                "    12x  + 6x + 2 = 0 " -> 226, "    12 = x + 7 " -> 227, 
                "    12x  - 8x +  /  = 0 " -> 228, "    12x  - 8x + 10 = 0 " -> 
                229, "    12x  + 8x + 10 = 0 " -> 230, 
                "    12x  + 8x + 2 = 0 " -> 231, "    12x  + 9x + 2 = 0 " -> 
                232, "    12x  + x - 6 = 0 " -> 233, "    12x  + x + 7 = 0 " -> 
                234, "    1 + 2x = x + 8 " -> 235, 
                "    12x  +    / x + 9 = 0 " -> 236, "    12x  - x + 9 = 0 " -> 
                237, "13" -> 238, "130" -> 239, 
                "1             -303\n\n       - 6x +  / y =      /  " -> 240, 
                "130\:036d 7 as a mixed number \n" -> 241, "131" -> 242, 
                "1313 + 3009 \n" -> 243, "-131\n\n666" -> 244, "131\n\n761" -> 
                245, "132" -> 246, "13 + -21 \n" -> 247, "132\n\n423" -> 248, 
                "1329 + 9063 \n" -> 249, "133" -> 250, 
                "1             -33\n\n       - 20x +  / y =     /  " -> 251, 
                "-1             3\n\n334" -> 252, "134" -> 253, "-13\n\n409" -> 
                254, "-134\n\n136" -> 255, "13\n\n440" -> 256, "135" -> 257, 
                "1             -35\n\n       - 4x +  / y =     /  " -> 258, 
                "1      -3                       -59\n\n214" -> 259, 
                "1 3\:036d 5 as an improper fraction \n" -> 260, "136" -> 261,
                 "1\n\n366" -> 262, "-13\n\n663" -> 263, "137" -> 264, 
                "1             -37\n\n527" -> 265, "13\n\n76" -> 266, 
                "-13 + -8 \n" -> 267, "138" -> 268, 
                "-1               381\n\n185" -> 269, "1383 + 3834 \n" -> 270,
                 "-1\n\n384" -> 271, "\n\n139" -> 272, "1\n\n39" -> 273, 
                "-1\n\n395" -> 274, "    1 + 3x = 1 " -> 275, 
                "    13 = x + 1 " -> 276, "    13 = x + 6 " -> 277, 
                "1 + 4 \n" -> 278, "14" -> 279, "140" -> 280, 
                "1400 + 7429 \n" -> 281, 
                "-1             40\n\n        / x + 3y =    /  " -> 282, 
                "141" -> 283, "1 4\:036d 11 as an improper fraction \n" -> 
                284, "-141\n\n252" -> 285, "1               4\n\n195" -> 286, 
                "14 \.00\.b9 2 \n" -> 287, "142" -> 288, "143" -> 289, 
                "143\n\n740" -> 290, "14 + 4 \n" -> 291, "144" -> 292, "145" -> 
                293, "1\n\n451" -> 294, "1451 + 9116 \n" -> 295, "146" -> 296,
                 "-1             46\n\n714" -> 297, "-1\n\n469" -> 298, "147" -> 
                299, "-1             47\n\n306" -> 300, 
                "1                         -4\n\n733" -> 301, "-14 + -8 \n" -> 
                302, "148" -> 303, "1\n\n488" -> 304, "149" -> 305, 
                "    - 14x  - 11x - 2 = 0 " -> 306, "    -1 - 4x = 19 " -> 
                307, "    14x  + 37x + 24 = 0 " -> 308, "    14 = x + 4 " -> 
                309, "1\n\n       - 4x +  / y = 4 " -> 310, "1+5" -> 311, 
                "15" -> 312, "150" -> 313, "151" -> 314, "15\n\n103" -> 315, 
                "15+12" -> 316, "15          15\n\n" -> 317, 
                "1        5\n\n157" -> 318, 
                "1                        -51\n\n       / x - 4y =     /  " -> 
                319, "152" -> 320, "1521 + 2554 \n" -> 321, 
                "1             -52\n\n293" -> 322, "-15 + 25 \n" -> 323, 
                "153" -> 324, "1531 + 4977 \n" -> 325, 
                "1                         539\n\n88" -> 326, "-15 + -4 \n" -> 
                327, "154" -> 328, "15      5\n\n" -> 329, "155" -> 330, 
                "1             55\n\n544" -> 331, "15 + 6 \n" -> 332, "156" -> 
                333, "1      5\n\n607" -> 334, "1561 + 2495 \n" -> 335, "157" -> 
                336, "1570 + 5887 \n" -> 337, "1570 + 8699 \n" -> 338, 
                "1          -57\n\n104" -> 339, "158" -> 340, 
                "1583 + 6324 \n" -> 341, "159" -> 342, 
                "    15x  - 26x + 8 = 0 " -> 343, "    1(5 - x) = - 3 " -> 
                344, "    15 = x + 4 " -> 345, "      15x - 4y = 148 " -> 346,
                 "    15x  + 53x + 42 = 0 " -> 347, "      15x + 5y = 160 " -> 
                348, "    15 = x + 7 " -> 349, "    - 15x  + x + 28 = 0 " -> 
                350, "1\n\n       - 5x +  / y = 0 " -> 351, "16" -> 352, 
                "160" -> 353, "-1\n\n600" -> 354, 
                "160\:036d 3 as a mixed number \n" -> 355, "160\n\n727" -> 
                356, "161" -> 357, "1\n\n612" -> 358, 
                "161\:036d 2 as an improper fraction \n" -> 359, 
                "-16 + -13 \n" -> 360, "1616 + 5751 \n" -> 361, "\n\n162" -> 
                362, "-16 + -21 \n" -> 363, "163" -> 364, "1630 + 8860 \n" -> 
                365, "1632 + 9300 \n" -> 366, "16     4\n\n" -> 367, "164" -> 
                368, "164\n\n568" -> 369, "164\n\n683" -> 370, "165" -> 371, 
                "16 + 6 \n" -> 372, "166" -> 373, "1664 + 8135 \n" -> 374, 
                "167" -> 375, "16 + 70 \n" -> 376, "168" -> 377, "1 + 69 \n" -> 
                378, "169" -> 379, "1692 + 5818 \n" -> 380, "1697 + 7259 \n" -> 
                381, "1             69\n\n       / x + 5y =    /  " -> 382, 
                "    16x  - 28x + 12 = 0 " -> 383, "      16x + 5y = 20 " -> 
                384, "    16 = x + 7 " -> 385, "    - 16 = x - 9 " -> 386, 
                "       - 16x + y = - 8 " -> 387, "17" -> 388, "\n\n170" -> 
                389, "171" -> 390, "1713 + 5630 \n" -> 391, "171\n\n576" -> 
                392, "1             -71\n\n      5x +  / y =     /  " -> 393, 
                "-17 + -18 \n" -> 394, "172" -> 395, "1721 + 5812 \n" -> 396, 
                "1723 + 5702 \n" -> 397, "1\n\n724" -> 398, "1726 + 9260 \n" -> 
                399, "1 + 73 \n" -> 400, "173" -> 401, "-173\n\n513" -> 402, 
                "-1           7\n\n398" -> 403, "174" -> 404, 
                "1      74\n\n      3x +  / y =    /  " -> 405, "1 + 75 \n" -> 
                406, "175" -> 407, "1750 + 5035 \n" -> 408, "176" -> 409, 
                "1                 76\n\n23" -> 410, 
                "1      76\n\n       - 4x +  / y =    /  " -> 411, 
                "-1\n\n765" -> 412, "-17\n\n679" -> 413, "177" -> 414, 
                "177\n\n795" -> 415, "178" -> 416, "178\n\n417" -> 417, 
                "1784 + 2224 \n" -> 418, "179" -> 419, "179\n\n389" -> 420, 
                "    -1 + 7x = 27 " -> 421, "    17 = x + 9 " -> 422, "18" -> 
                423, "1 + 80 \n" -> 424, "180" -> 425, "181" -> 426, 
                "18 + -14 \n" -> 427, "1816 + 6956 \n" -> 428, 
                "18 \.00\.b9 2 \n" -> 429, "182" -> 430, "183" -> 431, 
                "18 + 4 \n" -> 432, "184" -> 433, "18\n\n470" -> 434, 
                "-18\n\n477" -> 435, "185" -> 436, 
                "1                      -8\n\n518" -> 437, "18 + 6 \n" -> 438,
                 "186" -> 439, "186\:036d 19 as a mixed number \n" -> 440, 
                "18 + 64 " -> 441, "187" -> 442, "188" -> 443, "1 + 89 \n" -> 
                444, "189" -> 445, "189\:036d 13 as an improper fraction \n" -> 
                446, "-1                         -89\n\n333" -> 447, 
                "    18 = x + 10 " -> 448, "    18x  + 24x - 64 = 0 " -> 449, 
                "    - 18x  + 27x - 4 = 0 " -> 450, 
                "    18x  + 39x + 21 = 0 " -> 451, 
                "1                         -8\n\n       / x + 5y =   /  " -> 
                452, "    18 = x + 8 " -> 453, "1 + 9 \n" -> 454, "19" -> 455,
                 "190" -> 456, "191" -> 457, "-19 + -11 \n" -> 458, 
                "1                     -9\n\n18" -> 459, "19 + -19 \n" -> 460,
                 "192" -> 461, "-19 + -25 \n" -> 462, "-192\n\n690" -> 463, 
                "\n\n193" -> 464, "1930 + 4841 \n" -> 465, "1      9\n\n381" -> 
                466, "194" -> 467, "195" -> 468, "196" -> 469, 
                "1967 + 3600 \n" -> 470, "197" -> 471, "197     3\n\n55" -> 
                472, "19\n\n762" -> 473, "198" -> 474, "1985 + 4928 \n" -> 
                475, "199" -> 476, "    - 19 = x - 7 " -> 477, 
                "     / (1x + 1) =  /  " -> 478, "    -1 + x = -1 " -> 479, 
                "    -1 = x - 1 " -> 480, "    1 + x = 1 " -> 481, 
                "    -1 + x = - 2 " -> 482, "-1\n\n        / x - 3y = -1 " -> 
                483, "1\n\n       / x - 4y = - 15 " -> 484, "    -1 + x = 5 " -> 
                485, "1\n\n       / x - 5y = - 10 " -> 486, 
                "1\n\n       / x + 5y = 10 " -> 487, "    -1 = x - 6 " -> 488,
                 "1\n\n      x +  / y = -1 " -> 489, 
                "1\n\n      x +  / y = 10 " -> 490, 
                "1\n\n       / x + y = 9 " -> 491, "2" -> 492, "2\n\n" -> 493,
                 "2\n\n\n\n" -> 494, "2 + 0 \n" -> 495, "20" -> 496, "200" -> 
                497, "2005 + 8361 \n" -> 498, "200% of 3" -> 499, "201" -> 
                500, "202" -> 501, "-20 + -23 \n" -> 502, "2026 + 3727 \n" -> 
                503, "20 + 3 \n" -> 504, "203" -> 505, "204" -> 506, 
                "-20\n\n445" -> 507, "20 \.00\.b9 5 \n" -> 508, "205" -> 509, 
                "206" -> 510, "207" -> 511, "20 + 8 \n" -> 512, "208" -> 513, 
                "2 \.00\.99 0.81 \n" -> 514, "2087 + 5640 \n" -> 515, "209" -> 
                516, "-209\n\n599" -> 517, "20% of 33" -> 518, 
                "    - 20x  - 10x + 30 = 0 " -> 519, 
                "    20x  + 29x + 5 = 0 " -> 520, "       - 20x + 2y = 96 " -> 
                521, "       - 20x + 3y = 130 " -> 522, 
                "    - 20x  +    / x -    /  = 0 " -> 523, 
                "      20x - y = - 6 " -> 524, "2 + 1 \n" -> 525, "21" -> 526,
                 "2                     10\n\n" -> 527, "210" -> 528, 
                "2\n\n1000" -> 529, "2\n\n1001" -> 530, "2\n\n1002" -> 531, 
                "2\n\n1004" -> 532, "2\n\n1005" -> 533, "2\n\n1006" -> 534, 
                "2\n\n1007" -> 535, "2\n\n1009" -> 536, "2\n\n1010" -> 537, 
                "2       10\n\n101" -> 538, "2               10\n\n1169" -> 
                539, "2\n\n1012" -> 540, "\n\n2\n\n1014" -> 541, "2\n\n1015" -> 
                542, "2\n\n1016" -> 543, "2\n\n1018" -> 544, "2\n\n1019" -> 
                545, "2\n\n1020" -> 546, "2\n\n1021" -> 547, "2\n\n1022" -> 
                548, "2\n\n1023" -> 549, "2\n\n1024" -> 550, "2\n\n1025" -> 
                551, "2\n\n1026" -> 552, "2\n\n1028" -> 553, "2\n\n1032" -> 
                554, "2\n\n1033" -> 555, "2\n\n1034" -> 556, "2\n\n1035" -> 
                557, "2\n\n1036" -> 558, "\n\n2\n\n1037" -> 559, "2\n\n1038" -> 
                560, "2\n\n1039" -> 561, "2\n\n1040" -> 562, "2\n\n1041" -> 
                563, "2   104\n\n1088" -> 564, "2\n\n1043" -> 565, 
                "2\n\n1044" -> 566, "2\n\n1045" -> 567, "2\n\n1046" -> 568, 
                "2\n\n1047" -> 569, "2\n\n1049" -> 570, "2\n\n1050" -> 571, 
                "2\n\n1052" -> 572, "2\n\n1053" -> 573, "2\n\n1054" -> 574, 
                "2\n\n1056" -> 575, "2\n\n1057" -> 576, "\n\n2\n\n1060" -> 
                577, "2\n\n1061" -> 578, "2\n\n1062" -> 579, "2\n\n1063" -> 
                580, "2\n\n1064" -> 581, "2\n\n1065" -> 582, "2\n\n1066" -> 
                583, "2\n\n1067" -> 584, "2\n\n1068" -> 585, "2\n\n1069" -> 
                586, "2\n\n1070" -> 587, "2\n\n1071" -> 588, "2\n\n1072" -> 
                589, "2\n\n1073" -> 590, "2\n\n1075" -> 591, "2\n\n1077" -> 
                592, "2\n\n1078" -> 593, "2\n\n1079" -> 594, "2\n\n1080" -> 
                595, "2\n\n1082" -> 596, "2\n\n1083" -> 597, "2\n\n1084" -> 
                598, "2\n\n1085" -> 599, "2\n\n1086" -> 600, "2\n\n1090" -> 
                601, "2\n\n1091" -> 602, "2\n\n1092" -> 603, "2\n\n1093" -> 
                604, "2\n\n1096" -> 605, "2\n\n1097" -> 606, "2\n\n1098" -> 
                607, "2\n\n1099" -> 608, "211" -> 609, "2\n\n1100" -> 610, 
                "2\n\n1101" -> 611, "2\n\n1102" -> 612, "2   1\n\n1027" -> 
                613, "2\n\n1103" -> 614, "2\n\n1104" -> 615, 
                "2         1\n\n1042" -> 616, "2\n\n1105" -> 617, "2\n\n1106" -> 
                618, "2\n\n1107" -> 619, "2   1\n\n1074" -> 620, "2\n\n1108" -> 
                621, "2\n\n1109" -> 622, "2\n\n1110" -> 623, "\n\n2\n\n1111" -> 
                624, "2               11\n\n1113" -> 625, 
                "2   1       1\n\n1220" -> 626, "2   1\n\n1124" -> 627, 
                "2\n\n1115" -> 628, "2\n\n111\n\n       - 5x + 3y =     /  " -> 
                629, "2\n\n1116" -> 630, "2\n\n1117" -> 631, "2\n\n1119" -> 
                632, "2\n\n1120" -> 633, "2    112       1\n\n1017" -> 634, 
                "2\n\n1122" -> 635, "2\n\n1126" -> 636, "2\n\n1127" -> 637, 
                "2\n\n1128" -> 638, "2\n\n1129" -> 639, "2\n\n1130" -> 640, 
                "2\n\n1131" -> 641, "2\n\n1132" -> 642, 
                "2   113         20\n\n830" -> 643, "2\n\n1133" -> 644, 
                "2\n\n1134" -> 645, "2\n\n1135" -> 646, "2\n\n1136" -> 647, 
                "2\n\n1137" -> 648, "2\n\n1138" -> 649, "2\n\n1139" -> 650, 
                "2\n\n1140" -> 651, "2\n\n1141" -> 652, "2\n\n1142" -> 653, 
                "2\n\n1143" -> 654, "2\n\n1144" -> 655, 
                "-2                         -11\n\n459" -> 656, "2\n\n1146" -> 
                657, "2\n\n1147" -> 658, "2\n\n1148" -> 659, "2\n\n1149" -> 
                660, "2\n\n1150" -> 661, "2\n\n1151" -> 662, "2\n\n1152" -> 
                663, "2\n\n1155" -> 664, "2\n\n1158" -> 665, "2\n\n1159" -> 
                666, "2\n\n1160" -> 667, "2\n\n1161" -> 668, "2\n\n1162" -> 
                669, "2\n\n1164" -> 670, "2\n\n1166" -> 671, "2\n\n1167" -> 
                672, "21\:036d 16 as a mixed number \n" -> 673, "2\n\n1171" -> 
                674, "2\n\n1173" -> 675, "2\n\n1174" -> 676, "2\n\n1175" -> 
                677, "2\n\n1176" -> 678, "2\n\n1177" -> 679, "2\n\n1178" -> 
                680, "2\n\n1179" -> 681, "2\n\n1180" -> 682, 
                "-2             -1      1\n\n816" -> 683, "2\n\n1182" -> 684, 
                "2\n\n1183" -> 685, "2\n\n1184" -> 686, "2\n\n1185" -> 687, 
                "2\n\n1186" -> 688, "2\n\n1187" -> 689, "2   1      1\n\n896" -> 
                690, "2\n\n1190" -> 691, "2\n\n1191" -> 692, "2\n\n1193" -> 
                693, "2\n\n1195" -> 694, "2\n\n1196" -> 695, "2\n\n1198" -> 
                696, "2\n\n1199" -> 697, 
                "2\n\n-1                         -1\n\n        / x + 2y =   / \
 " -> 698, "21 + -2 \n" -> 699, "212" -> 700, "2\n\n1200" -> 701, "2\n\n1201" -> 
                702, "2\n\n1202" -> 703, "2\n\n1203" -> 704, "2\n\n1204" -> 
                705, "2\n\n1205" -> 706, "2\n\n1208" -> 707, "2\n\n1209" -> 
                708, "2\n\n1210" -> 709, "2\n\n1211" -> 710, "2\n\n1213" -> 
                711, "2\n\n1214" -> 712, "2\n\n1215" -> 713, "2\n\n1216" -> 
                714, "2\n\n1218" -> 715, "2\n\n1219" -> 716, "2   122\n\n930" -> 
                717, "2   122\n\n981" -> 718, 
                "-2                         -124\n\n271" -> 719, 
                "2   1      2\n\n886" -> 720, "2   129      9\n\n940" -> 721, 
                "213" -> 722, "2  13       4\n\n847" -> 723, 
                "2   136        48\n\n841" -> 724, 
                "2      136\n\n      x +  / y =     /    " -> 725, 
                "2            138\n\n175" -> 726, "2             -138\n\n433" -> 
                727, "2          13\n\n       / x - y =    /    " -> 728, 
                "2\n\n13\n\n      x - y =    /  " -> 729, "2 + 14 \n" -> 730, 
                "214" -> 731, "2   140\n\n1003" -> 732, "2143 + 8202 \n" -> 
                733, "-2      14\n\n      x =   / y +    /  " -> 734, 
                "2      14\n\n      - x +  / y =    /  " -> 735, "215" -> 736,
                 "2    15\n\n1030" -> 737, "\n\n216" -> 738, "-21\n\n634" -> 
                739, "2166 + 6402 \n" -> 740, "21\n\n685" -> 741, 
                "2       169\n\n50" -> 742, "217" -> 743, 
                "2            17\n\n1125" -> 744, "2            17\n\n1170" -> 
                745, "2             17\n\n1188" -> 746, 
                "2            17\n\n1212" -> 747, 
                "\n\n2   171        21\n\n945" -> 748, 
                "2\n\n17\n\n       - 3x + 5y =    /  " -> 749, "21\n\n758" -> 
                750, "2   17      9\n\n828" -> 751, "218" -> 752, 
                "2      18\n\n391" -> 753, "2  1\n\n850" -> 754, 
                "2             -188\n\n385" -> 755, "219" -> 756, 
                "2                     -19\n\n348" -> 757, 
                "2\n\n-19\n\n      3x + y =     /  " -> 758, 
                "2\n\n1             -9\n\n      x +  /2y =   /2 " -> 759, 
                "    21x  - 22x + 5 = 0 " -> 760, "    21x  + 28x - 49 = 0 " -> 
                761, "2\n\n-1\n\n        / x + 2y = 17 " -> 762, 
                "    2(1x + 3) = 10 " -> 763, "    - 21x  - 36x - 15 = 0 " -> 
                764, "-21\n\n      x + 5y =     /  " -> 765, 
                "2\n\n-1\n\n        / x + 5y = - 11 " -> 766, 
                "    21x  -    / x -  /  = 0 " -> 767, 
                "2      1\n\n      x +  / y =  /  " -> 768, 
                "2\n\n1\n\n      - x +  / y = - 8 " -> 769, 
                "2              2\n\n" -> 770, "2             2\n\n" -> 771, 
                "2           2\n\n" -> 772, "2        2\n\n" -> 773, 
                "2       2\n\n" -> 774, "2      2\n\n" -> 775, "2 + 2 \n" -> 
                776, "22" -> 777, "220" -> 778, "221" -> 779, "22 + 10 \n" -> 
                780, "2   2\n\n1059" -> 781, "2          2\n\n1118" -> 782, 
                "\n\n2         2\n\n1154" -> 783, "2   2\n\n1168" -> 784, 
                "2  2\n\n1194" -> 785, 
                "2\n\n-21\n\n       - 2x + 5y =     /  " -> 786, 
                "2             2\n\n-15\n\n      4x + 2y =     /  " -> 787, 
                "2   2      1\n\n838" -> 788, "2  219      1\n\n982" -> 789, 
                "2219 + 2574 \n" -> 790, "222" -> 791, 
                "2   229        14\n\n1013" -> 792, "223" -> 793, 
                "2              2\n\n3             25\n\n       / x + 2y =    \
/  " -> 794, "2  23      4\n\n958" -> 795, 
                "2              2\n\n-3                        -5\n\n        \
/ x - 2y =   /  " -> 796, "2             23\n\n646" -> 797, 
                "2  23      8\n\n893" -> 798, "224" -> 799, 
                "2       2\n\n      4x - 2y = 14 " -> 800, 
                "2       2\n\n\n\n      4x - 2y = 2 " -> 801, "2 + 25 \n" -> 
                802, "225" -> 803, "2259 + 6033 \n" -> 804, "226" -> 805, 
                "2            26\n\n1217" -> 806, "22\n\n641" -> 807, 
                "2      26\n\n615" -> 808, "2267 + 6108 \n" -> 809, 
                "2  26      8\n\n860" -> 810, "2269 + 7414 \n" -> 811, "227" -> 
                812, "2\n\n272" -> 813, "2\n\n275" -> 814, "2278 + 3852 \n" -> 
                815, "2278 + 6186 \n" -> 816, "2  27       9\n\n853" -> 817, 
                "228" -> 818, "2   2\n\n871" -> 819, "2  28\n\n824" -> 820, 
                "229" -> 821, "2\n\n29\n\n       - 3x + 2y =    /  " -> 822, 
                "22\:036d 9 as a mixed number \n" -> 823, 
                "    - 2( /  + 2x) =     /  " -> 824, "    22 = x + 10 " -> 
                825, "    2 + 2x = 14 " -> 826, "    2 + 2x = - 2 " -> 827, 
                "    2 - 2x = - 22 " -> 828, "2\n\n      2x + 2y = - 26 " -> 
                829, "2        2\n\n      x - y = - 12 " -> 830, "2 + 3 \n" -> 
                831, "2+3" -> 832, "23" -> 833, "230" -> 834, 
                "2   300\n\n988" -> 835, "231" -> 836, "2         3\n\n1031" -> 
                837, "2   3\n\n1087" -> 838, "2            31\n\n1207" -> 839,
                 "2         3\n\n1172" -> 840, "2   31        28\n\n901" -> 
                841, "2      31\n\n314" -> 842, 
                "-2                      -31\n\n432" -> 843, 
                "2   31       5\n\n1095" -> 844, 
                "2      3\n\n1\n\n       / x - 2y = - 6 " -> 845, "232" -> 
                846, "23 + -20 \n" -> 847, "232\n\n291" -> 848, 
                "-2                            -32\n\n        / x + 12y =     \
/  " -> 849, "2       3        3\n\n" -> 850, "233" -> 851, "2   33\n\n1076" -> 
                852, "-23      3\n\n48" -> 853, "234" -> 854, "23\n\n420" -> 
                855, "2      34\n\n      2x +  / y =    /  " -> 856, 
                "    - 2( - 3 - 4x) = 14 " -> 857, "23 + 5 \n" -> 858, "235" -> 
                859, "236" -> 860, "236\n\n      12x + y =     /  " -> 861, 
                "2             -36\n\n325" -> 862, "237" -> 863, 
                "2  37         14\n\n916" -> 864, 
                "2\n\n-37\n\n      3x - y =     /    " -> 865, 
                "2   37      4\n\n928" -> 866, "2  37\n\n832" -> 867, 
                "2             3\n\n79\n\n      y = 5x -    /  " -> 868, 
                "238" -> 869, "\n\n239" -> 870, "-23 + -9 \n" -> 871, 
                "2 + 39 \n" -> 872, "239" -> 873, "2390 + 5199 \n" -> 874, 
                "    2( - 3x - 10) = - 92 " -> 875, "    2 + 3x = - 16 " -> 
                876, "    2( - 3x - 2) = - 64 " -> 877, "2/3 x+3 =15" -> 878, 
                "2\n\n      3x + 4y = 14 " -> 879, "    - 2 - 3x = - 5 " -> 
                880, "    - 2(3 -  / x) = 6 " -> 881, "    2 = 3x + 7x + 2 " -> 
                882, "2\n\n      3x -  / y = - 23 " -> 883, "\n\n24" -> 884, 
                "2        4\n\n" -> 885, "240" -> 886, 
                "240\:036d 19 as a mixed number \n" -> 887, "241" -> 888, 
                "2          4\n\n1051" -> 889, "2        4\n\n1055" -> 890, 
                "2   412\n\n954" -> 891, "-24 + 16 \n" -> 892, "242" -> 893, 
                "2420 + 4220 \n" -> 894, "-24   2\n\n956" -> 895, "243" -> 
                896, "243\:036d 22 as a mixed number \n" -> 897, 
                "2433 + 5845 \n" -> 898, "2\n\n439" -> 899, "244" -> 900, 
                "2   440         48\n\n935" -> 901, "2    44\n\n1094" -> 902, 
                "2   44      8\n\n997" -> 903, "245" -> 904, "-24\n\n508" -> 
                905, "2  45      3\n\n943" -> 906, "246" -> 907, 
                "2      4\n\n688" -> 908, "247" -> 909, "248" -> 910, 
                "2\n\n489" -> 911, "249" -> 912, "2   49          18\n\n879" -> 
                913, "    2( - 4x +  / ) =      /  " -> 914, 
                "    2(4x -  / ) =    /  " -> 915, 
                "    24x  + 13x +  /  = 0 " -> 916, "    2(4 + x) = 2 " -> 
                917, "    24x  - 20x - 16 = 0 " -> 918, 
                "    - 24x  - 20x + 24 = 0 " -> 919, "    24x  - 2x - 1 = 0 " -> 
                920, "    2 - 4x = 30 " -> 921, "    24x  + 42x + 18 = 0 " -> 
                922, "    - 24x  + 50x - 24 = 0 " -> 923, 
                "    - 24x  + 58x + 16 = 0 " -> 924, 
                "    - 24x  + 8x + 16 = 0 " -> 925, 
                "    24x  +     / x -    /  = 0 " -> 926, 
                "    24x  +    / x -  /  = 0 " -> 927, "25" -> 928, "250" -> 
                929, "2\n\n509" -> 930, "251" -> 931, "2         5\n\n1081" -> 
                932, "2               51\n\n1123" -> 933, 
                "2               51\n\n1165" -> 934, "2  5\n\n1189" -> 935, 
                "25 + -13 \n" -> 936, "25 + 2 \n" -> 937, "252" -> 938, 
                "2521 + 8308 \n" -> 939, 
                "-2                         -52\n\n242" -> 940, 
                "2  52         35\n\n907" -> 941, "2  52\n\n889" -> 942, 
                "25\:036d 2 as a mixed number \n" -> 943, "253" -> 944, "254" -> 
                945, "255" -> 946, "2551 + 8585 \n" -> 947, 
                "2            5\n\n579" -> 948, 
                "25 5\:036d 7 as an improper fraction \n" -> 949, 
                "25 + -6 \n" -> 950, "25 + 6 \n" -> 951, "256" -> 952, 
                "2             56\n\n383" -> 953, "2 + 57 \n" -> 954, "257" -> 
                955, "258" -> 956, "2\n\n584" -> 957, "2587 + 4970 \n" -> 958,
                 "259" -> 959, "2590 + 3048 \n" -> 960, "2   5\n\n924" -> 961,
                 "2           5\n\n957" -> 962, "    25x  - 15x + 2 = 0 " -> 
                963, "    25x  - 30x - 7 = 0 " -> 964, 
                "    25x  - 45x + 18 = 0 " -> 965, "    25x  + 50x + 25 = 0 " -> 
                966, "    25x  - 75x + 56 = 0 " -> 967, "2 + 6 \n" -> 968, 
                "26" -> 969, "260" -> 970, "261" -> 971, "2   6\n\n1206" -> 
                972, "2    61       3\n\n1011" -> 973, "2   6       1\n\n875" -> 
                974, "\n\n262" -> 975, "262" -> 976, "262\n\n692" -> 977, 
                "2 + 63 \n" -> 978, "26 + 3 \n" -> 979, "263" -> 980, 
                "2                        -638\n\n236" -> 981, "264" -> 982, 
                "2648 + 2854 \n" -> 983, "265" -> 984, "2   65\n\n1112" -> 
                985, "2653 + 5175 \n" -> 986, "266" -> 987, 
                "266 \.00\.b9 14 \n" -> 988, "267" -> 989, "26\n\n747" -> 990,
                 "2 + 68 \n" -> 991, "268" -> 992, "2      68\n\n536" -> 993, 
                "269" -> 994, "2697 + 5880 \n" -> 995, "27" -> 996, "270" -> 
                997, "271" -> 998, "27 - 10 \n" -> 999, "2        7\n\n1048" -> 
                1000, "2         7\n\n1153" -> 1001, "2   7\n\n1192" -> 1002, 
                "271\n\n680" -> 1003, "272" -> 1004, "2      72\n\n453" -> 
                1005, "2729 + 6856 \n" -> 1006, "2 + 73 \n" -> 1007, 
                "27 \.00\.b9 3 \n" -> 1008, "273" -> 1009, 
                "2    73        21\n\n950" -> 1010, "274" -> 1011, 
                "2                         -74\n\n643" -> 1012, "275" -> 1013,
                 "2751 + 4607 \n" -> 1014, "2757 + 2994 \n" -> 1015, 
                "27 + 6 \n" -> 1016, "276" -> 1017, "277" -> 1018, 
                "-2\n\n779" -> 1019, "    - 2( - 7 + 7x) = 28 " -> 1020, 
                "278" -> 1021, "2                        -78\n\n676" -> 1022, 
                "279" -> 1023, "    - 2(7 +  / x) = 1 " -> 1024, 
                "    - 2 + 7x = 5 " -> 1025, "    - 2(7x + 6) = 142 " -> 1026,
                 "2             8\n\n" -> 1027, "2       8\n\n" -> 1028, "28" -> 
                1029, "280" -> 1030, "281" -> 1031, "2815 + 5126 \n" -> 1032, 
                "282" -> 1033, "2\n\n821" -> 1034, "\n\n2\n\n822" -> 1035, 
                "2\n\n823" -> 1036, "2\n\n825" -> 1037, "2\n\n826" -> 1038, 
                "2\n\n827" -> 1039, "2\n\n829" -> 1040, "2829 + 1933 \n" -> 
                1041, "283" -> 1042, "2\n\n831" -> 1043, "2\n\n833" -> 1044, 
                "2\n\n834" -> 1045, "2\n\n835" -> 1046, "28 + 35 \n" -> 1047, 
                "2\n\n836" -> 1048, "28\n\n361" -> 1049, "2\n\n837" -> 1050, 
                "2  83\n\n894" -> 1051, "2\n\n839" -> 1052, "28    4\n\n" -> 
                1053, "284" -> 1054, "2\n\n840" -> 1055, "2\n\n842" -> 1056, 
                "2\n\n843" -> 1057, "2\n\n844" -> 1058, "\n\n2\n\n845" -> 
                1059, "2\n\n846" -> 1060, "2\n\n848" -> 1061, "2\n\n849" -> 
                1062, "    - 2( - 8 - 4x) = - 64 " -> 1063, "\n\n285" -> 1064,
                 "2 + 85 \n" -> 1065, "28 + 5 \n" -> 1066, "285" -> 1067, 
                "2\n\n851" -> 1068, "2\n\n852" -> 1069, "2\n\n854" -> 1070, 
                "2\n\n855" -> 1071, "2\n\n856" -> 1072, "2\n\n857" -> 1073, 
                "2\n\n858" -> 1074, "2\n\n859" -> 1075, "286" -> 1076, 
                "2\n\n861" -> 1077, "2\n\n862" -> 1078, "2\n\n863" -> 1079, 
                "2\n\n864" -> 1080, "2\n\n865" -> 1081, "2\n\n866" -> 1082, 
                "2\n\n867" -> 1083, "\n\n2\n\n868" -> 1084, "2\n\n869" -> 
                1085, "2                         -86\n\n       / x + 2y =     \
/  " -> 1086, "287" -> 1087, "2\n\n870" -> 1088, "2\n\n872" -> 1089, 
                "2\n\n873" -> 1090, "2\n\n874" -> 1091, "2\n\n876" -> 1092, 
                "2\n\n877" -> 1093, "2\n\n878" -> 1094, "288" -> 1095, 
                "2\n\n880" -> 1096, "2\n\n881" -> 1097, "2\n\n882" -> 1098, 
                "2\n\n883" -> 1099, "2\n\n884" -> 1100, "2\n\n885" -> 1101, 
                "2\n\n887" -> 1102, "2\n\n888" -> 1103, "\n\n289" -> 1104, 
                "289" -> 1105, "2\n\n890" -> 1106, "\n\n2\n\n891" -> 1107, 
                "2\n\n892" -> 1108, "2\n\n895" -> 1109, "2\n\n897" -> 1110, 
                "2\n\n898" -> 1111, "2\n\n899" -> 1112, 
                "    28x  + 17x - 6 = 0 " -> 1113, 
                "    - 28x  + 48x + 16 = 0 " -> 1114, 
                "    28x  - 56x + 28 = 0 " -> 1115, "2 + 9 \n" -> 1116, "29" -> 
                1117, "290" -> 1118, "2\n\n900" -> 1119, "2\n\n902" -> 1120, 
                "2\n\n903" -> 1121, "2\n\n904" -> 1122, "2\n\n905" -> 1123, 
                "2\n\n906" -> 1124, "2\n\n908" -> 1125, "2\n\n909" -> 1126, 
                "291" -> 1127, "2\n\n910" -> 1128, "2\n\n911" -> 1129, 
                "2           9\n\n1181" -> 1130, "2\n\n912" -> 1131, 
                "2\n\n913" -> 1132, "2\n\n914" -> 1133, "2\n\n915" -> 1134, 
                "2      91\n\n606" -> 1135, "2\n\n917" -> 1136, "2\n\n918" -> 
                1137, "2\n\n919" -> 1138, "292" -> 1139, "2\n\n920" -> 1140, 
                "2\n\n921" -> 1141, "\n\n2\n\n922" -> 1142, "2\n\n923" -> 
                1143, "2\n\n925" -> 1144, "2\n\n926" -> 1145, "2\n\n929" -> 
                1146, "293" -> 1147, "2\n\n931" -> 1148, "2\n\n932" -> 1149, 
                "2\n\n934" -> 1150, "2\n\n\n\n-93\n\n      5x + 3y =     /  " -> 
                1151, "2\n\n936" -> 1152, "2\n\n939" -> 1153, "294" -> 1154, 
                "-29\n\n405" -> 1155, "2940 + 6608 \n" -> 1156, "2\n\n941" -> 
                1157, "2\n\n942" -> 1158, "2943 + 8463 \n" -> 1159, 
                "-29\n\n450" -> 1160, "2\n\n946" -> 1161, "2\n\n947" -> 1162, 
                "2\n\n948" -> 1163, "2\n\n949" -> 1164, "295" -> 1165, 
                "2\n\n951" -> 1166, "2            95\n\n146" -> 1167, 
                "2\n\n952" -> 1168, "2\n\n953" -> 1169, "2\n\n955" -> 1170, 
                "2\n\n959" -> 1171, "296" -> 1172, "2\n\n960" -> 1173, 
                "2\n\n961" -> 1174, "2\n\n962" -> 1175, "2\n\n963" -> 1176, 
                "2\n\n965" -> 1177, "2\n\n966" -> 1178, "2\n\n967" -> 1179, 
                "2968 + 7604 \n" -> 1180, "2\n\n969" -> 1181, "29\n\n694" -> 
                1182, "297" -> 1183, "2\n\n970" -> 1184, "2\n\n971" -> 1185, 
                "2\n\n972" -> 1186, "2\n\n973" -> 1187, "2\n\n974" -> 1188, 
                "2\n\n975" -> 1189, "2\n\n976" -> 1190, "2\n\n977" -> 1191, 
                "2\n\n978" -> 1192, "2\n\n979" -> 1193, "298" -> 1194, 
                "2\n\n980" -> 1195, "2\n\n983" -> 1196, "2\n\n984" -> 1197, 
                "2\n\n986" -> 1198, "2\n\n989" -> 1199, "299" -> 1200, 
                "2\n\n990" -> 1201, "\n\n2\n\n991" -> 1202, "2\n\n992" -> 
                1203, "2\n\n993" -> 1204, "2\n\n994" -> 1205, "2\n\n995" -> 
                1206, "2\n\n996" -> 1207, "2\n\n998" -> 1208, "2\n\n999" -> 
                1209, "    2x = 0 " -> 1210, "    2x - 10 = 10 " -> 1211, 
                "    - 2x - 10 = - 20 " -> 1212, "    2x - 10 = 2 + 5x " -> 
                1213, "    2x - 10 = 3x -    /  " -> 1214, 
                "    2x + 10 = 6x + 54 " -> 1215, "      2x - 10y = - 60 " -> 
                1216, "    2x + 1 = - 19 " -> 1217, "      2x - 12y = - 28 " -> 
                1218, "    2x + 1 = 34 + 5x " -> 1219, "    - 2 + x = - 14 " -> 
                1220, "    2x = - 14 " -> 1221, "    2x = 18 " -> 1222, 
                "    2 + x = 2 " -> 1223, "    2 = x + 2 " -> 1224, 
                "    2x = 2 " -> 1225, "       - 2x - 20y = 132 " -> 1226, 
                "       - 2x + 20y = 174 " -> 1227, "    - 2x - 2 = 13 - 5x " -> 
                1228, "    - 2x + 2 = - 16 " -> 1229, "    - 2x = 22 " -> 
                1230, "    2x + 2 = 20 " -> 1231, "    2x - 2 = - 24 " -> 
                1232, "    - 2x + 2 = 4 " -> 1233, "    2x = 24 " -> 1234, 
                "    2x + 2 = 4x - 8 " -> 1235, "    - 2x + 2 = - 6 " -> 1236,
                 "    - 2x + 2y =   / " -> 1237, "    - 2x + 2y =     / " -> 
                1238, "    2x + 2y =    / " -> 1239, "    2x + 2y =     / " -> 
                1240, "2\n\n      - x + 2y = 10 " -> 1241, 
                "    - 2x + 2y = - 12" -> 1242, "    2x - 2y = - 12" -> 1243, 
                "       - 2x + 2y = 16 " -> 1244, "      2x - 2y = - 16 " -> 
                1245, "      2x - 2y = 16 " -> 1246, "    - 2x + 2y = - 18" -> 
                1247, "    2x + 2y = 18" -> 1248, "    - 2x - 2y = 2" -> 1249,
                 "    2x - 2y = 2" -> 1250, "    2x + 2y = 20" -> 1251, 
                "    - 2x + 2y = - 22" -> 1252, "    - 2x - 2y = - 28" -> 
                1253, "      2x + 2y = - 32 " -> 1254, "      2x + 2y = 32 " -> 
                1255, "      2x - 2y = - 4 " -> 1256, "    2x - 2y = 4" -> 
                1257, "    2x + 2y = 4" -> 1258, "    2x + 2y = 6" -> 1259, 
                "2\n\n      x + 2y = - 6 " -> 1260, "       - 2x - 2y = - 8 " -> 
                1261, "    2x = - 2y - 8" -> 1262, "    2 = x - 3 " -> 1263, 
                "    2x + 3 = - 11 " -> 1264, "    2x - 3 = - 19 " -> 1265, 
                "    2x + 3 = 5x - 24 " -> 1266, 
                "    2x  - 3x +    /    = 0 " -> 1267, 
                "    2x  - 3x + 1 = 0 " -> 1268, "    2x  + 3x + 10 = 0 " -> 
                1269, "    2x  + 3x - 14 = 0 " -> 1270, "    2x + 3y =  / " -> 
                1271, "    2x - 3y =     / " -> 1272, "    2x + 3y =     / " -> 
                1273, "    2x + 3y = - 13" -> 1274, "    2x - 3y = - 14" -> 
                1275, "    - 2x - 3y = 15" -> 1276, "      2x - 3y = - 17 " -> 
                1277, "2\n\n      x + 3y = 17 " -> 1278, 
                "    - 2x - 3y = - 19" -> 1279, "      2x - 3y = 19 " -> 1280,
                 "    2x + 3y = - 19" -> 1281, "    2x + 3y = - 20" -> 1282, 
                "    2x - 3y = 23" -> 1283, "      2x + 3y = 24 " -> 1284, 
                "    2x + 3y = 27" -> 1285, "       - 2x - 3y = - 28 " -> 
                1286, "      2x - 3y = - 28 " -> 1287, 
                "       - 2x + 3y = 29 " -> 1288, "      2x + 3y = - 30 " -> 
                1289, "    - 2x - 3y = - 4" -> 1290, "    2x = 3y + 4" -> 
                1291, "       - 2x + 3y = - 42 " -> 1292, "    2x + 3y = - 6" -> 
                1293, "    2x + 3y = 6" -> 1294, "       - 2x - 3y = 7 " -> 
                1295, "       - 2x + 3y = 7 " -> 1296, "    - 2x = 4 " -> 
                1297, "    - 2x + 4 = 0 " -> 1298, "    - 2x + 4 = 12 " -> 
                1299, "    2x + 4 = 12 " -> 1300, "    2x - 4 = - 4 " -> 1301,
                 "    2x - 4 = 4 " -> 1302, "    2x - 4 + 7x = 104 " -> 1303, 
                "     /  + 2x = - 4x -     /  " -> 1304, 
                "    2x = - 4y +     /   " -> 1305, "    2x - 4y =     / " -> 
                1306, "    2x + 4y =     / " -> 1307, "    2x + 4y = 0" -> 
                1308, "       - 2x + 4y = 14 " -> 1309, 
                "    - 2x - 4y = - 14" -> 1310, "      2x - 4y = - 14 " -> 
                1311, "    2x + 4y = - 14" -> 1312, 
                "       - 2x - 4y = - 18 " -> 1313, 
                "       - 2x + 4y = - 18 " -> 1314, "    2x - 4y = 18" -> 
                1315, "    2x + 4y = 18" -> 1316, "    2x + 4y = - 20" -> 
                1317, "      2x - 4y = - 24 " -> 1318, "    2x + 4y = - 24" -> 
                1319, "    2x - 4y = - 26" -> 1320, 
                "       - 2x + 4y = - 32 " -> 1321, "      2x + 4y = - 34 " -> 
                1322, "    2x - 4y = - 36" -> 1323, "    2x + 4y = 36" -> 
                1324, "    2x + 4y = 38" -> 1325, "    2x - 4y = - 4" -> 1326,
                 "       - 2x - 4y = - 42 " -> 1327, "    2x - 4y = 44" -> 
                1328, "    2x + 4y = 48" -> 1329, "2\n\n      - x + 4y = 5 " -> 
                1330, "    2x + 4y = 50" -> 1331, "    2x + 4y = 6" -> 1332, 
                "\n\n      2x + 4y = 8 " -> 1333, "    2x + 4y = - 8" -> 1334,
                 "    2x + 4y = 8" -> 1335, "    2x + 5 = 19 " -> 1336, 
                "    2x + 5 = - 7 " -> 1337, "    2x - 5 + 7x = 85 " -> 1338, 
                "    - 2x - 5y =      / " -> 1339, "       - 2x + 5y = 15 " -> 
                1340, "    2x + 5y = - 18" -> 1341, "    2x - 5y = 18" -> 
                1342, "    - 2x - 5y = - 2" -> 1343, "      2x - 5y = - 20 " -> 
                1344, "      2x + 5y = 21 " -> 1345, "    2x + 5y = - 22" -> 
                1346, "       - 2x + 5y = 23 " -> 1347, 
                "      2x - 5y = - 25 " -> 1348, "    2x + 5y = 28" -> 1349, 
                "      2x - 5y = - 32 " -> 1350, "    - 2x + 5y = - 33" -> 
                1351, "      2x + 5y = - 37 " -> 1352, "    2x + 5y = - 4" -> 
                1353, "      2x + 5y = 42 " -> 1354, "    - 2x - 5y = - 45" -> 
                1355, "    - 2x + 5y = 46" -> 1356, "    2x + 5y = 49" -> 
                1357, "    - 2x + 5y = - 5" -> 1358, "    2x - 5y = 50" -> 
                1359, "      2x - 5y = 52 " -> 1360, "    2x + 5y = 54" -> 
                1361, "      2x - 5y = - 55 " -> 1362, "    - 2x - 5y = - 7" -> 
                1363, "    2x + 5y = 70" -> 1364, "    - 2x - 5y = - 9" -> 
                1365, "    2 = x - 6 " -> 1366, "    2x = 6 " -> 1367, 
                "    2x + 6 = 0 + 3x " -> 1368, "    2x + 6 = - 18 " -> 1369, 
                "    - 2x - 6 = 4 " -> 1370, "    2x + 6 = - 6 " -> 1371, 
                "    2x + 6 = 6 " -> 1372, "    2x -  /  =     /  + 6x " -> 
                1373, "      2x - 6y = 44 " -> 1374, "    2x - 7 = 13 " -> 
                1375, "    - 2x + 7 = - 15 " -> 1376, "    2x - 7 = 3 " -> 
                1377, "    2x - 7 = 4x -    /  " -> 1378, 
                "    - 2x +  /  = - 7x +    /  " -> 1379, 
                "    2x  + 7x + 12 = 0 " -> 1380, "    - 2x  + 7x - 6 = 0 " -> 
                1381, "    - 2 + x = 8 " -> 1382, "    - 2 = x + 8 " -> 1383, 
                "    2x = - 8 " -> 1384, "    - 2x - 8 = - 10 " -> 1385, 
                "    2x + 8 = 10 " -> 1386, "    - 2x + 8 = 32 " -> 1387, 
                "    2x + 8 = 9 + x " -> 1388, "       - 2x - 8y = 0 " -> 
                1389, "      2x + 8y = - 24 " -> 1390, 
                "      2x - 8y = - 32 " -> 1391, "      2x + 8y = 66 " -> 
                1392, "    - 2x - 9 = - 33 " -> 1393, 
                "    - 2x  - 9x - 1 = 0 " -> 1394, "    2x  + 9x + 11 = 0 " -> 
                1395, "    - 2x  -     / x - 18 = 0 " -> 1396, 
                "    2x  +     / x - 28 = 0 " -> 1397, 
                "    - 2x  -     / x + 32 = 0 " -> 1398, 
                "    - 2x  +  / x + 6 = 0 " -> 1399, 
                "    - 2x  +    / x - 7 = 0 " -> 1400, 
                "    2x  -  / x + 9 = 0 " -> 1401, "    - 2x +  / y =     / " -> 
                1402, "    - 2x -  / y =      /   " -> 1403, 
                "    - 2x + y =    / " -> 1404, "    - 2x - y =     / " -> 
                1405, "    2x +  / y =    / " -> 1406, 
                "    2x +  / y =     / " -> 1407, "    2x + y = 0" -> 1408, 
                "      2x + y = -1 " -> 1409, "      2x - y = - 10 " -> 1410, 
                "       - 2x - y = - 12 " -> 1411, "      2x + y = 12 " -> 
                1412, "    2x + y = 12" -> 1413, "       - 2x - y = - 13 " -> 
                1414, "    - 2x - y = - 14" -> 1415, "    - 2x +  / y = - 15" -> 
                1416, "       - 2x - y = - 17 " -> 1417, "    2x - y = - 17" -> 
                1418, "    - 2x + y = 19" -> 1419, "    2x +  / y = 2" -> 
                1420, "    2x = - y + 2" -> 1421, "    2x + y = - 2" -> 1422, 
                "2\n\n      x +  / y = 2 " -> 1423, "      2x - y = - 22 " -> 
                1424, "       - 2x + y = - 23 " -> 1425, "    2x + y = 23" -> 
                1426, "    - 2x + y = 24" -> 1427, "       - 2x + y = 25 " -> 
                1428, "    2x - y = - 28" -> 1429, "    2x - y = 28" -> 1430, 
                "    - 2x + y = - 3" -> 1431, "      2x + y = - 3 " -> 1432, 
                "    - 2x = y - 3" -> 1433, "    2x - y = - 3" -> 1434, 
                "2\n\n      - x +  / y = - 3 " -> 1435, "    - 2x + y = 5" -> 
                1436, "      2x - y = 5 " -> 1437, "      2x + y = 5 " -> 
                1438, "       - 2x + y = 6 " -> 1439, "      2x + y = - 6 " -> 
                1440, "    2x + y = - 6" -> 1441, "      2x + y = - 8 " -> 
                1442, "      2x - y = - 9 " -> 1443, "    2y + 2x = 10" -> 
                1444, "    - 2y + 4x = 20" -> 1445, 
                "2\n\n      y = - 5x - 34 " -> 1446, "    2y - 5x = 48" -> 
                1447, "    2y - x =    / " -> 1448, "      2y - x = - 16 " -> 
                1449, "      2y + x = 18 " -> 1450, "3" -> 1451, "3\n\n" -> 
                1452, "30" -> 1453, "300" -> 1454, "30 + 1 \n" -> 1455, "301" -> 
                1456, "3018 + 2248 \n" -> 1457, "302" -> 1458, 
                "3021 + 8010 \n" -> 1459, "-30   2   62\n\n1008" -> 1460, 
                "303" -> 1461, "30+30" -> 1462, "304" -> 1463, "30+40" -> 
                1464, "3047 + 3011 \n" -> 1465, "305" -> 1466, "306" -> 1467, 
                "307" -> 1468, "\n\n308" -> 1469, "308" -> 1470, "30 + 9 \n" -> 
                1471, "309" -> 1472, "3096 + 2460 \n" -> 1473, 
                "    - 30x  - 53x - 8 = 0 " -> 1474, 
                "    - 30x  - 78x - 48 = 0 " -> 1475, "31" -> 1476, 
                "3 + 10 \n" -> 1477, "310" -> 1478, 
                "3            103\n\n       / x - 4y =     /  " -> 1479, 
                "    3(10 - 5x) =    /  " -> 1480, 
                "3\n\n10\n\n      5x - 6y =    /  " -> 1481, "3109 + 7046 \n" -> 
                1482, "3 + 11 \n" -> 1483, "311" -> 1484, 
                "3         11\n\n791" -> 1485, "3             118\n\n430" -> 
                1486, "31\:036d 19 as an improper fraction \n" -> 1487, 
                "3                         -11\n\n       / x + 2y =     /  " -> 
                1488, "-3                      -11\n\n        / x + y =     / \
 " -> 1489, "312" -> 1490, "-3             123\n\n486" -> 1491, "3 + 13 \n" -> 
                1492, "313" -> 1493, "3\n\n130" -> 1494, "3\n\n134" -> 1495, 
                "3\n\n1\n\n       - 3x +  / y = - 24 " -> 1496, "314" -> 1497,
                 "3147 + 6538 \n" -> 1498, "-3 + 15 \n" -> 1499, 
                "3            15\n\n" -> 1500, "3          15\n\n" -> 1501, 
                "315" -> 1502, 
                "3            15\n\n1             -269\n\n       - 2x +  / y \
=      /    " -> 1503, "3             15\n\n604" -> 1504, 
                "3             -157\n\n378" -> 1505, "316" -> 1506, 
                "3160 + 1245 \n" -> 1507, "-31\n\n644" -> 1508, "317" -> 1509,
                 "3\n\n-17\n\n      x + 3y =     /  " -> 1510, "318" -> 1511, 
                "3\n\n182" -> 1512, "3      182\n\n497" -> 1513, "319" -> 
                1514, "    - 3(-1 -  / x) = - 6 " -> 1515, 
                "    3(-1x - 6) = - 9 " -> 1516, "3      2\n\n" -> 1517, "32" -> 
                1518, "320" -> 1519, "32 \.00\.99 1 \n" -> 1520, "321" -> 
                1521, "3\n\n210" -> 1522, "3   2\n\n1157" -> 1523, 
                "\n\n3   2\n\n1197" -> 1524, 
                "3           21\n\n-43\n\n      - x + 4y =     /  " -> 1525, 
                "\n\n322" -> 1526, "322" -> 1527, "3\n\n225" -> 1528, 
                "-3   2   287        2\n\n937" -> 1529, "323" -> 1530, 
                "-32\n\n351" -> 1531, "-3   2   383\n\n927" -> 1532, 
                "3 + 24 \n" -> 1533, "324" -> 1534, "325" -> 1535, 
                "3       2      6\n\n" -> 1536, "32 + 6 \n" -> 1537, "326" -> 
                1538, "327" -> 1539, "3             27\n\n245" -> 1540, 
                "\n\n3                        -27\n\n460" -> 1541, 
                "3277 + 7411 \n" -> 1542, "3 + 28 \n" -> 1543, "328" -> 1544, 
                "3\n\n-2             8\n\n        / x + 2y =  /    " -> 1545, 
                "329" -> 1546, "3   2\n\n938" -> 1547, 
                "3\:036d 2 as a mixed number \n" -> 1548, 
                "    - 32x  - 20x + 12 = 0 " -> 1549, "    - 3 - 2x = - 21 " -> 
                1550, "    3 + 2x = - 3 " -> 1551, 
                "3\n\n       - 2x - 3y = - 2 " -> 1552, 
                "3\n\n2\n\n       / x + 3y = - 25 " -> 1553, 
                "    32x  + 48x + 16 = 0 " -> 1554, 
                "    32x  + 76x + 42 = 0 " -> 1555, 
                "    - 32x  +    / x +  /  = 0 " -> 1556, 
                "3\n\n       - 2x + y = 6 " -> 1557, "3                3\n\n" -> 
                1558, "3              3\n\n" -> 1559, "3             3\n\n" -> 
                1560, "3        3\n\n" -> 1561, "3       3\n\n" -> 1562, 
                "3      3\n\n" -> 1563, "33" -> 1564, "330" -> 1565, 
                "\n\n331" -> 1566, "33 + 1 \n" -> 1567, "331" -> 1568, 
                "3           31\n\n345" -> 1569, 
                "3              3\n\n1\n\n      5x +  / y = - 48 " -> 1570, 
                "3      3             -18\n\n691" -> 1571, "332" -> 1572, 
                "-33                 2\n\n17" -> 1573, 
                "3\n\n-32\n\n       - 2x - y =     /  " -> 1574, 
                "3\n\n3      24\n\n      x =  / y -    /  " -> 1575, "333" -> 
                1576, "3       3        3\n\n2      41\n\n      x -  / y =    \
/  " -> 1577, "3             -33\n\n483" -> 1578, "3             33\n\n555" -> 
                1579, "3      3      39\n\n311" -> 1580, 
                "3        3\n\n      3x + 2y = 20 " -> 1581, 
                "3        3\n\n       - 3x - 4y = - 13 " -> 1582, "33 + 4 \n" -> 
                1583, "334" -> 1584, 
                "3              3\n\n      4x + 3y = 43 " -> 1585, 
                "3              3\n\n       - 4x + 4y = - 24 " -> 1586, 
                "3           3\n\n      4x + y = - 28 " -> 1587, "335" -> 
                1588, "-335\n\n218" -> 1589, "3          -3    5\n\n32" -> 
                1590, "336" -> 1591, "-3             36\n\n480" -> 1592, 
                "    3(3 - 6x) = 135 " -> 1593, "3 + 37 \n" -> 1594, "337" -> 
                1595, "3 + 38 \n" -> 1596, "338" -> 1597, 
                "3            38\n\n240" -> 1598, "\n\n339" -> 1599, "339" -> 
                1600, "    3( - 3x + 10) = 30 " -> 1601, 
                "3              3\n\n      x + 2y = 21 " -> 1602, 
                "    3 - 3x = - 30 " -> 1603, "3\n\n      3x + 4y = 25 " -> 
                1604, "3              3\n\n      y = - 5x - 6 " -> 1605, 
                "3 + 4 \n" -> 1606, "34" -> 1607, "340" -> 1608, "34+1" -> 
                1609, "341" -> 1610, "-3\n\n415" -> 1611, "342" -> 1612, 
                "343" -> 1613, "3434 + 9380 \n" -> 1614, "344" -> 1615, "345" -> 
                1616, "    3( - 4 + 5x) = - 12 " -> 1617, "346" -> 1618, 
                "347" -> 1619, "3                         -47\n\n250" -> 1620,
                 "    3(4 - 7x) = - 219 " -> 1621, "348" -> 1622, "349" -> 
                1623, "    - 3 + 4x = 25 " -> 1624, "    3 + 4x = 31 " -> 
                1625, "    3(4x - 4) = - 24 " -> 1626, "    - 3 + 4x = - 43 " -> 
                1627, "    3 + 4x = - 45 " -> 1628, 
                "    3( - 4x + 9) = - 117 " -> 1629, "35" -> 1630, "350" -> 
                1631, "3501 + 9068 \n" -> 1632, 
                "3\n\n-50\n\n      x - y =     /  " -> 1633, "351" -> 1634, 
                "35 + 2 \n" -> 1635, "352" -> 1636, "3523 + 8800 \n" -> 1637, 
                "353" -> 1638, "354" -> 1639, "3 + 55 \n" -> 1640, "355" -> 
                1641, "35 + 6 \n" -> 1642, "356" -> 1643, "35 + 7 \n" -> 1644,
                 "357" -> 1645, "358" -> 1646, "359" -> 1647, 
                "    - 3 + 5x = 2 " -> 1648, "    - 35x  + 53x - 20 = 0 " -> 
                1649, "    - 3(5x - 6) = - 42 " -> 1650, 
                "    35x  -     / x -  /  = 0 " -> 1651, "3            6\n\n" -> 
                1652, "36" -> 1653, "360" -> 1654, "361" -> 1655, 
                "3              6\n\n1                     -23\n\n       / x \
- y =     /  " -> 1656, "\n\n362" -> 1657, 
                "3\n\n-62\n\n      2x - 4y =     /  " -> 1658, 
                "36   2   318\n\n985" -> 1659, 
                "3                        -62\n\n602" -> 1660, "363" -> 1661, 
                "3      63\n\n699" -> 1662, "364" -> 1663, "365" -> 1664, 
                "3\n\n650\n\n      5x - 15y =     /  " -> 1665, "36\n\n550" -> 
                1666, "366" -> 1667, "3661 + 5756 \n" -> 1668, 
                "    - 3(6 + 6x) = 108 " -> 1669, "367" -> 1670, 
                "3                          -67\n\n145" -> 1671, 
                "3             -67\n\n665" -> 1672, "\n\n368" -> 1673, "368" -> 
                1674, "-3                         -68\n\n144" -> 1675, "369" -> 
                1676, "    36x  - 24x + 4 = 0 " -> 1677, 
                "    - 3( - 6x - 2) = 78 " -> 1678, "    3 - 6x = 7x - 36 " -> 
                1679, "3 + 7 \n" -> 1680, "37" -> 1681, "370" -> 1682, 
                "3\n\n70\n\n      x - 3y =    /  " -> 1683, "371" -> 1684, 
                "372" -> 1685, "3 + 73 \n" -> 1686, "373" -> 1687, "374" -> 
                1688, "3740 + 4179 \n" -> 1689, "3      74\n\n199" -> 1690, 
                "-37\n\n461" -> 1691, "375" -> 1692, "376" -> 1693, "377" -> 
                1694, "37\n\n719" -> 1695, "378" -> 1696, "3782 + 1330 \n" -> 
                1697, "-3                         -78\n\n638" -> 1698, "379" -> 
                1699, "3      79\n\n      5x +  / y =    /    " -> 1700, 
                "    3 + 7x = - 39 " -> 1701, "38" -> 1702, "380" -> 1703, 
                "381" -> 1704, "3      81\n\n      4x -  / y =    /  " -> 
                1705, "38 + 2 \n" -> 1706, "382" -> 1707, "-38\n\n248" -> 
                1708, "3825 + 6015 \n" -> 1709, 
                "3\n\n-8\n\n       - 2x + 2y =   /  " -> 1710, "383" -> 1711, 
                "384" -> 1712, "\n\n385" -> 1713, "3850 + 4435 \n" -> 1714, 
                "3            8\n\n5\n\n      4x - 10y =  /  " -> 1715, "386" -> 
                1716, "    - 3( - 8 + 6x) = 222 " -> 1717, "387" -> 1718, 
                "388" -> 1719, "3880 + 6919 \n" -> 1720, "389" -> 1721, "39" -> 
                1722, "3 + 90 \n" -> 1723, "390" -> 1724, "391" -> 1725, 
                "39 + 10 \n" -> 1726, "3                         -91\n\n189" -> 
                1727, "392" -> 1728, "3928 + 9719 \n" -> 1729, "393" -> 1730, 
                "394" -> 1731, "-39\n\n410" -> 1732, "395" -> 1733, "396" -> 
                1734, "3967 - 2519 \n" -> 1735, "397" -> 1736, 
                "3\n\n97\n\n      3x + 5y =    /  " -> 1737, 
                "3              97\n\n788" -> 1738, "3979 + 4765 \n" -> 1739, 
                "39 + 8 \n" -> 1740, "398" -> 1741, "399" -> 1742, 
                "3             -99\n\n301" -> 1743, 
                "-3(\!\(\*SuperscriptBox[\(x\), \(2\)]\)-2x+7)" -> 1744, 
                "    - 3 + x = 1 " -> 1745, "    3 + x = 1 " -> 1746, 
                "    3x + 10 = - 17 " -> 1747, "    3x - 10 = 20 " -> 1748, 
                "    3x + 10 = - 26 " -> 1749, "    - 3x + 10 = 31 " -> 1750, 
                "    3x  + 10x + 7 = 0 " -> 1751, "    3x  - 10x + 9 = 0 " -> 
                1752, "      3x - 10y = - 79 " -> 1753, "    3 + x = 11 " -> 
                1754, "    - 3x + 1 = 19 " -> 1755, "    - 3x + 1 = 19 - 6x " -> 
                1756, "    3x  + 11x +    /  = 0 " -> 1757, 
                "    - 3x + 1 = 25 - 7x " -> 1758, "    3x  + 12x + 11 = 0 " -> 
                1759, "    3x  - 12x + 13 = 0 " -> 1760, 
                "    3x  + 12x + 13 = 0 " -> 1761, 
                "       - 3x + 12y = - 114 " -> 1762, "      3x + 12y = 72 " -> 
                1763, "       - 3x + 12y = - 9 " -> 1764, 
                "      3x - 12y = - 90 " -> 1765, "      3x = 13 + 4y " -> 
                1766, "    3x + 1 = 37 " -> 1767, 
                "-3\n\n        / x = - 16 - 4y " -> 1768, 
                "      3x + 16y = - 110 " -> 1769, "    - 3 = x + 2 " -> 1770,
                 "    3 + x = - 2 " -> 1771, "    - 3x = - 21 " -> 1772, 
                "    - 3x  + 21x - 30 = 0 " -> 1773, "      3x = - 21 - y " -> 
                1774, "    - 3x - 2 = - 2x - 1 " -> 1775, 
                "    3x - 2 - 2x = 5 " -> 1776, "    3x + 2 = 38 - 3x " -> 
                1777, "      3x = 25 - y " -> 1778, "    - 3x  - 2x + 4 = 0 " -> 
                1779, "    - 3x + 2y =     / " -> 1780, 
                "    3x + 2y =     / " -> 1781, "    3x + 2y =      / " -> 
                1782, "    3x + 2y = 0" -> 1783, "    3x - 2y = - 10" -> 1784,
                 "    3x + 2y = 13" -> 1785, "    - 3x - 2y = - 14" -> 1786, 
                "      3x + 2y = - 14 " -> 1787, "    3x + 2y = 15" -> 1788, 
                "    - 3x - 2y = - 16" -> 1789, "    3x - 2y = 18" -> 1790, 
                "       - 3x + 2y = - 19 " -> 1791, "      3x - 2y = 2 " -> 
                1792, "    3x + 2y = 2" -> 1793, "    3x + 2y = 21" -> 1794, 
                "       - 3x - 2y = - 22 " -> 1795, "       - 3x + 2y = 22 " -> 
                1796, "    3x - 2y = - 23" -> 1797, "    3x - 2y = 24" -> 
                1798, "    - 3x + 2y = 25" -> 1799, "    3x - 2y = - 3" -> 
                1800, "       - 3x + 2y = - 30 " -> 1801, "    3x + 2y = 30" -> 
                1802, "    - 3x + 2y = - 31" -> 1803, "    - 3x + 2y = - 37" -> 
                1804, "    - 3x + 2y = - 38" -> 1805, "    - 3x + 2y = - 4" -> 
                1806, "       - 3x + 2y = 43 " -> 1807, 
                "       - 3x - 2y = 5 " -> 1808, "3\n\n      x - 2y = - 5 " -> 
                1809, "       - 3x + 2y = - 9 " -> 1810, "    - 3 + x = - 3 " -> 
                1811, "    3 + x = 3 " -> 1812, "    3 = x - 3 " -> 1813, 
                "    3 = x + 3 " -> 1814, "    3x = 30 " -> 1815, 
                "      3x = 32 - 2y " -> 1816, "    3x - 3 = 2x + 6 " -> 1817,
                 "    - 3x + 3 = - 52 + 2x " -> 1818, 
                "    3x - 3 =  / x +     /  " -> 1819, 
                "    - 3x + 3y =      / " -> 1820, "      3x + 3y = 12 " -> 
                1821, "    3x + 3y = 12" -> 1822, "       - 3x + 3y = - 15 " -> 
                1823, "    3x + 3y = 15" -> 1824, "       - 3x - 3y = - 21 " -> 
                1825, "       - 3x + 3y = 21 " -> 1826, "      3x + 3y = 24 " -> 
                1827, "       - 3x + 3y = 27 " -> 1828, 
                "    - 3x + 3y = - 27" -> 1829, "    3x + 3y = 27" -> 1830, 
                "      3x + 3y = - 3 " -> 1831, "      3x + 3y = - 30 " -> 
                1832, "      3x + 3y = 30 " -> 1833, "    3x - 3y = - 33" -> 
                1834, "    3x = 3y - 36" -> 1835, "    - 3x = - 3y - 39" -> 
                1836, "    3x = - 3y - 39" -> 1837, "    - 3x + 3y = - 48" -> 
                1838, "      3x - 3y = 48 " -> 1839, "      3x + 3y = 54 " -> 
                1840, "       - 3x + 3y = - 6 " -> 1841, 
                "       - 3x - 3y = 6 " -> 1842, "      3x - 3y = 6 " -> 1843,
                 "    3x + 3y = 6" -> 1844, "      3x - 3y = - 9 " -> 1845, 
                "      3x + 3y = 9 " -> 1846, "    3x - 3y = 9" -> 1847, 
                "    - 3 = x - 4 " -> 1848, "    - 3x + 4 = - x + 20 " -> 
                1849, "    - 3x + 4y =    / " -> 1850, "    3x + 4y =     / " -> 
                1851, "    3x + 4y =      / " -> 1852, 
                "       - 3x - 4y = 0 " -> 1853, "    - 3x + 4y = - 10" -> 
                1854, "       - 3x + 4y = 11 " -> 1855, "      3x + 4y = 11 " -> 
                1856, "      3x + 4y = - 13 " -> 1857, "    3x + 4y = 14" -> 
                1858, "       - 3x - 4y = - 16 " -> 1859, 
                "    3x - 4y = - 16" -> 1860, "    - 3x + 4y = 18" -> 1861, 
                "    3x - 4y = 18" -> 1862, "      3x - 4y = - 2 " -> 1863, 
                "    3x - 4y = 22" -> 1864, "      3x + 4y = 26 " -> 1865, 
                "    3x + 4y = 26" -> 1866, "      3x - 4y = - 27 " -> 1867, 
                "    - 3x - 4y = - 28" -> 1868, "    3x - 4y = 28" -> 1869, 
                "     /3x + 4y =     /3" -> 1870, "       - 3x + 4y = 30 " -> 
                1871, "    - 3x - 4y = - 30" -> 1872, "      3x + 4y = 33 " -> 
                1873, "    3x - 4y = - 33" -> 1874, 
                "\n\n       - 3x + 4y = - 35 " -> 1875, 
                "    3x +  /4y =     /4" -> 1876, "    3x + 4y = - 4" -> 1877,
                 "    3x + 4y = 4" -> 1878, "    3x + 4y = 40" -> 1879, 
                "       - 3x + 4y = 42 " -> 1880, "    3x + 4y = - 42" -> 
                1881, "      3x + 4y = 43 " -> 1882, "    3x - 4y = 47" -> 
                1883, "    3x - 4y = - 55" -> 1884, "      3x - 4y = - 59 " -> 
                1885, "    3x + 4y = 7" -> 1886, "    3 + x = - 5 " -> 1887, 
                "    - 3x + 5 = - 22 " -> 1888, "    - 3x - 5 = - 35 " -> 
                1889, "    3x + 5 = - 4 " -> 1890, "    - 3x + 5y =     / " -> 
                1891, "    3x + 5y =     / " -> 1892, "    3x + 5y =      / " -> 
                1893, "    3x + 5y = 1" -> 1894, "      3x + 5y = 10 " -> 
                1895, "    3x - 5y = - 10" -> 1896, "    3x - 5y = - 14" -> 
                1897, "       - 3x + 5y = 15 " -> 1898, "    3x + 5y = 15" -> 
                1899, "    3x +  /5y = - 19" -> 1900, "      3x - 5y = - 31 " -> 
                1901, "    - 3x + 5y = 33" -> 1902, "      3x - 5y = - 37 " -> 
                1903, "      3x - 5y = 42 " -> 1904, "    3x - 5y = - 45" -> 
                1905, "       - 3x + 5y = - 49 " -> 1906, 
                "      3x + 5y = 5 " -> 1907, "    3x + 5y = 54" -> 1908, 
                "    3x + 5y = 61" -> 1909, "    3x = - 5y + 62" -> 1910, 
                "    3x + 5y = 67" -> 1911, "      3x - 5y = - 8 " -> 1912, 
                "    - 3x + 5y = - 9" -> 1913, "    3x + 6 = 36 " -> 1914, 
                "    3x - 6 = - 6 " -> 1915, "    3x  + 6x +    /5 = 0 " -> 
                1916, "      3x + 6y = - 30 " -> 1917, "    - 3 = x + 7 " -> 
                1918, "    - 3x + 7 = 19 " -> 1919, "    3x + 7 = 25 " -> 
                1920, "    3x + 7 = 4 " -> 1921, "    - 3x + 7 = 7 " -> 1922, 
                "    3x  + 7x + 9 = 0 " -> 1923, "    - 3x + 8 = 2 - 2x " -> 
                1924, "    3x - 8 = - 23 " -> 1925, "    3x + 8 = 35 " -> 
                1926, "    3x - 8 = 4 " -> 1927, "    3x + 8 = 44 " -> 1928, 
                "       - 3x - 8y = - 64 " -> 1929, "    3 = x - 9 " -> 1930, 
                "    - 3x + 9 = 3 " -> 1931, "    - 3x + 9 = 33 " -> 1932, 
                "    - 3x + 9 = 7x - 11 " -> 1933, "    - 3x - 9 = - 9 " -> 
                1934, "    - 3 -  / x - x =   /  " -> 1935, 
                "    - 3x  -    / x -  /  = 0 " -> 1936, 
                "    3x  +  / x - 7 = 0 " -> 1937, "    - 3x -  / y =    / " -> 
                1938, "    - 3x +  / y =     / " -> 1939, 
                "    - 3x - y =     / " -> 1940, "    - 3x + y =     / " -> 
                1941, "    3x +  / y =    / " -> 1942, 
                "    3x -  / y =     / " -> 1943, "    3x + y =     / " -> 
                1944, "    - 3x + y = -1" -> 1945, "    - 3x - y = 1" -> 1946,
                 "    3x + y = 1" -> 1947, "    3x = y - 10" -> 1948, 
                "    3x + y = - 12" -> 1949, "    3x + y = 13" -> 1950, 
                "    - 3x - y = - 14" -> 1951, "       - 3x - y = 15 " -> 
                1952, "    - 3x + y = - 16" -> 1953, "    3x - y = 18" -> 
                1954, "    3x + y = 2" -> 1955, "       - 3x + y = 20 " -> 
                1956, "    - 3x - y = - 24" -> 1957, "      3x + y = 27 " -> 
                1958, "    3x + y = 27" -> 1959, "     /3x + y =   /3" -> 
                1960, "      3x + y = 3 " -> 1961, "    - 3x + y = - 31" -> 
                1962, "    3x + y = 32" -> 1963, "    - 3x + y = 35" -> 1964, 
                "    3x + y = 4" -> 1965, "       - 3x - y = - 5 " -> 1966, 
                "      3x + y = - 5 " -> 1967, "       - 3x + y = 6 " -> 1968,
                 "    3x - y = - 7" -> 1969, "    - 3x - y = - 8" -> 1970, 
                "      3x + y = - 8 " -> 1971, "    - 3x + y = 9" -> 1972, 
                "    3x + y = 9" -> 1973, "    - 3y + 2x = - 27" -> 1974, 
                "    - 3y + 2x = - 3" -> 1975, "      3y + 3x = 27 " -> 1976, 
                "    - 3y + 4x = 26" -> 1977, "    - 3y + 5x = 38" -> 1978, 
                "      3y + 5x = - 5 " -> 1979, "    - 3y +  / x =      / " -> 
                1980, "4" -> 1981, "4\n\n" -> 1982, "4 + 0 \n" -> 1983, "40" -> 
                1984, "400" -> 1985, "401" -> 1986, "401\n\n784" -> 1987, 
                "402" -> 1988, "4027 + 2502 \n" -> 1989, "403" -> 1990, "404" -> 
                1991, "405" -> 1992, "406" -> 1993, "4064 + 9078 \n" -> 1994, 
                "407" -> 1995, "\n\n408" -> 1996, "408" -> 1997, "409" -> 
                1998, "4096 + 5082 \n" -> 1999, "41" -> 2000, "4 + 10 \n" -> 
                2001, "410" -> 2002, "411" -> 2003, "4           11\n\n400" -> 
                2004, "4116 + 6636 \n" -> 2005, "    - 4(1 - 1x) = 0 " -> 
                2006, "41 + 2 \n" -> 2007, "41+2" -> 2008, "412" -> 2009, 
                "41\:036d 2 as an improper fraction \n" -> 2010, "413" -> 
                2011, "-41\n\n300" -> 2012, "-41\n\n359" -> 2013, 
                "4              13\n\n775" -> 2014, 
                "    - 4(-1 + 3x) = - 44 " -> 2015, "\n\n414" -> 2016, "414" -> 
                2017, "\n\n41\n\n47" -> 2018, "415" -> 2019, "4154 + 9932 \n" -> 
                2020, "41\n\n598" -> 2021, "4            16\n\n" -> 2022, 
                "41 + 6 \n" -> 2023, "416" -> 2024, 
                "4             -16\n\n399" -> 2025, "417" -> 2026, 
                "41\n\n763" -> 2027, "4            18\n\n" -> 2028, "418" -> 
                2029, "4           18\n\n1             -575\n\n       - 4x +  \
/ y =      /    " -> 2030, "4             -182\n\n730" -> 2031, 
                "4             -188\n\n       - 4x +  / y =      /  " -> 2032,
                 "4189 + 2776 \n" -> 2033, "4189 + 5839 \n" -> 2034, 
                "41 + 9 \n" -> 2035, "419" -> 2036, "4              2\n\n" -> 
                2037, "4             2\n\n" -> 2038, "4        2\n\n" -> 2039,
                 "4      2\n\n" -> 2040, "4 \.00\.b9 2 \n" -> 2041, "42" -> 
                2042, "420" -> 2043, "4\n\n207\n\n      5x + 2y =     /  " -> 
                2044, "421" -> 2045, "4   2\n\n1163" -> 2046, "422" -> 2047, 
                "4             -224\n\n503" -> 2048, 
                "4             22\n\n819" -> 2049, 
                "4              2\n\n       - 2x + 20y = - 20 " -> 2050, 
                "4        2\n\n      2x = 32 - 4y " -> 2051, "423" -> 2052, 
                "4\n\n23\n\n      x = 3y +    /  " -> 2053, 
                "4           23\n\n       / x + y =    /  " -> 2054, "424" -> 
                2055, "4             24       3\n\n" -> 2056, 
                "4               2\n\n4\n\n      x =  / y - 10 " -> 2057, 
                "425" -> 2058, "\n\n4    2   56\n\n968" -> 2059, "4 + 26 \n" -> 
                2060, "426" -> 2061, "4261 + 8473 \n" -> 2062, "427" -> 2063, 
                "4270 + 9940 \n" -> 2064, "4272 + 1001 \n" -> 2065, 
                "42\n\n754" -> 2066, "428" -> 2067, "429" -> 2068, 
                "4292 + 9179 \n" -> 2069, "4            29\n\n406" -> 2070, 
                "    4 + 2x = 16 " -> 2071, "    42x  + 31x + 4 = 0 " -> 2072,
                 "4\n\n       - 2x + 4y = 11 " -> 2073, 
                "4      2\n\n      x = - 5y - 10 " -> 2074, 
                "    42x  + 9x - 6 = 0 " -> 2075, 
                "    42x  +     / x -  /  = 0 " -> 2076, "43" -> 2077, "430" -> 
                2078, "\n\n431" -> 2079, "431" -> 2080, 
                "4\n\n3             -147\n\n      5x -  / y =      /    " -> 
                2081, "432" -> 2082, "4             32\n\n510" -> 2083, 
                "4                        -32\n\n       / x - 3y =     /  " -> 
                2084, "433" -> 2085, "43 + 4 \n" -> 2086, "434" -> 2087, 
                "435" -> 2088, "436" -> 2089, "4\n\n360" -> 2090, "437" -> 
                2091, "438" -> 2092, "439" -> 2093, 
                "    - 4( - 3x - 2) = 140 " -> 2094, "    4 + 3x = 22 " -> 
                2095, "    - 4(3x - 5) = - 4 " -> 2096, "    4 + 3x = 7 " -> 
                2097, "4              4\n\n" -> 2098, "4             4\n\n" -> 
                2099, "4 + -4 \n" -> 2100, "44" -> 2101, "440" -> 2102, 
                "4                          409\n\n89" -> 2103, "44 + 1 \n" -> 
                2104, "441" -> 2105, "4419 + 1814 \n" -> 2106, "442" -> 2107, 
                "4         4               -204\n\n177" -> 2108, 
                "4420 + 6691 \n" -> 2109, "4        4\n\n      2x - 5y = 35 " -> 
                2110, "443" -> 2111, 
                "4               4\n\n      3x + 3y = 12 " -> 2112, 
                "4              4\n\n       - 3x + 4y = - 47 " -> 2113, 
                "4        4\n\n      3x + 4y = 51 " -> 2114, "444" -> 2115, 
                "4            -440\n\n159" -> 2116, "4447 + 4604 \n" -> 2117, 
                "44 + 5 \n" -> 2118, "445" -> 2119, 
                "4\n\n-45\n\n       - 3x - y =     /  " -> 2120, 
                "4        4\n\n       - 5x + 4y = 42 " -> 2121, 
                "4        4\n\n      5x - y = - 45 " -> 2122, "446" -> 2123, 
                "447" -> 2124, "4        4\n\n79\n\n      5x - 4y =    /  " -> 
                2125, "448" -> 2126, "44 + 85 \n" -> 2127, "4 + 49 \n" -> 
                2128, "449" -> 2129, 
                "4              4\n\n9             3\n\n       / x + 3y =  /  \
" -> 2130, "    - 4(4x - 1) = 4 " -> 2131, "    4 - 4x = - 36 " -> 2132, 
                "4              4\n\n      x + 3y = 12 " -> 2133, 
                "4\n\n       - 4x + 3y = 32 " -> 2134, 
                "    4( - 4x + 8) = - 160 " -> 2135, 
                "4        4\n\n      x + y = 7 " -> 2136, "4 + 5 \n" -> 2137, 
                "45" -> 2138, "45 + 0 \n" -> 2139, "450" -> 2140, "451" -> 
                2141, "-45\n\n129" -> 2142, "452" -> 2143, "45\n\n201" -> 
                2144, "4\n\n521" -> 2145, "453" -> 2146, "\n\n454" -> 2147, 
                "454" -> 2148, "4 + 55 \n" -> 2149, "455" -> 2150, "456" -> 
                2151, "457" -> 2152, "45 + 8 \n" -> 2153, "458" -> 2154, 
                "459" -> 2155, "4\n\n\n\n-59\n\n      2x + 4y =     /  " -> 
                2156, "    4 + 5x = 14 " -> 2157, "    4 - 5x = - 16 " -> 
                2158, "    4 + 5x = - 16 " -> 2159, "    - 4 - 5x = - 39 " -> 
                2160, "    4(5x + 8) = - 68 " -> 2161, "-4 + -6 \n" -> 2162, 
                "46" -> 2163, "4 + 60 \n" -> 2164, "460" -> 2165, 
                "4609 + 2756 \n" -> 2166, "461" -> 2167, 
                "4\n\n61\n\n      x = 2y -    /  " -> 2168, "46 + 2 \n" -> 
                2169, "462" -> 2170, "463" -> 2171, "4            63\n\n593" -> 
                2172, "464" -> 2173, "465" -> 2174, "466" -> 2175, 
                "4662 + 2032 \n" -> 2176, "-466     2\n\n86" -> 2177, 
                "4                     -6\n\n640" -> 2178, "467" -> 2179, 
                "4\n\n67\n\n      4x - 2y =    /  " -> 2180, "46 + 8 \n" -> 
                2181, "468" -> 2182, "4\n\n69" -> 2183, "469" -> 2184, 
                "4\n\n69\n\n       - 3x - 2y =    /  " -> 2185, 
                "    4 + 6x = 16 " -> 2186, "    4 - 6x = - 20 " -> 2187, 
                "\n\n47" -> 2188, "470" -> 2189, "471" -> 2190, 
                "4      71\n\n      3x -  / y =    /    " -> 2191, "472" -> 
                2192, "473" -> 2193, "4731 + 1603 \n" -> 2194, 
                "4731 + 9595 \n" -> 2195, "47\n\n362" -> 2196, "4 + 74 \n" -> 
                2197, "474" -> 2198, "4741 + 6938 \n" -> 2199, "47 + 5 \n" -> 
                2200, "475" -> 2201, "4 + 76 \n" -> 2202, "47 + 6 \n" -> 2203,
                 "476" -> 2204, "4763 - 2754 \n" -> 2205, "4764 + 7711 \n" -> 
                2206, "\n\n477" -> 2207, "47\n\n777" -> 2208, "478" -> 2209, 
                "4781 + 7748 \n" -> 2210, "479" -> 2211, "    4 + 7x = 39 " -> 
                2212, "    4(7x + 4) = 128 " -> 2213, 
                "    - 4 - 7x = 4x - 26 " -> 2214, "    - 4 + 7x = - 53 " -> 
                2215, "    - 4(7x + 5) = - 76 " -> 2216, "    - 4 + 7x = 66 " -> 
                2217, "48" -> 2218, "480" -> 2219, "481" -> 2220, 
                "4810 + 7408 \n" -> 2221, "4814 + 4739 \n" -> 2222, 
                "48 + 2 \n" -> 2223, "482" -> 2224, "4 + 83 \n" -> 2225, 
                "483" -> 2226, "4832 + 1852 \n" -> 2227, "484" -> 2228, "485" -> 
                2229, "4 + 86 \n" -> 2230, "486" -> 2231, "487" -> 2232, 
                "488" -> 2233, "4880 + 1099 \n" -> 2234, "489" -> 2235, 
                "4896 + 8505 \n" -> 2236, "    - 48x  - 22x + 56 = 0 " -> 
                2237, "    48x  - 40x - 8 = 0 " -> 2238, 
                "    - 48x  - 70x - 25 = 0 " -> 2239, "4 + 9 \n" -> 2240, 
                "49" -> 2241, "4 + 90 \n" -> 2242, "490" -> 2243, 
                "4904 + 6592 \n" -> 2244, "491" -> 2245, "4910 + 8680 \n" -> 
                2246, "4918 + 3236 \n" -> 2247, "492" -> 2248, "\n\n493" -> 
                2249, "493" -> 2250, "    4(9 - 3x) = - 48 " -> 2251, "494" -> 
                2252, "-49\n\n435" -> 2253, "4             -94\n\n720" -> 
                2254, "495" -> 2255, "496" -> 2256, "497" -> 2257, "498" -> 
                2258, "4988 + 7311 \n" -> 2259, "499" -> 2260, 
                "      / (4x -  / ) =      /    " -> 2261, "    4 = x + 1 " -> 
                2262, "    - 4x - 10 = - 10 " -> 2263, "    4x - 10 = 2 " -> 
                2264, "    4x - 10 = - 38 " -> 2265, "    4x + 10 = 5x + 5 " -> 
                2266, "    - 4x  - 10x - 5 = 0 " -> 2267, 
                "    4x  - 10x + 9 = 0 " -> 2268, "    - 4x  + 11x - 2 = 0 " -> 
                2269, "    4x  + 11x + 4 = 0 " -> 2270, "    4x + 1 = 29 " -> 
                2271, "    4x  + 13x + 10 = 0 " -> 2272, 
                "    - 4x - 1 = 3x + 13 " -> 2273, 
                "    - 4x  + 14x - 12 = 0 " -> 2274, "    - 4x - 1 = - 5 " -> 
                2275, "    4 + x = 15 " -> 2276, "    4x - 1 = - 5 " -> 2277, 
                "    4x = 16 " -> 2278, "    - 4x  + 16x - 12 = 0 " -> 2279, 
                "    4x + 1 =     /    +  / x " -> 2280, "    4 = x + 2 " -> 
                2281, "    4x = - 20 " -> 2282, "      4x = 20 + 3y " -> 2283,
                 "    - 4x  + 21x - 20 = 0 " -> 2284, "    4x + 2 = 34 " -> 
                2285, "    4x = - 24 " -> 2286, "    - 4x + 2 = - 42 " -> 
                2287, "    - 4x = 28 " -> 2288, "    4x  + 2x + 12 = 0 " -> 
                2289, "    - 4x = - 2y -    / " -> 2290, 
                "    - 4x + 2y =     / " -> 2291, "    4x + 2y =     / " -> 
                2292, "    - 4x + 2y = 10" -> 2293, "    4x + 2y = - 16" -> 
                2294, "    - 4x + 2y = 18" -> 2295, "    4x + 2y = - 20" -> 
                2296, "    4x - 2y = 22" -> 2297, "       - 4x - 2y = - 24 " -> 
                2298, "      4x - 2y = - 24 " -> 2299, "    - 4x + 2y = 26" -> 
                2300, "    - 4x + 2y = 29" -> 2301, "    4x + 2y = 30" -> 
                2302, "       - 4x - 2y = 32 " -> 2303, 
                "       - 4x + 2y = - 4 " -> 2304, "      4x + 2y = 44 " -> 
                2305, "    4x + 2y = 50" -> 2306, "\n\n      4x - 2y = - 8 " -> 
                2307, "    4 = x - 3 " -> 2308, "    - 4x + 3 = - 21 " -> 
                2309, "    4x - 3 = - 3 " -> 2310, "    - 4x - 3 = 33 " -> 
                2311, "    - 4x + 3 = 3 - 5x " -> 2312, 
                "    - 4x + 3 = - 37 " -> 2313, "    - 4x + 3 = 43 " -> 2314, 
                "    - 4x + 3 = 7 " -> 2315, "    4x  - 3x + 7 = 0 " -> 2316, 
                "    4x  - 3x - 8 = 0 " -> 2317, "    - 4x + 3y =     / " -> 
                2318, "    4x + 3y =    / " -> 2319, "    4x + 3y =     / " -> 
                2320, "       - 4x + 3y = 11 " -> 2321, "      4x + 3y = 11 " -> 
                2322, "    4x + 3y = 15" -> 2323, "    4x + 3y = - 17" -> 
                2324, "       - 4x - 3y = - 19 " -> 2325, 
                "    4x + 3y = - 20" -> 2326, "      4x + 3y = 21 " -> 2327, 
                "    4x + 3y = 23" -> 2328, "    4x + 3y = 35" -> 2329, 
                "    - 4x + 3y = 4" -> 2330, "      4x + 3y = 55 " -> 2331, 
                "       - 4x + 3y = 67 " -> 2332, "    4x - 3y = - 7" -> 2333,
                 "4\n\n      - x + 3y = 7 " -> 2334, "    - 4 + x = - 4 " -> 
                2335, "    - 4x = - 4 " -> 2336, "    4x = 4 " -> 2337, 
                "    4x + 4 = 27 +  / x " -> 2338, "    4x + 4 = - 36 " -> 
                2339, "    4x - 4 = - 3x + 24 " -> 2340, "    4x = - 44 " -> 
                2341, "    4x + 4 = 40 " -> 2342, "    - 4x - 4 = - 44 " -> 
                2343, "    - 4x - 4y =     / " -> 2344, 
                "    - 4x - 4y =      / " -> 2345, "       - 4x + 4y = - 12 " -> 
                2346, "\n\n      4x + 4y = 16 " -> 2347, 
                "      4x + 4y = - 16 " -> 2348, "      4x - 4y = 16 " -> 
                2349, "      4x + 4y = - 20 " -> 2350, "    4x - 4y = 24" -> 
                2351, "       - 4x + 4y = 28 " -> 2352, "    - 4x + 4y = 32" -> 
                2353, "    - 4x + 4y = 36" -> 2354, "       - 4x + 4y = 4 " -> 
                2355, "      4x + 4y = 4 " -> 2356, "    4x + 4y = 4" -> 2357,
                 "       - 4x + 4y = - 40 " -> 2358, 
                "       - 4x - 4y = - 44 " -> 2359, "      4x - 4y = - 44 " -> 
                2360, "    - 4x = 4y - 44" -> 2361, "    4x - 4y = 44" -> 
                2362, "    4x + 4y = - 5" -> 2363, "    - 4x - 4y = - 60" -> 
                2364, "    - 4x + 4y = - 60" -> 2365, 
                "       - 4x + 4y = 68 " -> 2366, "       - 4x + 4y = - 8 " -> 
                2367, "4\n\n       / x + 4y = 8 " -> 2368, 
                "      4x + 4y = 80 " -> 2369, "    - 4(  / x + 5) =     /  " -> 
                2370, "    4x - 5 = 11 " -> 2371, "    4x + 5 = 13 " -> 2372, 
                "    4x - 5 = 19 " -> 2373, "    4x - 5 = - 25 " -> 2374, 
                "    4x + 5 = 29 " -> 2375, "    4x + 5 = - 31 " -> 2376, 
                "    4x - 5 = - 6x - 55 " -> 2377, "    4x + 5 = 9 " -> 2378, 
                "    4x  + 5x + 4 = 0 " -> 2379, "    4x + 5y =    / " -> 
                2380, "      4x - 5y = 11 " -> 2381, "    - 4x - 5y = 16" -> 
                2382, "    4x - 5y = - 17" -> 2383, "    - 4x + 5y = 20" -> 
                2384, "      4x - 5y = 20 " -> 2385, "    4x + 5y = - 20" -> 
                2386, "    4x - 5y = 20" -> 2387, "    - 4x + 5y = 23" -> 
                2388, "    4x - 5y = - 27" -> 2389, "    4x + 5y = 3" -> 2390,
                 "4\n\n      - x + 5y = 30 " -> 2391, "      4x + 5y = 35 " -> 
                2392, "       - 4x - 5y = - 39 " -> 2393, 
                "    - 4x + 5y = - 40" -> 2394, "       - 4x + 5y = 41 " -> 
                2395, "      4x + 5y = 43 " -> 2396, "    4x - 5y = 47" -> 
                2397, "    4x + 5y = - 5" -> 2398, "    4x + 5y = 5" -> 2399, 
                "    4x + 5y = 50" -> 2400, "    - 4x + 5y = 54" -> 2401, 
                "      4x + 5y = 55 " -> 2402, "    - 4x - 5y = 59" -> 2403, 
                "       - 4x + 5y = - 63 " -> 2404, "    - 4x + 5y = - 64" -> 
                2405, "      4x + 5y = 67 " -> 2406, "       - 4x + 5y = 75 " -> 
                2407, "\n\n       - 4x - 5y = - 77 " -> 2408, 
                "    - 4x + 5y = - 8" -> 2409, "    - 4x + 5y = 80" -> 2410, 
                "    4x - 5y = 9" -> 2411, "    4( / x + 6) =     /  " -> 
                2412, "    4x + 6 = - 38 " -> 2413, "    4x  + 6x + 1 = 0 " -> 
                2414, "    4 + x = 7 " -> 2415, "    - 4x + 7 = - 13 " -> 
                2416, "    4x + 7 = 15 " -> 2417, "    4x - 7 = 15 + 2x " -> 
                2418, "    4x + 7 = 23 " -> 2419, "    - 4x + 7 = - 25 " -> 
                2420, "    4x - 7 = 25 " -> 2421, "    4x - 7 = - 39 " -> 
                2422, "    4x + 7 = - 5 " -> 2423, "    4x - 7 = - 56 - 3x " -> 
                2424, "    - 4x + 7 = 6x - 83 " -> 2425, 
                "    4x  - 7x +    /  = 0 " -> 2426, "    4 - x = 7x - 20 " -> 
                2427, "    4x  + 7x + 4 = 0 " -> 2428, "    4x - 8 = - 24 " -> 
                2429, "    - 4x - 8 = - 52 " -> 2430, "    4x - 8 = 8 " -> 
                2431, "    4x  - 8x + 12 = 0 " -> 2432, 
                "    4x - 8 = x - 29 " -> 2433, "       - 4x + 8y = 56 " -> 
                2434, "    4x - 9 = - 17 " -> 2435, "    4x - 9 = 19 " -> 
                2436, "    - 4x + 9 = - 27 " -> 2437, "    - 4x + 9 = - 3 " -> 
                2438, "    4x  - 9x + 3 = 0 " -> 2439, 
                "    4x -  /  =   /  -  / x " -> 2440, 
                "    4x  + x + 10 = 0 " -> 2441, "    4x  -  / x + 11 = 0 " -> 
                2442, "    4x  +     / x + 12 = 0 " -> 2443, 
                "    - 4x -  / y =     / " -> 2444, 
                "    - 4x +  / y =      / " -> 2445, "    4x +  / y =  / " -> 
                2446, "    4x + y =     / " -> 2447, "       - 4x - y = 0 " -> 
                2448, "    - 4x + y = - 10" -> 2449, "    - 4x - y = - 12" -> 
                2450, "      4x + y = - 16 " -> 2451, "      4x + y = 17 " -> 
                2452, "    4x - y = 17" -> 2453, "      4x + y = - 18 " -> 
                2454, "       - 4x + y = - 19 " -> 2455, 
                "    4x +  / y = - 2" -> 2456, "      4x + y = 20 " -> 2457, 
                "    4x - y = 20" -> 2458, "    4x + y = - 21" -> 2459, 
                "    - 4x - y = 22" -> 2460, "    - 4x - y = - 23" -> 2461, 
                "       - 4x - y = - 26 " -> 2462, "       - 4x - y = - 29 " -> 
                2463, "       - 4x + y = 29 " -> 2464, 
                "       - 4x - y = 30 " -> 2465, "    4x + y = 31" -> 2466, 
                "       - 4x + y = - 33 " -> 2467, "    4x - y = - 39" -> 
                2468, "    - 4x + y = - 4" -> 2469, "    - 4x + y = 4" -> 
                2470, "      4x + y = - 5 " -> 2471, "    - 4x - y = 5" -> 
                2472, "    4x + y = - 7" -> 2473, "      4y - 2x = - 26 " -> 
                2474, "      4y + x = 22 " -> 2475, "5" -> 2476, "5\n\n" -> 
                2477, "5 + 0 \n" -> 2478, "50" -> 2479, "\n\n500" -> 2480, 
                "500" -> 2481, "501" -> 2482, "502" -> 2483, "503" -> 2484, 
                "5035 + 9586 \n" -> 2485, "504" -> 2486, "504 \.00\.b9 18 \n" -> 
                2487, "5048 + 8140 \n" -> 2488, "50 + 5 \n" -> 2489, "505" -> 
                2490, "-50\n\n532" -> 2491, "506" -> 2492, "507" -> 2493, 
                "5074 + 7065 \n" -> 2494, "508" -> 2495, "50 + 9 \n" -> 2496, 
                "509" -> 2497, "50 + 93 \n" -> 2498, "5 + 1 \n" -> 2499, "51" -> 
                2500, "5               10\n\n" -> 2501, "5        10\n\n" -> 
                2502, "51 + 0 \n" -> 2503, "510" -> 2504, 
                "5             10\n\n-3\n\n      - x - 9y =   /  " -> 2505, 
                "5            10\n\n-67\n\n      2x - y =     /    " -> 2506, 
                "511" -> 2507, "    5(-1 + 1x) = - 10 " -> 2508, 
                "    5(1 - 1x) = 20 " -> 2509, "512" -> 2510, "-51\n\n299" -> 
                2511, "    5(-1 + 2x) = - 45 " -> 2512, 
                "    - 5(-1 + 2x) = - 65 " -> 2513, "513" -> 2514, 
                "5\n\n-137\n\n       - 2x =      /  + 3y " -> 2515, "514" -> 
                2516, "5             15\n\n" -> 2517, "515" -> 2518, 
                "51\:036d 5 as a mixed number \n" -> 2519, 
                "51\n\n      5x + y =    /  " -> 2520, "516" -> 2521, 
                "5\n\n-16\n\n      4x - 4y =     /  " -> 2522, "517" -> 2523, 
                "5\n\n17\n\n      5x - 3y =    /  " -> 2524, "518" -> 2525, 
                "5            182\n\n212" -> 2526, "519" -> 2527, 
                "5\n\n19\n\n      5x - 2y =    /  " -> 2528, 
                "    5(1x + 5) = 70 " -> 2529, "    5(1x - 8) = - 40 " -> 
                2530, "5 + 2 \n" -> 2531, "52" -> 2532, "5            20\n\n" -> 
                2533, "520" -> 2534, "-5\n\n203" -> 2535, "521" -> 2536, 
                "5   2\n\n1156" -> 2537, "5219 + 1965 \n" -> 2538, "\n\n522" -> 
                2539, "522" -> 2540, "5\n\n-22\n\n       - 4x - 2y =     /  " -> 
                2541, "523" -> 2542, "524" -> 2543, 
                "5\n\n24\n\n      x + 3y =    /  " -> 2544, 
                "5          25\n\n" -> 2545, "525" -> 2546, 
                "5\n\n2      53\n\n      x +  / y =    /    " -> 2547, 
                "5                   25\n\n9\n\n      4x - y =  /  " -> 2548, 
                "-5   2   59\n\n933" -> 2549, "526" -> 2550, "-52\n\n635" -> 
                2551, "527" -> 2552, "5278 + 2794 \n" -> 2553, "528" -> 2554, 
                "5282 + 9116 \n" -> 2555, "5\n\n28\n\n      x + 3y =    /  " -> 
                2556, "529" -> 2557, "5290 + 8994 \n" -> 2558, 
                "    - 5( - 2x + 1) = - 5 " -> 2559, "    5 + 2x = - 3 " -> 
                2560, "5(2x+4)" -> 2561, "    5 - 2x =  / x + 19 " -> 2562, 
                "53" -> 2563, "530" -> 2564, "531" -> 2565, 
                "-5        3      1135\n\n190" -> 2566, "532" -> 2567, 
                "5322 - 1144 \n" -> 2568, "    5( - 3 + 2x) = - 125 " -> 2569,
                 "    5( - 3 - 2x) = - 55 " -> 2570, "5\n\n33" -> 2571, "533" -> 
                2572, "5\n\n33\n\n      3x + 5y =    /  " -> 2573, 
                "53\n\n371" -> 2574, "534" -> 2575, "5              35\n\n" -> 
                2576, "5         35\n\n" -> 2577, "5         35\n\n\n\n" -> 
                2578, "535" -> 2579, "5\n\n354\n\n      2x + 8y =     /  " -> 
                2580, "536" -> 2581, "5361 + 5519 \n" -> 2582, "-53\n\n620" -> 
                2583, "5365 + 2334 \n" -> 2584, "    - 5(3 + 6x) =     /  " -> 
                2585, "5 + 37 \n" -> 2586, "537" -> 2587, "538" -> 2588, 
                "5\n\n38\n\n      5x - 12y =    /  " -> 2589, "539" -> 2590, 
                "5396 + 5061 \n" -> 2591, "    5( /3x + 1) =    /3 " -> 2592, 
                "    5 + 3x = 14 " -> 2593, 
                "5\n\n-3\n\n        / x - 3y = - 21 " -> 2594, 
                "    5( - 3x + 6) = 45 " -> 2595, "5 + 4 \n" -> 2596, "54" -> 
                2597, "540" -> 2598, "541" -> 2599, 
                "5      4          10\n\n-3                         -82\n\n   \
     / x + 2y =     /  " -> 2600, "542" -> 2601, "543" -> 2602, 
                "5\n\n4      37\n\n      x +  / y =    /  " -> 2603, "544" -> 
                2604, "5             4\n\n4           33\n\n       /5x + y =  \
  /4 " -> 2605, "5                  45\n\n" -> 2606, "545" -> 2607, 
                "5                    45\n\n-2           323\n\n        / x + \
y =     /    " -> 2608, "5      4        5\n\n      3x + y = - 18 " -> 2609, 
                "5\n\n4\n\n       /5x + 5y = 42 " -> 2610, "546" -> 2611, 
                "5465 + 8277 \n" -> 2612, "5465 + 9956 \n" -> 2613, "547" -> 
                2614, "548" -> 2615, "549" -> 2616, 
                "    - 5( - 4 +  / x) =  /  " -> 2617, "    5 - 4x = 1 " -> 
                2618, "5                     5\n\n" -> 2619, 
                "5                 5\n\n" -> 2620, "5               5\n\n" -> 
                2621, "5              5\n\n" -> 2622, 
                "5              5\n\n\n\n" -> 2623, "5             5\n\n" -> 
                2624, "5            5\n\n" -> 2625, "5           5\n\n" -> 
                2626, "5         5\n\n" -> 2627, "5        5\n\n" -> 2628, 
                "5        5\n\n\n\n" -> 2629, "5       5\n\n" -> 2630, 
                "5      5\n\n" -> 2631, "5     5\n\n" -> 2632, "55" -> 2633, 
                "550" -> 2634, "551" -> 2635, "55 + 10 \n" -> 2636, 
                "5       5\n\n-1          4\n\n        / x - y =  /    " -> 
                2637, "5519 + 6804 \n" -> 2638, "552" -> 2639, 
                "5        5\n\n2      18\n\n      x +  / y =    /  " -> 2640, 
                "5        5\n\n2             -192\n\n       - 5x -  / y =     \
 /  " -> 2641, 
                "5         5\n\n2      2             -4\n\n       / x -  / y \
=   /  " -> 2642, 
                "5               5\n\n2                      -26\n\n       / \
x + y =     /  " -> 2643, "5        5\n\n       - 2x + 3y = -1 " -> 2644, 
                "5              5\n\n       - 2x - 3y = - 18 " -> 2645, 
                "5            5\n\n       - 2x + y = 1 " -> 2646, "553" -> 
                2647, "5              5\n\n-3             12\n\n        / x + \
3y =    /  " -> 2648, 
                "5               5\n\n3                     -32\n\n       / x \
- y =     /  " -> 2649, "5         5\n\n3      58\n\n      x -  / y =    /  " -> 
                2650, "5             5\n\n-3                     -8\n\n       \
 / x - y =   /  " -> 2651, "5              5\n\n       - 3x + y = 1 " -> 2652,
                 "55 + 4 \n" -> 2653, "554" -> 2654, 
                "5            5\n\n4             111\n\n       / x + 3y =     \
/  " -> 2655, 
                "5        5\n\n4             -184\n\n       - 4x +  / y =     \
 /  " -> 2656, "5        5\n\n4      82\n\n      3x -  / y =    /  " -> 2657, 
                "5         5\n\n      4x - 5y = 23 " -> 2658, 
                "5         5\n\n      4x + y = 34 " -> 2659, 
                "5      5       5\n\n" -> 2660, "555" -> 2661, 
                "5       5      5\n\n-4      4\n\n      x =   / y +  /  " -> 
                2662, "-55\n\n552" -> 2663, 
                "5         5\n\n      5x - 2y = - 47 " -> 2664, 
                "5              5\n\n       - 5x - 4y = - 22 " -> 2665, 
                "5        5\n\n       - 5x - 4y = - 38 " -> 2666, 
                "5         5\n\n       - 5x + y = - 34 " -> 2667, 
                "5             5\n\n      5x + y = - 44 " -> 2668, 
                "55 - 6 \n" -> 2669, "556" -> 2670, 
                "5        5\n\n6      27\n\n      5x -  / y =    /  " -> 2671,
                 "557" -> 2672, "5571 + 3857 \n" -> 2673, "5571 + 5676 \n" -> 
                2674, "558" -> 2675, "55 + 9 \n" -> 2676, "559" -> 2677, 
                "5              5\n\n-9             6\n\n        / x + 3y =  \
/  " -> 2678, "    - 5 + 5x = 3x -    /  " -> 2679, 
                "5              5\n\n      - x + 3y = 8 " -> 2680, 
                "5           5\n\n      - x - 4y = - 30 " -> 2681, 
                "5              5\n\n      - x - 4y = - 6 " -> 2682, 
                "5\n\n      5x - y = - 25 " -> 2683, 
                "5         5\n\n      y = 4x + 42 " -> 2684, 
                "5              5\n\n      y = - x + 0 " -> 2685, "56" -> 
                2686, "560" -> 2687, "561" -> 2688, "5610 + 6137 \n" -> 2689, 
                "562" -> 2690, "5\n\n-62\n\n       - 4x - 2y =     /  " -> 
                2691, "5626 + 9732 \n" -> 2692, "563" -> 2693, 
                "5635 + 5676 \n" -> 2694, 
                "5\n\n636\n\n      16x - 2y =     /  " -> 2695, "564" -> 2696,
                 "5642 + 6535 \n" -> 2697, "\n\n565" -> 2698, "565" -> 2699, 
                "566" -> 2700, "567" -> 2701, "568" -> 2702, "5 + 69 \n" -> 
                2703, "569" -> 2704, "    56x  + 23x + 2 = 0 " -> 2705, 
                "    56x  - 33x - 14 = 0 " -> 2706, "    5 + 6x = 41 " -> 
                2707, "    - 56x  + 43x + 24 = 0 " -> 2708, 
                "    5 + 6x = 47 " -> 2709, "    56x  +     / x -    /  = 0 " -> 
                2710, "    56x  +     / x +    /  = 0 " -> 2711, "57" -> 2712,
                 "570" -> 2713, "571" -> 2714, "57\n\n100" -> 2715, 
                "5712 + 2107 \n" -> 2716, "572" -> 2717, "\n\n-57\n\n243" -> 
                2718, "573" -> 2719, 
                "5               7\n\n32\n\n      x = - y +    /  " -> 2720, 
                "574" -> 2721, "5745 + 7730 \n" -> 2722, "575" -> 2723, 
                "5750 + 9568 \n" -> 2724, "     /5( - 7 -  /5x) =      /25 " -> 
                2725, "576" -> 2726, "57 + 7 \n" -> 2727, "577" -> 2728, 
                "578" -> 2729, "5 \.00\.99 79 \n" -> 2730, "579" -> 2731, 
                "    5( /    + 7x) =     /  " -> 2732, "    5 - 7x = 40 " -> 
                2733, "    5 + 7x = 68 " -> 2734, "    - 5 + 7x = 79 " -> 
                2735, "    - 5 + 7x = x - 23 " -> 2736, "58" -> 2737, "580" -> 
                2738, "58 + 1 \n" -> 2739, "581" -> 2740, "5 + 82 \n" -> 2741,
                 "582" -> 2742, "583" -> 2743, "584" -> 2744, 
                "5840 + 1828 \n" -> 2745, "\n\n585" -> 2746, "585" -> 2747, 
                "5 + 86 \n" -> 2748, "586" -> 2749, "58\n\n63" -> 2750, "587" -> 
                2751, "    5(8 + 7x) = - 170 " -> 2752, "5 + 88 \n" -> 2753, 
                "588" -> 2754, "589" -> 2755, "5893 + 2493 \n" -> 2756, 
                "58 + 95 \n" -> 2757, "5898 + 8735 \n" -> 2758, 
                "    5( - 8 + x) =      /  " -> 2759, "59" -> 2760, 
                "59 + 0 \n" -> 2761, "590" -> 2762, "59 + 1 \n" -> 2763, 
                "591" -> 2764, "59 + 10 \n" -> 2765, "592" -> 2766, "593" -> 
                2767, "5930 + 4357 \n" -> 2768, "594" -> 2769, 
                "    5( - 9 + 4x) = 195 " -> 2770, "595" -> 2771, "596" -> 
                2772, "597" -> 2773, "598" -> 2774, "5980 + 1855 \n" -> 2775, 
                "599" -> 2776, "5% of 112" -> 2777, 
                "-(5\!\(\*SuperscriptBox[\(x\), \(4\)]\)-8)" -> 2778, 
                "    - 5 + x = 0 " -> 2779, "    - 5x = 0 " -> 2780, 
                "    - 5x = - 10 " -> 2781, "    5x + 10 = - 10 " -> 2782, 
                "    5x - 10 = - 15 " -> 2783, "    5x  + 10x + 6 = 0 " -> 
                2784, "       - 5x + 10y = 60 " -> 2785, 
                "    - 5x + 1 = 10 -  / x " -> 2786, "    5x  + 11x - 7 = 0 " -> 
                2787, "    5 + x = 12 " -> 2788, "    - 5x  - 12x +  /  = 0 " -> 
                2789, "    5x  + 12x + 12 = 0 " -> 2790, 
                "    5x  + 12x + 4 = 0 " -> 2791, "    - 5x  + 13x - 8 = 0 " -> 
                2792, "    5x  + 14x + 9 = 0 " -> 2793, 
                "    - 5x + 1 = - 59 " -> 2794, "    5x  + 15x + 11 = 0 " -> 
                2795, "    5x  - 16x + 12 = 0 " -> 2796, 
                "      5x + 16y = 24 " -> 2797, "    5 + x = 2 " -> 2798, 
                "    - 5x - 2 = - 27 " -> 2799, "    5x - 2 = 3 " -> 2800, 
                "    5x - 2 = 38 " -> 2801, "    5x = - 25 " -> 2802, 
                "    5x + 2y =    / " -> 2803, "       - 5x - 2y = 0 " -> 
                2804, "    - 5x + 2y = 12" -> 2805, "    5x + 2y = 18" -> 
                2806, "    5x + 2y = 19" -> 2807, "      5x - 2y = - 2 " -> 
                2808, "       - 5x + 2y = - 21 " -> 2809, "    5x + 2y = 26" -> 
                2810, "    5x + 2y = 27" -> 2811, "      5x + 2y = 3 " -> 
                2812, "    5x + 2y = 30" -> 2813, "    5x + 2y = - 31" -> 
                2814, "      5x + 2y = 33 " -> 2815, "      5x + 2y = 35 " -> 
                2816, "      5x + 2y = 38 " -> 2817, "      5x - 2y = - 39 " -> 
                2818, "    5x + 2y = - 40" -> 2819, "    5x + 2y = - 41" -> 
                2820, "       - 5x + 2y = 42 " -> 2821, 
                "       - 5x + 2y = - 43 " -> 2822, "    - 5x = 2y + 43" -> 
                2823, "      5x - 2y = - 49 " -> 2824, "    5x + 2y = 49" -> 
                2825, "      5x - 2y = 5 " -> 2826, "    5x + 2y = 50" -> 
                2827, "      5x - 2y = 54 " -> 2828, "    5x - 2y = 54" -> 
                2829, "       - 5x - 2y = 8 " -> 2830, "    - 5x = - 30 " -> 
                2831, "    5x = - 30 " -> 2832, "    - 5x + 3 = - 17 " -> 
                2833, "    5x + 3 = 18 " -> 2834, "    - 5x + 3 = 28 " -> 
                2835, "    - 5x  - 34x + 7 = 0 " -> 2836, "    5x + 3 = - 7 " -> 
                2837, "    5x - 3 = - 8 " -> 2838, "    - 5x - 3y =     / " -> 
                2839, "    - 5x - 3y = -1" -> 2840, "       - 5x + 3y = 16 " -> 
                2841, "    - 5x + 3y = 18" -> 2842, "    5x + 3y = 18" -> 
                2843, "       - 5x + 3y = 27 " -> 2844, "      5x + 3y = 28 " -> 
                2845, "    - 5x - 3y = 29" -> 2846, "    - 5x + 3y = - 31" -> 
                2847, "      5x - 3y = 32 " -> 2848, "      5x + 3y = 33 " -> 
                2849, "    - 5x + 3y = 36" -> 2850, "    5x + 3y = 38" -> 
                2851, "      5x + 3y = - 41 " -> 2852, "    - 5x + 3y = 41" -> 
                2853, "    5x + 3y = 5" -> 2854, "      5x + 3y = 60 " -> 
                2855, "    - 5x + 3y = - 8" -> 2856, "      5x - 3y = - 8 " -> 
                2857, "    5x - 3y = 8" -> 2858, "      / ( - 5x + 4) = -1 " -> 
                2859, "    5x + 4 = 19 " -> 2860, "    5(  / x + 4) = 20 " -> 
                2861, "    - 5x + 4 + 2x = 25 " -> 2862, "    5x + 4 = 34 " -> 
                2863, "    5x + 4 = 34 - 5x " -> 2864, "    - 5x - 4 = - 39 " -> 
                2865, "    5x = - 45 " -> 2866, "    - 5x + 4 = x +    /  " -> 
                2867, "    5x - 4y =    / " -> 2868, "    5x + 4y =    / " -> 
                2869, "    5x - 4y =     / " -> 2870, "       - 5x + 4y = 0 " -> 
                2871, "    5x + 4y = 0" -> 2872, "    5x + 4y = - 12" -> 2873,
                 "    - 5x + 4y = 15" -> 2874, "       - 5x - 4y = 17 " -> 
                2875, "    5x = - 4y + 17" -> 2876, "    5x = 4y - 17" -> 
                2877, "       - 5x + 4y = - 20 " -> 2878, 
                "       - 5x + 4y = 21 " -> 2879, "    - 5x + 4y = 24" -> 
                2880, "    - 5x + 4y = 25" -> 2881, "       - 5x + 4y = - 3 " -> 
                2882, "      5x - 4y = 30 " -> 2883, "    - 5x + 4y = 33" -> 
                2884, "       - 5x - 4y = - 36 " -> 2885, 
                "       - 5x - 4y = - 39 " -> 2886, "       - 5x + 4y = 39 " -> 
                2887, "      5x - 4y = - 39 " -> 2888, "    - 5x + 4y = - 4" -> 
                2889, "    - 5x - 4y = - 42" -> 2890, "    5x + 4y = 45" -> 
                2891, "    - 5x + 4y = 46" -> 2892, "    5x + 4y = 52" -> 
                2893, "    5x - 4y = 55" -> 2894, "    5x + 4y = 55" -> 2895, 
                "    5x = 4y + 64" -> 2896, "    - 5x - 4y = - 67" -> 2897, 
                "      5x - 4y = 68 " -> 2898, "    5 + x = 5 " -> 2899, 
                "    5 = x + 5 " -> 2900, "    5x + 5 = 10 " -> 2901, 
                "    - 5x + 5 = 25 " -> 2902, "    - 5x = - 55 " -> 2903, 
                "    5x = 55 " -> 2904, "    - 5x + 5 = 60 " -> 2905, 
                "    5x  + 5x + 2 = 0 " -> 2906, "      5x - 5y = 0 " -> 2907,
                 "    5x - 5y = 0" -> 2908, "    5x - 5y = - 10" -> 2909, 
                "    5x + 5y = - 100" -> 2910, "      5x - 5y = - 15 " -> 
                2911, "      5x - 5y = 15 " -> 2912, "    - 5x + 5y = 25" -> 
                2913, "    5x + 5y = - 25" -> 2914, "    5x + 5y = 30" -> 
                2915, "       - 5x + 5y = 35 " -> 2916, 
                "    - 5x + 5y = - 35" -> 2917, "    5x = 5y - 40" -> 2918, 
                "    - 5x + 5y = 45" -> 2919, "      5x - 5y = 45 " -> 2920, 
                "    5x - 5y = - 45" -> 2921, "    5x + 5y = 45" -> 2922, 
                "    - 5x + 5y = 50" -> 2923, "    5x + 5y = 6" -> 2924, 
                "      5x - 5y = - 60 " -> 2925, "    - 5x + 5y = 60" -> 2926,
                 "    5x + 5y = 60" -> 2927, "    5x + 5y = 65" -> 2928, 
                "    5x - 5y = - 70" -> 2929, "    5x + 5y = - 80" -> 2930, 
                "    5 = x - 6 " -> 2931, "    5x - 6 = 14 " -> 2932, 
                "    5x + 6 = 41 " -> 2933, "    5x - 6 = 49 " -> 2934, 
                "    5x - 6 = - 66 " -> 2935, "    - 5 + x = - 7 " -> 2936, 
                "    5x - 7 = 13 " -> 2937, "    5x + 7 = - 33 " -> 2938, 
                "    - 5x + 7 = - 53 " -> 2939, "    5x - 7 = - 57 " -> 2940, 
                "    - 5x + 7 + 6x = 18 " -> 2941, "    - 5x + 8 = 28 " -> 
                2942, "    5x + 8 = 8 " -> 2943, "    5x  - 8x +  /  = 0 " -> 
                2944, "    5x + 9 = -1 " -> 2945, "    5x - 9 = - 19 " -> 
                2946, "    - 5x + 9 = 39 + x " -> 2947, "    - 5x - 9 = 6 " -> 
                2948, "    5x + 9 = 6x + 9 " -> 2949, 
                "    5x  + 9x + 11 = 0 " -> 2950, "    5x + 9 = x + 13 " -> 
                2951, "    - 5x  - 9x + 5 = 0 " -> 2952, 
                "    5x  + 9x + 5 = 0 " -> 2953, 
                "    - 5x  -     / x - 32 = 0 " -> 2954, 
                "    - 5x -  / y =     / " -> 2955, 
                "    - 5x +  / y =     / " -> 2956, 
                "    - 5x +  / y =      / " -> 2957, "    - 5x + y =  / " -> 
                2958, "    5x +  / y =  / " -> 2959, "    5x +  / y =    / " -> 
                2960, "    5x +  / y =     / " -> 2961, 
                "    5x +  / y =      / " -> 2962, "    5x - y =    / " -> 
                2963, "    5x - y =     / " -> 2964, "    5x + y =     / " -> 
                2965, "    5x + y = 0" -> 2966, "      5x + y = 11 " -> 2967, 
                "    5x + y = - 12" -> 2968, "    - 5x = y + 16" -> 2969, 
                "      5x - y = - 17 " -> 2970, "      5x + y = 18 " -> 2971, 
                "       - 5x + y = - 2 " -> 2972, "    5x + y =    /2" -> 
                2973, "    5x - y = 2" -> 2974, "    5x - y = 23" -> 2975, 
                "    5x -  / y = 24" -> 2976, "    - 5x + y = 27" -> 2977, 
                "      5x + y = 30 " -> 2978, "    - 5x + y = 31" -> 2979, 
                "    5x + y = 31" -> 2980, "    - 5x - y = 33" -> 2981, 
                "       - 5x + y = - 35 " -> 2982, "      5x - y = 4 " -> 
                2983, "      5x + y = 40 " -> 2984, "       - 5x - y = - 42 " -> 
                2985, "      5x - y = - 48 " -> 2986, "    5x + y = - 49" -> 
                2987, "       - 5x - y = - 5 " -> 2988, 
                "       - 5x + y = - 52 " -> 2989, "    5x + y = 52" -> 2990, 
                "      5x - y = - 58 " -> 2991, "       - 5x + y = - 6 " -> 
                2992, "       - 5x + y = 8 " -> 2993, "    5y + 3x = 3" -> 
                2994, "    - 5y - 3x = - 53" -> 2995, "6" -> 2996, "6\n\n" -> 
                2997, "6 + 0 \n" -> 2998, "60" -> 2999, "60 + 0 \n" -> 3000, 
                "600" -> 3001, "6008 + 8234 \n" -> 3002, "601" -> 3003, "603" -> 
                3004, "605" -> 3005, "608" -> 3006, "6083 - 1931 \n" -> 3007, 
                "609" -> 3008, "61" -> 3009, "610" -> 3010, "6101 + 5023 \n" -> 
                3011, "611" -> 3012, "    6(-1 + 2x) = 42 " -> 3013, 
                "6 + 13 \n" -> 3014, "613" -> 3015, "614" -> 3016, 
                "6 + 16 \n" -> 3017, "616" -> 3018, "617" -> 3019, 
                "6174 + 2651 \n" -> 3020, "6178 + 2038 \n" -> 3021, "\n\n618" -> 
                3022, "619" -> 3023, "    6(-1x + 6) = 96 " -> 3024, 
                "6 + 2 \n" -> 3025, "62" -> 3026, "621" -> 3027, 
                "6213 + 8955 \n" -> 3028, "622" -> 3029, "6221 + 2277 \n" -> 
                3030, "623" -> 3031, "624" -> 3032, "625" -> 3033, "626" -> 
                3034, "627" -> 3035, "628" -> 3036, "629" -> 3037, 
                "    - 6(2x - 10) = 120 " -> 3038, "      / (6 + 2x) = - 11 " -> 
                3039, "    - 6 + 2x = 18 " -> 3040, "    - 6 + 2x = - 26 " -> 
                3041, "    6 = - 2x + 3x + 7 " -> 3042, "    6 - 2x = - 6 " -> 
                3043, "    6(2x + 8) = - 96 " -> 3044, "6              3\n\n" -> 
                3045, "6 \.00\.b9 3 \n" -> 3046, "63" -> 3047, "63\n\n" -> 
                3048, "63 + 0 \n" -> 3049, "630" -> 3050, "631" -> 3051, 
                "63 + 10 \n" -> 3052, 
                "63\n\n188\n\n      x = - 4y +     /    " -> 3053, 
                "6 + 32 \n" -> 3054, "632" -> 3055, "6 + 33 \n" -> 3056, 
                "633" -> 3057, "63 + 5 \n" -> 3058, "636" -> 3059, 
                "    63 = 6x + 7x - 2 " -> 3060, "63    7\n\n" -> 3061, "637" -> 
                3062, "6379 + 2448 \n" -> 3063, "639" -> 3064, 
                "    6 - 3x = 33 " -> 3065, "    - 6( - 3x - 5) = 48 " -> 
                3066, "    - 6( - 3x + 6) = 72 " -> 3067, 
                "    6 + 3x = - 6x +    /  " -> 3068, "    6(3 + x) = 78 " -> 
                3069, "6 + 4 \n" -> 3070, "64" -> 3071, "642" -> 3072, 
                "6427 + 5512 \n" -> 3073, "6437 - 1389 \n" -> 3074, 
                "    6( - 4 + 4x) = 216 " -> 3075, "64 \.00\.99 5 \n" -> 3076,
                 "645" -> 3077, "-64\n\n505" -> 3078, "-64\n\n587" -> 3079, 
                "647" -> 3080, "6 + 48 \n" -> 3081, "649" -> 3082, 
                "    - 6(4 -  / x) =      /  " -> 3083, 
                "    6(  /  - 4x) =     /  " -> 3084, "    6 - 4x = - 10 " -> 
                3085, "    64x  + 16x - 35 = 0 " -> 3086, "    6 + 4x = 18 " -> 
                3087, "    - 6( - 4x + 2) = - 108 " -> 3088, 
                "    - 64x  + 48x + 7 = 0 " -> 3089, "    6 + 4x = 6x - 8 " -> 
                3090, "    - 64x  +     /  x -  /  = 0 " -> 3091, "6 + 5 \n" -> 
                3092, "65" -> 3093, "650" -> 3094, "651" -> 3095, "652" -> 
                3096, "6529 + 4391 \n" -> 3097, "653" -> 3098, 
                "6534 + 8733 \n" -> 3099, "654" -> 3100, 
                "    6(5 + 4x) = 246 " -> 3101, "655" -> 3102, "656" -> 3103, 
                "65\n\n648" -> 3104, "657" -> 3105, "658" -> 3106, "659" -> 
                3107, "6591 + 6757 \n" -> 3108, "     / ( - 6 + 5x) = - 18 " -> 
                3109, "    6 + 5x = - 19 " -> 3110, 
                "    - 6( - 5x + 5) = - 180 " -> 3111, 
                "    6 + 5x = 7x +  /  " -> 3112, "66" -> 3113, "660" -> 3114,
                 "661" -> 3115, "6              6\n\n169" -> 3116, 
                "6618 + 9094 \n" -> 3117, "66 + 2 \n" -> 3118, "662" -> 3119, 
                "6639 + 6370 \n" -> 3120, "6669 + 6330 \n" -> 3121, "667" -> 
                3122, "6671 + 7814 \n" -> 3123, "668" -> 3124, 
                "6682 + 8481 \n" -> 3125, "669" -> 3126, "    6 - 6x = - 18 " -> 
                3127, "    - 6 + 6x = 24 " -> 3128, 
                "    - 6 + 6x = - 2x + 74 " -> 3129, "    6 + 6x = - 48 " -> 
                3130, "6 + 7 \n" -> 3131, "67" -> 3132, "670" -> 3133, 
                "6703 + 2453 \n" -> 3134, "671" -> 3135, "6710 + 5531 \n" -> 
                3136, "6719 + 9083 \n" -> 3137, "672" -> 3138, "67 + 3 \n" -> 
                3139, "673" -> 3140, "674" -> 3141, "675" -> 3142, 
                "6753 + 2906 \n" -> 3143, "677" -> 3144, "6775 + 7738 \n" -> 
                3145, "678" -> 3146, "    6( - 7x - 10) = - 564 " -> 3147, 
                "    6 + 7x = 34 " -> 3148, "    6 + 7x = - 3x + 96 " -> 3149,
                 "    6(  /  + 7x) = - 44 " -> 3150, "    - 6 + 7x = - 6 " -> 
                3151, "68" -> 3152, "681" -> 3153, "68 + 4 \n" -> 3154, "684" -> 
                3155, "6842 + 8050 \n" -> 3156, 
                "6        8            48\n\n" -> 3157, 
                "    6( - 8 - 5x) = - 198 " -> 3158, "686" -> 3159, "687" -> 
                3160, "689" -> 3161, "    - 6(8 + x) =      /  " -> 3162, 
                "69" -> 3163, "69\n\n26" -> 3164, "693" -> 3165, 
                "6930 + 4607 \n" -> 3166, "695" -> 3167, "696" -> 3168, 
                "6963 + 4488 \n" -> 3169, "697" -> 3170, "698" -> 3171, 
                "6980 + 6177 \n" -> 3172, "6987 + 5576 \n" -> 3173, 
                "6997 + 8056 \n" -> 3174, "    6x + 10 = 0 + 5x " -> 3175, 
                "    6x + 10 = 40 " -> 3176, "    6x  + 11x + 6 = 0 " -> 3177,
                 "    6 + x = 12 " -> 3178, "    6x = - 12 " -> 3179, 
                "    6x + 1 = - 29 " -> 3180, "    6x  - 12x - 12 = 0 " -> 
                3181, "    6x  + 12x + 7 = 0 " -> 3182, 
                "    - 6x + 1 = - 47 " -> 3183, "    - 6x - 1 = - 49 " -> 
                3184, "    - 6( / x - 1) = - 6 " -> 3185, "    6x + 1 = 61 " -> 
                3186, "    6 + x = 17 " -> 3187, "    6x  + 17x + 11 = 0 " -> 
                3188, "    6x - 1 + 7x = 51 " -> 3189, "    6 + x = 18 " -> 
                3190, "    - 6x + 2 = - 16 " -> 3191, "    - 6x - 2 = 16 " -> 
                3192, "    6x + 2 = 50 " -> 3193, "    6x - 2 = 52 " -> 3194, 
                "    - 6x  + 25x - 14 = 0 " -> 3195, "    6x + 2 = 62 " -> 
                3196, "    6x - 2 = 64 " -> 3197, 
                "    6x - 2 =  / x +    /  " -> 3198, "    6x  + 2x + 8 = 0 " -> 
                3199, "    6( / x + 3) =     /  " -> 3200, "    6 = x + 3 " -> 
                3201, "    6x + 3 = 2x + 47 " -> 3202, "    6x - 3 = 3 " -> 
                3203, "    - 6x - 3 = - 33 " -> 3204, "    6x + 3 = 57 " -> 
                3205, "    - 6x + 3 = 6x + 99 " -> 3206, "    6x - 3 = - 75 " -> 
                3207, "    6x + 3 = - 9 " -> 3208, "    6x  + 3x +  /  = 0 " -> 
                3209, "      6x - 3y = - 12 " -> 3210, "      6x + 3y = 21 " -> 
                3211, "       - 6x - 3y = 48 " -> 3212, "      6x + 3y = 69 " -> 
                3213, "    - 6x + 4 = 2x + 36 " -> 3214, 
                "    - 6x + 4 = 32 + x " -> 3215, "    - 6x - 4 = - 52 + 2x " -> 
                3216, "    6x + 4 = - 56 " -> 3217, "    6x + 4 = - 62 " -> 
                3218, "    6x = - 48 " -> 3219, "    6x  + 4x +  /  = 0 " -> 
                3220, "    - 6x  + 4x + 7 = 0 " -> 3221, "    - 6x + 5 = 17 " -> 
                3222, "    - 6x = - 54 " -> 3223, "    6x - 5 = 67 " -> 3224, 
                "    6x  + 5x + 12 = 0 " -> 3225, "       - 6x - 5y = 14 " -> 
                3226, "    6x + 6 = - 12 " -> 3227, 
                "    - 6x + 6 + 3x = - 6 " -> 3228, "    - 6x + 6 = 66 " -> 
                3229, "    6x + 6 = 72 " -> 3230, "    6x + 6 = 78 " -> 3231, 
                "    6x  - 6x +    /  = 0 " -> 3232, "    6x + 7 = 13 " -> 
                3233, "    6x = - 72 " -> 3234, "    6x + 7 = 25 " -> 3235, 
                "    - 6x - 7 = 35 " -> 3236, "    6x + 7 = 37 " -> 3237, 
                "    6x + 7 = 55 " -> 3238, "    - 6x + 7 = - 65 " -> 3239, 
                "    6x - 7 = - 73 " -> 3240, "    6( / x + 8) = 30 " -> 3241,
                 "    6 + x = 9 " -> 3242, "    6x + 9 = - 21 " -> 3243, 
                "    - 6x - 9 = - 27 " -> 3244, "    6x - 9 = - 3 " -> 3245, 
                "    6x + 9 = 45 " -> 3246, "    - 6x + 9 = 51 " -> 3247, 
                "    6x + 9 = 51 " -> 3248, "    6x  + 9x + 8 = 0 " -> 3249, 
                "    - 6x  - 9x + 9 = 0 " -> 3250, "    6x  + 9x + 9 = 0 " -> 
                3251, "    6x  -    / x -  /  = 0 " -> 3252, 
                "    6x  +    / x +  /  = 0 " -> 3253, 
                "    6x  +    / x + 11 = 0 " -> 3254, "    - 6 + x + x = 14 " -> 
                3255, "    6x  +  / x + 3 = 0 " -> 3256, 
                "      6x + y = - 34 " -> 3257, "7" -> 3258, "7\n\n" -> 3259, 
                "7\n\n\n\n" -> 3260, "\n\n70" -> 3261, "700" -> 3262, 
                "70 + 1 \n" -> 3263, "701" -> 3264, "70 + 10 \n" -> 3265, 
                "70 + 17 \n" -> 3266, "70 + 2 \n" -> 3267, "702" -> 3268, 
                "703" -> 3269, "70 + 4 \n" -> 3270, "704" -> 3271, "705" -> 
                3272, "706" -> 3273, "7067 + 9862 \n" -> 3274, "707" -> 3275, 
                "708" -> 3276, "709" -> 3277, "7 + 1 \n" -> 3278, "71" -> 
                3279, "\n\n710" -> 3280, "7102 + 2281 \n" -> 3281, 
                "7 + 11 \n" -> 3282, "711" -> 3283, "712" -> 3284, 
                "7\n\n-128\n\n       - 3x - 2y =      /  " -> 3285, "713" -> 
                3286, "7131 + 1009 \n" -> 3287, "7136 + 8596 \n" -> 3288, 
                "7143 + 8177 \n" -> 3289, "7 \.00\.99 15 \n" -> 3290, 
                "7 + 15 \n" -> 3291, "715" -> 3292, "71 + 6 \n" -> 3293, 
                "716" -> 3294, "7\n\n165\n\n      x + 8y =     /  " -> 3295, 
                "717" -> 3296, 
                "7\n\n17     1\n\n       - 2x =    /    -  / y " -> 3297, 
                "7\n\n171\n\n      5x - y =     /  " -> 3298, "718" -> 3299, 
                "7\n\n183\n\n      3x + 4y =     /  " -> 3300, 
                "    7(-1x + 4) = 91 " -> 3301, "72" -> 3302, "7 + 21 \n" -> 
                3303, "721" -> 3304, "72 + 10 \n" -> 3305, "7    2\n\n1058" -> 
                3306, "7   2\n\n1145" -> 3307, "722" -> 3308, "723" -> 3309, 
                "    7( - 2 + 4x) = - 238 " -> 3310, "725" -> 3311, 
                "7250 + 7530 \n" -> 3312, "726" -> 3313, "7272 + 6191 \n" -> 
                3314, "7\n\n-2                        -74\n\n        / x - 2y \
=     /    " -> 3315, "728" -> 3316, "7280 + 3811 \n" -> 3317, "729" -> 3318, 
                "    - 7( - 2x - 1) = 7 " -> 3319, "73" -> 3320, "731" -> 
                3321, "7\n\n315" -> 3322, "73 + 2 \n" -> 3323, "732" -> 3324, 
                "7333 + 2722 \n" -> 3325, 
                "7\n\n3      332\n\n      x -  / y =     /    " -> 3326, 
                "7338 + 3228 \n" -> 3327, "734" -> 3328, 
                "    - 7(3 - 4x) = - 49 " -> 3329, "736" -> 3330, "737" -> 
                3331, "7379 + 6677 \n" -> 3332, "7 + 38 \n" -> 3333, "738" -> 
                3334, "739" -> 3335, "7\n\n-390\n\n      6x + 3y =      /  " -> 
                3336, "    7(3x + 2) = 266 " -> 3337, 
                "    7 + 3x = - 5x + 55 " -> 3338, "    7 + 3x = 7 " -> 3339, 
                "    7(3x + 8) = 308 " -> 3340, 
                "7\n\n-3\n\n      x + y =   /  " -> 3341, "74" -> 3342, "741" -> 
                3343, "742" -> 3344, "-74\n\n270" -> 3345, 
                "7   4             28\n\n" -> 3346, "    7(4 + 2x) = 56 " -> 
                3347, "743" -> 3348, "7430 + 5558 \n" -> 3349, 
                "7438 + 3315 \n" -> 3350, "744" -> 3351, 
                "7\n\n44\n\n      x - 3y =    /  " -> 3352, "745" -> 3353, 
                "7459 + 4738 \n" -> 3354, "746" -> 3355, "748" -> 3356, "749" -> 
                3357, "-74\n\n91" -> 3358, "7498 + 1176 \n" -> 3359, 
                "    7 + 4x = 7 " -> 3360, "75" -> 3361, "750" -> 3362, 
                "7505 + 3155 \n" -> 3363, "75 + 1 \n" -> 3364, "751" -> 3365, 
                "752" -> 3366, "7524 + 7480 \n" -> 3367, "753" -> 3368, 
                "    7(5 - 3x) = - 28 " -> 3369, "7542 + 3349 \n" -> 3370, 
                "7\n\n54\n\n      2x + 4y =    /  " -> 3371, "755" -> 3372, 
                "7556 + 3316 \n" -> 3373, "7 + 56 \n" -> 3374, "756" -> 3375, 
                "7565 + 3745 \n" -> 3376, "75 - 7 \n" -> 3377, "757" -> 3378, 
                "759" -> 3379, "    7( - 5x - 5) = 315 " -> 3380, 
                "    7(5x - 8) = 49 " -> 3381, "76" -> 3382, "760" -> 3383, 
                "7614 + 5986 \n" -> 3384, "76 + 3 \n" -> 3385, 
                "7635 + 7934 \n" -> 3386, "    - 7( - 6 + 3x) = - 21 " -> 
                3387, "764" -> 3388, "766" -> 3389, "7665 + 3538 \n" -> 3390, 
                "767" -> 3391, "768" -> 3392, "769" -> 3393, 
                "    7(6x + 3) = 357 " -> 3394, "    7 + 6x = 7 " -> 3395, 
                "7              7\n\n" -> 3396, "7          7\n\n" -> 3397, 
                "7         7\n\n" -> 3398, "7        7\n\n" -> 3399, 
                "7      7\n\n" -> 3400, "77" -> 3401, "770" -> 3402, 
                "7 \.00\.99 7.2 \n" -> 3403, "772" -> 3404, "773" -> 3405, 
                "774" -> 3406, "7748 + 4445 \n" -> 3407, "776" -> 3408, 
                "77 + 70 \n" -> 3409, "778" -> 3410, "7 + 79 \n" -> 3411, 
                "77 + 9 \n" -> 3412, "7796 + 7881 \n" -> 3413, 
                "    7 + 7x = 14 " -> 3414, "    - 7 + 7x = 49 " -> 3415, 
                "    - 7 + 7x = - 5x - 31 " -> 3416, "    7 - 7x = 63 " -> 
                3417, "    7 + 7x = - 6x + 85 " -> 3418, "78" -> 3419, "781" -> 
                3420, "78 + 10 \n" -> 3421, "783" -> 3422, 
                "    - 7( - 8 + 3x) = - 154 " -> 3423, 
                "    7( - 8 + 4x) = 84 " -> 3424, "785" -> 3425, "78 + 6 \n" -> 
                3426, "786" -> 3427, "787" -> 3428, "\n\n789" -> 3429, 
                "7       9\n\n" -> 3430, "79" -> 3431, "7 + 90 \n" -> 3432, 
                "790" -> 3433, "7900 + 6469 \n" -> 3434, "7 + 92 \n" -> 3435, 
                "792" -> 3436, "793" -> 3437, "794" -> 3438, "7946 + 9908 \n" -> 
                3439, "7948 + 9978 \n" -> 3440, "7949 + 9040 \n" -> 3441, 
                "796" -> 3442, "797" -> 3443, "798" -> 3444, "7982 + 5589 \n" -> 
                3445, "7988 + 5800 \n" -> 3446, "799" -> 3447, 
                "     / (  /  - 7x) =     /    " -> 3448, "    - 7x = 0 " -> 
                3449, "    7x = 0 " -> 3450, "    - 7 + x = -1 " -> 3451, 
                "    7x + 10 = 24 " -> 3452, "    7x + 10 = 31 " -> 3453, 
                "    7x - 10 = 32 " -> 3454, "    7x + 10 = - 53 " -> 3455, 
                "    7x  - 10x + 1 = 0 " -> 3456, "    - 7x + 10 = - x + 4 " -> 
                3457, "    7x + 1 = 15 " -> 3458, "    7x  + 11x + 12 = 0 " -> 
                3459, "    7x  + 11x + 4 = 0 " -> 3460, 
                "    7x  - 11x + 5 = 0 " -> 3461, "    - 7x  + 12x - 4 = 0 " -> 
                3462, "    - 7x  - 12x - 5 = 0 " -> 3463, 
                "    7x  + 12x + 5 = 0 " -> 3464, "    7x + 1 = - 2x - 62 " -> 
                3465, "    - 7 + x = - 13 " -> 3466, "    7 + x = 13 " -> 
                3467, "    - 7x = - 14 " -> 3468, "    - 7x - 1 = 4x + 32 " -> 
                3469, "    7x  + 14x + 7 = 0 " -> 3470, "    7 + x = 15 " -> 
                3471, "    7x  + 18x + 11 = 0 " -> 3472, "    7 + x = 19 " -> 
                3473, "    7x  + 19x + 12 = 0 " -> 3474, 
                "    7x + 1 =     /  +  / x " -> 3475, "    - 7 + x = 2 " -> 
                3476, "    - 7x - 2 = - 16 " -> 3477, "    7x + 2 = 2 " -> 
                3478, "    - 7x + 2 = - 26 " -> 3479, "    7x + 2 = 58 " -> 
                3480, "    - 7x = 28 " -> 3481, 
                "     /  + 7x = - 2x +     /  " -> 3482, 
                "    7x  + 2x + 11 = 0 " -> 3483, "    7x + 3 = 38 " -> 3484, 
                "    7x + 3 = - 39 " -> 3485, "    7x = 35 " -> 3486, 
                "    7x - 3 = 53 " -> 3487, "    7x + 3 = - 60 " -> 3488, 
                "    - 7x  - 3x + 10 = 0 " -> 3489, "    7x + 4 = 18 " -> 
                3490, "    7x + 4 = - 52 " -> 3491, "    7x + 4 = 5x + 12 " -> 
                3492, "    7x + 4 = 88 " -> 3493, "    - 7x = - 49 " -> 3494, 
                "    7x = - 49 " -> 3495, "    7x  - 4x - 12 = 0 " -> 3496, 
                "    7x  + 4x + 5 = 0 " -> 3497, "    - 7 + x = 5 " -> 3498, 
                "    - 7x - 5 = - 26 " -> 3499, "    - 7x + 5 = 33 " -> 3500, 
                "    7x + 5 = 33 " -> 3501, "    - 7( / x + 5) = - 77 " -> 
                3502, "    7x + 5 = - 86 - 6x " -> 3503, "    7x + 5 = 89 " -> 
                3504, "     / (7x - 6) =  /  " -> 3505, "    7x - 6 = 29 " -> 
                3506, "    7x + 6 = 34 " -> 3507, "    - 7x - 6 = - 41 " -> 
                3508, "    7x - 6 = - 5x + 126 " -> 3509, 
                "    7x - 6 = 60 - 4x " -> 3510, "    - 7x - 6 = - 62 " -> 
                3511, "    7x + 6 = - 78 " -> 3512, 
                "    7x  - 6x +    /  = 0 " -> 3513, "    7 + x = 6x + 32 " -> 
                3514, "    - 7x + 6 = x + 38 " -> 3515, "    7x = 7 " -> 3516,
                 "    7x - 7 = 21 " -> 3517, "    7x + 7 = 27 + 3x " -> 3518, 
                "    - 7x + 7 = 56 " -> 3519, "    - 7x + 7 = 7 " -> 3520, 
                "    7x - 7 = 70 " -> 3521, "    - 7x + 7 = - 77 " -> 3522, 
                "    7x + 7 = - 89 - 5x " -> 3523, "    - 7x + 8 = 15 " -> 
                3524, "    - 7x = - 84 " -> 3525, "    - 7x - 8 = - 50 " -> 
                3526, "    7x + 8 = 57 " -> 3527, "    7x - 8 = 6 " -> 3528, 
                "    7x - 8 = 69 " -> 3529, "    7x  - 8x +    /    = 0 " -> 
                3530, "    7x  + 8x + 2 = 0 " -> 3531, "    7 = x + 9 " -> 
                3532, "    7x + 9 = - 26 " -> 3533, "    7x + 9 = - 40 " -> 
                3534, "    - 7x - 9 = 4x - 97 " -> 3535, "    7x + 9 = 65 " -> 
                3536, "    - 7x + 9 = 93 " -> 3537, 
                "    7x  + 9x -  /    = 0 " -> 3538, "    7x  + 9x + 3 = 0 " -> 
                3539, "    7x  - x - 2 = 0 " -> 3540, 
                "    7x  +     / x + 7 = 0 " -> 3541, "8" -> 3542, "8\n\n" -> 
                3543, "8 + 0 \n" -> 3544, "80" -> 3545, "801" -> 3546, 
                "8011 + 9651 \n" -> 3547, "802" -> 3548, "803" -> 3549, "804" -> 
                3550, "805" -> 3551, "-80\n\n567" -> 3552, "8059 + 1271 \n" -> 
                3553, "806" -> 3554, "807" -> 3555, "8074 + 7521 \n" -> 3556, 
                "808" -> 3557, "8088 + 3140 \n" -> 3558, "8088 + 7921 \n" -> 
                3559, "81" -> 3560, "8 + 10 \n" -> 3561, "810" -> 3562, 
                "8 + 11 \n" -> 3563, "811" -> 3564, 
                "8\n\n11\n\n      2x - 2y =    /  " -> 3565, "8118 + 4430 \n" -> 
                3566, "8119 + 9714 \n" -> 3567, "812" -> 3568, 
                "8\n\n-123\n\n       - 4x + 2y =      /  " -> 3569, "813" -> 
                3570, "814" -> 3571, "815" -> 3572, "8158 + 7658 \n" -> 3573, 
                "8168 + 4402 \n" -> 3574, "817" -> 3575, "818" -> 3576, 
                "8192 + 7500 \n" -> 3577, "8      2\n\n" -> 3578, "82" -> 
                3579, "820" -> 3580, "82 + 10 \n" -> 3581, 
                "8\n\n21\n\n       - 4x - 4y =    /  " -> 3582, 
                "8\n\n239\n\n      x = 3y +     /  " -> 3583, 
                "82\:036d 5 as an improper fraction \n" -> 3584, 
                "8   2\n\n964" -> 3585, "    8 + 2x = 14 " -> 3586, "83" -> 
                3587, "8325 + 1106 \n" -> 3588, "8327 + 6129 \n" -> 3589, 
                "83\n\n349" -> 3590, "83 + 72 \n" -> 3591, "8378 + 2232 \n" -> 
                3592, "    8 + 3x = 41 " -> 3593, "8              4\n\n" -> 
                3594, "8 + 4 \n" -> 3595, "84" -> 3596, "8 + 44 \n" -> 3597, 
                "8447 + 2971 \n" -> 3598, "84 + 5 \n" -> 3599, "8 + 47 \n" -> 
                3600, "84 \.00\.99 7 \n" -> 3601, "84 + 7 \n" -> 3602, 
                "    - 8 - 4x = 16 " -> 3603, "    - 8 + 4x = 28 " -> 3604, 
                "    8 - 4x = - 36 " -> 3605, "    8 + 4x = - 4 " -> 3606, 
                "85" -> 3607, "8 + 53 \n" -> 3608, "8544 + 3707 \n" -> 3609, 
                "8\n\n5\n\n      4x - 2y =  /  " -> 3610, "8589 + 7764 \n" -> 
                3611, "8\n\n59\n\n      y = - 5x +    /  " -> 3612, 
                "    8 + 5x = 13 " -> 3613, "    - 8 - 5x = 17 " -> 3614, 
                "    8 + 5x = 33 " -> 3615, "    - 8 + 5x = 37 " -> 3616, 
                "    8 + 5x = 48 " -> 3617, "8 + 6 \n" -> 3618, "86" -> 3619, 
                "-86\n\n234" -> 3620, "8636 - 4683 \n" -> 3621, 
                "8681 + 5649 \n" -> 3622, "8691 \:0374  1618 \n" -> 3623, 
                "    8 + 6x = - 16 " -> 3624, "87" -> 3625, "8703 - 5940 \n" -> 
                3626, "8719 + 6369 \n" -> 3627, 
                "87\n\n       - 2x =    /  - y " -> 3628, "8759 + 8868 \n" -> 
                3629, "8 + 76 \n" -> 3630, "8\n\n771" -> 3631, 
                "8784 + 3944 \n" -> 3632, "    - 8 - 7x = 62 " -> 3633, 
                "8       8\n\n" -> 3634, "88" -> 3635, "8826 + 6933 \n" -> 
                3636, "88 + 4 \n" -> 3637, "88 \.00\.99 5 \n" -> 3638, 
                "8853 - 4648 \n" -> 3639, "8      8    6\n\n" -> 3640, 
                "8880 + 2001 \n" -> 3641, "89" -> 3642, "8932 + 7141 \n" -> 
                3643, "89 + 4 \n" -> 3644, "8 + 95 \n" -> 3645, "8 + 98 \n" -> 
                3646, "    - 8 + x = 0 " -> 3647, "    8 + x = 0 " -> 3648, 
                "    8 = x + 1 " -> 3649, "    8x  + 10x + 9 = 0 " -> 3650, 
                "    8x  - 12x + 5 = 0 " -> 3651, "    8x  + 13x + 5 = 0 " -> 
                3652, "    8 + x = 14 " -> 3653, "    - 8x  - 14x + 4 = 0 " -> 
                3654, "    8x  + 15x + 7 = 0 " -> 3655, "8x-2=22" -> 3656, 
                "    - 8x  + 26x - 20 = 0 " -> 3657, "    8x  + 2x + 11 = 0 " -> 
                3658, "    - 8 + x = 3 " -> 3659, "    8x  - 30x + 18 = 0 " -> 
                3660, "    - 8x  - 32x - 24 = 0 " -> 3661, 
                "    8x  - 3x + 2 = 0 " -> 3662, "       - 8x - 4y = 36 " -> 
                3663, "    8x  + 6x - 10 = 0 " -> 3664, 
                "    - 8x  + 6x + 5 = 0 " -> 3665, "    - 8 + x = - 7 " -> 
                3666, "    8x  + 7x + 10 = 0 " -> 3667, 
                "    8x  - 7x + 6 = 0 " -> 3668, "    8 = x + 8 " -> 3669, 
                "    8x  + 8x + 2 = 0 " -> 3670, "    - 8x  - 8x + 4 = 0 " -> 
                3671, "    8 + x = 9 " -> 3672, "    8x  +  / x + 1 = 0 " -> 
                3673, "    8x  + x + 2 = 0 " -> 3674, "      8x - y = - 74 " -> 
                3675, "      8x - y = - 9 " -> 3676, "9" -> 3677, "9\n\n" -> 
                3678, "9\n\n\n\n" -> 3679, "9 + 0 \n" -> 3680, "90" -> 3681, 
                "90\n\n" -> 3682, "90+200" -> 3683, 
                "90\n\n223\n\n      x + 4y =     /    " -> 3684, 
                "9043 + 3293 \n" -> 3685, "90 + 8 \n" -> 3686, "90 + 9 \n" -> 
                3687, "-9 + -1 \n" -> 3688, "9 + 1 \n" -> 3689, "91" -> 3690, 
                "9 + 10 \n" -> 3691, "9\n\n107\n\n      5x + 4y =     /  " -> 
                3692, "9 + 11 \n" -> 3693, 
                "9\n\n\n\n11\n\n      15x + 2y =    /  " -> 3694, 
                "9\n\n-116\n\n      4x + 4y =      /  " -> 3695, "9 + 12 \n" -> 
                3696, "9\n\n1      442\n\n      2x +  /5y =     /45 " -> 3697,
                 "9\n\n-14\n\n      - x + 2y =     /  " -> 3698, "9 + 17 \n" -> 
                3699, "9\n\n185\n\n      3x - 4y =     /  " -> 3700, "92" -> 
                3701, "9\n\n224\n\n      4x + 4y =     /  " -> 3702, 
                "9260 + 1150 \n" -> 3703, "-9   2   87\n\n987" -> 3704, 
                "9\n\n28\n\n      x + 4y =    /  " -> 3705, "9 + 29 \n" -> 
                3706, "    9 - 2x = - 15 " -> 3707, "    - 9 + 2x = - 21 " -> 
                3708, "    - 9 - 2x = - 9 " -> 3709, "    - 9 + 2x = 9 " -> 
                3710, "\n\n93" -> 3711, "9        3\n\n" -> 3712, 
                "9300 + 2212 \n" -> 3713, "9320 + 6116 \n" -> 3714, 
                "9\n\n-331\n\n      5x - 2y =      /  " -> 3715, 
                "9\n\n-34\n\n      4x - 3y =     /  " -> 3716, 
                "9346 + 8468 \n" -> 3717, "9361 + 9434 \n" -> 3718, 
                "\n\n-93\n\n664" -> 3719, 
                "9\n\n38\n\n       - 2x + y =    /  " -> 3720, "9 + 39 \n" -> 
                3721, "    9 + 3x = 12 " -> 3722, "    9 - 3x = - 21 " -> 
                3723, "    9 + 3x = 27 " -> 3724, "    9 + 3x = 36 " -> 3725, 
                "    9 + 3x + 7x = 39 " -> 3726, "    9 + 3x = x + 9 " -> 
                3727, "94" -> 3728, "94 + 2 \n" -> 3729, "9422 + 5414 \n" -> 
                3730, "94 + 5 \n" -> 3731, "9 + 46  \n" -> 3732, "94 + 6 \n" -> 
                3733, "94\n\n682" -> 3734, "9474 + 9705 \n" -> 3735, 
                "    9 + 4x = 13 " -> 3736, "    - 9 + 4x = 23 " -> 3737, 
                "    9 - 4x = 3x - 68 " -> 3738, "9 + 5 \n" -> 3739, "95" -> 
                3740, "9503 + 3152 \n" -> 3741, "9514 + 3323 \n" -> 3742, 
                "95\:036d 16 as a mixed number \n" -> 3743, "9525 + 2244 \n" -> 
                3744, "9532 + 5499 \n" -> 3745, 
                "9\n\n56\n\n      2x + y =    /  " -> 3746, "9577 + 7198 \n" -> 
                3747, "9 + 58 \n" -> 3748, "9593 + 3514 \n" -> 3749, 
                "    - 9 + 5x = 31 " -> 3750, "    - 9 + 5x = - 34 " -> 3751, 
                "    9 + 5x = 69 " -> 3752, "    9 - 5x = - 6x - 2 " -> 3753, 
                "    9 - 5x = 7x + 81 " -> 3754, "9 + 6 \n" -> 3755, "96" -> 
                3756, "96 + 0 \n" -> 3757, "9600 + 7472 \n" -> 3758, 
                "9\n\n61" -> 3759, "9618 + 8587 \n" -> 3760, "96 + 2 \n" -> 
                3761, "96 + 43 \n" -> 3762, "96 + 7 \n" -> 3763, 
                "9681 + 2776 \n" -> 3764, 
                "9\n\n-68\n\n      4x - y =     /  " -> 3765, 
                "    9 + 6x + 4x = 29 " -> 3766, "    9 - 6x = - x +    /8 " -> 
                3767, "9 + 7 \n" -> 3768, "97" -> 3769, "9725 + 6193 \n" -> 
                3770, "9737 \:0374  3164 \n" -> 3771, "    9 + 7x = 30 " -> 
                3772, "98" -> 3773, "9827 + 8472 \n" -> 3774, 
                "9831 + 9261 \n" -> 3775, "9857 + 3068 \n" -> 3776, 
                "9 + 88 \n" -> 3777, "9                    9\n\n" -> 3778, 
                "9        9\n\n" -> 3779, "9       9\n\n" -> 3780, "99" -> 
                3781, "9927 + 9121 \n" -> 3782, 
                "99\:036d 4 as a mixed number \n" -> 3783, "9964 + 6451 \n" -> 
                3784, "    - 9x  + 10x - 1 = 0 " -> 3785, 
                "    9x  + 11x + 3 = 0 " -> 3786, 
                "    9x  + 12x +    /    = 0 " -> 3787, 
                "    - 9x  - 12x - 3 = 0 " -> 3788, 
                "    9x  +  /12x + 5 = 0 " -> 3789, "    9x  + 14x + 5 = 0 " -> 
                3790, "    9x  + 15x + 6 = 0 " -> 3791, 
                "    - 9x  + 21x - 10 = 0 " -> 3792, "    9x  + 21x + 6 = 0 " -> 
                3793, "    9x  + 27x + 8 = 0 " -> 3794, 
                "    - 9 - x = 2x - 27 " -> 3795, "    - 9 = x + 3 " -> 3796, 
                "    9x  - 3x - 20 = 0 " -> 3797, "     /9x  - 4x + 12 = 0 " -> 
                3798, "    9x  + 4x - 4 = 0 " -> 3799, 
                "       - 9x + 4y = - 101 " -> 3800, "    - 9 + x = - 5 " -> 
                3801, "    9 = x + 5 " -> 3802, "    9x  - 5x - 4 = 0 " -> 
                3803, "      9x - 5y = 41 " -> 3804, "    - 9 + x = - 7 " -> 
                3805, "    9x  - 7x - 2 = 0 " -> 3806, "    9 + x + 7x = 57 " -> 
                3807, "    9x  - 7x + 7 = 0 " -> 3808, 
                "    9x  - 8x + 11 = 0 " -> 3809, "    9x  - x - 3 = 0 " -> 
                3810, "    9x  + x + 3 = 0 " -> 3811, "Add 1/2 and 1/3" -> 
                3812, "A salesman is paid a monthly salary of $2,300 plus 7% \
commission on his monthly sales.\nDetermine the amount of sales required for \
his total monthly income to be $3,000." -> 3813, 
                "A salesman tells you that the $140 earrings are already \
marked 20% off. What\nwas the original price?" -> 3814, 
                "A $750 watch is on sale for 15% off. Find the sale price." -> 
                3815, "Combine like terms of 3a-6a+10a-a" -> 3816, 
                "Combine like terms of 3n-5\!\(\*SuperscriptBox[\(n\), \
\(\(2\)\(\\ \)\)]\)+6n-10+2\!\(\*SuperscriptBox[\(n\), \(2\)]\)" -> 3817, 
                "Combine the like terms of 5x-10y+6z-3x" -> 3818, "cos(45)" -> 
                3819, "cos(\[Pi]/13)" -> 3820, 
                "Evaluate 2\!\(\*SuperscriptBox[\(x\), \(2\)]\)-9 for x=-3" -> 
                3821, "Evaluate a-\!\(\*SuperscriptBox[\(b\), \(2\)]\) when \
a=4 and b=2" -> 3822, 
                "Evaluate \!\(\*SuperscriptBox[\(a\), \(2\)]\)+b when a=7 and \
b=1" -> 3823, 
                "Evaluate \!\(\*SuperscriptBox[\(a\), \
\(2\)]\)-\!\(\*SuperscriptBox[\(b\), \(2\)]\) when a=5 and b=3" -> 3824, 
                "Expand (a+b\!\(\*SuperscriptBox[\()\), \(3\)]\)" -> 3825, 
                "express 12 1/3 as an improper fraction" -> 3826, 
                "express 3 2/7 as an improper fraction" -> 3827, 
                "Express 42/5 as a mixed number" -> 3828, 
                "Express 53/9 as a mixed number" -> 3829, "Factors of 40 \n" -> 
                3830, "Factors of 41 \n" -> 3831, "Factors of 42 \n" -> 3832, 
                "Factors of 43 \n" -> 3833, "Factors of 44 \n" -> 3834, 
                "Factors of 46 \n" -> 3835, "Factors of 49 \n" -> 3836, 
                "Factors of 50 \n" -> 3837, "Factors of 51 \n" -> 3838, 
                "Factors of 52 \n" -> 3839, "Factors of 54 \n" -> 3840, 
                "Factors of 61 \n" -> 3841, "Factors of 65 \n" -> 3842, 
                "Factors of 67 \n" -> 3843, "Factors of 68 \n" -> 3844, 
                "Factors of 76 \n" -> 3845, "Factors of 82 \n" -> 3846, 
                "Factors of 94 \n" -> 3847, 
                "Find a perpedicular line of y=3x+2 with y intercept of the \
origin" -> 3848, "Find the equation of best fit for the below listed data" -> 
                3849, "Graph the inequality y<3x+4" -> 3850, 
                "Graph the parabola give by \!\(\*SuperscriptBox[\(x\), \
\(2\)]\)+3x+2. Find the zeros, vertex and intercept" -> 3851, 
                "How many miutes are in a day?" -> 3852, 
                "Identify the property used in the equations below as \
distributive, inverse or associative" -> 3853, 
                "Is x=-8 a solution to 1/2x+6>3?" -> 3854, 
                "Multiply 24/3 and 27/8" -> 3855, "Multiply 8 and 3/24" -> 
                3856, "Plot 1.25, 2/3 and 2 on a number line" -> 3857, 
                "Simplify 10-(7+1)" -> 3858, "Simplify 10-7+1" -> 3859, 
                "Simplify (15-3)/(1+5)" -> 3860, 
                "Simplify 24/(4-2\!\(\*SuperscriptBox[\()\), \(3\)]\)" -> 
                3861, "Simplify (2-5\!\(\*SuperscriptBox[\()\), \(2\)]\)" -> 
                3862, "Simplify 2-\!\(\*SuperscriptBox[\(5\), \(2\)]\)" -> 
                3863, "Simplify 4+5(1+12/6\!\(\*SuperscriptBox[\()\), \
\(2\)]\)" -> 3864, "sin(121)" -> 3865, "sin(40)" -> 3866, "sin(\[Pi]/3)" -> 
                3867, "sin(\[Pi]/5)" -> 3868, "Solve:0 = 4 - c \n" -> 3869, 
                "Solve:10 + f = 20 \n" -> 3870, "Solve:10 = m\:036d 4 \n" -> 
                3871, "Solve:11 + j = 21 \n" -> 3872, "Solve:11 = x + 7 \n" -> 
                3873, "Solve:121 = 11j \n" -> 3874, "Solve:121 = f+2 \n" -> 
                3875, "Solve:17 = f + 5 \n" -> 3876, "Solve: 22 = 9 + h \n" -> 
                3877, "Solve:-2 = 3 - q \n" -> 3878, 
                "Solve:24\:036d g = 3 \n" -> 3879, "Solve:2k = 14 \n" -> 3880,
                 "Solve:32\:036d w = 4 \n" -> 3881, "Solve:36 = 3u \n" -> 
                3882, "Solve:-3 = p - 8 \n" -> 3883, "Solve:3u = 9 \n" -> 
                3884, "Solve 3|x-5|=12" -> 3885, "Solve 3(x-5)+4=10" -> 3886, 
                "Solve:45\:036d m = 9 \n" -> 3887, "Solve:4 = 8\:036d q \n" -> 
                3888, "Solve:4 - m = -3 \n" -> 3889, "Solve:4 + m = 6 \n" -> 
                3890, "Solve:4 = r\:036d 11 \n" -> 3891, 
                "Solve:4 = x\:036d 7 \n" -> 3892, "Solve 4x-9=11" -> 3893, 
                "Solve:5 = a\:036d 8 \n" -> 3894, "Solve:5 + h = 17 \n" -> 
                3895, "Solve:5y = 65 \n" -> 3896, "Solve:6 = 12\:036d j \n" -> 
                3897, "Solve:66\:036d g = 6 \n" -> 3898, 
                "Solve:6 = x\:036d 3 \n" -> 3899, "Solve:7 = 4 + e \n" -> 
                3900, "Solve:7 - w = -2 \n" -> 3901, 
                "Solve:8 = 24\:036d m \n" -> 3902, "Solve:88\:036d f = 8 \n" -> 
                3903, "Solve:8 = d\:036d 12 \n" -> 3904, "Solve:8p = 88 \n" -> 
                3905, "Solve:8w = 96 \n" -> 3906, "Solve 8(x-5)+4=10" -> 3907,
                 "Solve:9d = 99 \n" -> 3908, "Solve:9 - k = 7 \n" -> 3909, 
                "Solve:9 = v + 2 \n" -> 3910, "Solve 9(x-3)+4=10" -> 3911, 
                "Solve and graph the solution to 2x-3<7" -> 3912, 
                "Solve and graph the solution to |3x-1|\[GreaterEqual]10" -> 
                3913, "Solve: b + 7 = 11 \n" -> 3914, "Solve:c+1 = 81 \n" -> 
                3915, "Solve:e\:036d 5 = 7 \n" -> 3916, "Solve:g - 4 = 0 \n" -> 
                3917, "Solve:j = 36 \n" -> 3918, "Solve:j - 3 = 9 " -> 3919, 
                "Solve:k + 2 = 12 \n" -> 3920, "Solve:p + 10 = 12 \n" -> 3921,
                 "Solve:r\:036d 2 = 6 \n" -> 3922, "Solve:r - 5 = 6 \n" -> 
                3923, "Solve (\!\(\*SuperscriptBox[\(x\), \(2\)]\)-5)=20" -> 
                3924, "Solve:u\:036d 6 = 7 \n" -> 3925, 
                "Solve (x-1/2)=(2x+3)" -> 3926, "Solve:x\:036d 13 = 9 \n" -> 
                3927, "tan(63)" -> 3928, 
                "Tommy\[CloseCurlyQuote]s grandma gave him a $50 gift card to \
Toys R Us for his birthday.\nSales tax is currently 9%. Determine the price \
of the most expensive toy Tommy can buy with\nthe $50 gift card." -> 3929, 
                "Use the law of sines to find the missing side of this \
triangle" -> 3930, 
                "What are the discontiuities in the function \
y=(x+2)/(x+3x+2). Which are fundamental and which are removable?" -> 3931, 
                "What are the domain and range of \!\(\*SuperscriptBox[\(e\), \
\(x\)]\) and ln(x)" -> 3932, 
                "What are the domain and range of the trigonometric \
functions?" -> 3933, "What is |1|" -> 3934, "What is 10% of 100" -> 3935, 
                "What is 1+1" -> 3936, "What is 1+15+21" -> 3937, 
                "What is  1/2 + 1/3" -> 3938, 
                "What is 12 1/3 as an improper fraction" -> 3939, 
                "What is 20+22" -> 3940, "What is 2+2" -> 3941, "What is 2+3" -> 
                3942, "What is  24/3 * 27/8" -> 3943, "What is |-30|" -> 3944,
                 "What is 3/18 in simplest form" -> 3945, "What is 3-(-2)?" -> 
                3946, "What is 33+5+8" -> 3947, "What is -3+4" -> 3948, 
                "What is 42/54 in simplest form" -> 3949, 
                "What is 42/5 as a mixed number" -> 3950, "What is 45+300+4" -> 
                3951, "What is 4% of 16?" -> 3952, 
                "What is 53/9 as a mixed number" -> 3953, 
                "What is 5% of 100?" -> 3954, "What is  8 * 3/24" -> 3955, 
                "What is (a+b\!\(\*SuperscriptBox[\()\), \(n\)]\) (Hint: What \
theorem is this?)" -> 3956, "What is ln(1)?" -> 3957, "What is sin(60)" -> 
                3958, "What is tan(30)" -> 3959, 
                "What is the absolute value of -1?" -> 3960, 
                "What is the largest value for the missing side of this \
triangle" -> 3961, 
                "What is the most specific subset of the real numbers that -7 \
is a part of?" -> 3962, "What is the next term in the series " -> 3963, 
                "What is the sum from 1 to 5 of a=10n+3" -> 3964, 
                "what is the sum of the geometric series from 1 to infinity \
of 9(1/10\!\(\*SuperscriptBox[\()\), \(n\)]\)?" -> 3965, 
                "Wrie the standard form of y=3/2 x+2" -> 3966, 
                "Write 30 degrees in radians" -> 3967, 
                "write 3/18 in simplest form" -> 3968, 
                "What is 3 2/7 as an improper fraction" 
                 "write 42/54 in simplest form" -> 3969, 
                "Write slope intercept form for a slope of 2 and y-intercept \
of 12" -> 3970, "Write \[Pi]/4 in degrees" -> 3971, "    x  + 0x + 0 = 0 " -> 
                3972, "    x  + 0x - 16 = 0 " -> 3973, "    x - 10 = 0 " -> 
                3974, "    x + 10 = 0 " -> 3975, "    x + 10 = 10 " -> 3976, 
                "    x + 10 = 12 " -> 3977, "    x - 10 = - 14 " -> 3978, 
                "    x + 10 = 15 " -> 3979, "    x + 10 = 17 " -> 3980, 
                "    x + 10 = 18 " -> 3981, "    x - 10 = - 22 " -> 3982, 
                "    x + 10 = 22 " -> 3983, "    x + 10 = 22 - 2x " -> 3984, 
                "    x - 10 = - 4 " -> 3985, 
                "      / x + 10 = 4x +     /    " -> 3986, 
                "    x - 10 = - 5 " -> 3987, "    x + 10 = 5 " -> 3988, 
                "    x  - 10x + 0 = 0 " -> 3989, "    - x  + 10x + 11 = 0 " -> 
                3990, "    x  + 10x + 21 = 0 " -> 3991, 
                "    x  - 10x + 24 = 0 " -> 3992, "    x  + 10x + 26 = 0 " -> 
                3993, "    x  + 10x + 5 = 0 " -> 3994, 
                "      - x - 10y = - 68 " -> 3995, "    x - 1 = - 10 " -> 
                3996, "    x - 1 = 11 " -> 3997, "    x + 1 = 11 " -> 3998, 
                "    x + 1 = 12 " -> 3999, "    x + 1 = 13 " -> 4000, 
                "    x  - 11x + 10 = 0 " -> 4001, "    x  + 11x - 11 = 0 " -> 
                4002, "    x  + 11x - 12 = 0 " -> 4003, 
                "    x  + 11x + 18 = 0 " -> 4004, "    x  - 11x + 24 = 0 " -> 
                4005, "    x  - 12x + 0 = 0 " -> 4006, 
                "    x  - 12x + 11 = 0 " -> 4007, "      / x  - 12x + 3 = 0 " -> 
                4008, "    x  - 12x + 35 = 0 " -> 4009, 
                "    x  - 12x + 37 = 0 " -> 4010, "     / x  - 12x + 4 = 0 " -> 
                4011, "      x + 12y = - 19 " -> 4012, "    x - 1 = 3 " -> 
                4013, "    x  - 13x + 12 = 0 " -> 4014, 
                "    x  + 13x + 12 = 0 " -> 4015, "    x  - 13x + 22 = 0 " -> 
                4016, "    x  + 13x + 36 = 0 " -> 4017, 
                "    x  - 13x + 42 = 0 " -> 4018, "    x  - 14x + 24 = 0 " -> 
                4019, "    x + 1 = - 5 " -> 4020, "    x  - 15x + 36 = 0 " -> 
                4021, "    x  + 15x + 44 = 0 " -> 4022, 
                "    x  - 15x + 50 = 0 " -> 4023, "    x  + 15x + 50 = 0 " -> 
                4024, "    x  - 15x + 54 = 0 " -> 4025, 
                "    x  + 15x + 56 = 0 " -> 4026, "    x - 1 = 6 " -> 4027, 
                "    x  - 16x + 55 = 0 " -> 4028, "    x  - 16x + 63 = 0 " -> 
                4029, "      - x + 16y = 156 " -> 4030, 
                "    x  - 18x + 80 = 0 " -> 4031, "    x  + 18x + 80 = 0 " -> 
                4032, "    x - 1 = - 9 " -> 4033, "      x = 19 + 2y " -> 
                4034, "    x  - 19x + 84 = 0 " -> 4035, 
                "    x  - 19x + 88 = 0 " -> 4036, "    x  - 20x + 96 = 0 " -> 
                4037, "    x  + 20x + 99 = 0 " -> 4038, "    x / - 2 = 1 " -> 
                4039, "    x - 2 = -1 " -> 4040, "    x + 2 = 11 " -> 4041, 
                "    x + 2 = 12 " -> 4042, "-x-2=12" -> 4043, 
                "    x + 2 = 13 " -> 4044, "    x + 2 = 14 " -> 4045, 
                "    x + 2 = - 2 " -> 4046, "    x + 2 = 2 " -> 4047, 
                "    x / 2 = 2 " -> 4048, "    x / - 2 = 3 " -> 4049, 
                "    x + 2 = - 3 " -> 4050, "    x - 2 = 3 " -> 4051, 
                "    x + 2 = 3 " -> 4052, "      x = - 23 - 4y " -> 4053, 
                "    x  - 23x + 132 = 0 " -> 4054, "    x / 2 = - 4 " -> 4055,
                 "    x - 2 = 5 " -> 4056, "    x + 2 = 5 " -> 4057, 
                "    x / 2 = - 6 " -> 4058, "    x  + 26x + 48 = 0 " -> 4059, 
                "    x - 2 = - 8 " -> 4060, "    x + 2 = - 8 " -> 4061, 
                "    x + 2 = 8 " -> 4062, "    x - 2 = 9 " -> 4063, 
                "     / x  - 2x + 11 = 0 " -> 4064, "    x  - 2x - 15 = 0 " -> 
                4065, "    x  + 2x - 3 = 0 " -> 4066, "    x  + 2x - 8 = 0 " -> 
                4067, "      / x + 2y =  / " -> 4068, 
                "      / x + 2y =    / " -> 4069, "     / x - 2y =    / " -> 
                4070, "     / x + 2y =    / " -> 4071, 
                "     / x + 2y =     / " -> 4072, "     / x - 2y =      /   " -> 
                4073, "    x = - 2y +    / " -> 4074, 
                "    x = - 2y +     /   " -> 4075, "    x + 2y =    / " -> 
                4076, "    x + 2y =     / " -> 4077, "    x = 2y + 0" -> 4078,
                 "      x + 2y = 11 " -> 4079, "      - x - 2y = - 12 " -> 
                4080, "    x = - 2y + 12" -> 4081, "      x - 2y = - 14 " -> 
                4082, "      / x - 2y = - 15" -> 4083, "    x + 2y = 16" -> 
                4084, "\n\n      x = - 2y + 18 " -> 4085, 
                "      - x - 2y = - 18 " -> 4086, "      x + 2y = 2 " -> 4087,
                 "    x - 2y = 2" -> 4088, "     / x + 2y = 20" -> 4089, 
                "      - x + 2y = 21 " -> 4090, "    x + 2y = 23" -> 4091, 
                "     / x - 2y = - 28" -> 4092, "      x = - 2y + 28 " -> 
                4093, "      - x - 2y = - 3 " -> 4094, "      x = - 2y - 4 " -> 
                4095, "      / x + 2y = - 5" -> 4096, "      x + 2y = - 6 " -> 
                4097, "    x = 2y -     /7" -> 4098, "    x = 2y - 7" -> 4099,
                 "    - x + 2y = - 8" -> 4100, "\n\n      x = 2y - 9 " -> 
                4101, "      x + 2y = 9 " -> 4102, "    x - 2y = - 9" -> 4103,
                 "    x = 2y + 9" -> 4104, "    x / - 3 = 1 " -> 4105, 
                "    x + 3 = 12 " -> 4106, "    x + 3 = 14 " -> 4107, 
                "    x / - 3 = - 2 " -> 4108, "    x / - 3 = 2 " -> 4109, 
                "    x - 3 = 3 " -> 4110, "    x / 3 = 3 " -> 4111, 
                "    x + 3 = - 4 " -> 4112, "    x + 3 = - 6 " -> 4113, 
                "    x + 3 = 7x + 63 " -> 4114, "    x  - 3x + 0 = 0 " -> 
                4115, "    x  + 3x + 0 = 0 " -> 4116, 
                "    - x  + 3x + 10 = 0 " -> 4117, "    x  - 3x - 108 = 0 " -> 
                4118, "     / x  - 3x + 12 = 0 " -> 4119, 
                "    x  + 3x - 4 = 0 " -> 4120, "    x  + 3x - 54 = 0 " -> 
                4121, "      / x + 3y =    / " -> 4122, 
                "      / x + 3y =     / " -> 4123, 
                "      / x + 3y =     /   " -> 4124, "     / x - 3y =    / " -> 
                4125, "     / x + 3y =    / " -> 4126, 
                "     / x - 3y =     / " -> 4127, "     / x - 3y =    /   " -> 
                4128, "      x = 3 - y " -> 4129, "    - x + 3y =  / " -> 
                4130, "    x = - 3y -    / " -> 4131, "    x = 3y -    / " -> 
                4132, "    x - 3y =     / " -> 4133, "    x = 3y + 0" -> 4134,
                 "      - x + 3y = 1 " -> 4135, "      x - 3y = -1 " -> 4136, 
                "    x = - 3y - 1" -> 4137, "      x + 3y = 11 " -> 4138, 
                "    x + 3y = - 11" -> 4139, "    x + 3y = 12" -> 4140, 
                "    - x - 3y = 15" -> 4141, "    x = - 3y + 15" -> 4142, 
                "      x = - 3y + 16 " -> 4143, "    x - 3y = 2" -> 4144, 
                "    - x + 3y = 20" -> 4145, "    x + 3y = 20" -> 4146, 
                "      x = 3y - 21 " -> 4147, "    x - 3y = 22" -> 4148, 
                "    - x + 3y = 23" -> 4149, "      - x + 3y = 24 " -> 4150, 
                "      x = - 3y - 24 " -> 4151, "    - x + 3y = 24" -> 4152, 
                "    x + 3y = - 24" -> 4153, "      x = 3y - 26 " -> 4154, 
                "      - x + 3y = - 27 " -> 4155, "      x = - 3y + 27 " -> 
                4156, "    x = - 3y - 27" -> 4157, "      x - 3y = - 28 " -> 
                4158, "      - x + 3y = 3 " -> 4159, "    x + 3y = 3" -> 4160,
                 "    x + 3y = - 33" -> 4161, "    x + 3y = 5" -> 4162, 
                "      x = - 3y - 6 " -> 4163, "      x = 3y - 6 " -> 4164, 
                "    x - 3y = - 6" -> 4165, "    x = - 3y - 7" -> 4166, 
                "    - x + 3y = 8" -> 4167, "      x + 3y = 9 " -> 4168, 
                "    x - 4 = 0 " -> 4169, "    x / - 4 = -1 " -> 4170, 
                "    x + 4 = 14 " -> 4171, "    x - 4 = - 15 " -> 4172, 
                "    x + 4 = 15 " -> 4173, "    x + 4 = 16 " -> 4174, 
                "    x + 4 = 3 " -> 4175, "    x / 4 = 3 " -> 4176, 
                "    x / - 4 = 4 " -> 4177, "    x + 4 = - 4 " -> 4178, 
                "    x / - 4 = 5 " -> 4179, "    x - 4 = 5 " -> 4180, 
                "    x - 4 = - 6 " -> 4181, "    x + 4 = - 6 " -> 4182, 
                "    x / 4 = 6 " -> 4183, "    x / - 4 = 7 " -> 4184, 
                "    x / 4 = 7 " -> 4185, "    x + 4 = 8 " -> 4186, 
                "    x - 4 = - 9 " -> 4187, "    x  - 4x + 12 = 0 " -> 4188, 
                "    - x - 4 = x - 18 " -> 4189, "     / x  + 4x + 2 = 0 " -> 
                4190, "    x  + 4x - 32 = 0 " -> 4191, 
                "    x  - 4x - 45 = 0 " -> 4192, "    x  - 4x - 60 = 0 " -> 
                4193, "    x  + 4x - 60 = 0 " -> 4194, 
                "    - x  - 4x + 8 = 0 " -> 4195, "      / x + 4y =     / " -> 
                4196, "     / x + 4y =    / " -> 4197, 
                "     / x - 4y =     / " -> 4198, "     / x + 4y =     / " -> 
                4199, "    x = - 4y +     / " -> 4200, "    x - 4y =     / " -> 
                4201, "    - x - 4y = -1" -> 4202, "    x = 4y - 10" -> 4203, 
                "     / x - 4y = - 14" -> 4204, "    - x - 4y = - 16" -> 4205,
                 "    - x + 4y = 16" -> 4206, "    - x - 4y = - 18" -> 4207, 
                "    x = - 4y + 19" -> 4208, "    x - 4y = 19" -> 4209, 
                "    - x + 4y = - 2" -> 4210, "    x + 4y = - 2" -> 4211, 
                "    x = 4y - 21" -> 4212, "      - x + 4y = - 22 " -> 4213, 
                "    - x + 4y = 22" -> 4214, "      - x - 4y = 24 " -> 4215, 
                "      x = 4y - 26 " -> 4216, "    x - 4y = - 27" -> 4217, 
                "    x + 4y = 28" -> 4218, "      - x + 4y = 31 " -> 4219, 
                "    x + 4y = - 31" -> 4220, "      x = 4y + 32 " -> 4221, 
                "    - x - 4y = 33" -> 4222, "    x + 4y = 33" -> 4223, 
                "    - x = - 4y + 36" -> 4224, "    x + 4y = 37" -> 4225, 
                "    - x + 4y = 4" -> 4226, "    x + 4y = 4" -> 4227, 
                "      x = 4y - 41 " -> 4228, "    x - 4y = - 46" -> 4229, 
                "    x + 4y = 49" -> 4230, "      x - 4y = - 6 " -> 4231, 
                "    x + 4y = - 6" -> 4232, "      x = - 4y - 9 " -> 4233, 
                "      x + 4y = 9 " -> 4234, "    x + 5 = -1 " -> 4235, 
                "    x + 5 = 10 " -> 4236, "    x + 5 = 14 " -> 4237, 
                "    x + 5 = 16 " -> 4238, "        / x  + 51x - 30 = 0 " -> 
                4239, "    x + 5 = - 2 " -> 4240, "    x / 5 = 2 " -> 4241, 
                "    x / - 5 = - 3 " -> 4242, "    x / 5 = - 3 " -> 4243, 
                "    x + 5 = - 4 " -> 4244, "    x / 5 = - 4 " -> 4245, 
                "    x + 5 = - 4 + 4x " -> 4246, "    x / 5 = - 6 " -> 4247, 
                "    - x - 5 = 6x - 54 " -> 4248, "    x - 5 = 7 " -> 4249, 
                "    x - 5 = - 9 " -> 4250, "    x + 5 = 9 " -> 4251, 
                "    x  - 5x - 14 = 0 " -> 4252, "    x  +  /5x +  /5 = 0 " -> 
                4253, "    x  + 5x - 84 = 0 " -> 4254, 
                "      / x + 5y =      / " -> 4255, "     / x = - 5y +    / " -> 
                4256, "     / x - 5y =  / " -> 4257, "     / x + 5y =    / " -> 
                4258, "    - x + 5y =     / " -> 4259, 
                "    - x = 5y +     / " -> 4260, "    x + 5y =   / " -> 4261, 
                "    - x - 5y = 0" -> 4262, "      x - 5y = -1 " -> 4263, 
                "    x = - 5y - 11" -> 4264, "      - x + 5y = - 12 " -> 4265,
                 "    - x + 5y = 15" -> 4266, "      x + 5y = - 16 " -> 4267, 
                "      / x = - 5y + 17" -> 4268, "      - x - 5y = 17 " -> 
                4269, "      x + 5y = - 17 " -> 4270, "    x = 5y - 19" -> 
                4271, "      - x - 5y = - 20 " -> 4272, "    x + 5y = 21" -> 
                4273, "      x + 5y = - 23 " -> 4274, "      - x - 5y = 24 " -> 
                4275, "      - x - 5y = 25 " -> 4276, "    - x - 5y = 26" -> 
                4277, "      x - 5y = 26 " -> 4278, "    x - 5y = - 27" -> 
                4279, "      x - 5y = - 29 " -> 4280, 
                "      - x - 5y = - 30 " -> 4281, "     / x - 5y = - 30" -> 
                4282, "     / x + 5y = 30" -> 4283, "      - x + 5y = 33 " -> 
                4284, "      x - 5y = - 35 " -> 4285, "      x + 5y = 35 " -> 
                4286, "      x = - 5y - 37 " -> 4287, "    - x - 5y = 37" -> 
                4288, "      x + 5y = 4 " -> 4289, "      x = - 5y - 40 " -> 
                4290, "      - x - 5y = 41 " -> 4291, "      x + 5y = 43 " -> 
                4292, "    - x + 5y = 44" -> 4293, "      x + 5y = 44 " -> 
                4294, "    x - 5y = - 44" -> 4295, "      x - 5y = - 45 " -> 
                4296, "    - x + 5y = 45" -> 4297, "      x = 5y - 46 " -> 
                4298, "    x = 5y + 47" -> 4299, "\n\n      - x + 5y = 49 " -> 
                4300, "    - x + 5y = 49" -> 4301, "      x - 5y = - 5 " -> 
                4302, "    x +  /5y =    /5" -> 4303, "    x - 5y = 5" -> 
                4304, "    x + 5y = 5" -> 4305, "    - x + 5y = 51" -> 4306, 
                "      x + 5y = 51 " -> 4307, "    x = - 5y + 55" -> 4308, 
                "    - x - 5y = - 57" -> 4309, "    - x + 5y = 6" -> 4310, 
                "    x - 5y = 6" -> 4311, "      x = - 5y - 8 " -> 4312, 
                "      - x + 5y = 9 " -> 4313, "    x + 5y = 9" -> 4314, 
                "    x + 6 = 0 " -> 4315, "    x / 6 = -1 " -> 4316, 
                "    x + 6 = 13 " -> 4317, "    x + 6 = 16 " -> 4318, 
                "    x / 6 = - 2 " -> 4319, "    x / 6 = 2 " -> 4320, 
                "    - x - 6 + 2x = - 11 " -> 4321, "    x + 6 = 2x + 2 " -> 
                4322, "    x / - 6 = - 3 " -> 4323, "    x / - 6 = 3 " -> 
                4324, "    x + 6 = 3 " -> 4325, "    x / 6 = 3 " -> 4326, 
                "    x / 6 = - 4 " -> 4327, "    x / 6 = 4 " -> 4328, 
                "    x + 6 = - 42 - 7x " -> 4329, "    x - 6 = - 4 + 3x " -> 
                4330, "    x - 6 = - 5 " -> 4331, "    x / 6 = 5 " -> 4332, 
                "    x / - 6 = 6 " -> 4333, "    x + 6 = - 6 " -> 4334, 
                "    x + 6 = 6 " -> 4335, "    x / 6 = 6 " -> 4336, 
                "    x + 6 = 7 " -> 4337, "    x + 6 = 8 " -> 4338, 
                "        /  = - x - 6x +  /  " -> 4339, 
                "      / x +  /  =    /  + 6x " -> 4340, 
                "    x  - 6x + 0 = 0 " -> 4341, "    x  + 6x - 1 = 0 " -> 
                4342, "    x  - 6x - 55 = 0 " -> 4343, 
                "    x  + 6x - 55 = 0 " -> 4344, "     / x  + 6x - 6 = 0 " -> 
                4345, "    x  - 6x - 7 = 0 " -> 4346, "    x  - 6x - 72 = 0 " -> 
                4347, "    x  - 6x + 8 = 0 " -> 4348, "    x - 7 = 0 " -> 
                4349, "    x / 7 = -1 " -> 4350, "    x + 7 = 11 " -> 4351, 
                "    x + 7 = 13 " -> 4352, "    x + 7 = 14 " -> 4353, 
                "    x + 7 = 15 " -> 4354, "    x + 7 = 18 " -> 4355, 
                "    x / - 7 = - 2 " -> 4356, "    x / 7 = 2 " -> 4357, 
                "    x + 7 = - 3 + 2x " -> 4358, "    - x + 7 - 3x = 51 " -> 
                4359, "    x / 7 = 4 " -> 4360, "    - x - 7 = 4x + 18 " -> 
                4361, "    x / 7 = 5 " -> 4362, "    x - 7 = - 6 " -> 4363, 
                "    x + 7 = 6 " -> 4364, "    x / - 7 = 7 " -> 4365, 
                "    x / 7 = - 7 " -> 4366, "    - x - 7 =      /    -  / x " -> 
                4367, "    x  + 7x + 0 = 0 " -> 4368, "    x  - 7x + 12 = 0 " -> 
                4369, "    x  + 7x + 13 = 0 " -> 4370, 
                "     / x  + 7x + 16 = 0 " -> 4371, "    x - 8 = -1 " -> 4372,
                 "    x - 8 = 1 " -> 4373, "    x + 8 = 12 " -> 4374, 
                "    x + 8 = 14 " -> 4375, "    x + 8 = 15 " -> 4376, 
                "    x + 8 = 17 " -> 4377, "    x + 8 = 18 " -> 4378, 
                "    - x - 8 =     /  - 2x " -> 4379, "    x + 8 = - 3 " -> 
                4380, "    x + 8 = 3 " -> 4381, "    x - 8 = - 4 " -> 4382, 
                "    x - 8 = - 5 " -> 4383, "    x  - 8x + 0 = 0 " -> 4384, 
                "    x - 8 + x = - 10 " -> 4385, "    x  + 8x + 10 = 0 " -> 
                4386, "    x  + 8x - 33 = 0 " -> 4387, 
                "     / x  + 8x + 6 = 0 " -> 4388, "    - x  + 8x + 9 = 0 " -> 
                4389, "      - x + 8y = 18 " -> 4390, "      x + 8y = 48 " -> 
                4391, "    x + 9 = 1 " -> 4392, "    x + 9 = 11 " -> 4393, 
                "    x - 9 = - 12 " -> 4394, "    x + 9 = 13 " -> 4395, 
                "    x + 9 = 18 " -> 4396, "    x + 9 = 2 " -> 4397, 
                "    x + 9 = 20 " -> 4398, "    x + 9 = - 27 + 7x " -> 4399, 
                "    x + 9 = 3 " -> 4400, "    x - 9 = - 7 " -> 4401, 
                "    x - 9 = - 9 " -> 4402, "    x  + 9x - 10 = 0 " -> 4403, 
                "    x  + 9x + 21 = 0 " -> 4404, "     / x  + 9x + 25 = 0 " -> 
                4405, "     / x  + 9x + 34 = 0 " -> 4406, 
                "    x  - 9x + 8 = 0 " -> 4407, 
                "      / x  +     / x +  /  = 0 " -> 4408, 
                "    x  +     / x +    /    = 0 " -> 4409, 
                "    x  +     / x +    /  = 0 " -> 4410, 
                "    x  -    / x +    /  = 0 " -> 4411, 
                "    x  +    / x -    /  = 0 " -> 4412, 
                "    x  +    / x +    /  = 0 " -> 4413, 
                "    x  -    / x -  /  = 0 " -> 4414, 
                "    x  -    / x +  /  = 0 " -> 4415, 
                "    x  +    / x -  /  = 0 " -> 4416, 
                "    x  +  / x -  /  = 0 " -> 4417, "    x  -  / x + 0 = 0 " -> 
                4418, "    x  +  / x + 0 = 0 " -> 4419, 
                "      / x  -    / x + 12 = 0 " -> 4420, 
                "    x  + x - 12 = 0 " -> 4421, "    x  + x + 12 = 0 " -> 
                4422, "    x  + x - 132 = 0 " -> 4423, 
                "      / x  -     / x + 2 = 0 " -> 4424, 
                "    x  -    / x + 2 = 0 " -> 4425, "    x  - x - 20 = 0 " -> 
                4426, "       / x  +     / x - 24 = 0 " -> 4427, 
                "    x  -    / x + 3 = 0 " -> 4428, 
                "      / x  - x + 36 = 0 " -> 4429, 
                "        / x  +    / x - 4 = 0 " -> 4430, 
                "    x  -    / x + 4 = 0 " -> 4431, "    x  + x - 42 = 0 " -> 
                4432, "    x  - x - 56 = 0 " -> 4433, 
                "      / x  -    / x + 6 = 0 " -> 4434, 
                "     / x  -    /  x - 64 = 0 " -> 4435, 
                "    x  + x - 72 = 0 " -> 4436, 
                "        / x  -  / x + 8 = 0 " -> 4437, 
                "    - x  +  / x + 8 = 0 " -> 4438, 
                "    - x  +    / x - 9 = 0 " -> 4439, "    x  - x - 90 = 0 " -> 
                4440, "    x  + x - 90 = 0 " -> 4441, 
                "      / x =   / y +  / " -> 4442, "      / x + y =  / " -> 
                4443, "      / x + y =     / " -> 4444, 
                "     / x -  / y =     / " -> 4445, 
                "     / x +  / y =     / " -> 4446, 
                "     / x -  / y =    /   " -> 4447, "     / x - y =   / " -> 
                4448, "     / x - y =    / " -> 4449, "     / x + y =    / " -> 
                4450, "     / x - y =     /   " -> 4451, 
                "    - x +  / y =  / " -> 4452, "    - x +  / y =    / " -> 
                4453, "    - x + y =    / " -> 4454, "    - x - y =     / " -> 
                4455, "    x =   / y -  / " -> 4456, "    x -  / y =    / " -> 
                4457, "    x +  / y =    / " -> 4458, "    x -  / y =     / " -> 
                4459, "    x -  / y =     /   " -> 4460, 
                "    x +  / y =     /   " -> 4461, "    x = - y -    / " -> 
                4462, "    x = y +    / " -> 4463, "      - x + y = 0 " -> 
                4464, "      x = y + 0 " -> 4465, "      x = - y - 1 " -> 
                4466, "\n\n      x + y = 10 " -> 4467, "     / x + y = - 10" -> 
                4468, "    x +  / y = 10" -> 4469, "      x - y = 11 " -> 
                4470, "    x = - y - 12" -> 4471, "    x - y = 12" -> 4472, 
                "    x + y = 13" -> 4473, "    x - y = - 15" -> 4474, 
                "    x + y = 15" -> 4475, "      - x - y = - 2 " -> 4476, 
                "     / x -  / y = - 2" -> 4477, "     / x + y = - 2" -> 4478,
                 "      x - y = - 2 " -> 4479, "    x =   / y + 2" -> 4480, 
                "    x + y = 2" -> 4481, "    x + y = - 3" -> 4482, 
                "    x = y - 3" -> 4483, "      x = - y + 4 " -> 4484, 
                "      x = y + 4 " -> 4485, "    x = - y - 4" -> 4486, 
                "    x + y = 4" -> 4487, "      - x - y = - 5 " -> 4488, 
                "      x = - y - 5 " -> 4489, "    - x - y = - 5" -> 4490, 
                "      x - y = - 5 " -> 4491, "     / x + y = - 7" -> 4492, 
                "      x + y = 7 " -> 4493, "    x -  / y = - 7" -> 4494, 
                "    x - y = - 8" -> 4495, "    x + y = 9" -> 4496, 
                "    x = y - 9" -> 4497, "      y = 2x + 1 " -> 4498, 
                "    y = - 2x - 12" -> 4499, "      y = 2x - 18 " -> 4500, 
                "    y + 2x = - 18" -> 4501, "     / y - 2x = 19" -> 4502, 
                "      y = - 2x + 19 " -> 4503, "    y = - 2x + 19" -> 4504, 
                "    y = 2x + 28" -> 4505, "     / y + 3x =   / " -> 4506, 
                "     / y + 3x =    / " -> 4507, "     / y + 3x =     / " -> 
                4508, "    y = 3x +    / " -> 4509, "    y = - 3x + 13" -> 
                4510, "    y + 3x = 14" -> 4511, "    y + 3x = 18" -> 4512, 
                "      y = 3x + 23 " -> 4513, "      y + 3x = 24 " -> 4514, 
                "    y = - 3x - 3" -> 4515, "    y + 3x = 8" -> 4516, 
                "      y = - 4x - 15 " -> 4517, "    y = - 4x + 20" -> 4518, 
                "    y = - 4x + 25" -> 4519, "      y = 4x - 29 " -> 4520, 
                "    y = 4x - 32" -> 4521, "    y + 4x = 36" -> 4522, 
                "    y = - 4x - 4" -> 4523, "    - y + 4x = - 46" -> 4524, 
                "    y = 4x +     /5" -> 4525, "      y = 4x - 6 " -> 4526, 
                "    y = 5x +  / " -> 4527, "      y = 5x - 10 " -> 4528, 
                "      y = 5x + 10 " -> 4529, "      y = - 5x - 17 " -> 4530, 
                "      y = - 5x - 18 " -> 4531, "    y - 5x = 22" -> 4532, 
                "    y = 5x - 23" -> 4533, "    y = - 5x + 25" -> 4534, 
                "    y = - 5x + 27" -> 4535, "    y = 5x + 3" -> 4536, 
                "    y - 5x = - 38" -> 4537, "      y = - 5x - 44 " -> 4538, 
                "      y = 5x + 5 " -> 4539, "    y = - 5x - 9" -> 4540, 
                "    y =  / x +    / " -> 4541, "      y = - x - 12 " -> 4542,
                 "    y = x - 12" -> 4543, "      y = - x - 2 " -> 4544, 
                "      y = - x + 2 " -> 4545, "    y = - x - 2" -> 4546, 
                "    y - x = 2" -> 4547, "      y = - x + 4 " -> 4548, 
                "      y = - x + 8 " -> 4549, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][1, 2], "?"]}] -> 4550, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][1, 3], "?"]}] -> 4551, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][1, 4], "?"]}] -> 4552, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][1, 5], "?"]}] -> 4553, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][1, 6], "?"]}] -> 4554, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][1, 7], "?"]}] -> 4555, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][2, 1], "?"]}] -> 4556, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][2, 2], "?"]}] -> 4557, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][2, 3], "?"]}] -> 4558, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][2, 4], "?"]}] -> 4559, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][2, 5], "?"]}] -> 4560, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][2, 6], "?"]}] -> 4561, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][2, 7], "?"]}] -> 4562, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][2, 8], "?"]}] -> 4563, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][2, 9], "?"]}] -> 4564, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][3, 1], "?"]}] -> 4565, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][3, 2], "?"]}] -> 4566, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][3, 3], "?"]}] -> 4567, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][3, 4], "?"]}] -> 4568, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][3, 5], "?"]}] -> 4569, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][3, 6], "?"]}] -> 4570, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][3, 7], "?"]}] -> 4571, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][3, 8], "?"]}] -> 4572, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][3, 9], "?"]}] -> 4573, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][4, 1], "?"]}] -> 4574, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][4, 2], "?"]}] -> 4575, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][4, 3], "?"]}] -> 4576, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][4, 4], "?"]}] -> 4577, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][4, 5], "?"]}] -> 4578, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][4, 6], "?"]}] -> 4579, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][4, 7], "?"]}] -> 4580, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][4, 8], "?"]}] -> 4581, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][4, 9], "?"]}] -> 4582, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][5, 1], "?"]}] -> 4583, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][5, 2], "?"]}] -> 4584, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][5, 3], "?"]}] -> 4585, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][5, 4], "?"]}] -> 4586, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][5, 5], "?"]}] -> 4587, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][5, 6], "?"]}] -> 4588, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][5, 7], "?"]}] -> 4589, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][5, 8], "?"]}] -> 4590, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][5, 9], "?"]}] -> 4591, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][6, 1], "?"]}] -> 4592, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][6, 2], "?"]}] -> 4593, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][6, 3], "?"]}] -> 4594, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][6, 4], "?"]}] -> 4595, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][6, 5], "?"]}] -> 4596, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][6, 6], "?"]}] -> 4597, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][6, 7], "?"]}] -> 4598, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][6, 8], "?"]}] -> 4599, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][6, 9], "?"]}] -> 4600, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][7, 1], "?"]}] -> 4601, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][7, 2], "?"]}] -> 4602, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][7, 3], "?"]}] -> 4603, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][7, 4], "?"]}] -> 4604, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][7, 5], "?"]}] -> 4605, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][7, 6], "?"]}] -> 4606, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][7, 7], "?"]}] -> 4607, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][7, 8], "?"]}] -> 4608, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][7, 9], "?"]}] -> 4609, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][8, 2], "?"]}] -> 4610, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][8, 3], "?"]}] -> 4611, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][8, 4], "?"]}] -> 4612, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][8, 5], "?"]}] -> 4613, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][8, 6], "?"]}] -> 4614, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][8, 7], "?"]}] -> 4615, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][9, 2], "?"]}] -> 4616, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][9, 3], "?"]}] -> 4617, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][9, 4], "?"]}] -> 4618, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][9, 5], "?"]}] -> 4619, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][9, 6], "?"]}] -> 4620, Row[{
                   HoldForm[Equal][
                    HoldForm[Plus][9, 7], "?"]}] -> 4621, 
                Row[{"What is ", 1, " plus ", 2, "?"}] -> 4622, 
                Row[{"What is ", 1, " plus ", 3, "?"}] -> 4623, 
                Row[{"What is ", 1, " plus ", 4, "?"}] -> 4624, 
                Row[{"What is ", 1, " plus ", 5, "?"}] -> 4625, 
                Row[{"What is ", 1, " plus ", 6, "?"}] -> 4626, 
                Row[{"What is ", 1, " plus ", 7, "?"}] -> 4627, 
                Row[{"What is ", 2, " plus ", 1, "?"}] -> 4628, 
                Row[{"What is ", 2, " plus ", 2, "?"}] -> 4629, 
                Row[{"What is ", 2, " plus ", 3, "?"}] -> 4630, 
                Row[{"What is ", 2, " plus ", 4, "?"}] -> 4631, 
                Row[{"What is ", 2, " plus ", 5, "?"}] -> 4632, 
                Row[{"What is ", 2, " plus ", 6, "?"}] -> 4633, 
                Row[{"What is ", 2, " plus ", 7, "?"}] -> 4634, 
                Row[{"What is ", 2, " plus ", 8, "?"}] -> 4635, 
                Row[{"What is ", 2, " plus ", 9, "?"}] -> 4636, 
                Row[{"What is ", 3, " plus ", 1, "?"}] -> 4637, 
                Row[{"What is ", 3, " plus ", 2, "?"}] -> 4638, 
                Row[{"What is ", 3, " plus ", 3, "?"}] -> 4639, 
                Row[{"What is ", 3, " plus ", 4, "?"}] -> 4640, 
                Row[{"What is ", 3, " plus ", 5, "?"}] -> 4641, 
                Row[{"What is ", 3, " plus ", 6, "?"}] -> 4642, 
                Row[{"What is ", 3, " plus ", 7, "?"}] -> 4643, 
                Row[{"What is ", 3, " plus ", 8, "?"}] -> 4644, 
                Row[{"What is ", 3, " plus ", 9, "?"}] -> 4645, 
                Row[{"What is ", 4, " plus ", 1, "?"}] -> 4646, 
                Row[{"What is ", 4, " plus ", 2, "?"}] -> 4647, 
                Row[{"What is ", 4, " plus ", 3, "?"}] -> 4648, 
                Row[{"What is ", 4, " plus ", 4, "?"}] -> 4649, 
                Row[{"What is ", 4, " plus ", 5, "?"}] -> 4650, 
                Row[{"What is ", 4, " plus ", 6, "?"}] -> 4651, 
                Row[{"What is ", 4, " plus ", 7, "?"}] -> 4652, 
                Row[{"What is ", 4, " plus ", 8, "?"}] -> 4653, 
                Row[{"What is ", 4, " plus ", 9, "?"}] -> 4654, 
                Row[{"What is ", 5, " plus ", 1, "?"}] -> 4655, 
                Row[{"What is ", 5, " plus ", 2, "?"}] -> 4656, 
                Row[{"What is ", 5, " plus ", 3, "?"}] -> 4657, 
                Row[{"What is ", 5, " plus ", 4, "?"}] -> 4658, 
                Row[{"What is ", 5, " plus ", 5, "?"}] -> 4659, 
                Row[{"What is ", 5, " plus ", 6, "?"}] -> 4660, 
                Row[{"What is ", 5, " plus ", 7, "?"}] -> 4661, 
                Row[{"What is ", 5, " plus ", 8, "?"}] -> 4662, 
                Row[{"What is ", 5, " plus ", 9, "?"}] -> 4663, 
                Row[{"What is ", 6, " plus ", 1, "?"}] -> 4664, 
                Row[{"What is ", 6, " plus ", 2, "?"}] -> 4665, 
                Row[{"What is ", 6, " plus ", 3, "?"}] -> 4666, 
                Row[{"What is ", 6, " plus ", 4, "?"}] -> 4667, 
                Row[{"What is ", 6, " plus ", 5, "?"}] -> 4668, 
                Row[{"What is ", 6, " plus ", 6, "?"}] -> 4669, 
                Row[{"What is ", 6, " plus ", 7, "?"}] -> 4670, 
                Row[{"What is ", 6, " plus ", 8, "?"}] -> 4671, 
                Row[{"What is ", 6, " plus ", 9, "?"}] -> 4672, 
                Row[{"What is ", 7, " plus ", 1, "?"}] -> 4673, 
                Row[{"What is ", 7, " plus ", 2, "?"}] -> 4674, 
                Row[{"What is ", 7, " plus ", 3, "?"}] -> 4675, 
                Row[{"What is ", 7, " plus ", 4, "?"}] -> 4676, 
                Row[{"What is ", 7, " plus ", 5, "?"}] -> 4677, 
                Row[{"What is ", 7, " plus ", 6, "?"}] -> 4678, 
                Row[{"What is ", 7, " plus ", 7, "?"}] -> 4679, 
                Row[{"What is ", 7, " plus ", 8, "?"}] -> 4680, 
                Row[{"What is ", 7, " plus ", 9, "?"}] -> 4681, 
                Row[{"What is ", 8, " plus ", 2, "?"}] -> 4682, 
                Row[{"What is ", 8, " plus ", 3, "?"}] -> 4683, 
                Row[{"What is ", 8, " plus ", 4, "?"}] -> 4684, 
                Row[{"What is ", 8, " plus ", 5, "?"}] -> 4685, 
                Row[{"What is ", 8, " plus ", 6, "?"}] -> 4686, 
                Row[{"What is ", 8, " plus ", 7, "?"}] -> 4687, 
                Row[{"What is ", 9, " plus ", 2, "?"}] -> 4688, 
                Row[{"What is ", 9, " plus ", 3, "?"}] -> 4689, 
                Row[{"What is ", 9, " plus ", 4, "?"}] -> 4690, 
                Row[{"What is ", 9, " plus ", 5, "?"}] -> 4691, 
                Row[{"What is ", 9, " plus ", 6, "?"}] -> 4692, 
                Row[{"What is ", 9, " plus ", 7, "?"}] -> 
                4693, ("Failure" -> 
                 "The API could not be evaluated because the following fields \
contain failures: \"HowMany\".") -> 
                4694, ("Fields" -> {
                  "ProblemType" -> {
                    "AllowedExtensions" -> {"json"}, "AutoSubmitting" -> 
                    False, "CodeLanguage" -> "Automatic", "Default" -> Null, 
                    "Enabled" -> True, "Failure" -> Null, "Help" -> Null, 
                    "Hidden" -> False, "Hint" -> Null, "Input" -> 
                    "CalculusSummary", "Interpreter" -> "String", "Label" -> 
                    "ProblemType", "Required" -> True, "Type" -> "Element"}, 
                   "HowMany" -> {
                    "AllowedExtensions" -> {"json"}, "AutoSubmitting" -> 
                    False, "CodeLanguage" -> "Automatic", "Default" -> Null, 
                    "Enabled" -> True, "Failure" -> 
                    "Enter a number between 1 and 100.", "Help" -> Null, 
                    "Hidden" -> False, "Hint" -> Null, "Input" -> "2000", 
                    "Interpreter" -> "Restricted[\"Integer\", {1, 100}]", 
                    "Label" -> "HowMany", "Required" -> True, "Type" -> 
                    "Element"}, 
                   "Difficulty" -> {
                    "AllowedExtensions" -> {"json"}, "AutoSubmitting" -> 
                    False, "CodeLanguage" -> "Automatic", "Default" -> Null, 
                    "Enabled" -> True, "Failure" -> Null, "Help" -> Null, 
                    "Hidden" -> False, "Hint" -> Null, "Input" -> "Beginner", 
                    "Interpreter" -> "String", "Label" -> "Difficulty", 
                    "Required" -> True, "Type" -> "Element"}, 
                   "SimpleOrFull" -> {
                    "AllowedExtensions" -> {"json"}, "AutoSubmitting" -> 
                    False, "CodeLanguage" -> "Automatic", "Default" -> Null, 
                    "Enabled" -> True, "Failure" -> Null, "Help" -> Null, 
                    "Hidden" -> False, "Hint" -> Null, "Input" -> "Simple", 
                    "Interpreter" -> "String", "Label" -> "SimpleOrFull", 
                    "Required" -> True, "Type" -> "Element"}}) -> 
                4695, ("Success" -> False) -> 4696]}, "Output" -> 
             Association[
              "f1" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> CompressedData["
1:eJx0nXVUF23w9tduRcWutRMVFRADV7EVGzvWwkDFxNY1MBBFwcJcQUXBBrtW
xUBsLMy1uwMT398zH95/3njOeQ4H+X437p175pprrpkt2c+vw8B0iqKk+Z//
u+VRlJzK//Wf8X/8/P/9+//59//ff/+v49hR4W+P/89PtVatTQ3++7cWrR7/
97t+9efd/343J+a88t/vmm/okf9+V7fW3C1/b3J1838/jReTd/737/aDNBv/
+2m5J5z679+tlnOe/fe7NjtGPqdoFRLkeOXSHpLjJTSNk+998r0nPx+PiJHr
2Ftxr3x/0I9EOV/RRnFyvklP5DqtBSmx//274vvpxH+/m+FHzP9+2pWzXZTz
vTj4RD5fr7Qp36+e7br8Pr3ZWTlv3UD5vKp/OSTHGZ9gyHUdmHFG7r/BvOXy
+8bwY/L7whlyH8amqEdynX7Oa+R7zxazLvf9nsvv658dlfNVnZQk69DA5bD8
zJThgdz/m9/bZL0mt5Lr1uzlsp5aRa2eHD9Ni/3y/fCr+/l7gXFynQPfXZXj
RC5JkvsvNPiMHK9umWPye9E4+Z61o9Uzuc+k0VFyvELR8jnLsbVcp1Ip4o58
Lvuwe/K5Gx8Xyu9Dyh6Rv08/dlvur8pIWSez2PFIua/9BRNlff1Xyt/Nmo0v
yvUVrndC/v77xm35fo4BYi/GDfdt8rm91Q7K53bNPy73/Xq13Jdl9JbP6aU7
yPXoGRtekfP675LjafuiLDnuh2by/IyJX+R3a8CWZfKzVcRyuf5uYY9Y/4Zi
H8aUu/Kc7RIl5LmqZafckH8/FZ4g583a+oL8Pi6AdezW8qYcf20JW45XvI3Y
px3hKetm700n625G3YmRz1nr9sp15Z12X66jyJ7L8vcOLeRzSobmkbIOHfOe
l/XLUFTW3WwQfVPOe7sN17VQWSL/7vn4mvx7oQYH5Pi1B8k6WulfH5Xzqz3O
yvHXLcaeRuc+J9/7bYyQ7zleeij2YQy9Lsc9VhW7apRyQI7jlCT/bn99wnm+
DZL1UWML8tO/pCXHi2x+UD6XMFR+qo5zZd8ZX4Nlne3oCLkuQx0q169tGSJ2
qwypg930e8w+7/ZV1s24NJZ9MSX8lhynZcldcvzbG+R8Rs5kOb8Za8o+tdZm
knUz6y0Su9Dinsn57e67xI/os96KXdhRF7Zz/T6pdv1E7Nw+ELBV7ChDT1kn
M3murL+dVBm/FPpQ7FaN/yz70Gxf77R8f0iNa3K+dWW6yXUObST7X9vREb/T
q+ksuc/Xo9bKdSzbi39JSZHnbTTwkes3nJ+OlX8vMyJK1qPCwhtyHREXZf/b
iU9lv+hVFj6Vfy97Q+zGrnh4p6xTx0zyfLQnDgdYB6dLcv7W32W9NKcsq+X+
vvzD3sbck3U344edls+lqX9S/j42ROzGfJxT7NPMsu+qnLfDetkfVl8XsR/1
XYT4WSv3I3k+2l9/uR/1TX6eZ4GT8vz0/oHyvK3TS8Su7HUXm8r19Ny+Vf4+
c5g8H2X3QvEP1oOKHH/TWbl+M9uaeDl+jvxyHjU2t+w75aw3+y6lDffb3O2h
nKfC0ctynuO35LrV7TdPyt8LOa6Tvx/7LnFD/Z3pgdzv2STsIn2BW3LcSv3l
+ParHOzfkv7i15XI6rL/tWW5sdsTs8We9THjZL8rDYNkvdSKuUbL+R7sF7+k
fG15kOM+Y38d9IplX8eJPzKyXRY7M2a9Fzu0ag3Cbx19J/FLCeizWb5XvafE
Dcs1+yn56dDlklzfdl/5vN0iBXvOuF/W3/gVKcdVV86Jl59eJeSnkfaz+DN9
UD+OY7+R85iNGsh+Mo4cFT+iLhkm8dEOzCDrpb9+sFg+tyqLPHd9ygqeX8+r
sm5qwZXs05VTsKf64zbI+o6sEyK/z62E/7uWtEauu0wv+b7Rv7LEHSXdF/z+
wHfEK7/JGvumj/hV9Ul3nqfyWM6nLxywS372OS77TV36Y7Fcb1zFJWI3J8/I
/lQ/l94tx+2ui5+3c+wS/280myh/N8e/Py/fS5OJOPMzRc5jPS+xT46/+thd
+dyL1mKnhn5P4o950TVMru92z/tyngURIfL3yGuyD80Pw+R5andPiB0rhyrI
cWwvF/HH2rVX8ry0Of3luVi7hr6Q77sHiF3bVQ2Jw8aVrG3lfvIliL1qm5Lk
/OrOaWLnVuzw0XL/eSr0kPPs8sLv5Wslx9HyHZfnal2qKf7LCp0jcdW4O03i
iaVtkuOYlRNkXbUbmuAVre9peY5a8GhZD+O7IuthZ+rDv/fIJeuq778v+0Xz
frhJjldnj/hDvUwLwQdaum3y/Mx7E8AxEWfE3uynLcRfq8WWSjy0A8J4nrnm
y3Uqrn3FXxqbZ4i9quFNBBeqwfGyj+3kNsGyPw5WFFyg76hGXNzXlDjf5Zrc
p2JUFPvQj6yS562VGo9dPN7C+hXqIvtEKT5BrsNq28xDPrc7M/70XwO5D6NA
jNiPMnCB/Ltq114hz6VN7HM5/5Il4r/0lDCJL9Z+d9YhIq/sJ/3tMvm7GVBG
1k8ZegecFdWU5+LqKH7EyFkxSI7rMlJwi/1xmzx3c392/PWMe7IeSmFHW753
yl1wrzHzsuxntXquPvL7YA/xo0aOreJ3jJ6KrLdV+5DEUb1uvwj5ea2CPB+j
4nz5aW/czPqcaM7vfYY9lvOHdJ/HPr+zRY7Xfjpxr0EW2T/q1K5iP/bXc/jr
2Y/AMSVazZTPB3ztIb8Prv5U1nVljOBOu0qCrLvmNUr2i/7xIvjFyhMox01Z
LMdTr0WJ31QmR8g+UgZc4vqGHgmX69vwBnyxIMxbrrPKSHm+xu5E/OOI9k/k
PK3Sy/Ozv02VfWJGN5Dnr/0pgz8POImf8Hon96s4NCEelGsk+8BcXFT8mL2t
Dfj391H8T6Zugj/1H7eJ6wfGCq4ySoaQp3RrJetkfvDG37T1krikVMgh+1Qf
fW6f/H2PI3F7Q0fsPk9twSN6p2PY58mGEleN3A/kOs1GL2Qfm4Htic/5Gy6S
+/R8TJ6VZoY8fyWpqPgvbcdE/HTDDMTRgx3EDyt1zoM3Tr0h7o4dx/O8Xht7
D/ki9qmP2C3PQ9FGy3PQ+n4n/jW+IrhGzf1Y8I5+inW1J0eSN0RlIv/6Rx5h
9+8peY51cxy40qkufnZg+gty/iKt9sg6Zfgs8d0o03mdnG/oMPZLVz/ymXX+
4NmpC8Suzbg9HLfgJllPpdth4mTzeEOOU3yv+Bmly3vyrBO3sKfxlcFXrscl
bmvr8o6XvxfqSH4y+6nsW6NcnOAv4/tauW5r09A9sj4OK2V9zYmdwK2uZeS5
ml+rgfcar10v35vjKX5UueAmcU9PP132u10yFnzuGP1O/r5poNifNX4b9rXE
lH1plLopOESPryV4TXPo/gC73yo4T2+SETtc7yvXZQzQwFOev2W/GZ5x2Hnr
Tevl+FkSJD9Ta0wir5ucT9bdKF1SnrP+c/hauY/Vo1LjxTZZd219TvFnWkA0
9pPcTfaHcsxtsnxuaTvy6qSMd+S8aTXBE2rhYP593wbJE7QG88DFMe/myPmq
hQsvYN26KfZnPftB/F/VhDyv/gNZJyOkq8QR3cuUdbBHXSdu372Cv987vq+c
Z2dO8FDmNrIP9CP9icN9kuTz9sDKso/NO9MlDttOL8ROtZnPiCt7QsSOrXRh
5NlOGbDf6TWJs698iOfjDoL7XcfI95UTXXfI79M2yX2aDXtIvLT71JO8WP3V
mXy3WblwOb76T/y3Eh0kz8uaVm66XPcxP7EX83hD+b4a6YA/KNpVfmqOB9jf
q57IvtAaXmZ/huaS/azNbMz1D5kAnowexvrfIa/SDtSSz1tVaondKDGW2LtV
3RueZf56wSV6hTfy3G2jk+Az42HrAbIOAU5yvdpiFbup/3mV/CxZmHx97tEY
9tFS9kGdz3JdelKA/F199kviiT02r+AD3dWE//nyG1yarzt+p5sz/vDrGeJF
2vHR8r1x4eKv9C01hAcyR9wHxzeJELtSa94XXGf0Pcz+8Ugr+bs19YfgImVy
efzml9XiD/Ur4yQPVZqdEbtV5xdgv4UEyjrZS9/LczNPXBb/rhxuyXPJlI74
7e4uf1fj7t7i+t3BO761iaPvnwge0B4VmiE/n6UXnkgvtVF4M+v0POJmgyaC
X6x/pwVvmyd/C95QSkSJ37e+XyPPaVtOrtuY7LhRfnbcS541OgXe5dhByfe0
NkvIl/KX4fd83cljShQQHGLX+iH701rvuV3+nre82LNdz8tfnm+vJLF7NWch
4s3AN2IvaqvbYrf6yjCuv4GzPGelURnBB4rrCdlX5pY+5AF5Jq6Uz2Vagl8a
FCbH02p+h09oXwW+ZFY74lPVaeBt/9vs73zZJQ8yRkayzuHwPmpALcnflfvv
wUHxrcXO7HyO8HbzO7Kvxt6GlxpRg+OdvbxD1q3FMPx8h6LEkwoavEb7r/K8
7NF/Z8vvG2bjb7qvZF/f3AneGZ3Ceg62yaOqbRH/a0bVBKeN5HtaWV/25bDJ
si/0O3dlv2gOCv6sfGH4p8h38hzMHEvB2UXCxU+oY3aKPRhNfsCb1i8g/ITp
svsi6zNT8IZ54K7kjVoOb7Ffe1h1iRPaQfJ0s9Fmwcv2jQjxX/rsUvBRc7LL
efWeBSQ+GbGJY+Q4XceK3Vg1vgkuNUtMkP1ke/8WvKtPKyTrZ7b8Lnak5bxC
nDsTLHmj4V6P/Nmajl9Jf1aeu7JoLPvStbTEZXXTEfKAcb+wm/KlZN2sfWvw
F9eOwru02LdUPufVEdwffEKOa233kOdg/j7AuucYSjy5fX6BnK97sORd6uAK
rEvupcK7mK1ugH/ONpPzG3vzhMrzbHmJuBaQIrhEGx9Nvl71qti3Pfa+/DSv
/JTz2ZfPgh9a+Mvx1AkR8MXnlhyW7xWOh9e881jWS681R/a/MbO4XLc10wbf
tfIRv2Wu6SA4Q0l3Xngea8AasUvFLgYfdm8hdn0r3Tk5Tot/3L9zIv5tb3/i
1ZJoiYNqxGTh/cw8q+GTqxcRP2VoyfA3iQb4vN92iS/29G7wYn9nyj4xEzLL
fVi55mJnX1uDJ46rsk/1373FnuyPMfjPBpPEL2jXZsq/G1cuyXO3R72Ah7kQ
J37bqv7N4D4ywrMlppX6gZJ0Fb9f8PUY+bnNc6Icx20b+2tuI/LhE68krluH
ojlv2roS3+wPXeCXBvQgT89RGv+RdEHwnJW4Hz83Jpc8X+twoWg5ToZ2Elet
0ffgCerNkvVWM5UVu1HC2lLvcOsp57EKJJJnhUSIfekpFeQ+1Vbbw+T7a4/w
/F/uEH/1P/5gqZzXbaTkA8ZJcLF6c63gNM1Pk/syAhvDn11bQFxL0wZ+7sNk
uS81f0aJX2bPvvL81YruqflzH8G/6vJqYpdGwECxQyPrm9VyfxNaE5/avwbP
dZrC9ec9IXFNL7Kc/VC243G5zi+NqQf8DJI83+76QK7P3tkYe9taf6Ic36Ey
+6rkBfjxGrVk3Yxp47DXR53hBc6fIo9d/Yj8rOF0iVvGx6c8t3NJcl71arD4
EavWVDmuGj5f8mG72BT4vkJ/xA9bru7wraYl62UkfCNeu+wGL9ZcLPmfveyL
7B/1XVP8yO75cv32qvXgzNAvkmeYr3LIvraeVAaHvLxH3H7uKv5XCbiFPS9p
DM5v/1Xijq1NAT8u3Eu+s/W08LtqLQX+yPcXOPBPX+xy5wOJA1bdWHDImp5y
H1roa/zxrR/UkY4vxM+P9xLe3857nHVx9xP7NftNEZxmn2ovdmDV2zBfjj9m
OPnAp17Elzn7iD9eg8UfGseOYH/pG4KfTseJvzQC5sMnJvYF1/Y/wP1cLkn8
yToB+ztUg3i6Yqw8D71MI9nXincsOGnnT/jEedGSh6nFHcBzpwdKfDFrdYuQ
fzf9yasf1QJPLugN/1JvHfigrU4dzdNH7k/32CX+SDenC8+ozi0lvLlaEn5A
m11Xrs92aC/3Zy0MIs87eFueszYoK/FhV2vxk9pp9qVWKZc8R+37OXDlypdi
9+aV04K3lFHHBN+YD/i8fqEvfnzWMOFhlI835blpdcrDs968An/xKYfgW/VV
Eepg65dQn3mzAHy5drjsP/NtbupQpTWJw8abwhL/jC47BM/aFUvwPOpfE/s0
nApR74gNE7u2/oF3jJiuEpcVn6/wtWfWij3oVi+eg9cDsQMl3B+7j2kvcU77
cJH9GVcVXunrEYkbVro21AnP/pDnbY9LkutSE4vC/8b6y/PSJ75kf21rDf5z
DhR8r6bklZ/m4rZy/dZlH/IPt9R9pSSQT/qVk+etjxgG3xsbCb+weQtxsOhK
8pA4U/aJXu0reHUPdS2rxmnxI3rpqoKH1Budn7NPnsh9a7M+wrsoBbHPou4n
sPP3cl/Kh21yX/9zIvzlzQvw9nkryPor6SfBd31Lwg5bf5D7taf2EP+uh/QX
Hlj3vAmf3e0FdelJ52Xfmw1Oiv+yMvsIf6y6rZXnreYLBheNaCq4R7t34hx2
WFd4bePRGOyy3A14zeO/Jf4p+SZTp7ndBZxyMyP5aJaM8COFJsq+NG9MFn9q
Np1H3TehuNi3ffggfN9CT/zvydnEz4xHBT/q07qLn7Ar7YevqHwGPD3RS9bP
vvdS7NyqFIFf6hHHc8x+m/MM8KX+9Xk0eWuWm9hZyn7seuIC8Uvq9FjBI3r5
RcSlck9lfyqZvCXfMeblkPzS2nmW9fCtkGp/bsTTYWnAHw6m3JeVJp3kW+oq
L+qnK/4S1/e+kOejpguWfWmcuwBudDzMc1gTJM/dmnlO6vt6zdZyXdbKQZJ3
qv7L4au2DxM+Ui0/a4bcz96s8OfT+oCLCiRKXDGK1sefO7SkXp3NU/JPu+Q8
4vWlfPCWOSoTZ2v6sm+CWoh/UCe7yXPUYxzgCRvOor6gRQk/ZO6vJHhNbwG/
aTerSh1qZUWxAzU4SdZR7zBR7NMuSB6l5etDfnTxPnjXJwc6jXQb8JOLP+Df
nrQWO7N/xeOfOnvCOz7LAO7PmlmOr3UvIPmpvToKXmzoHMH9yq4SwtNrSg/4
pD8DJN7rjuHg5Z/+2F/3z+C4utSR9ao98JNNV1AHeXYTHNtpjuA0+3cVeIrH
h8l/p65fJec9MkzyBHt/U/g6B5V12+s3TP4+JaM8H6vNZblve0Nj8QdGnj3g
TKsudl48XHhrM3TASvl7cpj4K+X2ffKJy57gpVuVhUc0rKnwykm97mJ3K9nH
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
J9nXv/cSB/cMkjqEnfJK6tt6t2ziH5UXBUbK/bSriF6+6Er4X78j5D8n78i+
sMObw4c4hBIvg7zRGV6+IPerLhqIXmTVBuEBTe9y8OQJ6KCNKj/QV86pK+ts
N+tD/uMXiz+9iy5InzRkkvz+5yf27j2aesC1jOg/Qj5JHDNqv5F8VQ95DH9y
/Sr6xKvwadqaJuDT6KXgsO4Kuqg22cmvds6FP2s9dKH8+6JZ5H9JCfBpkc3R
cRaiP0NdMVh4VWtMFPe9oKTEEd1tsPA09nV/+MC4IPjDHJeogy0IBc94l4bn
HvYDPHHaAdzQY4a7XOffYuTTp9rBZ2UfT75xPBgc8m81vNrbZthzUA6JM/bL
aPKVPk/EHtSoJf3leIuqCi+rtnyKn47exL7eMIR1HxAi+8V61Ai9g8cCsWMt
7Xv8orEV/cfFRcKj6HvRzWpXg9FdDl3MOmb7JnVAc12kXL+y9xI4x30C8edZ
EDg7TXniyVULnYX7UTmetaIez/nBX/GjWkYP+qlmLBQ7NI9kZr9P+CI4QTu/
lDhacTP+zicDuKRAJ/RXix3Yx81fYkfpxguvYpROFv9kzs+FXynWEF1jNLyN
0vKm8GNWLw9w55J1+M+SP6jrlB4jfYNaVAbw9bj54KDOw9HtLnuOjqoTdU9j
RiD28W8QcWFGHDycPkT6DfUDwwS/K7VN6u2z4Mf1QfXAqclpqMf6TATHFZnF
72WGgqOPOVNfOHYVnNOtPv2P6dyoI2R+TV9PfLjgKT0wK/XX1a+Eh7XTDwMv
x30Wu9cHD+B5u26R/FI904F4saaPPA/lxgv0NLd/gp/2ZkG/+T0XfQ4/24te
1co4Q65Hm1WdelSOi+Aa12q3WO9e6KAHbqI/o/IeeO9MdSSO6HoxeP1vKueP
Ia82inaHJ/r7iX6aMYXoIxozHbuqVxpeRzkqeEJpPop8u1BqHJvrT/7125J9
Yn5dQh224nR41es/6Pe53Jz8fUIHwXVmwxjqsfmS6R/87E7/xImd2PupGPiE
8AH4+eQW8Inhd/D3We4Jj6NVdGHf73Imj3v6Xvaf8sgX3caTq5JHKvc30p8Z
mAfeN3Kp4FPt8RBZF7v6LonnZmAycTZwBjqT3Ivp06owlvr6zePoCrounyPf
v2XTV/UxEd7VpyW4885i8sE/X6k/d1I57pYr9Hv2bweenqJTz67cAb53dSP6
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
5m/6yE2tOEc9W5Bn5IvUn97l1GcJ+I7JS/uQ905dB+d7g2+3ZoUzvIT9Q+Zv
x8ymn5txFN/HC3NFvJJrTWOuxtMRPZW9I+9hQjT9zUn8KbUHo9D9jGoA39l2
C+esexC6q3XTqYdGKcV90jxuJu6rtqslOplM9hVobU3gA59NBP/tfpk4l3RK
4DKanvQlSvu/+KFXVjB/8PA28zI/H7CHe/IOd/F9WvzHe65xGX1xbU/6kcwc
eK9hLznnelXA8W03oBdSZIv4IHU/yhz+1NHsdVl4mH8e2YS/3em24OYbXDgX
/hLvze0bczmF+uBDefhaq14uYs+X6QNxX6Vec9lLPEpJvSb54INSq4r48+qw
70l8X+Y0NDOD0VlmhDDX+rmpOK+qvUn063OoC6S+ZtSvZ6pyjxrcRBe27Bn1
y15T7v3mzbzXLvbMO6aVok9c0YO+9NMiEZ81YR3Icz3fMCfcvg48zrGf8N3J
ddE39R9H/sr6Dl5TZzn3NXwPes/jFfTv9ugg1E0L0NU/c6Eu+KmLj6ujiatT
X7Pnb9BNcGGTmuC5OVfQaXvtpi4MQaej3nCGOY+XR8W50OrBQ8hDNuHPcjmb
89plMHMna/H91Jqh39C0mMo5iK8Lj1pcHXzVoym8zAl0/sqOA3R+kvvBa+/l
Uy/P2orO/MVH9DNXHtL3xc7XzU9N4tzudOb8DLxHHlCX4gsWUJW6/+he5oxv
6fbZ3IYH17z7CH9zdCTzCu/8wXc3M7eknRDFnNRyG/LZ6hLeo/5q+vO76Ca1
cdXQv/y6KfQM2tWV8H19tjIXMGwC+IjPLPqsM93Bj0xbUgeVOaPr9fkPnnvn
H3QtRguoM6w+iHlF+UYM+sTp34hDU1N1/IYZ+poHD4V+SFqeDX7UToeD5lYB
h49oIOp8hSPzeopXI4ibhZkizsnt2Q+rWXadOJx4FrxkbBvBj6gnG1PXaILw
vfF4j19zCvuDNavvoD+NqApu+2bIOr5HQ/j3okzu7YAWov7Ullcn3wwNJh98
80jge1mCgw7ry3y80z76tfP/gTusOMp71fwFd1z0AXwg7SX4/tIi/Eyb6aOr
dcydKL7fw3nw0o09Obd38SlWaaszl2OOz7OqeSB7SId/F7p2ZfZ59B4bA+CX
L08Bj6nvRf3g7Cvyr6a8Al32zDDyRq3f4GwXluv0QtvZF/OwFf19yTh05Fbw
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
X6maA386YZ6YV5TXxcB/Fo6hf95sTb/04YTgdTX3Z8Hb1bvDPrx+67n/Bh3o
izqO5/2W+9LH7VnN+bC8BV8S6gWe8Kgh/25nAj9bU0Md6J0icDLJ/Cx1aeVZ
9vV4+TBXsuYKn+tWP977v0J4lM/x3MPSseAvvnHw/rq5be25eHStXjEiPqsu
mIHL3l/J3MNzeDfNsMbot1JD0SmdOMzPX7kdP4VbNcFphnfmfnxbiz7swVH8
S0Z/EPPZ0r2VQrej3D1a4HFyHUvqkpluPO/wSPDnHiVirlXx+Tw+aI1MyQuO
w/E1DNoKDucRAA5ynn0f6txWzLFYrEevZGUCbufoxT3RC0afbNSBftv4CP1L
A1fO6wH8OtRnB7A3dZkvcerkUvKhnSt+fWm1qWur/eK5FSiET6RyBX5iqg9r
6IuHvENXdMwHfWRzA37fcnhZ+VsZcyeT8slvieECN1GmvOd7jMF/SFOxgH7w
vgQO2rUHeWb5OPAfx1fMpZSY8jn/4O+mrd8fvKz6APi45H/Cn0r1ykHkRbm2
MfNPC1vi75ZQCD/Ssxrn5VEvdPgOG9DBJNXlHL86zTls2Yq5mgGx1L3pZvD9
e+fAm07yZ552kSnxeUkn+CVXU/L1CHhP1c1r9CuresAzdJ3E/toeJwVOKZuM
xm/kzVxRf8qZ8N6KqDjqVMcC6qHfB6infRrjr9LiHXqBwDD2TRQvEXsSVCN7
cd6WwmdqPPfrdCIf8H+R+qDLMWBvokrPlHogZBZ9ZD57waR+PchDj8aiN5A/
8h6O3RbnRj4xHj1OCH4m8rYF4He5ZvS3GweDg26cI+ZYtAN+Mz+4aji62Gm3
8bmY2UzEac21jfhfHDcCz6hWj3tk+pHvMc8Snu9fb3y2ajSkn7wbjC/Y44fw
qZF59Nkjb4pzpFreDdy4eQH17yo3dCvFzsTd7sfRYeW4830t2O+n7ZILPlT8
m/mIyUvA71pWJ57Zl3PO79NvKrYfRQc4FHxADp+NT4n7F/z+VzchjjdRiTyu
jAikXvcpYX6/qg98+Yon6Cq8Q+GND/VG3/WqP/XpY0Pmr9u1Qifq4A1u3imF
fJzmgi/gjYGc42bnmQfq2py9MBmf0UuM6gV+fCcXvu7FMnAf5/7E+/kp1JEn
Y6jT7cEDlHffUYe92ku9ceAlfrCT3agzOuajz/zYUeRZ9SAneOq1EeIeSBPu
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
mIXe+pQhc9r7q4q9FMosB/LMnkrmT+4Vgy8kubPPol8FOOhvU3zLtCXM7f0y
RVfR4DJ1w154V+2cIPrOZjnM6659gn7UrQ6+NtOvgQe0LhD5WT7LHhGVWQ36
4z+x+MH8uICv6da/8BgV7A1V2aBvUXgcp0/59VP4iUnbd+DrWMcNvLdQ139s
taP+9SsWfbe2cmoX8XMvKPFBW+DBfICaOkBy3wIO6R/P3FGnonXi89ZaxvyJ
xwR0qYfaUw+kNZsunkuPnfTDp5aB9/i8wf9mcS56AnMz4nT9XeRHW2f0dLfr
w8u7W8ErHn6km2NIF3NL6oRscIk+UxZxfu/Sf7gPP617/5z7ilHknbEZU8Vz
KkmmD+g0Ct3Lzs7g9ct98H9P8eL+r00T+VhrvFR8PqXHUe7Nih/gAOpT8B2L
b4SL5+D4iLr6jid4t300+PYqaxG/lZme6BhDL6Kz2XaLedlXH+FdnNKpT8Zt
A4+QPlIv/a6HXtL8FX3wEJk+U7Ygz+XjV6PUt+Ie7MAnSGOZgX7r5BR4jVMP
0bftS+BzOM8mP53pJvaMqWtO5X5mjGPOwzFR6BSUk07j6+hxFt7OMRDddevT
t3nO0+mjjzTi75sYUWf763zMDs1n7qV5a3zEPHX6JzkZPwrZEr2Eawh+8hN7
o9f/2FnUK7IlvmryU/apK97CQyguVqMOWxxKvLMJR2928i48WdYe/LW29GEv
3pGW6PpbVSeOV58DvxXHfIrSdi36ovoJ6I9fFeGnUYqfhlyzgHsdjX+ysp5/
iPhc9c4xbxpeFX2gaxt0qPGb0TO1W8T8w5I5+NE8ScLHzboHfUbpP3hC86fM
LXuOBH+7PwX9tnEKPqCx/+hHerfm+Tv8RX88aB3xtBm+uerEdegga2nou2KN
6aNOhoo8op57jD65oh44Qr9P9P+Vf6j/fcKocwc+ZP9Fx4/USSon8J7E12Ie
Vr0omX3dl07h+3HSX9TN2inTiJfX19P3zioH1/LbIfKddvYH5i+sJtJ3+k4B
P7U21/kMrmV+oasG/VPNzeBCnVI4T8960z/36sm8woD96Gxqd+J+puj2rh2z
5L2s+oDfTnEs85vtJfLpqTj03Jkd0Zmd/krd3CgB/qFjjIj3mq0r6Gs3DcN/
YFwiPEfwHHQrp66CA2SUMhe6ay7/7HiR/XIXdoNrOLan3h1Zg3teeFeH0+yn
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
exhWTKfOqG9HHe+i8+/Z/Qv8eO1tzu20xvjMaMHHNOF26IDntsFfs1u0iM+K
U5fxGXifh39Pv+/whiNLeR4/fOhvp2VyXn9fAPdce4O8smYu9cI+PfLtUXfO
iaaOeC/SpWB4w0RXcJixaRs5h57gO5fMiZvmLYhbD7dT7/Q5KeK6dvIO9EW1
/nLv7BOJp6d/ggtcCxM6EinHhvlpCd89xWt99Esdm1NXXmwKL27yR/g2KloX
6uog9v5qmrO/VK3ZDf+wiuciW3VED24agC5v0Tn4gx4B7BtxAhdVXvdEt71u
L7qwKe918WM8fedZO+qVTsbgehMugAsVT+Ke9EpDt3d9JLjZr2h0PgXs/9Pu
TiDv3cqlnr9XwHtb8V3UD2qDXfCgU2uK7yubKdAtWNjx9/uid9N4DmRe5gTx
Wa3lHipqDsQnK3Et8W5QJnxQtwnkyZfNqOvG/+E5VuIboNR+pr/eEEk/11eC
X1pzk7mBfuZ8D49o4tLtOugd3qUxr93wNvVLh5vi3sgZ8Iqq+H7UdY3Y86ya
UUbefjueOR6bcvwf5uIfrBxPX6Ht+wb9cuL1UPH576fBQ+5vjn58UTN4CL9S
sRdB+vYQXmnEUnDRLd7g9lfbgfd7vESX01kCh/gQCF8Q8wif5hczyGMOw6nX
DFPyOZ8a9PQO5eyni4miz+50m70SlyPJn9p4/vzha8SlZSv5+Z282J8Vp9s3
vdZS6DXl7vHoTIeexo/Uawx+kyb7RF2rzj/DnEd1E/qtyZX4C+c5Uc+PWYlO
4YSM7rrkJc/l6X1w3W7bdHi+r8CptdFZxLGAoeC1Q+ajz9z1kXzzeJKIw6rB
lfR/l4+RXxPQUaonnKFevNWU53nIEj6yQzr5Vv+x+PuSxQPy0f1PnN+i/eCE
MwdwPlskwiPYVAXH0rQBT+0/hb47i/ulckUnL21uy/3MLQTnz2efkaxhLkft
85k66IWTwDVU45czZ9hnBPX75yvo2Vz+o64odUA/Fx9E/nvJHIOmTTx7OwKr
cR+mxhHP9kXjsxkzCn9i7xHC/0vyyGKOK/IcdeP2KPQgt0oWcu/wtVYP+YA+
YV82vEBIJL9n3tux4vMr7uOjt3ES+prV8egX2+ErroztK+o4+Utr9mP+y4En
dvmEXnJDHr5FxePwy/WcgD628Bh1hTaefmPLPub3AnfqdLY3iadNQtCD795K
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
pM3ic8p5+PTpbnqBO9dpR74ZpSaudL/Mfrmo7tS1451EntFkpIDHv0UHou5b
iP765QvqSNuT6LyfLmb/hEN34qDlN/Snn8vQRVz3oi7aOpx9GZtek7e/fuc8
FnyjTxh7lDm2Wsv4eQZ7OCejSgSuopvpjX9akgIO/Pu8qC9071+Dmx75zn6i
tY/W8/+L6OMvtgSvWBcEr3OEfZTq4OpCL64xaw7v1LkO/jufZjCf2doSfrJy
34vcy3XMO0z9BK72LAUcfF8l0RcoWbG83wfr0du6tGF/UflF4qFfLT6HqiJ7
yWyrCF5MVWkg59GoL/3R9lXw08vq0acdZt+cdt9V7okTc3Xa+/70G6s1+Ast
6SD6Bvl7b+pFM3vq4++Z4vfVHWX6vWuNqPNT5grcVxmdh16o7DL+WJnf4J8O
2oOzru9IHM/6Tb/u/wf9cNMt5OWdp9EHLApDr+ymBZ848eaL+PnGa9i3GjKB
81oaoZ+z7Quf3hBdrfI9Av+Es8eJa7vfo3fevoE5nj81iU+OXThnDjXQ79fE
z0txDad/iokQdY7uVCX6xpZadJLn5vLzGuj5nVoTmcfISobHM1oI3xRfn8+X
n0Gd4DuZPuXjS/3c/F7hEykfPEw9XnaBfe7Pl1HP1rRAf1LyUo+n/YO/ulqP
+LUhCx5k2mnmUJsWUW+PfkTdVLiZf29HHLrek9fEvdadSxTnUjN1Hfqtcb/g
J9q6kDeWT0M/nLge/+Ebb9G5nWDfrWbDTc7L6yHEt6/lxIkY4rVs2pd6sq2B
6PeUrq7Mw/ncp+8sjCTfb7gt7rHGZTzn8lgXdHCGeh/e0/MEr6C5M1XUQbqB
EnM9Q/Eb1r1aSp1elgc/XsVNxDdV6lPqE9968MON3NAnKVnglU209B8Hf4GT
lb7k/V1xQs8dQZzSDAzA/6l/FVFXyhfOs9dg5Q78GJr9os8wbqnf++RCXThu
AH1VRXwmNYY7wAufgUNKpRuIh7Nb40c93pW++8oO+i4jdEFSqy74PDkNpN8Y
ekr0D/IgcDGtKhoe91UhOuEW+EhIJwfS5w/1p27JjiX/fYgGP2y6QvALco/B
6GpvZaMPffZB4Paa2A8insjdZeKkWWWem3k538/8I/OIflu5PwOGU7c4rBd4
rPZcH3jkq3eY1zTrSbzZMxF+9lK+wHvVF/V+cWdHU9/s1OukLkfgQ/P5o4iD
2uOTqJfa/mPOrfMndNsXktFZuO3Dt+FvFfDDmhHM858xY07w1hPmj27MIJ78
SxC/Khdu4fPquVj0WWq5LT6Qk+pSJ43Yh1+NzyPmtKvu5XxvtIdfrfoF3mlg
BHlz60SBQ0mnI8CvE+/Ckz0z4fnfUphDWwNOqHLBF0PZlwd+bu3MfdLs43xM
v8J573qWczSkHNys5xjyycCz6AkNf6M7KjdjTuB7BDxnnXrs166WBP65m/0R
qsX3iBd/mvI5t0Qyf3WK+6oa54Q/a+Or+CZNKdfvhS2mr/ryB92CF/WBUrel
OC/ayJbgKtfr0tcNNESXV3E4dYDnUfQlHtXQkTVn37Jmgh3141P9XtUFG+hf
lmqIV9J1+t/DrQSfpA78R5ya8FfEVZWVwjzrsK99xPuc9An+1rEcH57eOuE3
rymrR9+1+TK8dZo59eH5B57i53dfQxy47Ub/WQG9uG5IInX8+Tj2jH39g/9G
hXnwecV6n5GmLuJ5KQ/i0D12MaI+NvmMj2PPZugg3Puxl2YNe4IVgzrweO8L
Bb+symlCvRtbm/v8ZA06q+SZ5K1B5cTHc3n4X2n3kAeWFnL+my+n7wpoQ99o
e5Tv490MfryhP/5azqe9xf+vvIx6uv5I0T/q3PzI550rjhS/LpiP/jNtAvdg
3QPw4KBuzKcf1PNPz6eCE/ruYy45D78fXc9CeGqj/eAoGRrmLNs3Iw59wZdM
uWeOz2KXSHT9YZbh4t/PHwCOl9GROBrSZIj497a5jxOfx+wy5//lCPCxdhI4
f9Pl3M9PzfAdMQxg//zQCOqviszlqnbPFnWe1JT9tNrAhuSLbA1zRy1qETfv
xuDT0HAxeHYuc+VKJ4m5tkb3mTs7fgo//LPP0Vd3Zh5Bd+oC/F9uEPk3ayE6
fwtr+OEBG8GHetPfaj/Uhx9NyKQ+nrsfnuHcZVGXqB6PIz/dZf+oZrAXft6W
zcB1+0wVcUrzbBv6Tl9L7snJhpzHIZ/pd3+2ID4P9IYHX9+Z+rp7Cb7Yx6zx
f7idR1+y5g35QudAH7/kODoog8/4IbSw57ydWQEuIxVEcE+6gHc1W4ufXLIf
vhi24fisTH+FPrhWMc/rmJnw7VIq4FOta5nKfRo6GXwiz4a9100KwFmvH4bv
9tuH35l5CPnTIha/Xve54IGn0M0pv4ZST/UbhV/8h6Uiz6sMnsJHvOrDe4y8
zf5p6yPwFV4q9DIvnJjLiK9GXEzrIL6npnV3nnOxKXqNYQX0kdfYtyrFvhd5
QH5aVfTfWpk9mvLEl9TZzX6JOKh8sEC33Poy+rZdPdBJJXrAs839g6/ykHzB
20qT7ej37VeK/KVKt6Hv6w5+oaS8Z86lYCz65j76OcwmHdGhan1EXNPF8u9p
ajKvpjTdDj+1KJN/f1Yt5oN/pInnJh3cSn9cIQ5epNct+o4Ba9EvjlgIPvJ3
M3i9zFyBeuwe/n1NRepJHf4bSkoM+7qdb4p4pA1BPy77rBXnUa51BB1u+CeB
g/2vIQZf3z+UPPHlOPth299BH6IaIPR60r6K9AkOoULnJB+aD/4zvTrx+PUr
5qibR4AbvThHP/P7OnOGnhXwWfivETqmmDj6sTOPxbnRnfgCPzpjAueyzxnm
AdNXEfenlHKPy16LOldOqyDuvcb1G/4tK6fxHswd8G2akkpdWaW94EPUdfug
Pyh/whxz7HRRF8u7fKl/bdA7qmasAj9+cYa47VNK/Z8yk35C3YX+adFm5ubz
OtCvmr1DVx5RA5511ljw0xpbwFUzo5gLqNMOftMCfavs81k8b02iFbhNl0Xs
deznTz90eBK81fwx6Nk+B6MXdndE76Dsos/o/Ao9VfUX+JEEXQLX2HwbvUzn
AvLaslzmhSc1JZ7erAqOGJwGnppsw/yRVRfigX9dfNXcp6OrbHxUP2dfCxz4
o4Z7c7ENegrDb+DMtdaSd9atx0+lqDb3v1SLTqDEjT4k9Az36X4xvm7qT+AI
NyeBQ9b01M95q+Aly1ujF2jO/Jp6Pry+yuMJOqe2oejYi3cInYlKasG5mHIl
THyfPlXR5Uy4Rx8QFsb86vt4kS+1dR9x32uuRtflfQp/j7te6IpasI9AWjQa
H4ccGR564GRx/5VbL/GLGVwT3fi18fAOZ29QV3ovI05NeQn+3HQnnz+dvK9r
dpQ6ZMtV4pb/J3CZ8XqdUDb9v+5trqgzdCaz4Y3c8MWUpy+hn5zRjfdVQz+X
lrKRc/euFTjozlq8f5dH6CNa1xRxWTXiMjhlx27kuQuTwDG/4AOrPeHBzx+D
H6Y05iV7cz8toU4pHQ6PlHuFuqxLI/r/Ls/hUeY1o78YMQ9+rMIfgU/o3JPZ
++aTT1/R5ik+t2dWk2cizxNXoqM3iue26oD4vJLLIfLapWXEK8c0zlnb9uCn
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
gHBynk48QjcyzhKdxW7wNvWffuRrKHLA3yPRi8j2FZCv47eEfmLNU/w73oXs
6/1c0Is9GoKeTvKJ/J3t6avF/4ejk1P0q2C/7JpC/aIyZN9dfIv+2ZC6SWp4
m/3o8iJw0eOL0Cf89oUflpeh17hYj37gwEl86iZfqN/30y/Ju0eQz96Cvk99
OIM8tVl+fN/b3eF5Pc/xPEw8zNy7IUp0N3v8xOdWHnWCLzOMhhdaYsf31X1K
P+3UmPy5POaiSK7sxwdY+5tzyklBnrX/ZOofDwU6lRuuQkeuDJpLHTvtOvvF
RAdyVGd/ETl1ssvkGKiCNqCPan4MnHjqEM08GeYfq1d3YN/feFzgK2pFMfvv
qGhyjHu4ie+vUtzDz2lxk1z/mC7s1w8+s39dCqUvepiIrmT/DXRp25/QBzXb
TN9V9EDss7JtJeBal5LhP/7OAh97VoVfIucwuSI6i6g7AjM1uQzg7PJvHTi/
PjAnUm3oJ3AG9Zv9+IIOrUcn+WU1eha3Wuba9h8DvmO/Hzx96DV0QiMi4YFU
nzg3Tviio/yKTkrZoJ7AX9XTykR9Kjm6RvR1inIF+/aEGvoX1V/2MW0vcNXP
s/AZDV5L3nYRc7flf5riC59mAr84czfr6+IMUWdL1cPAk2r/Uk8OmQ2e0moZ
uIKxEXVWI+ZISHT90fdl5sPbRHVjDlrVVbGu1C2lvH78FbHOZRVm4MCWAWK9
KPyq6cPcouDjG5uDl3rr8/53y5jPsIC5ROrNvfGvjN5IXXdgnMjtkWn/oA+x
IhdVoa5hH1/xneerqDffe0+sn/ie45pRx8ifcd0/PRP8hLKHSuAq6uPMOVTV
rcM6absdXCT9DL7sKvIhZMcmwrPt+Cp0JNKOX5irdaAXPMy+bPZXgyrwep0c
8LsxY8X1lnW+j04q4arIVZRYqtHTveoDnms5n+8RyDwZVXU5fVWbNqI+UAyb
iT6/6Af4eMkg5jKMHI1uZ89E+H6zvfhWjl8lv+ZWMn6pGuZUSo0s2Uf6/6Je
eDEennbScnTLDRaIOlM1sC66vVFTRI6GJGYMdeGD/uK5kl4agH5p3iH8b/8t
4HyKGklubaNPoo5V1akmD6nIhOe5ZDk6vcPf6C+cn3POTWiCLvgh/gfVx9ai
PpHVH85+vrFaPJeytCn4ZZdq/KD71OCeroPxxW4rxNfYcDA5bFttuc6Pg+F/
LErgA/67AJ/9xhK88WE+/e5k+Dxpi0UCR5EN+QWfKT1LH7E4kX0v5hV+FHvm
DskO7dfUsf3QS9j04XkJaEgueO5d8h06b6S+NJhP39IvQ/Q3SvcAcR9lGTOW
iJ9/YCDOE/nmCcJvJRvhTz0ZOYX3u1ufusS9Det6lBP92PSe5DDZOGn4ipbU
AzIn/JfLZ6OPyUrl+rfuCA458xF5JFb1wN+7xZNr9NyCPnRHd/Dq+uh4FBdb
8f4Ww8Fl9eZz/tYGgK+Nn05dXmcIfo5XSzj3p30UuIiqzw700epeGh4cXa9c
N47PP3YTz9PZIE2uRCb3MeYkvNOaJ/B6vfXB12OuUWfaHMY/XIpfWn1mPLrr
PQc0uO976uejVzkXm/hTl7WoAy5+kM8lbe1HHbl5In7LtKX46rL+oq9fHCn+
X9XlgdBXqa4Vw6P3UggflTqhDvmUc0rJO3w8Cfy5Now6fkN9cc5LnYPwA3Ut
FfuLzHnJR/GnUT30WkOms+/PABdWTXCGNzXyhH/Ymo/ud7o710NrMfVD8X70
nEXLwcmKt6PrsMpFd74M3Yeyzwx0/8EprJ+CnuSabUFfpljVWPjVFRF78ItM
vk0dseSo2Bcl+8DDVbdm0ffbXwb/rrxLH7O2JTkoQT+EDlFhqukPtuRQZ2X9
oH9x0GYdFnLfZHaT8FNG2zC325Yc0/9/3pgfMLB3rPj5axOpw48upK7uZ4He
6WkgfaDvK3JDjj9F1/AYP4LslB18R9wM+s6/d6aJf3+VyL6q9R2+5P5f8Irz
3dEvt+/G3BndEzwfF83In/KZCk/w1BwcOaFWo1d+SX06zgbd9mtPsa9LPifD
G0wtBb8vr+B+vEljP/Iog28Z1A/8fu9ndBDTt4NPZaCzUFjsRPcXksk+ZJjD
uZv+nTrQYCt+/gfoaaWzE8nNC/gLfjFsF/uQnDknko/vwT2eO+IvGdcdf/Tp
RdTHnoHglMPx+SrlmWJ9K03/8v4fIvj9TnnosvMmU3e43+I61EwDb5zVQlxX
2eWOPCfnqtHxjWws7rvy2RT6k7h29Ec+NeI+yuoEgjfpXAdHTUgUfbnsujn7
xyAz+vmUs/hL3/cFjxtV8n80nXdcjX8fxm8KmS38VOQOSZSRrEK3kkLZJRQn
MkJ2WclBhOzskVNWGZWEZB0J2WRFxrFXZFVG8rxe3/d5/npezw91zn1/v59x
Xdfn+qBP1/YGlxziwXlwNQCHKWoLDlntHrqVccvRV61cTP2R6Ex+KkvFpyhl
r8jLcuwecOYzLdiD4GgJPtzqLPr5qPnUfQ9z8dsqnQ/O02s+uvodLamLmnlQ
zx2SmZvs9EPP79ZizkNtRNzZ0JVzFMjz1N0fi672YxZ6zMHmzC35m+p97X6D
Pyt70ZO+uEIcnDxM3FftOi/qnHFNuPfhfzl/F2rw+f55st/ZfySfx3sW85tn
VqGbjHvI3PByGf3yx0XE51q/OR8d4Zu1neOET7C0Yxv6o7nV6VtM/eABwqbw
3KdFgnckTgNveBfMPNzFMSIfS/1i4OfqFDAn3sKB5xJ+hH6qU9Ji8d9X76Gv
+ZOGn/NfA/reX6bsR/13kDqj+RP67jUXwHUT9L5B/43ic+48w/NbtJL+JTiI
eDzoBP2B1wbyV4Vn/L5g9h1IN+xFnSJlvYNnNdL7qjfuTx5tuBifyvw9zNs/
SaOff29C/R1Zg+8dnMSeRdsicIQVE/HpGHIdXd0v5vB1Nl3hTZKG42sTDw+p
ia9L/u6ZzhzFwsHEzwmbiFfaYniqBfjJ66zPEN/u9+Pz9rHW5/3BxJm8Tbzn
oQfYV+JwCh+K6jfoV1d4iPpWZ3UBfegvd+Z7msxER5DZg3ruJX5n8qlkUW/K
S3bjH+LoSl05+yt40tlN8ByRheAeFrvpD2bfhs9qOhrdZ5QP93J4U/qalhfR
TT17jb9gzenEvftm6LT8NeDgredRnx7bwhzOVvBP6XO6yHvaEepA8fcGP6A/
GuUP3+5UBD95nT1t8hwT8OG/lziHvYehy1bb8BwDL+PPVDucOuHpvgV87n/E
j63e6ItmlREHZmm4j5WCOL8HatBHRlSizhxzUPx73Z1WxOXfh8TzVwdWBM+t
b4af6K0d+AfaWaJnmbWdeSfLhZyLXPgFpcEncKsU9kxp3F3ws7b6LPoKXY1M
cMJvy4jLw9TwyJvWijpI59MevMRrP31D/BTOxbF+8EVJm8i7PivBf689wbfd
ciP7zZd1pE+1a8p+u7SGzH1kLQfftl6IzmNYX3ikDeyfk5Qhop6Scydzb7Z9
ACc8eYV7YVoDvcjdAeA8R9H9qRIGMU/zdxL42jAP9EJ3zsDrd3tMXWsUIPK5
qtVb+uyMZ+iV07eJ+kc96RR9mesG8OY7qby/QVuE36t8oROf83q0wLlUl+bw
/fIj8W/Kqo5e7h57MdX/maOvGduD+D2GvWSq4s34l5z7zXN8WKoW33t3G/CV
Pfnks2dV4V2M8J/X7ksTfYO8vwa+pV4HwYUuxzHPvIm9ZMpfC/QKle/DPwyK
EfdYO34besl26+EdX0SDz91sBs4wrRF1Xkw6cy5WPiLeaR1eMA/qhC+cFEGf
rQnZCw9yPpF8ZLcQvUNwReZ6W/wBX5EWk29ty/i+TaaQN0cE9RZ/71FlgePp
ji1AH9vsDPs79k0WfaxStVTkNdXPF8T9itPJiwnVqWuNeqPjufEfOEbisXi+
Zyn800bwPek4z12dxt5PdYMuxPPgNHCLmCjO+SQtPpzmzB1rDv5i7r/xXfrg
RfM4J7etqPcaFuA/UUsCV674jPcUcoO53G36fZ+PTIlzj3ugE10bCS/RMRhd
wWv2WqmWr+T8N3kBXlQ4Q/w+naoC9XVEHPkiaDFz4xWq4is3jXla9RHwfV29
b8xbTmZPoJJyGv+NBHx85VuriJ9LuxJXdevRwzTFD0wTehe8uHcR33PKbOqb
1/p6rVKZ4FlUcevxSXs4ifiw9jo+L9diwGe/PELvEIMeSP7lz7nbgr+LduBM
5hztyngeuU/J2wEX4DU/G/iJP+/agnP1th4+ZqM/UBdan8NX8/Jc6s26nakf
T9dnnsvHe4x4fk9MOIe/ulDPOwbx/fcbUA9s3UQ9cGULe3yzDqErtmtA/eRo
Bw9YfJj5l/Lx1C+7v5Av84PQR83Yjx9fPWP6o0L4JPlhC+LwGRdwpT8D4DGf
5aGHTfjM+3t+Ruyd1mX7Undt7k1c35NBHNn3jH2YNXeDm3vepE/+OI963Nmf
91f/HXWN9V76Y78y6jTnCuhwxuG/o233m/w0eTV43o4xxP/GofAQ96YRz+oa
irpYajqCPnuqfk/3rkTw00HH8VMcuox4v1i/P8TFmHrcsA985fqu6NCe92Fe
b2cQ/sX1rQQ+pQsYxP6Knac4x3XdwH/Ke4rzpjPaBM7mqq/PHfdyXwMbonv1
14E/N3zLvTZbRxzcdFXEdel19gzxPD1OcL6rPGXuYm8P8nLgWqFTlHe2pE/v
dpy+0z0B/UB99mGpvh9Eh6nv16W6Z6hzOs9h7mRPObiw5IqexWM9cTpxBHM5
fdDNanJM6VObbePzz1hJf9E5kj1qSfvROS57Sb857BP1ylc1fIzLXYErSd6P
wF2HK+DgVvhtaUc+ZC/JyY70yaql6EPOjgY/sfgt5mq1WRcFvqtyLSYOxi8W
c7yqO+PAL0I7M4f6+wRzd4ePoOvxeQDfkxUg+D11IfiezmgUeIjLGXw+I3K5
V1tNwbuCfPEPfGPH/ThaBb+xH3r9Q95x5q99DnBOa/0lHq/EF1H99Ah+g+E3
wA8fRsCfTTkHXprSSdSRyswF4CumAehxYmejox3nSby6dwm8Zdok6uZJf8C/
J3niv136EP13DHoraXR/fr+tJ741G7eL+6ex3gtutb8Nz+vuCnDpt13h7xIT
mEep78qfK7XpN96x71P7OVLcA833q+DXYV/gZ9/vxy9FNqBPPLWKPrb9HXzS
xl7GhzT+HLrM0PvkQ8+n7DPrtwoeKyMW3eC0g8xDTfYX/ZJU/lzkd8Wccy3d
ysB/YOJLcInMHOb5m2ah63E/C75xVy3qfM3xNuB5j8CbdTs2gB9FFoBzOpXg
t/rmPnXxp1xwyW/9eQ9Dugn+S6pVEZ1428/MMXpGU9/+TcXXWKoi8FXZ7gH+
i10nE6/XG+CD1iccP8le78B5ux8hn3SOFXiBVG8H/U/TvtQRHTyoK5Yp8Pfj
FhKXHvZnzvzFKPBng0D8hTzQCSuj3wt9pO73ROJosw18voAb3PPWJ8jLn+dS
73u2QZe3ygP817OSeM/KgZXsWd7aEp7CpyK+Uhcuwcua/IbHaqHfi3U8lDm/
0yPov/wvs/+xvTv15Cp/+rDFQ9FD9Ebfra3nim7reyr83spsfLQ2bqU/i79P
nHBrTf227xd92pVvvOdgNXXWvmThSyNb7uY5N/eAv08pBSdq2TJS/Jzfy5nT
M+pFHKyL36K2Dfu11VvyqBcKJlHPvO/PHPeIdvS9z6Zx7zPrEz9fBarEn9dd
jR9gSwWeosst6rnMLOYbRvTi/N+1pb+utnqp+Dmx4Kvytx70OUvt0PlsHIMO
NOoVfdewiiKvKfdf4xPQuTU62R9Bw8R/bz0XPdU/8og8FT9cJesD/pNpfuCA
sx3ZYzNeRf72aIgOY+M89In2x9C//slm/+LQCOal5uIXrT1B36l2YW+CtPgz
+OHhTswdV7wEnzR0l8DL5P7H8X/eGgFuVHgMHPS4KfxS7gH0sylzhf+lOuQn
dbZJK/rj+UOpV36cJW40nQMeen8v/FGbAPSLhX7ic6qb32fvkX9f8kH8B/Jk
HT/wwRnBgi/TyKWcx8/++LjdvgfeHTEf39vPOdR/7VvSv7UsZJ4jyhYe4GAo
eqFxSeBQ+afQoYwqZB6m9j6hr9BNcEVnEZNG3eNbDX7Lu5s4J1LAHeZ5nfGv
0+7cz/M3Zw5S9n5A/2o+CB1HxDTywNVx9I/LevF+a1fhHi4O4LxbzSJ/9qGO
Uk/7hT+0eTX0Dd+P4n8S213cF9kgWvQzaq8SzkP3iuiV13eCh6ryjPrvVhZ6
0jPG9LlOhsSxfvjxqVp74Yvxew33OrcB9XkkvoFKC/gKVXsNdU/3i2IOSTGL
FedV92Aw97qkGjqQR5+5F5vHwiN66udnI+oTF1/dYp7p90vinHE096VCdXwK
tzQQem9t2j7wvgj8XjXdl9J390xAT73mPTjgoce8x3Uh+Bi0vI1P0Lp8/nxQ
PfxS4y6QT6Mz0Fd268ye6ZXz8fe0X8Z7WryBemzAQ3SIe3qgs7wl0T80rooe
KgufDHX7EoHDqT5lwTMHce5051aK5ySfc6NvW60/n/McBM+le2LB9317Cp62
rR9+eB26oYuuU5H5mMCl4EP2ceDTp2URF+VVl9BLFVuBs85ciM7mrSu+dXkv
mcevkEJeGdwYPrWHhjpFW4IvtG8g587HmT597mp+f8Z17nOdj+DKSRk8/xWX
xL9TvGK5R8234xN5eR7zaos8uA+fmINVvzITeKwyzZC+qFN1+vjYr9RRlW/D
E71qST3tYE+979qI+Ycntbh/VcdwDq9uws8jqh/9ygIHMXel9W0r6g5N6hz4
OGmBiBuq+QXwyhM9yLO94fOUcU2po3oO4ntcsYOHzLcSvgu6URvgy6wz4RFy
D1A3bTFjHmjRSeZgf1iivxxLny2rrpHHdLnEj+oHiG+tz8Br5BSQX6t3Rj/f
MVXkb134St5fo9f4VdQZgk5tFXoa2dgM3PSACThWA2v0nieswbnWDyTv5pYz
L/qwB+dCXQ1+fFoOcSL4LPoJn7PE2evXxTlXGkaJ+68yioZ/9eLcyuXtwMHC
evEcm4Lnyof0Pgy9U/m+JzaSh5PwP5JG6ogDvpWI05OKiEfWh6gDjcvBmd88
5t/PCkHvm2XOHNDdw+ikIm+CExs2Bh+7GoLefcwpnkvHMeSlkyGiPtbEJ9OX
LMvW+8AE0y+cz+T3ta3MnMHieHyqE5g7ltWv6cvHj6TfW/QfPF+zK1PFv78f
yRzo2yKezwM3dEaOJsQV+03g4Nog8fdUpjfo5yebivpUSXrBv0/WjRU/z7sB
9+VdBXD50Igi8b/rmJvRWThRzy2dRhze/Qvc/7WlqAd0dQLEnKsmeSl78IyS
OL+eS8h7AVWYm4qez/2ZNpU53XRH+vBRn+BD+95EtxKazRxy8mjqknFLRF2g
7eGHXnr8fnRk0mzmMr/l4PtxuwNzzCc6g6Nsm0C98bIKPMm1WvB7/37BO4T5
gtc9WAuuu64ic377nzPX7/Ub/cDhJHhgezt05bWawMsU9KQ/3NaE+9/qEHP+
b+aCF6jd4fUH2qDDMc8EZ7yyE9zj0lWBl0j1gpnXNvsCvj8NX0/18O/o7bus
0esQpuO343yPuslzCXhbBxee7+cK7BOd7U59vxnfQa26iHwnH4PvWyyTfwdu
oD8P8AT//7SSPmeLljhU8xr5wjceHGLtM/JVGf6UujBHvpdXCfGw61vid4A1
df72TaK+UkUVEk9f+IPvztws6hfV6HF8nn3tiBdJp7iPqbHcZ4PL9KV37nK/
Rljy745dEPyZ9NVK7yu/E/1Q/+XEsz7ZzJl/Ao+R33jSrzZxok+LHYrPU+hD
8f/VZhnUAe1twaXnW8HjZn5F7+J8nrmjLtMEPq7tWSTio6o0A33YuibsK6pt
Cw7n/xvcqMd03k/SYHj/mfp5h4Q11AOf8rgf2f3IZ7XadxJ//9ca8lHV4ejh
248EN98VJOoRTZ49c8RVPIS+QA7OAz+rPw8c9McQ+OR1r5g79jDDh6L9Kc7d
z0J0mT0vcN4u5aE7NWlBHPg3BPxGHsDPOfWQ+r0sgrmUkVfQSWXP6i3+N+4O
fuEuY9FvdY2mHjgcKfTwyo8+8LnO6NzVT9jXLTdoDM7UJ4L72Oc3PqLnTsCj
JNSGx7XxJ24sPRksft69L+z5dqxIXR7ug67S5Tu6zFbgxlqNLHR4ql6TuB8r
x4i6TJqg3ydYPpk57NJ9xGXPz/BiRfSH6nfstZUSppC3/nnDw8cyH6xbvw1e
Yt4GPnfCW/TuzjOYeylPg9eZqOLP3y2iXjDvjj7SqxX7IX48pn8c2od9AC1b
UF97laEDK00V710ezdyGlGEBb/QyHl1EQhZ9reNQfKnKK4q6SHX0P/are2nh
61OPg/Pr+hHH1V+o927PJ+7X/Iw+9EZXzm3NofhLNWF+RjW5Pr683XPQs04Y
Aq4QLMEv+tZET1UpT+xn1ahnMB94fh5zTWOWgztX8UA3ldKXvH/kKjjE8Zbo
veyqEGdWcp/k6bnoOXIXC9xf1aUBvueXoznXl2uz78zfBj+S31p0GvbR6HTs
rcHdD59Cp1HQm7h1Zw58yoMjoq5Se1eib3LMZu9n/9Gc844PqF/mhLL3w6g2
+edDIf1P65/0hT+NqB8tqoFDjhwn9ESakkDixSL2dGjr2uKf4WtAHbB3nfCd
lTQb8F+Z3Rt8pPuCluLvS8OIG071+V5Hy9Alf9kqnoc6WYZX7d6Yuc9j7/FH
y94t9OzafP0cx7914G/rD+BD2tGBe/iRekAdPoG+8uof5j0fB9HvXFnKXPza
n+h8zrH3TnVE73PvdYN8cmcu8bXuMXSFHjn0TTWHgnsusYS3ykhgHnbKVvps
h93wiXUdOC8zLov4LHm21Pttydyr0PvsgR9lhm6osR96uOd9iAMX/3AvBo2h
P8/ZzueaHoj+KbAeuGKb58w7FSwVOnKVUSk6EeNs8Lwq89GhueSCq36xx591
xC5R3yl5OniyCS/RZ395BJ4Z5cM86apy+ubswczXNRoCfl4Ygy/J0xf6+dZQ
5lPNH+B/2r5U4Dra7JhlnKu3zOGcbEB+sWwHntCwBzpR42m8x4ODqE8/DGCv
s7uauOSG76q6cCb3+MBy8tfVI/BSD2eJvKet2x4+R8IHTd5ljh/hpLfkh6ln
8X3Y2wk/tim2QmeuCc8Ex/+Sx3nJO0Q+fEP8ldLXg4/smg4uMqU2eINpNvVR
j7PcQ4tk6q4hBfhE3AF/1xVbwmO4mHJOh+r3LeYbi7ynTXHFryTKVsznao7D
72oerINHda1DHbTaCl+pxzvBZcss4Fdaw98rP5aD+x2bSx/2HR9nTfBO/DIP
L0YvO/QP/WpaR3wTr1elr7rXGf3R7RBw+++l+HVcckAHFhMC3xAxgLmMj324
b5t2wReMt8Bna+E99GwhluSXCFeRHzRNnfGp9YsXcx5KowfsTbY8hA9Vmjd5
uge+N9obC+Cj3rRAB31sNffrdTT4y8QJ8A6Vb+I7NN6AOqi9LXPEtYPA0UpM
hO+QpqCh8B3VrY2Dr/IuQI8+4Sf4TFUn4uDftwKv1zgepN52wMdI3SWfOFJS
l/r9VCrv6d0d/HEHjIOfH18i+nN50XL6tGq3qUOqMs+sbbAc3HTiceYPMvPw
n1tZwDxZ5iB8q0Y34T1fTscXXG7FnO2qQnCElW7gMI0T8KuZYY6u2rwn9dHE
vvDBPwfiF/LmCu+3Entf5bgj+j7Jnb1mc8AhdS++ohObfZn+MuQZP8f0Kn16
3SjmmiOu8N8f+zE/vK8vvMStifgmD/gJH2KAbkkZtQj9ScXa4M29KqrF33/m
hK70Sjt8WX3x29fa4v8mr25DflnUj/f/JpE5wNyzzI9lzkOXsaMWPvLfzLh3
W4P5fZY69Jpd8PdU770OPxeTBF84TEMcD7AnLv+azvy8cTG/d30Kcza9y+GD
mnWFV/pSDo6/vaLApVQ+9fCDCZ4DXuWDf6au/Bd5w+MVOoI2+MtpDzVAF/qh
HTiyW1vwdp/Z9Hutd+OjuagZuk+n6/QDGxaAM349xH74j+fp58Pn4GcyKQre
IfcCewc+fqZ/7vtL1J2qPZfg+0+hH5CfBBIH+o/kuT5hHkUzOpw5iU9m1J2H
xviIz9HqOf1Ik038/UfPyVv1q6GjnwnvIZ0ww1+tqIW4j6qDefhA1zkADlC3
G3oyyyb4VLY9O008X49K+PZOx4dOFeTLfNO9LdSxxzPF/Kau+K6I3/KFV/DN
U4Kp305YsO/jaDl4/J9c5sDKgpiPPn5SzDvoTG4TTx8ewufyVXfu749o6vQJ
Q/AFjD7Lvf89B7163QjyXOVG+FjmdgdXvncUf8SFh8kLHyoJvw2VE89LudIY
f84BJryvizbgagGHRFzWXEVPpk31Ff2mOiwUfLE0AN+3Mevxx5i/GZyqjRPf
a8Ux8e+U+g2IQ9X80Qva4pegy26B30VmOO+xsC15vdN+PkfdUPDrrD7su52X
QL9YvRgfux9P6APTy9mXM/sndePaYu5RziP+/t9EPtffn8SJjLLu4uc2xHdM
uvVC4KjKqJfoGi3m4hN1s5defy3z/s61FPlA7tFd/D5pRHPqVvuO4NDGEnOk
9WLpc5tcYw/IdnfqucyF4s8lA1d0E2HF9B/n/OEHr0Vynhxqoje9u5Vz4MPc
umpVXfjfrZ7wQQ034YMS3gre81YRfFC1RuTJMFvqsyI3ePUp5DXpRmfqkk97
iNfpXYjLGf2iuBcB7Fc8vJS5hqQC3sPwRehvvuAvoxy9g3+L7rW4P7ruyegy
9rJHUnP7L32rQRL4xVD6E+1tM/acRRSSPw6/pq5rc5T57rg88Oz4VSIf62Iy
iSujHlLn7A9AD1CWgS5o4yxw/WrgXtrrOQLfVAYc0/uNW4r7oikx5z7Zj4PH
rrSa969hjkveMgC8pPIe6sP0Mva1tnFHBxVjTV8cOQYfu23zqAsPDAEf0Ezk
+T5L5PvadaE+//Yf+3jHxlMPNNbv3/7xEl788VPx3NQpc9CtnKgDLmSZCV99
Lhw9ktU1fHqsd5MnG/nw/oZYsa/ZpTv9w+dl8InLJvJeJ3SBL3G7LnQWWhW6
W22fS+QnXRTz6YvG8O9PXAbXbzseH+vM5+DRzTtSD/dmb4nyeiG/x92VuaHz
XuB9ZV+pixKKRBxQvHrhH3IdvzBdUBR12+9idHeHG7HvY9Uh7suTRPimsRXA
ye+mU2/Wg6fQzaoHHlF2Uzw/9fge+Cl17M/89sAY5tW3hPI+vg4F53weRx0W
3InzMduFey17oYt1aYAvq+sBcC/zIfhANM3Hb2nfGPAz697kW0/8f+UpD9FT
1+H5SPU/gkes7k2cKq6MH2cJ/LUqMAO9/iq9f+J9ncAldJFD6ENvd8aP/cYj
4SeoBI2AJ9it1yX5zIFXHfwDf+57n8Gz7ReCq/6KNBHPbU4UczgV6/D5WqSB
s1UDr9GljaRvKthEXTR0qchfUsxyeJ5ZrdEvHf1E/WlTjN5zdZzAT+XIAIH7
yT6e6JKmBsKbPTlF/f12JLjI9QDiu6M3frLdPhD3Y+uIvl47soj9acVLeO5f
0ujHPtJvyTn18M1acwve/Br7TiTtfnCS6Uupk991Am+6akZ90H0EcwH5K+Gh
DPagM+9zGL5lSR7ne7Ip58pZ71u17Cx4zOaLfO7a+LbLtdrDXzZI5Vx61yBf
GfzDh2TiKnyH+1UA36hai30R38yps5KYa9IkTGCO8ORHvW+GN3XQRAvwkoxZ
4ME9Vgvfc3VgLvvIU1+i97v5kP7PsA/6sRkS7/XMDurzP9XRQ+06SbyNrYGf
6cEp5MOWtUT9oms1SeR3nUWZnjdwRccx8QG8gZUhurZvP4mTe7yJjwnswZDK
o/HRfB5NXfCLvenSI3feT01wb9XU8eTLuNnUwUfxPdM+WQQfnnJRnEMloCv5
qtca9BN3g7iPpVtCxfNrfI2+qusa7mPZKXTWZvWoe8Pd6Zdr7aR+c2S+SH1e
K/RASutK3LubfbmHFrfw2X7+hDwsM0eseVrAXFveLPqk6PHwcK7D0IfcHkvf
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
uH+DWuDZ5++RZz/YoNPWFeL7qXvE+9v5Ehy3aCr6lX1reE5LBzJnZRGPf4D9
cPLpkbbwY8f3M2dR6x0400JLcIppjUVelCt7w097b+S8xB8A7482AJd9epD4
sTSFz5l5iP7Lfyd1vys6UfXmSME/aFzqU19lTmWO78xG4u7I+Pfi5+zGv0t+
UFvsOVa9OYk+6ukKcMWUK/hUjqlJHnW/xLzTs4rivMkBI/R+Z6Xwgr92o7Pu
+B1fLYffPMdgSdQPOv8Q7veXIOYn9nUQOJHy4hnnsjAb3WvkUOKzhx388bFp
1LuVZ+JbfJX5bu3UFOr7a3odu3tN6i1jR/Cwq5VEnFHPQT+iNEkAb7yzBf3p
8t70H95J1CdPTKj/Rj4AL3twgzox/jD1b9YxeITR59i/05A93ZruUfQnI/8S
x6LCwQEHe4vzqCx/z3P3vUd/vDCc+xD4C31vUKnIl7olb7lf35gPUho+Fs9b
+VwP3GbiS/LVltP0lwu70T/vKqAuCXHA37tOP/Q5tTX4nG28iX7n0B302eY5
7DE3qUMdobMRn1/uMwB+ceh9EU/Vq9aCUzQ+QZ56F8m9MWwg8pHkhU5aZ5Mi
6kxt0UX0iVIC+cK6K33hwUJxvtUL8L9RGdmz58w5D33Y9jJ0D2+X04eazgXn
vWnC/oHg5YJH07QpoU54/gfflAvUnZrAL8yZW9ymLyjsgA61jwE+Q217gLtb
TRstft+nq+J5a9YvYG9j7DH04HUaoXe0q0D+2b0JPfaJ6cTRLnpc4e4J6q2w
0/Cokjd51fcG/bKmBXOaXydQJ3ltxd8p4CV90r9i7nN8JvjLhS3k751WzPHH
54PHhU9jvnbIGvLoVfpCaUsX0QfKDc3Rx3T4JeZOVXv74ltfp0j4AKiMG9CX
+EXj31N9If3lhlHwqdfJN3LLPPDAqW/oU37XJ89lHwIHLthJ3+Nfm7rM1Qa/
n9LV3JOmzP8pHvgVSGevwbN1Xo8e/L4anPd9IHMWl9Bba+IMiQ9vbdhj7f8C
HmpyJPqk/cPhtZftoJ5OYp+udr+e/70hgd80Hss9LOlA/e7QVuhY1Ys24tvW
Pg++reLSWeLnP1P0fqcruf+yNXNrzq+5DzaLmRt9/EycO1XKJfqgVvgUShXx
cdDtZ9+b7vASUR9ITYvIA8MbgHtsL0Mf+6MfOjivgeSD5jXptz+74WeZ9Yy8
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
/bLZBD7/rEz4UxOJemMMuKdu+nzqznMvqIef7CY+lcQyt/78uPhcavu+6Anz
a8CDzu8Cnr9sNe+7NIp6Zczbd9ybmfDCjczI+4EzqLOXoz/VRFbC/zO5N7qO
q73RH6zNgT9LR/+j2PxBP3c5ib64fzn1xZfe7O3yY85TPbU9+zQvxIC7NqpH
XxTHXl/ZbBE4seMqdAldJ+Ev0tNS4IKS5x38XRoaoY/6YEA8cd8IztitlDki
q5ngxe3Ya6I0rUKdcmMEfql1tunnbX+AW96EJ1NCJlKH+7VlbrV8B/o8izHE
oSZ1mC8J1MJ7DzTi8/7dxb6Dk12EjlrxZ65fld6XfTlN/sIPbGJPn3pOZ+ba
ZfTiSuFE8sPZNPA+xQE9ZmYsdcOIL8xL7W4hzrNmcW/wfudr9PXnvZiv3ObH
PMGoT+gxOo5A77bUhvlO5zP8nrEr4f+0edRrFlfIz5vfwOf2botvQa+9+LO8
fkM9tnsfeSX9HLjmpXb891WcG8l1F/h7t62Cn/ofS+cdV+P/hvFjlU0RXxmd
yIiEhAg9FCJ7hIiHIqEiEiUOiayyV8ZjJoSo7JzIaJiZIY+MyEiyQ7/f6/M+
f/X6+jbOOc/nc4/ruu7rltelEd8eZJK3As8yr/CfN7jXv3PB4udb3aLPfVkX
/e5TmXr8IHsGpT8LvcXvG35QvB552nXmkAIyiT+2Y5i3tlwDD/83E53OWfSI
kqYJ+Oqx9cz36E9xPo748VzM2rKXrCtzKtrxZ5n3rOTDeXkeRb5+jt5V/yuf
uLUwGV14ZDvmIxu44jsa4SD4L23Nteje8oeL5yT9g2fQtR0M/newK8/DE/2p
rlYd+vDAIbyfE6/xh4k7SH3e1LBvsOk69EQnjqL3u1WP+tZ3Hf17iS14gscU
/AT+tkFfeWsvr9dpOPrn95W5Fz/H0mfNLyfiiOT8Bb7MaSR99oNzzPEMrQk+
ExUCPvnxEzpUG+YqtPfaEf9aR+IL+p8ZOPPCkaHifbxGHySlLON5F50EZ3Nj
7lRugk5Y53kRX7Jak9kzNOId8bztdPJm4AvmpCLPMW8UnYzOxeY09zL1s8gv
2rmOoq6Tqo/AN6XLYwPujJ+Jfq5hT05GIfMz5e4Sn2Jaw4ftaQvuNNdf6KZk
iyjwEhm9oOb4S1GH6JpUhpfbchWfkAJrfAnH4/8g7WWuR3d3PjhZDnpRZc4I
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
LPhtgy74KBk3gV863hu8wP2ciG+asC3oJM0vVhX//6oJ7ze3ITjVfz7sWe0c
yDz33XvgN28Ogh+134Bf52kPPmeNCubS/AJFnlSFfYCf9ZiBHnFgR/QiH2V4
pPHX8S+MXcN9Hm6OPuBdP3jZmuztlNfvZg/OYupIZakXvG73fN7zhJWct0/U
zfLiLHxl+zgRDyzyed5X9ejb/k2ifny3mX9v34558ee5nKcFzHUow8zx4dnc
lnz+6YiIe+oT+dS7b/eJ8yZ12g0+M+cOvPjoFfiunc1nr8+Dw+gzfr0U919+
MVfUZZKhEzzQ7LecH7tHnMfSZcT3993An6bmcd5S79C/zakn+kPJor+3+HqX
ezzHYcwryoV3RJ2pzArA/yziLnxr3RP4P0TFwG+0WEA+PBhFfjj7nPrdPBV+
sH8yOqpJK9lH1WU659tvCrhG71bUEd96M38f50z/HnKDvCIZMO862Ad8zdeY
OijciefxLJE6P9qZ9xp9Hd+Q5Q8O8PnxF1I8rqPzRVzH++yYRx0xv4luD+tE
+te5HcXvLS2vYN6rhQk+IdHs0VVYW4FzN7Bnf9Teg9R3dwz5fTq84DzfuMzc
gtl8wcOrrqv4+zJ9+M6H7O9QLtsMn38sC3+0zpPA6yrA65ShU+ELvbaL+6AJ
3c/z+zNffJ02AR80tYUaHWo0eieFMgqc83qSwH1Vm4LIO8cmo6cc9ZH6/pgh
fXYvR4GnK97eEPdKGRwCjhvqDs9TsZA67zq+5aqoHvTR84dRX1WpRz7yChX1
pkZ5SOQ1eaqGOJ9qJ+bWlIde4x+10Yj9ZU388ev7e4n7e5K9MfJNW+5D2068
p/h0eCDfBHi+Gi857wk7RZxVzF8Mf9U5Hf+Dm3r4pjzJQ68d/4Y50NYddPqg
JNFfKaPy0R18DhL3QdmkOvPWKQ5C9yBF3sQPK9EafWTaZp7LUEcxP6UyoQ7Q
dPXAb6RqNXjSpd7UgYaZYu+2Yst78vF4/MWltlXpdxo2Rrc2cy9+dqtP0c9t
tQNHDH4o5gnl7eOo8+zc2M+Z30jcf/WCl/gmNJwo6lNF81R0gAp7dK4PlvLc
DC6xz6jbFHCJUXOZszp3WMQfjfse8prxCPHfsnUtdBpx6+AVhqSJn6cKTkWf
uLmAutJoOLjat3pCX67yt2ZP84Tz+Hw1aa3DCfoLXFETgv+yvD8IHWeNtsTP
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
P+rCpxTeZo7oTii48L11xO3xi8GhLd9QZwy0Rs/YOV/kD+XvYPoi19/gkvtN
8X/ybkQ919Ja9BuKSVV812Ky4GE21OL8TG7J+3IdIJ6b7oI577UEvppqcF/m
ycyc0EssdKUPfViVPnNJA6Ez0W1Gpyyb0G+qtbrzeYPLohNcEip8C5VRlfHX
euSAniGgPc+hBnsnpFJbwBdCbIjrhUY9R8JH4tkNcGKlblf2H60+Dr44bAT1
4K7qoj+XbOYzT5Y5iedxWIYXzLFGVxFnj3/kAUvmGi8vAf/ujX+Z+mEffHO3
1UKHp/cFp9FV0IjbvVbgZ6rNFvWPMj2bexGyi/rAfBb8w5lqzJG69mYO4eQe
dJSNjXkyCH9v9XcRPgLDpzCXNbOhiKNyty/sb7FdYsTDOqNHGrsPPuRqJPf+
D3Ohcm/mk/SvZoq+w3Bli4hP+k6e5DFbdG2yXx7P79dZzl2zDaKfkYrTeP5j
JwicV2c4I+Kxcn848aR9EfHDqi+8wOdX4vvJyWHwlvOqUqfbuICjdVpPvaw9
hq86JDP3PfMQ8f8kvuTaBCfxXqVq/cBTO9yBd6z4nPjVkT3Funo92LuYbAHe
Ne8z82qOrdqJv79+InzgyTvgFe/wBVObTId3qGJh1Ickg1N+3An/u80aH/wP
ceK9KatOoxNofFT012rbJvA3axuCp3vagm9YFqOXKN+Wn1t0lbnusm/pK5oF
cV9rzAVnfTGUOigb3z3DKfQ00sMe8NJHG/A8TuTDL8/LZP/KDXzH9C3xE5Uf
3xb5XrJeJ/KXtuAbe0FfV2ZOLeMYvGPOdfCA8E3EzX970FmtZK5diy5Fv/r7
L9+jIEXcZ3mTgXj7+yt+Ant68r7/rGWPcLmJxLnKfZgTOvOMur7JLni0jLWc
h/jd+Kq27CJ0DsoCO+6Nv9EfsU8a/KXlLeK3+XGj360r53agjegfpEBzUU/r
k56iD1rhBT9T946IZ9rBT/AiXeFj9cPz0APMHYne59g06llX9PG6zGz6orxl
zIFPZo5ZjcHnUusdgN7lY0V8JKrUgR//9he+6XtXdLZ17vJ5x8H7a3XKgE/0
CmFetOMco5+0Df4txT7M/bjfYI7GrSx+v831xMHEsvQdkd7Up2ckcT+1/au4
Pzn25IPxHpwruw7U0W3ZNyrP7SVwWl3LnjzPTkHgjP7V6d+t9qNzN8e/UiqX
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
FfIOXfHUFM5rbDPuUWob9DR6fAD0NmO47w/S6QdK+ZFnkkrDe4eBDykpX5l/
eSgL3E2bvhNc/Jw5ccwtmrhjgg++7qqJ+HwGi6sivsvJ35mvbQAPqxUsE89d
HlgCnnl3BfAKt4X4kfsPR4ehdaSfWlub+5mFP7s6hDkVqccZeM9aO5g73NGf
/vRYIbzt0ATq6nYj4GnexLMXqVYIPti1h8EjhbEHW/8I/YZhlg3v+3wSfkbR
85lnGzmZ7xG0nDrvm0RfNvwL96PWLfL77qnU7fbjiDPhJ9BTxDnAvzqHkV+j
mGuR0r/y86rVEn5oqo8POF8CuIFatBBdjvVU+pZtptRLBYOoq5YOos78O03g
pOpO6nbDl5/4MSRNxV/tC3MRUngN/C0erQT3TPvFPbJpTp19Jg180tmLuYJm
BvrESuBWhj+l0EcEJoF35N0XeLw+qhq6HJenvI/Z3HPpIPsNlWGO/PmLS+jO
e9VgvmSzCb7IzzexH/G8B/7TZwO5/6WSiedPGoHTrepJfXrEnrng2VfgP1/0
wBf58RP2NZwrYG6sZm+jH0UA+3Pa5VOfehyjP9+t4b9+gj5SukOckdLC4S+X
B5M3bn3hHJr2Yy4ntQt1/hE7zk3bIcKvWp7+mfqlzD3qkIrtjXNQ49AzpneH
/1r3UcQTzeyUiBOS8250AqPhi1X/Zvj17pTxOXbpSN6rNYP9sp3Wizhu2DwO
v7ylvahbK9SDF2sZRR0W8wq9hG1PcP6SgcZ61wU+ccFw8ffUUZ0FHyLv3gzf
UaOJmIfXZrhSX02/QF948QY6jLK9wHGSWol6ybAjHBy0FjiRvtxtoSvROR1A
v9QFvYcSbUKemI2eQN6b5Su+X8dg5mqfNcIH5JAbeWbQJeqo5YfAU+/74ft0
sBT6qZf4TEgp7O+Qg8aIOk3+MgZ+tVoY+xMvWYtzKhcs4PMPDqV+OTIFve+u
QvYXfAlgvmHPJOLinvQg8f31D9kftTUcvrVYxu9tVRvqmcQceLVjQdQLG7eJ
96prVpq54x+24Aqvj8Jndfwn6jjdq1HwirU34v8Ufpz+wq2quLfSnHrMu5x2
5J72yaWvtnKFF9hlw/eoYt9d/L64U+K8GEz/Mm+Yn0CeUsOoP+y7MR8agY5N
2esL3zLuGX4iw9ozL7MkmDp3+Gn6mQr57OkYVAt+z7sL+NeYPZyDJif4+a4V
mccKu4JeoO5/xJ+QtvQRhlngh8tqwz88b4ye7Nge8Xu0IBP0cQNLg1dZXgan
blgb3e2BwfCAukx0EalVwbf6HwTvbL5FPHel+Uv8fENnEoez+oN3diU/qDvx
JZcLbqAzutkUndroL6IeN3xXqKPPhqH/nTgHfHzfZ/rOWdvE55JunUNP1+Ap
fpndbekHVl0jH538SN7KysAfNCfHiGM64K/RK5T+ZOQE8AWvMuIcGHLfgGu8
mExfOa8X+EXXj8xL+TUVz0FOqoc/gM6PeL+6DzqyfqPQEY1vyPtz6wJ+/2su
esxVjvDpl9bi+/P2B/3GmL5Gf/cu4KSXvqPzCo5nTi7+Onj88HH073ap7P2q
+xB9ULMccT4k82n4Y59rI76f2sVL9AG64k/whn+NuO44D/pGXTK42oVD5AeD
cU7mko24H7plz8F/yi3lef8tAnceUEbUaUqLf8zZueWjx17Yit9zN4bndeMC
fV5xZ/RKC4qZXzlwjXtfdiL/TLst3otab7LQx+mtLYx5xZV4FdkHPnYI8+96
88nkh/GJ6FlzJwn8Szo/lXrUr4bA6WQv9kErp/NFv6PvsUT4hOoSjlLPz7Zg
ziX3AbotncIc3YHV+GX1e/2c+3K4tfj976bwOWdvIv7XmM58vZQErm4TTd1X
/iz430Mr/FBDLqE/Od+dvrKWhF9a9lzq2LoL2FvQGv2krlo2/URqgLjv0stD
9JHxU0Sfps2ojN7pRbTgK9Shl5nzyIZP1V6PQd8abNdffJ7QFdTRPS7Tb83f
w16x1uzt1VZ0EH255sV+T51NX/LogA3cr+rV+B5+Y/FtmuSFzlEuA3/05ivn
Jn4p/P084oiyYSo8Qfux1CN9OlKHHZmBbrPUU3SwGSr6wMV1mDPqfxr+bOVR
+IJrpeFPjy9F95M9nT1fRYnUd5YGnuMIfGbUNsHgGtI58LO6DvRDgQbqu/Ve
+GzGdqFOUI+CH9f5Aa+Vv5Q689Nk9CF+n+hnM4aDbx6vAY+kncVnZNhG6ocF
J0T8kA6Ppz+PQMesbKwK/mrhBA78Cx5bV0we1f9sz96AvGV83nBDN/Fzz52F
r679gPqhdCR7zjSFebq0ceg2VpqK56BeSUAfmbyPPijjEHG9TzficZUAeJa9
l9BxJFqiyxrkjE7+Kr73hogGxLXp+FZLCx3A7ersZ97o+RDikPkBcS4Um3Oc
r5rvqfOv6JjzjviFPsq0JvxEPD5liksrvv+aV9RldVvw/aqZoevPmM38uOsr
7vnZEWLOWW2lR+/21REcqGlX6m7P2qLvVM+9Q8/XyAq+LtAKnzezWfgKOI8n
Lzr5gRNcayr0ApKzUTeUZ4bPQGgwdd+VAuKBx3L4wN3Roj7Tv4zl9++5J/4p
+V4Xn1eXchZ95To/7ldcLv76Xc2Jg0n46er24/evtfHnHOtW0sfMyoCvqvCL
vT3vejK3smUIebpVHH3w362CdzYcVMFb36bB51xrTn16Lt+o867MXFyCO/pu
r4PobjrvYe5qxEr6sLP5Qo+mXH0m+HSDfh68kTfz/LoNX6jfeneHz7dxR6ew
bxH109Xv4IJ++OPJL+LxJfiZRJw9/h3d28F66IQClOni53zfwud+9YI+XX34
68L///mDy+CWt+yo68Y4gn/GfxN1tvz+Ev2r+RzO093ezO+UTIc/OeQOrpB2
AR3exPfMwyxYio99RFfi5OM/gleR7A9T7zYoRz6qGMnnyr2DrqLZIfCRM+x9
UvYVCd5Y19FK4PVK3l54cQcH8Eqnf+wZdIQX1eWwR08/5gB7TWx78PnvRgo+
Sho4i7pgcxF48bHqxJMdV+mfDWvwQxv3AP7y3WujDjQLfGEPczzSC3w2dd1m
gxeO6wJPufcjuN/QM+gH/FzQC0Z3E/+/fPkLcf/mZereIHT2+vyX8As7c+Af
vHvx5x+c0WF87PBJ/NzWdYijBg+jT1QDdNEFMvFjzBeRj5XDKv2P82XypsMF
8Izl7KuQi7/ShxQeoq79F8Xz/PwV3K9nXfjJpn3FPhj9VleRvyXtDue6cBd4
5eEL1L1X9xLXotjPpLs2j77x4FB0ej4Z+KNnd4Mn/9AFXsb/MP5UzmnUE6V1
PPeuk9E3Zy0CD4s5RT/7foE4X1oCczM6y248nwdfwLW9RvJ5xmQKPE9u0GoE
94y6TluURb8y7y5x4nMA924Se1DlLrxvfYPO9IXaXeJ6wjhw/FP1OSfKJ3Qe
pxqIOlnuxHyTei4aXj/zDT5xdVeBN7ZLp65uYcU5/RdG/Rw+nLmA8tP58yw7
6pEje4kbfb9x3hLmoLcbCu+r2T6gjok9T500vfE88T56PqA/co/CZ6XZHzGv
pnzfg05j8j3qxuXLqEcdvcgfrp/BWZIy0HVHBjE/Mmcj+wpvfAC3uzyeczYh
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
Y5asykiIx8zKLvINv9/r8z5/9TKqc57z+dzjuq/ruj0eoJs7WI2fG94Y3/ZJ
8Lzkhl+5T8/Q++pGaPBVqB2NrrG+saX4+0s98TmY8ID49K8vvMKHbQrE6xxG
XyfVqA1vetsJcPheicSLCB39YNEv9Fo7Q/F/rdOXedeEvvghxJWBH7ZxMXWs
4g0O1KgxfKmxRujeC16LeCrFneXziPUQuJNs1oHzvgSfCs1AA6/rk0rcj6jA
vNpjOromK86bNr89edxZg1/xglziy9Ez9GVDplA3jL+InnNbTc5RWCpz9te7
8MMwc2LvWUkk/XJIF3CBZs/gP/eaij/UmqvgTQnf4e3PMxJzE92hYHRj6zPh
1dwKwRcgYhw+9Pds4NPEzQSnD4IHos1vQX53a8bft6gDX2Uvc19do9fsIR/X
A9yj/230qLIN/fCKecw/j9mCy333g2ccPQKf6Vk2nLvgSvShn4LZ4+Ywlvvb
7iw8qann4IUu6Q++XvidPS/fbzIPmFER3cJY/AjlrJrgba7mol5QN855xef7
AF6stgvPfcQY+rFyV0RdqwxNI37GxgncUo5cha9DynZ4M5X7iPOgPNmGP3/a
SPwoF9vBK6y0mXlLQTx1qrKIuPTewHe+8558UBe/Ym00cwbZFpxckz9dPAe1
cQA+2rF3iTfN8XWXJz4FN5m2gHh5A995XTUzzu/dK4b52BjyVL1CcNUHf9BR
NNwDnlO0kzyw9gq8UlP2Rcn5PQWOq7jMFri4dPI9eHpfC/SvM5Zw/psN5J4H
bWYe+zGXPHBkHnjTHXf6ij3W8BCfG85n9SG8/6t14Ld2eLmJzzkKHl/3pei0
rQuZq9ceSn87/D/wpaKR1M1WfvTPe9iPKMvjRJ+sszzNOalqjR+gtYY53DD2
HKjaI+B+bW/AJ9tmLF6H3pv9bqo2iT3IgeHg3a+n4HOyzgI9wHz8WXRNUjjX
3yyod02sRX5V+6AnlEaMoo6qgA5X2vCZurN/E3x0fdhnoE1eQR33dCz+oUev
MqetO0bkIZ1xPfgXHy4TB69GUc+MNuwLP+4oeIDK1y7MrdOP4x9mzd5C/YNF
5N/t0eSTDc9Ef6N5/Zl6P86XeDpxv8BLlc7J7NW2f8XnmmTww0hJ430k+4Iz
zBmOH5PFMtHvyj/gKygj++NnkIc+U39R4nObfgwfdn0kdemVNnx/Dxnc/Htl
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
J3nGzH03vGTOtm8ZXzvFgc8de0r+moMvnOxYVeDA0rJWzPtd45jH7fsj+mcp
fjR8qpxx4MqT4BnJz9G/yNWvizimqf0NXCVtEPXgjfXMCS22ic9f0mzgfNZb
wX7DuC/0cUX++E6u2c5+w9Lb7DHZHoje6W9ndB0XKqC72ziQ+efbDfQ16gHy
gDH3W3qBr4wS/o1+xY0/y0PjwAVeutHXtFMFLq/v1ZHz5ddd9OtKIPu75FXf
4Seu94TPsqUO++Bfm4t8qbeeRF0SvgvdUL0f5AGPyugxs5vBR+1Qn3tdifpM
2/slvPFuX+ClHDehbjixknN8Yhtz6145oi9XQ2oSf1c5wp9YcBA86yT+EZqk
vdTh02dzHlfiO6+OL0vducKw72iVG3Fj0Zfp4nV2KS/OkWL0GB3VynT637Ij
qeOO5zNvvJbA+/A0+HwlTSCPrT8ErpeHf7hmxxPy+pkX1MNpc8AX3V3oX88M
IF9ccGS+eWQ4fOOKfXj+06YInZDmkS+4UuVO+Ngs+k6fdus9dcsHDXjdwDjw
XB879HNhUwU+rZtsI+bo0s39AldWXRvgHxcWg49y9zzht6mfW0yfVfMVeWb0
GvxyNzXB964N+3m0qb/gG/dpRl3tzb5sfadU4ljtITyX48uos2ytRbxVWhMX
tL/KojfvtA/eS8E3cNOO7+nj5q7jPC2aznzv2QH29S2cwpzl2D70JPU2M5cd
MB89kVc34uePYOL/pAPM3RM/gwc/f0O+sKtIXz7prNADayvsYq7duiF7ya9P
gl9h2ROc7ZQf/aBzQ3CQ8WfB1ZM2i9ehK0qH59L3JPXF7Vf4oyw+gs7uMPWv
xmojc/bA++z/e38VnO2LG7ibtJF7uFiGh2TkSHxsUV7EPblmc/rD1nXRHTZd
KHA8JT0AHbZdNHurrO7cM/xeeGNmW8nLDU+Dk5svg48T+U/kMaXxSPSkxoeo
n5eYinpFt60z+Pes8fAHSqlftfM6oufwtsM/5tRS9nbVry3ivbSwPnW+dR/w
hemPwat2DSGPPPqMH8iafvgknNaLubvSMQueS7GGz/VcFvPNr6ac5+gY7kHx
DfDjMzbcyyVtwQ/u2fH5jMQvUt2UTj/yaTvznLxMeO2124g6UXa9T3/45DVx
514/+jlrePJKwG/685hE9NAXPm/j/RnBz1/yDL2DfRR+BaOPMb8//ZN4voh9
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
e/iDOYK7Jeci4tqpPugt3+5Fp+JTIvTkSkAg+bJvV7GfXmu0kjy9Ff9r6acp
e73cc/CvMrcVOispQL/nKX449cTaUeTnodTDSths6qfXA8CjKf/h52o7jfmh
nm8FTpa2tILfe1XMObNZBl9/qb3wqVXH/hL8mm5TCj4mbaYyz/uXfUvy2TNC
Z6tL+sd9CN4Cv5dWBRznM5NzvimRc/KoMfj3T2Pyk+8l/M40jvibVscHR70/
ijq71Ix+9fQIcFtREP6GQwZwHuYPFfMPkjIG/Nd5HfHO9AI6s57Z5FOjLPiA
ys2I5xcO4O93oJB5yqPM9atT63Fuzl8nvrp/Y9+wLAlfZ9WnOejblz+i/p7V
lPmRzEGiLpPjveifGjzoKD5v6kL8dT0bkXdWg2PkF63cxc95j2Wv1a0SkQ+k
YexJ1V3BT1vr9VTw0tr49eizCxazB+dgLfp6nmkir0iJjvQ/QvyZy9tsIPps
yiXmnVXf7qJD3z4T/WlYLj68ofPge9Y9Jx/EPaAuvOZB/+zRTvjFX7n0y2b0
xOerYmXwza8v1OFmT7heba3F/IV8gTkOdVQAvIGui+h3a6L6wsdr2MOjcvos
fMTkAC/u/1x871UqE/E+0s1vzCtk6Oe0Dw/lXJc0o1651VPwTqqBq+CNI8vQ
Iz5rgv/WJPxflIhAEQe0r43w0/Oehs4goQlxunEGffptR6jTtv7k+yzdCs84
chO68eQ79M2SutP/q9+ZOvEhfm4qd2P4qkIX+mOpm+DZeuWCd9+lwyf7nOB1
YszJG1OmMW/ychj9wZ5tqPtDHYl7u2ZR97Q0F8+jHDwDPtXNiT0ptR5wbrpn
o/+2/Y1PRBD7KZTzO7gex+aga5++TOgNNLOK6OvatYIv/2eDL0Kywjlvxh5O
1SUTEd+1v9FZy6Yy+WKGK33cMBf4wsByeJ9xYfhC2uwhnhdr6avZ428iW1sR
P+58Y14regf6K+9M+nqBtcGNceX0q1xeU1eZWOKX/PUnOizJij57axfmQvxy
0UePqY0+rco0ru/sgR/E+0z9T/iUqhe2YA56Qg9wxDV0h9rMS8yTHVqGnuBn
TXznHJw552vbs/fy1Axw4+T/8ENa9Jv9UtpsdLX3V4Ev+h0TeFh3w5z9G9WC
4avitqFDCZ4FbzwK/ky6tRE+rWogc/n2/9E/sBxO32O8Nfep/XLuW0P8MzVZ
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
eN00a4Ff1WGdqZePH6RuK3QEB/hH4KNqXp95qDBDcMIyf+7zjWjqzF37wUv7
8DtRpScwP7BJK/hBXd8s/Kt+OMM/11lIPyTyPX3degM4f2vugTeCEvXPxxlR
vylrJ+M7YpNOnv4+Cn78CXvE1J13E/+ey/Bi+yPE95JehYm5Q+3+xcTnc3/Q
rVVdTn6rvZl8I30U8zXShrrMvS/qDv9j2Yj7+XaZiDvS50vUC6MXiH6bbhu6
bXnpeXDJVXSScs1P+MDP3oWOpk8g/fTOC8EtzdzBIbdtwONrFoh4omsUzvWe
Np75mGBj8HlWW/JfVjQ+pZ0/0ieZ1VTUedol7OVSP6+H/8W21ujIrtxhjmUo
fJOc/Qq9ZPVO8Mv1/9I/tWNvrapGNP4vrXJEn1JedZLz10Xv+9UfHKMMtybv
anYQn8x9eD/v0Tx/V/ehk1pFf0pWs89U2neJc6uFb5QfdKS+fbgKnujNM+rG
e2Y89wepM3RN4uFF0n5xvrPXw5+8HALe300dLsXeZK/Cv63M/XZ/xNxavTj8
N0ckg7PtH8NDaHeIOkFRXUVf1csQ38LKAZxXw87U153d4F0b1qGfuceevlna
FvJR7Ej6auUveD4txzMP5u6/Vnzexc/R5TufJd/8mkO+6FKPP03QFejGx/O9
m1diHuOIA3qPMeXUifd6ivus6h+Cjm/FH+57cbTg0VWjOnLebNKZxwrrim79
7C1932AoePnVT3RmM63hjbx86UeV/CIu/nsKHzMmhnP9bJeon+RTG6gzbS/C
o7pNF3lC8z1b4CH5WlOuw9xE6pLPKSJeKpdr+onf+6T372hgJu6TLr8U/JCq
AndMbok/6l4DdA12DcEFhuxhkaKd4V3OnSb+3agh6i91qBdzu0ER9B0bulE/
ZPRDz5+wS8zpaKf9B2+XksM8yvx97PWosIM+7OWvzFMnDqBeMY8VviQ6k4/c
/52LiEuj9PXOhe7Mf7fKY+4uOgH/l7oJ5IdKrdFVtRmEX+WKdHQSdluof56M
Zm7IP4s8Xq8T8b3aZ8Hn6OrlCV5DK8+D705tLu6Dakwec4te04ink66Icy/7
NSF+h7YG93dzAg9P3Q7/lvuGubUalzk3gRK646g88X0k7Xr0mSmd4TeGNGK+
pOks8tZ7fBQlzwOcl61/OR/7lqE//MHcnvbsH4F7NI23EXefxHKuGnWhjul0
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
HFMzpy7zc1s/5p3VdHWV91L6rG7Z9GUOfcAPcyOYc7VmPqi0+gpv8/BOzpPB
AXiLX5Lx4Xy7S+QZzdeP3Ie8uvgffHUC58yd5irOw5HH8N/vdqCfGz+M9z/d
k76vqAv4/sJVnAOrjaLO0KRa0W+rl1G/deiK3nfFKvi4w4KYM22oj49gYDr4
beNn+H8v6UFc7ZcAH+CE/1bxc/f9yu8/mpK3f8N/lB5m8/zWWlFXdYrBv6py
FfHKpZi6vHs8+O9U3T7FspHUZ+HwF7VVAphvlHjrdAo14fdUhMB7DRjEvNZq
J/y7rEjwlKA85kGV6HuUPkXwR+2y0KVcTuE5T7TAD/wPPoSaOHydlIkSfmlN
IukXrv8if4z9SXx9bwyfaKEr+WhpO+rg1ot4DsEb2ZNlfkG8d/n1APrfNa3p
63wm47uyy1fUfSq9EdRhBffFvjDFF2dwkj5F1NHORiIfqLeHErcXLgL3DvRl
vjk9nvmi4TLO+3X4Uool6H41HjfpV+J1e/3SZ+DPYlPjk/h3AwvF3E65Mhj8
NX8UOM6ME/TjdiOI43PWwKd1ugIe1yYU3CJtGvzO0bvp1758or/4Pob82nMC
dX8L9sNqA16D380Ohq+m2olP5fXzOl7jPeJtSFdf8edDI8ivT+eAH7ZWc47G
fYF3fXUd/p49vlJ/HUhlTnfoEn1Gv6sCH9J8eEX8mH6WeDa0Er/t0AvErarp
1Ndx/xHHX2WRPzpu4v1aGYJDTSkV8VsdAx6leWyr8401B4/TR/8qtbCi3q84
wHMsy4VPtuMyuLN+qKiTpKJo9mP194S3NZo6U2l8X/RZ8hk1ffywSTqfiDyR
F+W/kdyL9XOYk71+zxyj5Uji7SQjcKE4feL73z7MT5+mMj9W/OXnXNeX+tt+
i+gbtduM4Ccfa099cKca7212PeY3j/PJl5PWCV2x4i96d1VkGvVfHOdU9bMB
fVG0EfH8gC4+J68X+UNeZ8NccoAzugapI3WeiZs4D5r6GvCwjJXES98vAofU
jPIR/Ydq2jrO6Uw1cfdZf/JBv9XMr7zPw2NI9KEv+T6MeDJNj37LORw80Yl9
iJpZMdwrdz320bU9zD3N8hS/V37gXGoTezPPOl8XHzD/AuYaPeDvSnq1qS9U
zThns497is9r5UffP8AZ/D+jATyAw5OZG5b349fwecSLwN/EQ5OF9P8VA0Vc
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
nW09nj7EBP2mKu+ULo6+FM9NkdeaftPiJnOclBL2RsztBU619yvfv7QWc83O
3eGXSI3gUd7QzXFn+vD+Wp2in2q5jfhlNoXz+aNGCc9tOve1ZoQ4R5pDU5g7
5cbSf7zP4XlrzbqL39fS6dIfhonvqzoXyRzlO/2RJnk9cXXvR/D3C3fQldcM
xcf+oc1A8fN8niL2d6kjM9BlLnoCXnxZp8fc0If3fus7dem3YJ1vTysx/1B+
dKAvLdTpUQIH8F5Xb4H/4yLDH//Zgvrr73ji77lZAvdS+aewF9k6U+AfKovP
9JO9y6lncyT4Jc/M4UEF6fZ/p4xnn8rbZ5z7CxvAX4e+Qbfb9D/mBvVPUNc/
/gqvcOws7uNcC+aU2+6Bw+6egq6uGXtK1Rn74aGdGM09jTkwQPw8ne3waYhx
EH7w8mD8tdST0sDN77Wh7/33BF/HSFfq/GJ4zfJnfPO1Ro74emXlEZ9r3SG/
ebjiQ2d8AD2OxB4yxc7Wuj1/q+EPp06kj09fpcO9TcmTDuXiPihW3RE8F3mQ
g+DFyF9PwCM+4Az/Nj8aftSAgex93Roj6kr1DaWG84evgqof+yTV8fCfpAO6
fs9jBf3ZW/bKyx41mffOGwQ/Mv0CeLNemOivtWGPLcW/V9vw/NZfou/OeYpP
zcwkvs76reSpdbXxmZphTb3q8Afez8fe1BO5Htzbmqncj11OvP9O6PXUlr7w
O/624vOcHcnvD8K/kbftpT+uU8m89649esPmjai/Mi+Cj50LYa6eXsKcLCB2
s/g+W29Rr7RpIPoCeZTOLy3HkXO1fjh8sMpn9IU1o+AHLOjHXD5yA/OZFtN5
f+XNg3n/TkKPo9y9kft7Fx6U9AkdrKrzDdE3y73h4WoTVpGHf48WPo6aE0eZ
k+xfAt5VPQm8LThN3H+p0Sn2k6Qns+fgWDr9VAF4mCbwO/XgLc63ZnoveBgD
FPiaKz6CSw/C30aZcxS8Zmkt6vSOqfDT7wYzX899hZ9kyWBwpR+bwY3176DP
e3SS/HMyA9+MNgPAiR6k8/PeaU5+73sNfoRfX+J0eF/OTeg/6p3ulpyn3ZOo
k+vmoldaUUmebOdIPjLJgE/nsRs8po0heEzEXXCATh7wI43+8L42k38UQY/B
62tS50klOdynoiXU6ZZv4GHMxO9KPvwJfla9uXz+6vNFPJNUS/Bx0er2+D3f
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
Dnf5eVXf+HeDr4J7fy0WeydUdgMibP8HppLlLg==
              "], "Version" -> {12., 0}, "ID" -> 8874117158160028988]]}, 
         "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 5365625936305270856]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["algebra 1" -> 1, "algebra 2" -> 2, "calc" -> 3]}, 
             "MissingCode" -> 0, "Version" -> {12., 0}, "ID" -> 
             7839270857245868221, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {3}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 8657333489902084908]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       "algebra 1" -> 0.4031959852086635, "algebra 2" -> 0.46421024828314844`,
         "calc" -> 0.13259376650818808`]], "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {3, 4}, 0., {
      1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
    "TieBreaker" -> RandomChoice, "PerformanceGoal" -> "Quality", 
    "BatchProcessing" -> Automatic, "Model" -> 
    Association["Method" -> "NeuralNetwork", "Network" -> NetChain[
        Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.08128876984119415, -0.031788215041160583`, 
                 0.011673877947032452`, 
                 0.049095191061496735`, -0.013187631033360958`, 
                 0.048403751105070114`, -0.046583931893110275`, 
                 0.029600244015455246`, -0.10090754926204681`, 
                 0.07111251354217529, 
                 0.013668681494891644`, -0.09154791384935379, \
-0.009359072893857956, 0.05507646128535271, 
                 0.00368804344907403, -0.08850514888763428, \
-0.041824955493211746`, 
                 0.03220048174262047, -0.10454142093658447`, \
-0.07179461419582367, -0.04756263643503189, 0.025725748389959335`, 
                 0.053272537887096405`, 
                 0.055581532418727875`, -0.05129309371113777, 
                 0.0500895157456398, 
                 0.0481087826192379, -0.0379570871591568, \
-0.03460383787751198, 
                 0.029707802459597588`, -0.03658255934715271, \
-0.03220999613404274, 0.003595878602936864, 
                 0.004173996392637491, -0.02314586751163006, \
-0.06025772541761398, -0.033500779420137405`, -0.0008558844565413892, \
-0.07272922247648239, 0.03224568068981171, 0.00797856692224741, 
                 0.047439806163311005`, -0.08119518309831619, \
-0.006036270875483751, 0.019025862216949463`, -0.09111792594194412, 
                 0.02403104677796364, 
                 0.028697790578007698`, -0.007988414727151394, \
-0.08204297721385956}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               14, "$InputDimensions" -> {14}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{14}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "3" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "4" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.05893959477543831, -0.08216433972120285, \
-0.03747272118926048, -0.03184119611978531, 0.00912063755095005, 
                 0.04302257299423218, -0.04541104659438133, 
                 0.050963643938302994`, -0.07364210486412048, \
-0.025709548965096474`, 0.034377627074718475`, 
                 0.0101291723549366, -0.03364328294992447, \
-0.02659747377038002, 0.020302310585975647`, 0.03010544367134571, 
                 0.03163350746035576, 0.04128600284457207, 
                 0.03394065797328949, 0.032981883734464645`, 
                 0.04827582463622093, -0.052807312458753586`, 
                 0.030322037637233734`, 
                 0.05021046847105026, -0.06868857145309448, \
-0.07980704307556152, -0.0607265904545784, 
                 0.017643563449382782`, -0.041388437151908875`, \
-0.040539439767599106`, 0.03545743227005005, 
                 0.04162219911813736, -0.05185209959745407, 
                 0.034202028065919876`, 
                 0.0339568592607975, -0.06583812832832336, 
                 0.05231442674994469, 
                 0.05222751200199127, -0.03475125506520271, 
                 0.028603510931134224`, 
                 0.062342312186956406`, -0.041655104607343674`, \
-0.03891006484627724, 0.0011471263132989407`, -0.056370846927165985`, 
                 0.008595917373895645, -0.03175393491983414, 
                 0.02818174473941326, -0.020635513588786125`, \
-0.004218107555061579}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "5" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "6" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{0.05137788504362106, 
                 0.03341032564640045, -0.05809080973267555, 
                 0.049180809408426285`, 
                 0.032243698835372925`, -0.05733887478709221, 
                 0.04059496894478798, -0.0557822585105896, 
                 0.006499743554741144, -0.04350709542632103, \
-0.006330655422061682, -0.04969324916601181, -0.05169517174363136, \
-0.014559966512024403`, 0.026787009090185165`, 
                 0.024211538955569267`, -0.0339275524020195, 
                 0.03734573349356651, 
                 0.0060672336257994175`, -0.06124924495816231, \
-0.04994220286607742, -0.0375748835504055, -0.07033056765794754, 
                 0.02022705040872097, -0.049430716782808304`, 
                 0.04194442555308342, -0.018915018066763878`, 
                 0.025919858366250992`, 0.03045082651078701, 
                 0.014081680215895176`, -0.011510682292282581`, \
-0.03934895992279053, 
                 0.027567867189645767`, -0.008176754228770733, \
-0.04650910943746567, -0.02197556011378765, 
                 0.007082786411046982, -0.06984511762857437, \
-0.03972901776432991, -0.062216028571128845`, -0.03294745832681656, \
-0.027635399252176285`, -0.0375661626458168, -0.042870502918958664`, \
-0.043365612626075745`, 0.04893705993890762, 0.009343261830508709, 
                 0.0014237069990485907`, 
                 0.03691279515624046, -0.009963774122297764}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "10" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
aVMk7Az6K9ot3YwWJoPp/wDfLQvC
                "], "Biases" -> 
               RawArray["Real32",{-0.0496935211122036, -0.031157078221440315`,
                  0.029353134334087372`, 
                 0.005467326380312443, -0.05170518159866333, \
-0.03450728580355644, 0.043372947722673416`, -0.003329092636704445, 
                 0.05377328768372536, 0.05563774332404137, 
                 0.0015291732270270586`, -0.004316406790167093, \
-0.009469599463045597, 
                 0.021465526893734932`, -0.0003954332787543535, \
-0.04345396161079407, 0.020025981590151787`, -0.009721183218061924, 
                 0.0320252887904644, 0.02486453391611576, 0.02461918257176876,
                  0.0028634145855903625`, -0.013798628933727741`, 
                 0.03936867415904999, 
                 0.0016226287698373199`, -0.026025567203760147`, 
                 0.018319452181458473`, 
                 0.020893778651952744`, -0.028521528467535973`, 
                 0.03685304895043373, -0.0556289479136467, 
                 0.024883156642317772`, -0.044172871857881546`, 
                 0.05233871191740036, 
                 0.05633855238556862, -0.0165045578032732, \
-0.06002825126051903, -0.047940693795681, -0.007569759618490934, \
-0.0387977659702301, -0.05371663346886635, 0.005799640901386738, 
                 0.07199405878782272, -0.014258461073040962`, \
-0.047384586185216904`, -0.028163781389594078`, 0.0245397686958313, 
                 0.055359046906232834`, 0.024838952347636223`, 
                 0.04819060117006302}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "11" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "12" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "13" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
SKXlk08JfwsW8EAjfxhTogH+K0/T0NBE2ip/jY7++kXPWmLF20kX6PxcfSj4
KMHMURdpwaNw6shroYV7SZJXbMWpPXPo3oWl/MBhLuSMcqGazx+ppd8r0fvR
O5o54zTf2zCQ7y1TohqfdnHxfVWeV6TN7ktbJN3P/hQdKuPxpNq/XUgjYOKD
jXQz3hwVxiVxr336/Lnts/DDK4/zlLfAx/TXcCZqKwVPfEg7F9jx/snJfPnD
JBTldKR/vyih60B7/m3jQumVT4UyUxM8r38c/jyYwtLAu6DYTREVjKIRfI1x
qOglHle9QsTpwkuj9cLf6Rv5pL8nKr6NFbJ6pXH9BQMesmk17lpjR5qLlOFw
92bwCsqljhMXxTUjlcFKZ4bw2VqJf89xFgNsbOFLbSGNNcoX2g6awOrqHvg8
bAlZ3YsA7/NuuOubOuvcW0rWU5PAec5qGnvpHQS8boWmhQvAo1yfDzmt4Mtn
D7Ovwmmxv/UwGHS4Quhz4SqZxg+WQi8HflIzCqePL4IxMbtFF904IfN0FyTv
HMJbgiNgrVkPvpT0Be619JR4lvwsL1kSj3OM5XhidhN08x7FKeZ7hb495fjp
sxg4XFgiBB/QxPysbizkfyP9+MEQE+xKP0MHk/5rVTrktw8y+/ZBFbswmrBw
Aj/EM6hSGwNzJt0Q1DYLGFr1j/MntrPOlGeSfQ+mQbmZLK7z3cFrN8xDLS8T
YcccfRigOo7HWJeIf8MisWPRSNSKvgWP00vB78I72PNJDVwLq8B0jTKe+rsF
Os9/oer1VuIE/Qu0+lE891VqpmWfJgv1h1TQw0GDtknUOHPIMJ7O9qimPY+9
Ar9AS1gdfdFaAFjxhRzXZgmy4T/hfkQ3rh84X+rkZY9XaxbCS+O7NOryDumV
RzpoctkK22dHs1FBMVis+QJu27R5aIAzbKys5c11GjzT+Q3ItWWRb3uFoPlk
K5+0VuHVydpsul8fbQ/twjO/f8DuKY1UMSwTKi+cpTdmTrQy7hioVyzkuIpV
0Icn4pExDnTqYyY96Irg6XdlxM2HLnPgl2xhwLUUCMkejnO2R4m/pmgJW0xc
Uf7gdjg/xlvwlxvIQkeWpNz5g9hzuj5O+vhKGqduAHqaZ6n5xg9qC3fmg9+1
0W5pjOTiLGcw7vJAi37+UP85Be5XeApOE3aCc0GxUPvMA6fkH4DMvWMl+Yfi
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
HUY=
                "], "Biases" -> 
               RawArray["Real32",{0.04769552871584892, 0.02412562072277069, 
                 0.04827262461185455, 
                 0.04670416936278343, -0.047255150973796844`, \
-0.021498294547200203`, -0.02168579213321209, -0.001684637856669724, \
-0.06244468688964844, -0.04425673559308052, -0.006642873398959637, 
                 0.06385267525911331, -0.04174136370420456, 
                 0.008709002286195755, -0.03884495422244072, \
-0.030287889763712883`, -0.008294540457427502, -0.06441272795200348, \
-0.017846450209617615`, 0.0041427453979849815`, -0.046754539012908936`, 
                 0.031969018280506134`, -0.02701582945883274, \
-0.0466628223657608, -0.04320477694272995, 0.0281041469424963, 
                 0.007177599240094423, -0.05463852733373642, 
                 0.03685178980231285, -0.038807179778814316`, 
                 0.021933749318122864`, 
                 0.03117917850613594, -0.01343563199043274, \
-0.027888236567378044`, -0.04063591733574867, -0.011804920621216297`, 
                 0.04508870467543602, 
                 0.0348626933991909, -0.006551866419613361, \
-0.02032407745718956, 0.034401651471853256`, -0.0016799825243651867`, 
                 0.04361066222190857, -0.022646842524409294`, 
                 0.03394876420497894, 
                 0.059706930071115494`, -0.019233841449022293`, \
-0.05741357430815697, 0.03781087324023247, -0.03660013899207115}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "14" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "15" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "16" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{
                 0.011299739591777325`, -0.038077447563409805`, 
                 0.02009568363428116, -0.0428328737616539, \
-0.04992231726646423, 0.010028320364654064`, -0.04179580509662628, 
                 0.0413956381380558, 0.03059295564889908, 
                 0.006242093630135059, 
                 0.021829357370734215`, -0.035783328115940094`, \
-0.011141045950353146`, 
                 0.025386663153767586`, -0.052157044410705566`, \
-0.001232546172104776, 0.049043457955121994`, -0.04538101702928543, 
                 0.0007288589840754867, -0.04702610522508621, 
                 0.02917223423719406, 
                 0.031097717583179474`, -0.04186902195215225, 
                 0.00906863808631897, 
                 0.03360305353999138, -0.050308629870414734`, 
                 0.04467714950442314, -0.012226668186485767`, 
                 0.03802736848592758, -0.06108656898140907, \
-0.032607078552246094`, 0.026785004884004593`, 
                 0.026318293064832687`, -0.04539700970053673, \
-0.04475089907646179, -0.04890415072441101, 0.01473915483802557, 
                 0.041046760976314545`, 0.030604859814047813`, 
                 0.0225057452917099, -0.003593716537579894, 
                 0.03763239085674286, 0.0097573921084404, 0.02076616883277893,
                  0.01770351082086563, 
                 0.03373607248067856, -0.04322350397706032, \
-0.049909807741642, -0.049205049872398376`, -0.020340677350759506`}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "17" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "18" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "19" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.05066060647368431, -0.03015095554292202, \
-0.015096036717295647`, 
                 0.044546887278556824`, -0.04393340274691582, \
-0.04082593694329262, -0.038197025656700134`, 
                 0.02775930054485798, -0.055771127343177795`, \
-0.04308075085282326, 0.040771305561065674`, -0.04594847559928894, 
                 0.04080788046121597, -0.0074323974549770355`, 
                 0.012335349805653095`, 
                 0.0038455293979495764`, -0.05129465088248253, \
-0.019093794748187065`, -0.03922833502292633, -0.034457977861166, 
                 0.03930414840579033, 
                 0.046054549515247345`, -0.010675559751689434`, 
                 0.038183409720659256`, -0.04633982479572296, \
-0.0019272718345746398`, 0.030443239957094193`, 
                 0.005339764058589935, -0.0001443572691641748, \
-0.05834652855992317, -0.044480983167886734`, 0.03225945681333542, 
                 0.016947191208600998`, -0.06290702521800995, \
-0.04268784821033478, -0.0317913219332695, 
                 0.02299049124121666, -0.022639334201812744`, \
-0.032889194786548615`, 0.030521681532263756`, 0.05265343561768532, 
                 0.04120653122663498, 0.004685429856181145, 
                 0.029484277591109276`, -0.03887660801410675, \
-0.03954869881272316, -0.04785299301147461, -0.05026458948850632, 
                 0.033563464879989624`, -0.05149105563759804}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "20" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "21" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "22" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
zA==
                "], "Biases" -> 
               RawArray["Real32",{-0.010420534759759903`, 
                 0.023679420351982117`, 0.03618381917476654, 
                 0.04570606350898743, 
                 0.0061310832388699055`, -0.036796215921640396`, 
                 0.029540754854679108`, -0.03174523264169693, 
                 0.023186970502138138`, 
                 0.03420376777648926, -0.04906882718205452, 
                 0.0413944311439991, 
                 0.031802594661712646`, -0.0011024298146367073`, 
                 0.03371650353074074, -0.05539872869849205, 
                 0.0389203242957592, -0.018666408956050873`, 
                 0.04234427586197853, -0.012118611484766006`, 
                 0.023850219324231148`, 
                 0.05052565410733223, -0.03035055659711361, \
-0.04773225262761116, -0.04891157150268555, -0.002461786847561598, \
-0.03913532942533493, 
                 0.053624220192432404`, -0.027216095477342606`, \
-0.03330349549651146, -0.02639915980398655, -0.03041594661772251, 
                 0.02209867537021637, -0.04721883684396744, 
                 0.05110710486769676, -0.044721510261297226`, 
                 0.04934778809547424, 
                 0.021633245050907135`, -0.026837673038244247`, 
                 0.044062819331884384`, 0.04671032354235649, 
                 0.05130060017108917, -0.035773057490587234`, 
                 0.003048766404390335, -0.051769357174634933`, \
-0.05038580670952797, 
                 0.029803169891238213`, -0.017908234149217606`, \
-0.0397668182849884, 0.015285255387425423`}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "23" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "24" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1:eJwViX0s1HEcgIUZZdnNUrIkYxRSzPvv+wlXs7LIXWcorfM258x15G23lnNz
3XHIS7sTMwmlnFuSxO/3WTcv6+VYR2azWq0t7cxcE+ZSij+eZ3v2HMsQcXKs
raysiux3xOGXxhQW8su5druRzc8PDsrfnTY7BO3gOrxIXH/fIMVmFVMhRYau
bsVB3wQAVidappRoXXIH/8jtMSStiJorc8atPDmKx4zE6VUO+sxfI2EcIQh/
SOg+lYLJqOohoqhG2Ha+DhY/d9BaAiF16hxY213FTo0Wf24+BkuBEg4byrDb
2wm+esnJZEAkKZCZ6fEoCeSaQ+B1mzqi9HYD3PsWiKf287B+4SZFN3ZDrqAe
14fCscviyviOcZE1JMeazXocTXIHnxEVfPKW4sRKMvy7wAXtOxVpicgikfJK
eFsZirm6TSblSh1wTBy6ZziNOaqJJ0MbNmBYofBSzklk8QREVysi339VY/ff
QPQ/XYx6li2yXUpgezYMIz4GkESeitkI5REHZQctiM2Aux/C0dimYKbX3FAe
3ByZ+TIOKbc1ZtJOCcuxD3BiNh1CdQkQlW0mLw54gdLcSfireuIxQpN5jRQ0
X54zo3oFdlTVEP1gM1F7tuJ9l1WmQJSHx00BQKfWouMCF3WL1ZSY3QVnTO0Y
oluiDScqaEW7JyYdUUHpxENUG9XIXWKj/0w67hsAeN/HwfL4sxi9NYCZBjYe
atChraaKMaUsk6b+NzCQ7AEe57Uk7pYMZgprUCJlUeKLT6nLdY5k/LOOiu9v
RgeBEB7NSXF6qR96eY0Y4+0M6wczoZd5ghJowT21NTjn1ATP0lJA5icDoagB
9qr9MSwpGsRZRpJMJ+J/YA0zYA==
                "], "Biases" -> 
               RawArray["Real32",{0.004501341376453638, 
                 0.03930594399571419, -0.05295654013752937}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {3}, "$OutputSize" -> 3, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "15", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "16", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "17", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "18", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "19", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "20", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "21", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "23", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "22", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "24", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "23", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "24", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{14}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.0.10", "Unstable" -> False]], "Training" -> 
      Association[
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 4.145588374491424, "MeanInputsPerSecond" -> 
        4677.743723743192], "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {
              0.0012623257141337583`, -0.03208574607256455, \
-0.0423425141734055, -0.026275317916284034`, 
              0.0005928230580389945, -0.029840919102985735`, 
              0.052384258605464355`, 0.03215707761866486, 
              0.024811880100510105`, -0.022751589487360918`, \
-0.07624345370882309, 
              0.0211987324286841, -0.05435482946706057, -0.03503056857315164},
              "StandardDeviation" -> {0.25145058718200325`, 
              0.24141985123349308`, 0.2546588305080092, 0.2522228038361198, 
              0.22569566077473885`, 0.24396173086606115`, 
              0.25420741597034485`, 0.23629773824840358`, 0.2481106087069877, 
              0.2571783354685987, 0.2943974560693407, 0.23841481053094532`, 
              0.30960042541103977`, 0.2448812345708037}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 9178066660380384935]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
              "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "FeatureNumber" -> 14, "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NetworkType" -> 
        Association["Value" -> "FullyConnected", "Options" -> Association[]], 
        "NetworkDepth" -> 
        Association["Value" -> 8, "Options" -> Association[]], 
        "NumberOfParameters" -> 
        Association["Value" -> 18350, "Options" -> Association[]], 
        "ActivationFunction" -> 
        Association["Value" -> "SELU", "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> None, "Options" -> Association[]], "Dropout" -> 
        Association["Value" -> 0.01, "Options" -> Association[]], 
        "NetInitializationMethod" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association[
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> 
          Association[]], MaxTrainingRounds -> 
        Association["Value" -> 3, "Options" -> Association[]], ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "EarlyStopping" -> 
        Association["Value" -> False, "Options" -> Association[]], 
        TrainingProgressReporting -> 
        Association["Value" -> None, "Options" -> Association[]], 
        "NetTrainOptions" -> 
        Association[
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> Association[]], "LossFunction" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "ValidationSetRatio" -> 
        Association[
         "Value" -> 0.15008587660192893`, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[204689], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.4663303`7.120238628327008, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.541169383212411, 0.019121006533101535`], "Accuracy" -> 
         Around[0.7291319517618574, 0.01617326725810448], "EvaluationTime" -> 
         0.00005637722976011025, "TestSize" -> 1514, "ModelMemory" -> 197424, 
         "ModelUtility" -> 0.49691690886860895`, "TrainingSize" -> 6055, 
         "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 3844992, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.541169383212411, 0.013520593382668372`]}, 
         "AccuracyHistory" -> {
           Around[0.7291319517618574, 0.011436226952148038`]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           8, "NumberOfParameters" -> 18350, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> 0.01, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 3, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
         "FinalTrainingSize" -> 7569], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 177279244083963]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 3350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 10], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.4129349437108654`, 0.05247845486536692], "Accuracy" -> 
              Around[0.5056825555278777, 0.029232004394493957`], 
              "EvaluationTime" -> 0.000034366849967238515`, "TestSize" -> 
              8259, "ModelMemory" -> 67472., 
              "ModelUtility" -> -1.4122800015066264`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.11040596861042053`, "TrainingMemory" -> 
              258709.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.4635246128499815`, 0.056142598368107886`], 
                Around[1.362345274571749, 0.014404462102330819`]}, 
              "AccuracyHistory" -> {
                Around[0.47696980050768323`, 0.01876832859461636], 
                Around[0.534395310548072, 0.005735658163301976]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.0557168275864874`, 0.014087245590050614`], "Accuracy" -> 
              Around[0.5390797157042619, 0.009006682400589203], 
              "EvaluationTime" -> 0.000031821919243726724`, "TestSize" -> 
              6100, "ModelMemory" -> 67472, 
              "ModelUtility" -> -0.8199105900931151, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
              246768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.0557168275864874`, 0.009961186884965076]}, 
              "AccuracyHistory" -> {
                Around[0.5390797157042619, 0.006368686201450158]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6326761640353843, 0.00660334141865867], "Accuracy" -> 
              Around[0.6552371053633849, 0.008623806688542878], 
              "EvaluationTime" -> 0.00003008309888141349, "TestSize" -> 6069, 
              "ModelMemory" -> 67472, "ModelUtility" -> 0.2052824402571195, 
              "TrainingSize" -> 1500, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 973224, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6326761640353843, 0.004669267495623542]}, 
              "AccuracyHistory" -> {
                Around[0.6552371053633849, 0.006097952189110574]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5780951048330678, 0.016154688184188932`], "Accuracy" -> 
              Around[0.6869937660078583, 0.016872203775761763`], 
              "EvaluationTime" -> 0.0000370490093954008, "TestSize" -> 1514, 
              "ModelMemory" -> 67472, "ModelUtility" -> 0.3787468012579217, 
              "TrainingSize" -> 6055, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 3513472, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5780951048330678, 0.011423089562994187`]}, 
              "AccuracyHistory" -> {
                Around[0.6869937660078583, 0.011930449703402414`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8648674990273522, 0.008969918698459894], "Accuracy" -> 
              Around[0.5861230856250321, 0.008142569983974453], 
              "EvaluationTime" -> 0.000023493442257671914`, "TestSize" -> 
              7319, "ModelMemory" -> 67472, 
              "ModelUtility" -> -0.419926544789779, "TrainingSize" -> 250, 
              "TrainingTime" -> 0.19952623149688792`, "TrainingMemory" -> 
              300528, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.8648674990273522, 0.006342690338373001]}, 
              "AccuracyHistory" -> {
                Around[0.5861230856250321, 0.005757666451954373]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000023493442257671914`, "MeanCrossEntropy" -> 
             Around[0.8648674990273522, 0.008969918698459894], "ModelMemory" -> 
             67472, "TrainingMemory" -> 300528, "TrainingTime" -> 
             6.151262153410199], "Index" -> 1], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 18350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[5.325503923480018, 0.09921818595828927], "Accuracy" -> 
              Around[0.5095225586575087, 0.008117742140917384], 
              "EvaluationTime" -> 0.00003890319012041533, "TestSize" -> 7559, 
              "ModelMemory" -> 172944, "ModelUtility" -> -4.06753247752196, 
              "TrainingSize" -> 10, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 472296, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[5.325503923480018, 0.07015785210813423]}, 
              "AccuracyHistory" -> {
                Around[0.5095225586575087, 0.005740110515766484]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.0918337252948778`, 0.0828040957398767], "Accuracy" -> 
              Around[0.6330203416704093, 0.007866188375053], "EvaluationTime" -> 
              0.000036484111395953224`, "TestSize" -> 7509, "ModelMemory" -> 
              172944, "ModelUtility" -> -2.9832920781112016`, "TrainingSize" -> 
              60, "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
              484808, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.0918337252948778`, 0.05855133760768692]}, 
              "AccuracyHistory" -> {
                Around[0.6330203416704093, 0.005562235142090766]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000036484111395953224`, "MeanCrossEntropy" -> 
             Around[3.0918337252948778`, 0.0828040957398767], "ModelMemory" -> 
             172944, "TrainingMemory" -> 484808, "TrainingTime" -> 
             303.32257970691103`], "Index" -> 2], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 8350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.6799051955849906`, 0.0772914641964451], "Accuracy" -> 
              Around[0.6174541621888031, 0.01465459985406131], 
              "EvaluationTime" -> 0.00004017202341183495, "TestSize" -> 2200, 
              "ModelMemory" -> 105848, "ModelUtility" -> -1.765279418306608, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 348864, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.6799051955849906`, 0.054653318461143574`]}, 
              "AccuracyHistory" -> {
                Around[0.6174541621888031, 0.010362366932382142`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.9297253090670847`, 0.08086758521784315], "Accuracy" -> 
              Around[0.5067142132412032, 0.008129158621803374], 
              "EvaluationTime" -> 0.00004327630841850848, "TestSize" -> 7559, 
              "ModelMemory" -> 105848, "ModelUtility" -> -3.4548386261606785`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 336432, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.9297253090670847`, 0.0571820178857179]}, 
              "AccuracyHistory" -> {
                Around[0.5067142132412032, 0.005748183186818254]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00004327630841850848, "MeanCrossEntropy" -> 
             Around[3.9297253090670847`, 0.08086758521784315], "ModelMemory" -> 
             105848, "TrainingMemory" -> 336432, "TrainingTime" -> 
             19.410575570649506`], "Index" -> 3], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 18350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8595524690010831, 0.021036066217171346`], "Accuracy" -> 
              Around[0.6631868874172807, 0.007811557391539032], 
              "EvaluationTime" -> 0.00002846306769895994, "TestSize" -> 7319, 
              "ModelMemory" -> 197424, 
              "ModelUtility" -> -0.42412418620689807`, "TrainingSize" -> 250, 
              "TrainingTime" -> 19.952623149688797`, "TrainingMemory" -> 
              860568, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.8595524690010831, 0.014874745071651103`]}, 
              "AccuracyHistory" -> {
                Around[0.6631868874172807, 0.005523605203185148]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[5.681200837638977, 0.09904502774330957], "Accuracy" -> 
              Around[0.49738673945888184`, 0.008118871738975396], 
              "EvaluationTime" -> 0.00003590857224120579, "TestSize" -> 7559, 
              "ModelMemory" -> 197424, "ModelUtility" -> -4.198332231728658, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.1622776601683795`, 
              "TrainingMemory" -> 555352, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[5.681200837638977, 0.07003541076010393]}, 
              "AccuracyHistory" -> {
                Around[0.49738673945888184`, 0.005740909262213319]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.6884936070511563`, 0.09917475668619777], "Accuracy" -> 
              Around[0.6360818071235306, 0.007848120676335885], 
              "EvaluationTime" -> 0.000031205796407786544`, "TestSize" -> 
              7509, "ModelMemory" -> 197424, 
              "ModelUtility" -> -3.3382080813012682`, "TrainingSize" -> 60, 
              "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 567656,
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.6884936070511563`, 0.07012714297533633]}, 
              "AccuracyHistory" -> {
                Around[0.6360818071235306, 0.005549459349807458]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000031205796407786544`, "MeanCrossEntropy" -> 
             Around[3.6884936070511563`, 0.09917475668619777], "ModelMemory" -> 
             197424, "TrainingMemory" -> 567656, "TrainingTime" -> 
             399.3012402821713], "Index" -> 4], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 3350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.1321072932230676`, 0.08519290741197952], "Accuracy" -> 
              Around[0.618961781813108, 0.007916537001808143], 
              "EvaluationTime" -> 0.000029018617584864443`, "TestSize" -> 
              7509, "ModelMemory" -> 63376, 
              "ModelUtility" -> -3.0000390814962663`, "TrainingSize" -> 60, 
              "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              235744, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.1321072932230676`, 0.0602404825400084]}, 
              "AccuracyHistory" -> {
                Around[0.618961781813108, 0.005597836997492758]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[5.054568726726843, 0.10870044095101739`], "Accuracy" -> 
              Around[0.5035128830898884, 0.008129197887362714], 
              "EvaluationTime" -> 0.000023436611088299704`, "TestSize" -> 
              7559, "ModelMemory" -> 63376, 
              "ModelUtility" -> -3.9549453180369807`, "TrainingSize" -> 10, 
              "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              275352, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[5.054568726726843, 0.07686281891443228]}, 
              "AccuracyHistory" -> {
                Around[0.5035128830898884, 0.005748210951761531]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000023436611088299704`, "MeanCrossEntropy" -> 
             Around[5.054568726726843, 0.10870044095101739`], "ModelMemory" -> 
             63376, "TrainingMemory" -> 275352, "TrainingTime" -> 
             121.54545892984281`], "Index" -> 5], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 18350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 3], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.097038590634634, 0.021867586224022014`], "Accuracy" -> 
              Around[0.5522282228385451, 0.014322956825878067`], 
              "EvaluationTime" -> 0.00004791645223971758, "TestSize" -> 2400, 
              "ModelMemory" -> 172944, "ModelUtility" -> -0.9082655329587656, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 496536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.097038590634634, 0.015462718507187495`]}, 
              "AccuracyHistory" -> {
                Around[0.5522282228385451, 0.010127859898220529`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.4535216164408555`, 0.05525918339615187], "Accuracy" -> 
              Around[0.4192416816396156, 0.06521134650721468], 
              "EvaluationTime" -> 0.0000813908271839311, "TestSize" -> 9659, 
              "ModelMemory" -> 172944., "ModelUtility" -> -1.478207468106718, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.1995262314968879, 
              "TrainingMemory" -> 488130.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5077737058518286`, 0.025896794326268964`], 
                Around[1.3992695270298827`, 0.01148890085177915]}, 
              "AccuracyHistory" -> {
                Around[0.48426917798162816`, 0.010847221084018694`], 
                Around[0.3542141852976031, 0.005482893242319074]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5683666238747587, 0.009239588287150253], "Accuracy" -> 
              Around[0.7012604343543432, 0.008305004264320782], 
              "EvaluationTime" -> 0.00005540709982071999, "TestSize" -> 6069, 
              "ModelMemory" -> 172944, "ModelUtility" -> 0.4084058420998955, 
              "TrainingSize" -> 1500, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 1167896, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5683666238747587, 0.006533375533215742]}, 
              "AccuracyHistory" -> {
                Around[0.7012604343543432, 0.005872524833084419]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5558531180151074, 0.018994166023508945`], "Accuracy" -> 
              Around[0.7108477082112655, 0.01649556860167496], 
              "EvaluationTime" -> 0.00007891673057332428, "TestSize" -> 1514, 
              "ModelMemory" -> 172944, "ModelUtility" -> 0.44580102626180396`,
               "TrainingSize" -> 6055, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 3619904, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5558531180151074, 0.013430903598206295`]}, 
              "AccuracyHistory" -> {
                Around[0.7108477082112655, 0.011664128417772259`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7260454662307956, 0.011341782919921896`], "Accuracy" -> 
              Around[0.6540343176309661, 0.007865141895835167], 
              "EvaluationTime" -> 0.00002928759618951301, "TestSize" -> 7319, 
              "ModelMemory" -> 172944, "ModelUtility" -> -0.0810328356612664, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.19952623149688792`, 
              "TrainingMemory" -> 538552, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7260454662307956, 0.008019851613422533]}, 
              "AccuracyHistory" -> {
                Around[0.6540343176309661, 0.005561495169539465]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002928759618951301, "MeanCrossEntropy" -> 
             Around[0.7260454662307956, 0.011341782919921896`], "ModelMemory" -> 
             172944, "TrainingMemory" -> 538552, "TrainingTime" -> 
             6.357083950816617], "Index" -> 6], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 18350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 3], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.4931966568862918`, 0.08693102958213424], "Accuracy" -> 
              Around[0.34663553215952847`, 0.012317541045460014`], 
              "EvaluationTime" -> 0.00008121534663730859, "TestSize" -> 7600, 
              "ModelMemory" -> 197424., 
              "ModelUtility" -> -1.5420367842020646`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.2384267430035379, "TrainingMemory" -> 
              555325.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.579313622866945, 0.02499396912618965], 
                Around[1.4070796909056387`, 0.013486612981043714`]}, 
              "AccuracyHistory" -> {
                Around[0.33558359133968957`, 0.01021489120994034], 
                Around[0.35768747297936737`, 0.00642465623233428]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.0991640588832108`, 0.030818024255412194`], "Accuracy" -> 
              Around[0.5451932546277752, 0.020311170964536242`], 
              "EvaluationTime" -> 0.0001305636890073877, "TestSize" -> 1200, 
              "ModelMemory" -> 197424, "ModelUtility" -> -0.9173293157040878, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 567864, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0991640588832108`, 0.021791633933773463`]}, 
              "AccuracyHistory" -> {
                Around[0.5451932546277752, 0.014362166722862885`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5784628750715581, 0.009983469720167712], "Accuracy" -> 
              Around[0.7064480505438888, 0.009125369854283302], 
              "EvaluationTime" -> 0.0000616981905149554, "TestSize" -> 5000, 
              "ModelMemory" -> 197424, "ModelUtility" -> 0.37082464936529835`,
               "TrainingSize" -> 1500, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 1196392, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5784628750715581, 0.007059379138901153]}, 
              "AccuracyHistory" -> {
                Around[0.7064480505438888, 0.006452610904799019]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.541169383212411, 0.019121006533101535`], "Accuracy" -> 
              Around[0.7291319517618574, 0.01617326725810448], 
              "EvaluationTime" -> 0.00005637722976011025, "TestSize" -> 1514, 
              "ModelMemory" -> 197424, "ModelUtility" -> 0.49691690886860895`,
               "TrainingSize" -> 6055, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 3844992, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.541169383212411, 0.013520593382668372`]}, 
              "AccuracyHistory" -> {
                Around[0.7291319517618574, 0.011436226952148038`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.77535603225815, 0.01256450494833804], "Accuracy" -> 
              Around[0.6349692763583118, 0.007958567890229674], 
              "EvaluationTime" -> 0.00003140108248100883, "TestSize" -> 7319, 
              "ModelMemory" -> 197424, 
              "ModelUtility" -> -0.21465110746457494`, "TrainingSize" -> 250, 
              "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
              641112, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.77535603225815, 0.00888444665122176]}, 
              "AccuracyHistory" -> {
                Around[0.6349692763583118, 0.005627557323714918]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003140108248100883, "MeanCrossEntropy" -> 
             Around[0.77535603225815, 0.01256450494833804], "ModelMemory" -> 
             197424, "TrainingMemory" -> 641112, "TrainingTime" -> 
             12.291519438681219`], "Index" -> 7], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 3350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[5.202433002410039, 0.11225268082405729`], "Accuracy" -> 
              Around[0.501268196011985, 0.008129618552798422], 
              "EvaluationTime" -> 0.000022078746277754326`, "TestSize" -> 
              7559, "ModelMemory" -> 67472, 
              "ModelUtility" -> -4.013005210206479, "TrainingSize" -> 10, 
              "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              234272, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[5.202433002410039, 0.07937463181706003]}, 
              "AccuracyHistory" -> {
                Around[0.501268196011985, 0.0057485084071437305`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.8888760129948357`, 0.08323133712425732], "Accuracy" -> 
              Around[0.6162353475508339, 0.008399178957873527], 
              "EvaluationTime" -> 0.000033041079114285934`, "TestSize" -> 
              6700, "ModelMemory" -> 67472, 
              "ModelUtility" -> -2.839366526226864, "TrainingSize" -> 60, 
              "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              338152, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.8888760129948357`, 0.05885344288778598]}, 
              "AccuracyHistory" -> {
                Around[0.6162353475508339, 0.0059391163975117305`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6458565328806513, 0.014897145057208868`], "Accuracy" -> 
              Around[0.6894123618342984, 0.008402856830797648], 
              "EvaluationTime" -> 0.000027701832249403353`, "TestSize" -> 
              6069, "ModelMemory" -> 67472, "ModelUtility" -> 
              0.1590104996394044, "TrainingSize" -> 1500, "TrainingTime" -> 
              39.810717055349734`, "TrainingMemory" -> 1368424, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6458565328806513, 0.010533872290272049`]}, 
              "AccuracyHistory" -> {
                Around[0.6894123618342984, 0.005941717046396718]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.570009311217248, 0.019544801685672485`], "Accuracy" -> 
              Around[0.6899609765324993, 0.016822430858601026`], 
              "EvaluationTime" -> 0.00003379769812033856, "TestSize" -> 1514, 
              "ModelMemory" -> 67472, "ModelUtility" -> 0.4043963484470391, 
              "TrainingSize" -> 6055, "TrainingTime" -> 158.48931924611142`, 
              "TrainingMemory" -> 4410424, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.570009311217248, 0.013820261808885279`]}, 
              "AccuracyHistory" -> {
                Around[0.6899609765324993, 0.01189525493615862]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.6556466369717935`, 0.05130547064572106], "Accuracy" -> 
              Around[0.6668952975341368, 0.007792995620793343], 
              "EvaluationTime" -> 0.00002157520738601986, "TestSize" -> 7319, 
              "ModelMemory" -> 67472, "ModelUtility" -> -1.7268805104701397`, 
              "TrainingSize" -> 250, "TrainingTime" -> 7.943282347242816, 
              "TrainingMemory" -> 573592, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.6556466369717935`, 0.036278446205556716`]}, 
              "AccuracyHistory" -> {
                Around[0.6668952975341368, 0.005510480049220041]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002157520738601986, "MeanCrossEntropy" -> 
             Around[1.6556466369717935`, 0.05130547064572106], "ModelMemory" -> 
             67472, "TrainingMemory" -> 573592, "TrainingTime" -> 
             242.0757095375846], "Index" -> 8], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 3350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.9396806360979744`, 0.2813859460792898], "Accuracy" -> 
              Around[0.48655419334978117`, 0.012570162484178323`], 
              "EvaluationTime" -> 0.000029672996513929768`, "TestSize" -> 
              14659, "ModelMemory" -> 63376., 
              "ModelUtility" -> -2.9003045289016436`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.3162277660168379, "TrainingMemory" -> 
              276848., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[3.2194060933553255`, 0.049397577789280896`], 
                Around[2.659955178840623, 0.038823054781155775`]}, 
              "AccuracyHistory" -> {
                Around[0.498429312708017, 0.005925512564630291], 
                Around[0.47467907399154535`, 0.005737677819245468]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.11187179692716, 0.03155574140219102], "Accuracy" -> 
              Around[0.6006290569857048, 0.011381192140736619`], 
              "EvaluationTime" -> 0.000029808579755951187`, "TestSize" -> 
              3700, "ModelMemory" -> 63376, 
              "ModelUtility" -> -0.9291865468990058, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.19952623149688792`, "TrainingMemory" -> 
              236032, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.11187179692716, 0.022313278730858362`]}, 
              "AccuracyHistory" -> {
                Around[0.6006290569857048, 0.008047718140701902]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6183351490979536, 0.012742339945187229`], "Accuracy" -> 
              Around[0.6850225811210294, 0.00843451527251645], 
              "EvaluationTime" -> 0.000028332262956648663`, "TestSize" -> 
              6069, "ModelMemory" -> 63376, "ModelUtility" -> 
              0.24744670297625249`, "TrainingSize" -> 1500, "TrainingTime" -> 
              3.1622776601683795`, "TrainingMemory" -> 993696, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6183351490979536, 0.009010194983426109]}, 
              "AccuracyHistory" -> {
                Around[0.6850225811210294, 0.005964102945217882]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8226196922699831, 0.010626779162625586`], "Accuracy" -> 
              Around[0.6181659018778598, 0.008030935685950901], 
              "EvaluationTime" -> 0.000019284182329386368`, "TestSize" -> 
              7319, "ModelMemory" -> 63376, 
              "ModelUtility" -> -0.320414595375371, "TrainingSize" -> 250, 
              "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              407040, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.8226196922699831, 0.007514267608064452]}, 
              "AccuracyHistory" -> {
                Around[0.6181659018778598, 0.00567872908280892]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000019284182329386368`, "MeanCrossEntropy" -> 
             Around[0.8226196922699831, 0.010626779162625586`], "ModelMemory" -> 
             63376, "TrainingMemory" -> 407040, "TrainingTime" -> 
             24.365309400529185`], "Index" -> 9], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 3350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.9585322007735986`, 0.299818023422457], "Accuracy" -> 
              Around[0.48619495215545194`, 0.013420901514095706`], 
              "EvaluationTime" -> 0.00002994913719273482, "TestSize" -> 15118,
               "ModelMemory" -> 67472., 
              "ModelUtility" -> -2.9156574606919046`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.2773272545101879, "TrainingMemory" -> 
              238938.66666666666`, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[3.2568136127893164`, 0.048596341121012486`], 
                Around[2.6602507887578803`, 0.03878873884719251]}, 
              "AccuracyHistory" -> {
                Around[0.49898657673420266`, 0.005746822512757242], 
                Around[0.4734033275767012, 0.0057405454583240355`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.0702393663971093`, 0.030054313056900952`], "Accuracy" -> 
              Around[0.6012549852769098, 0.01169864326709273], 
              "EvaluationTime" -> 0.0000453484360376509, "TestSize" -> 3500, 
              "ModelMemory" -> 67472, "ModelUtility" -> -0.8531061958942016, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 246992, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0702393663971093`, 0.021251608566438058`]}, 
              "AccuracyHistory" -> {
                Around[0.6012549852769098, 0.008272189984843616]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.645680596570873, 0.014803467013872123`], "Accuracy" -> 
              Around[0.6892426770397506, 0.008406781407529903], 
              "EvaluationTime" -> 0.000028203411632477715`, "TestSize" -> 
              6069, "ModelMemory" -> 67472, "ModelUtility" -> 
              0.15961065430702437`, "TrainingSize" -> 1500, "TrainingTime" -> 
              3.981071705534973, "TrainingMemory" -> 866208, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.645680596570873, 0.010467631910580349`]}, 
              "AccuracyHistory" -> {
                Around[0.6892426770397506, 0.005944492141217382]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8713231451486837, 0.010895482319151144`], "Accuracy" -> 
              Around[0.6123389679985121, 0.008052821373120708], 
              "EvaluationTime" -> 0.000022787575176730938`, "TestSize" -> 
              7319, "ModelMemory" -> 67472, 
              "ModelUtility" -> -0.4356510279079724, "TrainingSize" -> 250, 
              "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              457048, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.8713231451486837, 0.0077042694321699055`]}, 
              "AccuracyHistory" -> {
                Around[0.6123389679985121, 0.005694204600617618]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000022787575176730938`, "MeanCrossEntropy" -> 
             Around[0.8713231451486837, 0.010895482319151144`], "ModelMemory" -> 
             67472, "TrainingMemory" -> 457048, "TrainingTime" -> 
             24.326408889022535`], "Index" -> 10], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 3350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 30], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.008051205670115, 0.016439806272833677`], "Accuracy" -> 
              Around[0.6126336239249398, 0.007953394907683759], 
              "EvaluationTime" -> 0.000030669528584276854`, "TestSize" -> 
              7509, "ModelMemory" -> 63376, 
              "ModelUtility" -> -0.7283272737021061, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.1, "TrainingMemory" -> 235808, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.008051205670115, 0.011624698496913834`]}, 
              "AccuracyHistory" -> {
                Around[0.6126336239249398, 0.005623899472677741]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5972394478259025, 0.009214503039446105], "Accuracy" -> 
              Around[0.668177670507091, 0.008548665462291511], 
              "EvaluationTime" -> 0.00004531875308259248, "TestSize" -> 6069, 
              "ModelMemory" -> 63376, "ModelUtility" -> 0.3189358601653488, 
              "TrainingSize" -> 1500, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 898840, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5972394478259025, 0.006515637584456394]}, 
              "AccuracyHistory" -> {
                Around[0.668177670507091, 0.00604481931848156]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.564682051786498, 0.016668386439837243`], "Accuracy" -> 
              Around[0.6922857282870912, 0.016795711887773054`], 
              "EvaluationTime" -> 0.00003298004712470408, "TestSize" -> 1514, 
              "ModelMemory" -> 63376, "ModelUtility" -> 0.4254357821307686, 
              "TrainingSize" -> 6055, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 3549624, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.564682051786498, 0.011786329083046809`]}, 
              "AccuracyHistory" -> {
                Around[0.6922857282870912, 0.011876361770699836`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8426182387579957, 0.010215661200692784`], "Accuracy" -> 
              Around[0.6091184814616979, 0.008062655536508843], 
              "EvaluationTime" -> 0.000022787575176730938`, "TestSize" -> 
              7319, "ModelMemory" -> 63376, 
              "ModelUtility" -> -0.3681375922498302, "TrainingSize" -> 250, 
              "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
              289568, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.8426182387579957, 0.0072235633093141755`]}, 
              "AccuracyHistory" -> {
                Around[0.6091184814616979, 0.005701158404236664]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.6479336330471632`, 0.03149223967178658], "Accuracy" -> 
              Around[0.479604659989289, 0.008118014903096195], 
              "EvaluationTime" -> 0.00002537001790363283, "TestSize" -> 7559, 
              "ModelMemory" -> 63376, "ModelUtility" -> -1.7124503509650983`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 296744, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.6479336330471632`, 0.022268376226672305`]}, 
              "AccuracyHistory" -> {
                Around[0.479604659989289, 0.005740303387752772]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002537001790363283, "MeanCrossEntropy" -> 
             Around[1.6479336330471632`, 0.03149223967178658], "ModelMemory" -> 
             63376, "TrainingMemory" -> 296744, "TrainingTime" -> 
             24.035279609814467`], "Index" -> 11], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 18350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.510604235817901, 0.06707157472028136], "Accuracy" -> 
              Around[0.6443453635471909, 0.007813029836952106], 
              "EvaluationTime" -> 0.00003964376305683464, "TestSize" -> 7509, 
              "ModelMemory" -> 172944, "ModelUtility" -> -2.5667839315691388`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 485448, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.510604235817901, 0.047426765309571156`]}, 
              "AccuracyHistory" -> {
                Around[0.6443453635471909, 0.005524646379321659]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5629789555169188, 0.009778355948757526], "Accuracy" -> 
              Around[0.7132927343442235, 0.008215011444869084], 
              "EvaluationTime" -> 0.000027512978418455827`, "TestSize" -> 
              6069, "ModelMemory" -> 172944, "ModelUtility" -> 
              0.42701118830793194`, "TrainingSize" -> 1500, "TrainingTime" -> 
              6.309573444801933, "TrainingMemory" -> 946680, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5629789555169188, 0.0069143418002222635`]}, 
              "AccuracyHistory" -> {
                Around[0.7132927343442235, 0.005808890300192026]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5497752815772209, 0.019713662343757706`], "Accuracy" -> 
              Around[0.7241720954057579, 0.016265126535902674`], 
              "EvaluationTime" -> 0.00011320315266219466`, "TestSize" -> 1514,
               "ModelMemory" -> 172944, "ModelUtility" -> 
              0.46712002714241074`, "TrainingSize" -> 6055, "TrainingTime" -> 
              31.622776601683793`, "TrainingMemory" -> 3809376, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5497752815772209, 0.013939664325292962`]}, 
              "AccuracyHistory" -> {
                Around[0.7241720954057579, 0.011501181270394038`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.508303332510372, 0.07989278221111394], "Accuracy" -> 
              Around[0.47199729771241855`, 0.009936485559993543], 
              "EvaluationTime" -> 0.00006165362206362658, "TestSize" -> 5000, 
              "ModelMemory" -> 172944, "ModelUtility" -> -3.2344327569097326`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 472424, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.508303332510372, 0.05649272806933864]}, 
              "AccuracyHistory" -> {
                Around[0.47199729771241855`, 0.0070261563206336424`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00006165362206362658, "MeanCrossEntropy" -> 
             Around[3.508303332510372, 0.07989278221111394], "ModelMemory" -> 
             172944, "TrainingMemory" -> 472424, "TrainingTime" -> 
             38.56581905772843], "Index" -> 12], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 18350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.9497915634924674`, 0.052922799852635045`], "Accuracy" -> 
              Around[0.6342557574822634, 0.007854957821047184], 
              "EvaluationTime" -> 0.000042264327912658846`, "TestSize" -> 
              7509, "ModelMemory" -> 197424, 
              "ModelUtility" -> -2.0633182979603637`, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              567720, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.9497915634924674`, 0.03742207065517666]}, 
              "AccuracyHistory" -> {
                Around[0.6342557574822634, 0.005554293941196772]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000042264327912658846`, "MeanCrossEntropy" -> 
             Around[1.9497915634924674`, 0.052922799852635045`], 
             "ModelMemory" -> 197424, "TrainingMemory" -> 567720, 
             "TrainingTime" -> 48.388118748186024`], "Index" -> 13], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 3350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 300], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.6487394607475452`, 0.04306521559953004], "Accuracy" -> 
              Around[0.6271710761688009, 0.00788921251433054], 
              "EvaluationTime" -> 0.00005416403630902827, "TestSize" -> 7509, 
              "ModelMemory" -> 67472, "ModelUtility" -> -1.7165831296421126`, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 248552, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.6487394607475452`, 0.03045170598368838]}, 
              "AccuracyHistory" -> {
                Around[0.6271710761688009, 0.005578515667104897]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7567642623781167, 0.009524149240707427], "Accuracy" -> 
              Around[0.6471431965849015, 0.007899680624816571], 
              "EvaluationTime" -> 0.000023368735168591294`, "TestSize" -> 
              7319, "ModelMemory" -> 67472, 
              "ModelUtility" -> -0.15376104427878023`, "TrainingSize" -> 250, 
              "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
              3529656, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7567642623781167, 0.006734590513136929]}, 
              "AccuracyHistory" -> {
                Around[0.6471431965849015, 0.00558591773901578]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000023368735168591294`, "MeanCrossEntropy" -> 
             Around[0.7567642623781167, 0.009524149240707427], "ModelMemory" -> 
             67472, "TrainingMemory" -> 3529656, "TrainingTime" -> 
             121.03211419040413`], "Index" -> 14], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 18350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 10], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9497447100257835, 0.017046129226364712`], "Accuracy" -> 
              Around[0.6008750547449497, 0.007987180412171967], 
              "EvaluationTime" -> 0.0000412083759953319, "TestSize" -> 7509, 
              "ModelMemory" -> 172944, "ModelUtility" -> -0.6191216229344135, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.15848931924611134`, 
              "TrainingMemory" -> 484728, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9497447100257835, 0.012053433568944684`]}, 
              "AccuracyHistory" -> {
                Around[0.6008750547449497, 0.005647789432007161]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7371048502877539, 0.014241293227538723`], "Accuracy" -> 
              Around[0.6603401375760192, 0.007825087794668327], 
              "EvaluationTime" -> 0.00007268718319847895, "TestSize" -> 7319, 
              "ModelMemory" -> 172944, 
              "ModelUtility" -> -0.11274245361811652`, "TrainingSize" -> 250, 
              "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
              538504, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7371048502877539, 0.010070115014058684`]}, 
              "AccuracyHistory" -> {
                Around[0.6603401375760192, 0.00553317264299006]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.2143024750141174`, 0.04531552311837515], "Accuracy" -> 
              Around[0.48432935886365674`, 0.009492178451871535], 
              "EvaluationTime" -> 0.00005669572957575032, "TestSize" -> 5500, 
              "ModelMemory" -> 172944, "ModelUtility" -> -2.3131235093016924`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 472296, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2143024750141174`, 0.03204291369001883]}, 
              "AccuracyHistory" -> {
                Around[0.48432935886365674`, 0.006711983751551187]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005669572957575032, "MeanCrossEntropy" -> 
             Around[2.2143024750141174`, 0.04531552311837515], "ModelMemory" -> 
             172944, "TrainingMemory" -> 472296, "TrainingTime" -> 
             24.093768929060577`], "Index" -> 15], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 8350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.132128647117361, 0.08447635940489748], "Accuracy" -> 
              Around[0.6289502999349602, 0.007882516572597406], 
              "EvaluationTime" -> 0.00002304616486767609, "TestSize" -> 7509, 
              "ModelMemory" -> 97120, "ModelUtility" -> -3.0029190928047855`, 
              "TrainingSize" -> 60, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 316536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.132128647117361, 0.05973380658515499]}, 
              "AccuracyHistory" -> {
                Around[0.6289502999349602, 0.005573780921298968]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002304616486767609, "MeanCrossEntropy" -> 
             Around[3.132128647117361, 0.08447635940489748], "ModelMemory" -> 
             97120, "TrainingMemory" -> 316536, "TrainingTime" -> 
             153.01666693496338`], "Index" -> 16], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 8350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 3], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.0376357538486585`, 0.014394532345232728`], "Accuracy" -> 
              Around[0.4679638446823047, 0.008986971909855139], 
              "EvaluationTime" -> 0.000060532605513639875`, "TestSize" -> 
              6100, "ModelMemory" -> 105848, 
              "ModelUtility" -> -0.7889160209630682, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.15848931924611134`, "TrainingMemory" -> 
              348992, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.0376357538486585`, 0.010178471433323158`]}, 
              "AccuracyHistory" -> {
                Around[0.4679638446823047, 0.006354748779791587]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9037846521434217, 0.010913671061135442`], "Accuracy" -> 
              Around[0.5705447904355705, 0.00818224685916302], 
              "EvaluationTime" -> 0.00003766061205184678, "TestSize" -> 7319, 
              "ModelMemory" -> 105848, "ModelUtility" -> -0.5119811432415471, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.15848931924611134`, 
              "TrainingMemory" -> 399720, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9037846521434217, 0.007717130814968254]}, 
              "AccuracyHistory" -> {
                Around[0.5705447904355705, 0.0057857222394565]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003766061205184678, "MeanCrossEntropy" -> 
             Around[0.9037846521434217, 0.010913671061135442`], "ModelMemory" -> 
             105848, "TrainingMemory" -> 399720, "TrainingTime" -> 
             4.956911948741379], "Index" -> 17], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 18350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 300], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.847311258950006, 0.07249426790997011], "Accuracy" -> 
              Around[0.6085584330929998, 0.007959382845414352], 
              "EvaluationTime" -> 0.00004641581514791512, "TestSize" -> 7509, 
              "ModelMemory" -> 172944, "ModelUtility" -> -2.817988011764143, 
              "TrainingSize" -> 60, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 484728, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.847311258950006, 0.05126118843629419]}, 
              "AccuracyHistory" -> {
                Around[0.6085584330929998, 0.005628133584052366]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00004641581514791512, "MeanCrossEntropy" -> 
             Around[2.847311258950006, 0.07249426790997011], "ModelMemory" -> 
             172944, "TrainingMemory" -> 484728, "TrainingTime" -> 
             96.5469898304947], "Index" -> 18], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 3350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 30], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.086539167720672, 0.018449417661607282`], "Accuracy" -> 
              Around[0.600866288268543, 0.007991523597318483], 
              "EvaluationTime" -> 0.000019781347240303693`, "TestSize" -> 
              7509, "ModelMemory" -> 67472, 
              "ModelUtility" -> -0.8789158170985087, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.1, "TrainingMemory" -> 246768, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.086539167720672, 0.013045708337465364`]}, 
              "AccuracyHistory" -> {
                Around[0.600866288268543, 0.0056508605276762115`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7566917431096257, 0.00952691315547916], "Accuracy" -> 
              Around[0.6471693330041859, 0.007899274217719354], 
              "EvaluationTime" -> 0.000020453827081312203`, "TestSize" -> 
              7319, "ModelMemory" -> 67472, 
              "ModelUtility" -> -0.1535713146442278, "TrainingSize" -> 250, 
              "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
              300528, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7566917431096257, 0.006736544896014643]}, 
              "AccuracyHistory" -> {
                Around[0.6471693330041859, 0.0055856303658014155`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5899273443631993, 0.010228221625212175`], "Accuracy" -> 
              Around[0.689450181468192, 0.008402064264177146], 
              "EvaluationTime" -> 0.000023517210140670173`, "TestSize" -> 
              6069, "ModelMemory" -> 67472, "ModelUtility" -> 
              0.342448349733831, "TrainingSize" -> 1500, "TrainingTime" -> 
              3.1622776601683795`, "TrainingMemory" -> 3339088, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5899273443631993, 0.0072324448706664185`]}, 
              "AccuracyHistory" -> {
                Around[0.689450181468192, 0.00594115661716482]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000023517210140670173`, "MeanCrossEntropy" -> 
             Around[0.5899273443631993, 0.010228221625212175`], "ModelMemory" -> 
             67472, "TrainingMemory" -> 3339088, "TrainingTime" -> 
             16.056853073209645`], "Index" -> 19], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 18350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 10], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8604386875871751, 0.013788978707768941`], "Accuracy" -> 
              Around[0.5943042298149239, 0.009023824224288265], 
              "EvaluationTime" -> 0.00006204852021215731, "TestSize" -> 5900, 
              "ModelMemory" -> 197424, 
              "ModelUtility" -> -0.42281973054825206`, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
              567720, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.8604386875871751, 0.009750280349900334]}, 
              "AccuracyHistory" -> {
                Around[0.5943042298149239, 0.0063808073012296684`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7304339819113321, 0.01422288756409898], "Accuracy" -> 
              Around[0.6482993019910989, 0.007893717047089762], 
              "EvaluationTime" -> 0.000031426852482138944`, "TestSize" -> 
              7319, "ModelMemory" -> 197424, 
              "ModelUtility" -> -0.0965863324313132, "TrainingSize" -> 250, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              621624, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7304339819113321, 0.010057100244628204`]}, 
              "AccuracyHistory" -> {
                Around[0.6482993019910989, 0.00558170085276502]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000031426852482138944`, "MeanCrossEntropy" -> 
             Around[0.7304339819113321, 0.01422288756409898], "ModelMemory" -> 
             197424, "TrainingMemory" -> 621624, "TrainingTime" -> 
             19.35405320463329], "Index" -> 20], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 18350], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 300], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.787605456813965, 0.07438316610463949], "Accuracy" -> 
              Around[0.643952648828597, 0.0078063707020848], "EvaluationTime" -> 
              0.00005082259828292746, "TestSize" -> 7509, "ModelMemory" -> 
              197424, "ModelUtility" -> -2.778056567869819, "TrainingSize" -> 
              60, "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              567720, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.787605456813965, 0.05259684115871593]}, 
              "AccuracyHistory" -> {
                Around[0.643952648828597, 0.005519937659900152]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005082259828292746, "MeanCrossEntropy" -> 
             Around[2.787605456813965, 0.07438316610463949], "ModelMemory" -> 
             197424, "TrainingMemory" -> 567720, "TrainingTime" -> 
             121.54545892984281`], "Index" -> 21]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 21], 
        Association["ID" -> 177274949116667]], "MaxTrainingSize" -> 7569, 
      "PreprocessorEvaluationTime" -> 5.4117582239837`2.*^-6, 
      "PreprocessorMemory" -> 1067776, "InputDimension" -> 14, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.9903802825097981,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.7714974619168802`17.329088808947336*^9, "RoundPartitioning" -> 
      Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 21.888635183253207`, 
          "ElapsedTimes" -> 22.070728000000003`, "ExperimentCounts" -> 18], 
         Association[
         "TrainingSizes" -> 60, "TimeBudgets" -> 31.269478833218844`, 
          "ElapsedTimes" -> 31.94216979999999, "ExperimentCounts" -> 21], 
         Association[
         "TrainingSizes" -> 250, "TimeBudgets" -> 44.67068404745556, 
          "ElapsedTimes" -> 45.1155306, "ExperimentCounts" -> 13], 
         Association[
         "TrainingSizes" -> 1500, "TimeBudgets" -> 63.81526292493645, 
          "ElapsedTimes" -> 63.786569899999996`, "ExperimentCounts" -> 9], 
         Association[
         "TrainingSizes" -> 6055, "TimeBudgets" -> 91.16466132133777, 
          "ElapsedTimes" -> 183.7843267, "ExperimentCounts" -> 6]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 5], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[177283539051259]], "ID" -> 
         177287834018555]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Nominal", "Weight" -> 1, 
           "Values" -> {"5\n\n28\n\n      x + 3y =    /  "}, "ID" -> 
           2712282914960375955]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 352.987057848142, 
      "MaxTrainingMemory" -> 9987528, "DataMemory" -> 684792, 
      "FunctionMemory" -> 1680392, "LanguageVersion" -> {12., 0}, "Date" -> 
      DateObject[{2019, 7, 7, 14, 11, 7.0094998`8.59826199775564}, "Instant", 
        "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellEditDuplicate->True,
 CellChangeTimes->{3.771510511727582*^9, 3.7715118670485287`*^9},
 CellLabel->
  "Out[129]=",ExpressionUUID->"54b2435e-05fa-4f37-97d1-1b93278ba515"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"questionClassifier", "[", 
  RowBox[{"callAPI", "[", 
   RowBox[{
   "\"\<IntegerAddition\>\"", ",", " ", "1", ",", " ", "\"\<Beginner\>\"", 
    ",", " ", "False"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7715087584565554`*^9, 3.771508760556711*^9}},
 CellLabel->
  "In[130]:=",ExpressionUUID->"60c92252-fe5c-46b2-af32-5525ecaa013f"],

Cell[BoxData[
 RowBox[{"{", "\<\"algebra 1\"\>", "}"}]], "Output",
 CellChangeTimes->{3.7715105133436947`*^9, 3.771512623623333*^9},
 CellLabel->
  "Out[130]=",ExpressionUUID->"2124b85a-d6e6-4a3e-b44c-dcfcb6865d66"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"calcIsCalc", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"calcQs", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<calc\>\""}], "}"}]}], 
      "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"calcIsAlgebra1", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"calcQs", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 1\>\""}], 
        "}"}]}], "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"calcIsAlgebra2", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"calcQs", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 2\>\""}], 
        "}"}]}], "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"algebra1IsCalc", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"algebra1Questions", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<calc\>\""}], "}"}]}], 
      "]"}]}], ";"}], "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"algebra1IsAlgebra1", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"algebra1Questions", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 1\>\""}], 
        "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"algebra1IsAlgebra2", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"algebra1Questions", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 2\>\""}], 
        "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"algebra2IsCalc", "=", 
      RowBox[{"questionClassifier", "[", 
       RowBox[{"algebra2Qs", ",", " ", 
        RowBox[{"{", 
         RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<calc\>\""}], "}"}]}], 
       "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"algebra2IsAlgebra1", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"algebra2Qs", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 1\>\""}], 
        "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"algebra2IsAlgebra2", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"algebra2Qs", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 2\>\""}], 
        "}"}]}], "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{
  3.7711580435433702`*^9, 3.7711581045325623`*^9, {3.771158178293239*^9, 
   3.7711582669439397`*^9}, {3.7711583616162257`*^9, 
   3.7711584535961103`*^9}, {3.7711585350279884`*^9, 
   3.7711585464551077`*^9}, {3.7711585872250843`*^9, 
   3.7711585886280823`*^9}, {3.7711725238773365`*^9, 
   3.7711725272497325`*^9}, {3.7711727585554667`*^9, 3.771172776237033*^9}, {
   3.7714257394225016`*^9, 3.771425753421451*^9}, 3.771426588098028*^9, {
   3.7714927024485207`*^9, 3.771492731646558*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"5652c7f2-04fa-4c09-af67-9f4f252f0675"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"lp2", "=", 
   RowBox[{"ListLogPlot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"#calcu", "/", "#alge"}], "&"}], "@", " ", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<calcu\>\"", "\[Rule]", " ", "calcIsCalc"}], ",", " ", 
        RowBox[{"\"\<alge\>\"", "\[Rule]", "calcIsAlgebra1"}]}], "|>"}]}], 
     ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Training Set\>\"", ",", 
        "\"\<Calculus Probability divided by highest other\>\""}], "}"}]}]}], 
    "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.771158271668297*^9, 3.7711583575393267`*^9}, {
  3.771158458432547*^9, 3.771158592709983*^9}, {3.7711725459129972`*^9, 
  3.7711725536575017`*^9}, {3.7714257576324434`*^9, 3.771425892017308*^9}, {
  3.771426598929728*^9, 3.771426599207924*^9}, {3.7714927403191633`*^9, 
  3.771492743683429*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"1571ed99-a23c-4960-8b79-e86ea7951882"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lp", "=", 
  RowBox[{"ListLogPlot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#right", "/", "#wrong"}], "&"}], "@", " ", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<right\>\"", "\[Rule]", " ", "algebra1IsAlgebra1"}], ",", 
       " ", 
       RowBox[{"\"\<wrong\>\"", "\[Rule]", " ", "algebra1IsAlgebra2"}]}], 
      "|>"}]}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Training Set\>\"", ",", 
       "\"\<Algebra 1 Probability divided by highest other\>\""}], "}"}]}], 
    ",", " ", 
    RowBox[{"GridLines", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", " ", 
       RowBox[{"{", "1", "}"}]}], "}"}]}], ",", " ", 
    RowBox[{"GridLinesStyle", "\[Rule]", "Red"}]}], "]"}], " "}]], "Input",
 CellChangeTimes->{{3.7711586979645214`*^9, 3.771158763987009*^9}, {
  3.7711589034919567`*^9, 3.7711589198291035`*^9}, {3.7711638938445168`*^9, 
  3.771163931375168*^9}, {3.7711726666542597`*^9, 3.7711726714516697`*^9}, {
  3.7711728159418964`*^9, 3.77117289478926*^9}, {3.7711729758869505`*^9, 
  3.7711729969018683`*^9}, {3.7711730367321424`*^9, 3.7711730394760923`*^9}, {
  3.771173076851448*^9, 3.7711731307854276`*^9}},
 CellLabel->
  "In[131]:=",ExpressionUUID->"a58ec1c8-41a6-4b44-8b8b-48c35008ce34"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.003666666666666667], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxdXQ2cjFXbn4Q2bUxSbaVMHmkrMU+kTcpdj7RJmRCbxGCxIQaLxbKDxdJi
sFgsBoutpEmqDbWTNm0l5pG0lY9Jqk0+xsfDJtp37//1P+d+935/v/fd9991
znWur3Od63zc464BI7sNquVwOE5c53CYf+V/Yh2q/3/Xxob7OvA/GNX/G/zr
ln9KBMaZ2Lvj+Hlip1HdPnD3yKPEjdA+dDRGnGBc5XD4Z5X9SdzYpCeu+PV/
xC7jn6qqkXmjjhM3RfuZT//M8ZsZVVVVWQ/dcpD05ibu9sf434kTTX7hKS2u
EN9n0of8Z6eSr4VJ9zfxHSBuadLfTrv5FLEb/fsuUO3/beKMC48p/KCJY5Pr
KP6tId+alhXEbUy6p2S7oj9k6lN1zftriNua9BZ/96oVFvywST/93bVK3yRT
npJvxin7PWLiJt3/OEbczvi7Wv/SWR/THo+i/d1LT5LeHvKM/fJX4scw/vXf
HiZ+HPrNeVTp08Hs36FbvT+IDbP9kW51KoS/3zD5OT76Okr6E0ZldYfVP3F8
/xMmP++OhRdJf9LEjkz/NsH+JyHf1tv2k/4fk24MafAF+wN7ZzdX8nQ021fN
aU57+jua9IqqZpWkPwX/h3p+SrrgMxeUvTqZuN8fR0+Q3gnyvzteyf+0yc8/
9qazpAPHRm44SnsmmziY9A/H8ycbf1Xzf/PVz0l/xrRPVmbdH0h/Bvreve8r
8u+M/h0/VON3hv5Tuu8i/Vnj6ur/+8acMuoPbETW7iH/LsaV6g7jdvyX/bvA
Pk+0VfZ9DvynfHOc/Z8z55tjfEzNp+dNui8z/gTpwJVPH1Dx2BX2PPPpWdK7
mvYJe+5Q/veY45/+ecjPgg0P/LH8P7Sv32P2d+Uof4WBI9c1UPZ9Afa4NPV7
9n/BtFer4LuMXz/okbMVO2X88AsYv+Ntav52A373033s3w3+3e1m/Pi7mf1T
Gtx+huMDpz73NOV1dDf7B6eOpn+N7mb/I0ltKZ+/u8Tztds5fnezv+fQ27+x
fw/o++JA2sPoYdo38uIsJX8Ps33GsFdov3AP8LvSnvHgeBH0+5ZRPuNFk+7r
d/dp9gfd89hIR1j6A0dWHCbd0dPE/sJrL7B/T8j/9XWUx9/TaFj9Z9TNhRy/
p3G5usF/7/yQ/XuZ46Vc/+s59u9l8stp14vY38uo7XCkn8lk/IV7mfx7fTZb
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
knFt9Z+7Vy2j/mjve7ge/RUDDg9sxfnkyIR/vv+H/nNmYr9xZRL5uYAnTbuF
+c0NXNX6+PvUPxP6ZUzj+Y8n0zheTV/31mLGP9pnvXuU4/vQ3rPAp+5bQJ+/
Us9/4CNvfq/qn0ysB3PfUvVvpqlv8bh7OJ/CmbifekrFVwT8va1DtE8U2HFX
oqr/wK/qoJf1k2Oy6c9w8m7mS+dk7Eeaz2K8uSZjPiz4gedjbmBHrECdz02G
fYP1VP5D/9jPf3F+edHemJek8h/ah0dcYjz4gTPi1flNANj17W7u14OTIe/N
f7JeCAF32Pcc52N4smmvW2ot4P1sBOP5/rmT40chj+PWAMeLAft/baHOz6eY
OOmZDLX/mWKOb1yTxf4u4PDMxox39xTTXt5jw1T8T8F+vFmfN6n/FMy3zko/
7xTES8N31foHfj7tbz/oDRqlqfUfdMecq3g+FJxi6nv2oX2q/gd/x/LP2D88
xZyfVS9fCDL/TZH74jn0TxT8omNVPR4T/om71P1oFuT74UiY+S/LrK8dg9R5
pSvL+F81/YN40t1ZsGfvH9+l/lkmv8L7A8w3HuDk4p2q/hX+lZ8yvnxZRr3q
P5vUfZQf7a37oADa7731N3Wei/EiiYdYb4fQPvGdq9V9WJZxixmw1/ai/7Pk
fH6Q2v9l4b6o7q27ZbxYlvGjKdDlRYx/P+xx6l7Otzhgf5e96jwAuDz/Yc6n
BODoio+433f5kT9fLeF4icJvyiVVLwB7e44hTvKjPqk1lPnfkPaf38X+yeBX
1eQS6R7QXSuPcP6k+BFfj3qpj9eP89PPTnJ+p6G978tc5nMf6OEF93J9yQDd
eLJYnR8LbqT2jzl+zLffT/C8IyB073bWM/mQL2v1u8xHQdFnlYf7zSK0D7b7
hut7CDjxhTocv1jk0/V+GPoYJ4fwvLAM47dqq84bIzJemzupX7n459N71Xmq
0Mdcx/xdgf5jni5lvMbE/rs/Zb1eCXm7/lrB+sQx1aRXvjCO519xU5Fv9/pZ
/zmBLw7cznyZgPbukl6qPpiK8e99+Qv6H/Twy+r8wS34ZEPlf7RvEv1K3feC
bt3/JYPeasSDrOc8oDudX3P+poDe77l8rs/eqZj/Y5PXi3xpaH/u5y8Zvz60
n//wMPorYyrmw9mT6r0C2htH1HlXDtpXTb3I/BCYatbn/n1bac980Sd5O9fP
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
+aWsA+8jskGvWuTk/MwR+156jfbPFfm672W+CUj7B9Jpv7xleA92R503OP+F
7rvA37MowHjB+xep33cDv5y/G3E+FIp+06+o+h84oP21CfIEDvemPUMi/+e/
Md9vRftpCQMoX7HY54X9zIc7EK9Vmy+yXg8vM+6q/vPkW9yPl4q/9f6lDDjW
5l7m693ij21D1ffZ0O9sXjvaZz/kOXbucdb35cvM/c/ea1z8HvMg5PE9/y+u
t1GJf73+HFtmvu8u6b2Nv09WsczMH1/8cyvP50+IvpvVv68QM/v7v6yawfl4
XuKt7mXWh5Uib8dOrOcuQ97va7nV738uN38P7Z2rjnI/V3s5/Lu7uzr/Ww7/
NbiO+Sx+OfJDWP0eiBPtw9o/jdB+/k+71feCQl9Vyf1TY2CH06d+P2Y59hcD
avN8t9ly3H/Pu5HjJaJ9qLde/zF+5MmL6n2x8Mt9hvmmDbB/8kOcj0miz8t3
cf1rj/6Or9X9sCH67Rmp7v/QPqLzXfJy3NcM/h/t10X0+byFev8HecMPruB5
ZQ/QW8/zcLwUjOd+ZR3vE/qIvG+25HrlBd33TID5JVXkvy2POA38Xf0z1P4f
7WNDh3G++SBfpJF6n5cu8lnzX+yVdYL5IXM57uO/eZbfA/hFnrR7uH5nwx79
MlqyvsoR/Zeo/UQu2gf0/jIg4zlrs77PAzY+P0775At9WRbXswLR7w51Ph8E
Pj/3TupbKP7IcvP3d4tAz2weVft/YOs8NgScU/s+Nf+X4375u88YD8Wgu94+
SH13wB5hj/r9k7D459tXGY+lsHfle+r34cogz/ed3+J83y39mzbjeh1Zblxf
/efeBM7X/SL/2beYX8qBbzmnfp/noNh37QT2j4o9df1wTOJzrLpfrViO73O+
VO+zTsh8iL+L8sfEnjpfnUd/1wdvMV9ULke+u1SP7+kvY/wjG9eq+b8C9NNe
fr9cewX4bVnE99xxgpt0Yr0TD+yo/xvnp3OFOd6JNgfV+z/gzj/eQP8mSHu9
vjVegfov9hLrW9cKI8Ecdhjv45qtgP2aN+D5ZyLkKzn6Hc/TWoC/cXQN8617
BerlpcN4Xthmhbn+NLlnJN8jJa3Afuqf1xiP7UWf9zuo709WwL4JlXx/0xH0
iM7HyRgvVt6F+aLLCuTf2KeMN4/IM7mOqv/RP6rjM0Xk2/IRz0f7QL8GTz7O
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
++FmoKfp+iVxteyPF9JfLTBeq8ud1PkfcL/n4lhftVldc/+bBH6xbnep93+C
9fpsAPtuVPm6I7Dz1n6sD5IhnyNb1YtdgANL+6h/70Xsk3ujev+7Gr9/+tcf
RUJPWW1sMwM8yveBfWAf5zVZ/N7Wu9qsP5aefJj2S4U+VU9/wfo1DfwdnZT/
hov8y9XvsfiEbs1/wamdmR8yxD837CbOBJ7/1HH1+wfS/sZb1Psf2C/nukcZ
rzlCL0vg+pBr9s+q26Mx9x+B1eb6Or+W0icP8XH1lZVq/qN/2Jr/wm/UL+r+
H/Lc8sS9jI9CjO+avoLnFUVob9Ufm9B+byO1/oZWm/vBsk+y1Pov7Xep9axY
+HVfxHyzA/07NDik/v0QwRUqv5RKPF4/mfzLVuN9d3oV/bsb7Z++vRHrxYjE
Z0432nc/sH/8M+r3usWfV91Nfgcl3nS9EQX2r7qF8h5bjfPZvsnkX4H+JQ1W
cX6fgH07nDa4f4iB3qRkH9ez86vN3yOf/+YR/t5lJfTZkZ6u5r+Mr+PfEcT9
/Qk3/z2gWkHj/uo/wz/m70PVDqJd0we4HtUFPrs9zPwRF4R+x/5hPNUD3Vl2
1fXCPx7Y/5XC9YFdmu4E9u5SuCGwT7dvBP79dip8M+iePQon2Nrfhvbzv1G4
MeiBLxW+E/TVenxX0PRXSNObAoe/ULgZ+ht6vOYir6Ynij56/PtE370KtwCO
RBRuKfbU/NzAUS3Pg5Bvr7ZHG9FX828r432mcBLk9ej27URfjduD7tD6PQ7s
1vIZos8+hZ8UrMfrKPJq3En00/oni320/J1t/uwi+un+z0t86P4e0VfL1w30
2NcK9xB99ivcU/jp9ik2/r1lfE3vI3Q9Xl/goObvtfUfIPbV9km18RssdM0v
TfiVKjzUZo/hwl/zGyH2/FxhH3BY+3O02EfHb7rw1/EzTuJB0zPEXrsVnijz
Uc+XTLGfpk+R8bV8fpFPyz9N9NXts6W/bj9T5pum54g8Wp85oo+2Z67Ir+03
z2b/gOir2y+E/A10/OTZ4mkJcEi3zxd9dPwuR3w79XgF4i893iobDoq8mv9a
YLemF9ryzQYZT9OLxN/aH2/a8t0mmz022+IlZJN3iy1etoq99fgfiHx6vGJb
Pt0m8mh+O6S/lvcTkU/Tw9Jey7PT5v9Smz67hK75lUH+mB7/K/Gn7r9b5NP8
99jyS0TG1/Npn21+77fZ94AtH5cLfx1/P9ry5UHhp/172BaPUZFX63NU2mt8
zJY/fhP5tb4V4l/d/rhtfp2w5ftTtnwaE3m0vc7a1qfztni9YJuPlbZ4vWTL
P5elvR7/H9FH29Oxpqa8tYDDun3tNTXlrbsG54nannGgu7Q96wHHtD/igX16
vPrAES2vU/h/q3BD23iNgK14vXkN8oO1/oNurce32fRpLPqUKHynyKf5u4Ru
rf+28ZoBW/mpuehrrf82/e4D9mj9WgBb63tLkdda/232flCwtf5Lex0fbYW/
tm+SyKPlayfyW+s/7NVB48dBD+nxDOmv5X9SsG7fUbCev51EPi1P8pqa63dn
0APaPl2kv27/vM3eHpv83SQ+dPseor/Ohz1t9k0R+2p+vWV8rV8foWv9+or+
mr9X6JrfAIlvLX/qmpr12GDgrnq8NPG/Hm+oxJe213ChW+u/xKdez302/44W
rMdLl/aa3zjR7796/Rd5NH2i9Nc40xZ/UyQ+tL5+sb+Wf5q01/pn2+SZaZtf
OWtq1s9zpL9un2uL53nAVr4PQP6Rev4vtMVDHrCVr5fY/Jkv7bU+y4W/phfY
9F8l8n+q13/hr/uvhT6G9k+hLZ432OK3CNhaj9+U+NX23CTtdT222Za/QmJf
Lc8WG/+ttnz7gU2/YpFP07fZ5s8OiT9tz09s8zVsmz8719Tc/5QKXcu7S/hr
epnor+lfiT5avt3iH23/PWJ/LV/EFo/7bP7eL/Gt6/8DNnnLpb/m96PYx1r/
bf44bMvvUcHa/kcF6/7HRD9t399s8VQh41nrv8x/zf+E6K/z9Snxh5Y3JvLp
/HDWZr/zEg86Hi9I/rPWf5FX++OS2Ffre1nsqcf7R/hp/RxrIa+WvxawtV+t
vRb7S51v6oLu0fzigMNav3rAVn0Yv7ZmvNVfW3O/6gQOan0bSn9r/Rf+Wp+b
RT7NP2FtzXx829qa8dsY7a14uhPY8p8LOKDzZVNgK580A/Zr/ZqLPLp9IrC1
H7hP6FqfFjZ7tJT22p5ukcda/4Wux2sDbMVTW2Ar3yRBX7/Wp5301/mm/Vrb
+i/20PIYwNZ+4UnR11r/bfbtZOufLPpq3Bk4oP3XBdin+z8vWMvrkf4adxP5
rfVfsLX+i7za/inA1nrRG/KO1Pr3Ad2Kl7628b3SX9tzgMiv5U0Fjmp5Btv6
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
lzzRT8f7ErGvpufb4me56KvrkQIb/1ViX51vg8LP2v+LfbR/Cm3+2iD6W+f/
Nn3elPyj7b3JFq+bpb3mF7Llmy1iby3vVps8H6yveT5ebMuX2yRfWvt/W/tP
gAPa32HRX4+308avVOjW/t/Wvsy2Pnxl889umR/W/b/N3pH1Ne+D9wld23e/
yKPz/QHB1vs/aa/1+dGWnw/a5uNh8Z+Op+j6mvXEUVu+P2Zbr34TrP1VIfx1
PB235a8T0l7TT9nyT8wWv2cFW+f/tvx/wbY+V0q8WOf/tvXlsi0f/mNbrx0b
zL/WfrfWhprzuTbo1npTF9ja78QBW+9B6m2o+V4lHnSnfr9RH9haL5wbat4H
NAT9/53/b6hpr5uBrfuxBGC/Xr9vA7bitzGwdT9654aa+dgl7bW/mm6ouR40
E/tY7/9EX2v9t/G/z8avhehjrf+CNT+36KPleXBDzfzbRvTX+rYFts6XkjbU
XA/aiT20PO1FPt3/cWArPxsij5b3SaFreTuKv637f5FH42QZT9u7s+ij/dUF
2Mq/z4t9rPf/wCHt/26in+bfQ+LFWv9lPOv+X+TV/ugt+uh47SP+0vr13VDz
vNRrs/cA6a/5pYr/rfN/wVreNLGPpg+1xfdwYGu/MUL01/b1CT/r/l/sa63/
Io91/y/6a/4ZG2ruzyZKe2v9F/7W+i/YOv+X+an5TRP5rPt/0UfLN1P8Y73/
F7r29xyxh3X+L+21/+fZ/B8Q/2n+C23y5dnkWSJ03T/fFr/LN9Rc7wps/lwl
8ljv/yQ+tPxrbfYrFPl0Ptsg+mn/FNni9U2ZbzoeNkn86/E3i721viGJfx0P
W6S9pm8V/a33/zK+tmexLd622eJjhy0ffSLxqOM3bLPXTqFr/qViD63vLrG/
1qfMpv9XYi/r/N/m/z22fBQRe2j6PtHPWv831DzvOWDLP+XC37r/31DzvP2g
YC3/YZt+UdFPj3fUFh/HJD6s+3+xt+5fIfJo+nHbenHClj9PiX+0P2Libz3+
Wdt6fF7spfldsOFK0Ufzv2SbL5clvnT8/iP8rfP/jdBf1ye1NtbMj7U31nzf
UXdjzfPAOPS39hv1gK3z13ihW/t/GU9jJ7CV3xsK1uM32lhzPb4ZdGv+JwBb
5zW3baxZzzUG3a/teyewtX67RF7dv+nGmvZtJtg6/xf5rfN/6W+9/99Ys55t
Ifpo+7bcWPP7JrfIZ63/wNb63EbG1/HQdmPN88KkjTX3t+2kv5a/PbB1Hvi4
YGv9F6zj4Ulg671UR8HaPp3E/rp9sthf4842fbqIvTX9eemv+Xmkv5a/m02e
HmJv6/5f6NofKdC/RL8H6W3r30fG0/7ua4svry2eBtjskwpsfS8wGNjK32kb
a+bPobb4GS76aTxC4sU6/7fF/2iZL1r+dFv8jxP/antlyHg6niaK/a33fzb/
TxF7Wt//SX89/jTbfMi2+WumyGut/8DWej/Hpm+u6KPr/3kyvrX/F6z7L9xY
8/4gb2PN/c8S4W+9/xN76PmxXOJNj18g+mn/rLLNj6DYyzr/F32t+39bfG6Q
/tr/RWJf6/2/6KPXj002f2wGtur9kG0+bxH7Wvt/iT+NPxB76/W7WOSx1n+R
39r/i/2t93+2fBXeWHO/t1PG0+1LxX6avkuw7l8m8ujxvhJ9rfN/G94j8uj2
kY019y/7bPGzX9pr+xyw2adc9DHp/weDz/nP
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.003666666666666667],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.003666666666666667],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Training Set\"", TraditionalForm], 
    FormBox[
    "\"Algebra 1 Probability divided by highest other\"", TraditionalForm]},
  AxesOrigin->{0., -2.9811303358182335`},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{
     Charting`ScaledTicks[{Log, Exp}], 
     Charting`ScaledFrameTicks[{Log, Exp}]}, {Automatic, Automatic}},
  GridLines->{{}, {0}},
  GridLinesStyle->RGBColor[1, 0, 0],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 3052}, {-2.9811303358182335`, 3.7687489986419678`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->FrontEndValueCache[{Automatic, 
     Charting`ScaledTicks[{Log, Exp}]}, {Automatic, {{-2.995732273553991, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.05\"", 0.05, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.3025850929940455`, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.10\"", 0.1, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.6931471805599453, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.50\"", 0.5, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {0., 
       FormBox["1", TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {1.6094379124341003`, 
       FormBox["5", TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {2.302585092994046, 
       FormBox["10", TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {3.912023005428146, 
       FormBox["50", TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.8134107167600364`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.659260036932778, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.5257286443082556`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.4079456086518722`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.6094379124341003`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.2039728043259361`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.916290731874155, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.5108256237659907, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.35667494393873245`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.2231435513142097, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.10536051565782628`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {0.6931471805599453, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.0986122886681098`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.3862943611198906`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.791759469228055, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.9459101490553132`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.0794415416798357`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.1972245773362196`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.995732273553991, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {3.4011973816621555`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {3.6888794541139363`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.0943445622221, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.248495242049359, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.382026634673881, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.499809670330265, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.605170185988092, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {5.0106352940962555`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {5.298317366548036, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {5.521460917862246, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}}}]]], "Output",
 CellChangeTimes->{3.771510513939737*^9, 3.7715126327202187`*^9},
 CellLabel->
  "Out[131]=",ExpressionUUID->"89f0cb7b-9e1a-464d-8079-5409bd1b2c6b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"lp1", "=", 
  RowBox[{"ListLogPlot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#right", "/", "#wrong"}], "&"}], "@", " ", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<right\>\"", "\[Rule]", " ", "algebra2IsAlgebra2"}], ",", 
       " ", 
       RowBox[{"\"\<wrong\>\"", "\[Rule]", " ", "algebra2IsAlgebra1"}]}], 
      "|>"}]}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Training Set\>\"", ",", 
       "\"\<Algebra 2 Probability divided by highest other\>\""}], "}"}]}], 
    ",", 
    RowBox[{"GridLines", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", " ", 
       RowBox[{"{", "1", "}"}]}], "}"}]}], ",", " ", 
    RowBox[{"GridLinesStyle", "\[Rule]", "Red"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Export", "[", 
  RowBox[{
  "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\3pset_trained_NB.pdf\>\"", ",", " ", 
   RowBox[{"{", 
    RowBox[{"lp", ",", " ", "lp1"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.771163950480488*^9, 3.771163966361644*^9}, {
  3.7711726416850667`*^9, 3.7711727266470737`*^9}, {3.7711728102008142`*^9, 
  3.771172811149503*^9}, {3.7711728436986227`*^9, 3.771172844611272*^9}, {
  3.7711729042891684`*^9, 3.7711729045893817`*^9}, {3.7711731459772415`*^9, 
  3.771173155041668*^9}, {3.7714078186095667`*^9, 3.771407818761632*^9}, {
  3.771410619264017*^9, 3.771410622004174*^9}, {3.771410726969519*^9, 
  3.7714107347740626`*^9}, {3.771411551143805*^9, 3.771411554360064*^9}, {
  3.7714259678915176`*^9, 3.7714259817153482`*^9}, {3.7714260411191463`*^9, 
  3.7714260552031565`*^9}, {3.771426490534024*^9, 3.771426491953046*^9}, {
  3.7714287963828144`*^9, 3.771428801408313*^9}, {3.771428854019704*^9, 
  3.771428856941781*^9}, {3.771509416518318*^9, 3.77150941765845*^9}, {
  3.771509658032317*^9, 3.7715096600764093`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"5f8ee03a-5a6c-4fc8-b268-7b1aba34af42"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.003666666666666667], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxcfX18zfX7/0nDSFlCC3FCWpKWpBH2TmJuYkmMhuMmzf1xP4wdDMNwMMyM
HcwsuTkhRrJTH7EQy+1IHLctt8dNzO1+3s/reZ1+ffujPZ6u63W9rtf1uq7r
dft+ndd6DenwVTGLxbL9eYvF/Cv/+cJLP/3/0X9+zOE/GEFP/3dnpTtcYKDx
lNcxu+XvxEHG3aKn/7XfTFzeeMZiObzl4UXiYOPp/2KrTfmJ8qqY2PFWppd0
q4lT9oy9T1zdeCpt9F4/rmnKSxxT6y+Wr2VcfcrQpsQ3xCEmPerFyT7y1zbl
WUMaFDME1zHl5dR3eclfF/9e/7sD5A+FPlNtV4nfNbE3qrfWX8+4/lTA+f3z
iN97Sne0ytqi9dU367e+M+Mh5b9v1he/7M8zpDeA/G7vqr0+MOnHU7YVEIeZ
9rQM6rCP5Rua9KITf6n9GhlPiop6j0tVe31o8ruCiw4TN0Z7z609RdzE1Mfz
uN9Z4qbGs087bXvEz5Qfbjx8Kr/aH9oewyzvcz++LNgB7Hw34Ab5P4K9jv94
gnRg67xNt1m+malveO6rf5LeDPxVP7pL+scmzje+LST9Y1N/z6/WP0hvbuo7
Imz/BdKbm/LOlHtG7f+JWd49pPo10j8x6QfH77xBegvIG/0e2+9oYdqr6ONK
f5He0uSvFhBdzBB6S+Px03/4LvQI6RH4927j/mb5CFOf+p+2VPu1Mum2j159
Qnor6NeggfZHa5Me13c0/cHR2tTHfX3dJdLbmPTpU75Rehuz/JAO09heS1v0
94T/af1tzfodjxrT3pZPjTJP/x9cdhHpn5rtG9L3dW1/O7S33+VfSG9nlg9d
clrp7U35N5aXYn842pv+YMl76X/s30ijivn/ihmCjUjo897e6+SPNPWPDbzI
/vYAW570Y39aPjP5h9+Oy2X5z0z/Cr/33C+CHZ8Z7zwtVb3vMpb/zLhZ52mJ
zo92SvkO8J9Dw64I3QBuGTP6H9bfwWxPZN5m2scDbAmtrP33uYlP7i1xj+U/
N/Uz9n5xh+WB85apPTzArnfm3GL5jiZO7Dac/WN0RPuvrNH+Bn72wEb2twf8
ti8WsD7LF9DnvQX7Wf4Lkx5ZbCj73wHstF9Q/YGz/tfoHu3fySwfdD2L+hjA
eXHjmK8cnUx+d9Em5gtPJ/jz4lnHWX9n5J/YA8RGZ5Pf2nMi+R3AL7a7dVnk
eYAbHd7zO+uPgr22V2J8GVHw788qXmP9oDsjXmL/eEAvO3jUVZbvYtI9v/+e
x/7vYvq/sf1ZjVfQXQ9nP2B5YMuft/ZR/64mzi8awf4ygG0d9zIfO7qa7bMt
srM/PF1N+ZFVOpxn+S8RLxO+YT43gK37p7G/HcBhz7RlPvF8acr3dmrio/7R
0OdJoPpfNPJLmvqLA/TIqeOZzz3A3v7dj7B8N+STYZbDbH835Pfv/2F/OrrB
HsvK7mb5bpBnmUN7WLpj/FzQdjvr727So6aGq/8CG+VHaPwJ/Z8FFkPK94B9
fD+r//Qw/93XKpj8jh4Yj8ptVf8FPeLFFPVfm0lP7x1HbLWZ9KQSbxUT+QZw
3t//MF/ZbLD3x3cP0T9syD+tvy8Sugu47L/xhvKW9vXoD17U9/WtrSdZf0/j
Pgy2ReRZe5r8G3u4GS8GsGvuP4xPW09TfvzWUZqfehoPnmLf3+x/V09T/jtn
9jA/eXpifJ29kXQv5DmPn9Txq5eJ3fvvMF6svcz2uTYt5PhrgG7v6eX4aOsF
ewb8wPHFAX77PxtoHxf4jQP7aE8PsPe++r8X/Mbfl/NZf2/Iq/niMdbf26Rn
NdnDfG30NsvbjrWjvjZgz8I09Y/epv/98tEKlnf1Nu1RlPNuJuMd8jzD0jhf
8KK8tXOKjs99THsernVS6+8DfXalHGL9wEUJr7O8DTi8Te5N1t8H/bu91GnW
D+wwhtFeHvCXjX1X+x/13Xi77CXGz1cm3rBU/cX6lVk+rfMqlje+Mh49FXA0
4zfht30Ff2/+seZXKd9/E+eHrq8wXn51ifNRD+TZksrSH7wo7/jtT/qXpS/6
y2bleGsFLthRlfM5A/j+w+lsrw3Y8uwM2scB7JmSxPHK1Rf+E1lP83Vf0/8S
m7/H9njBH3V7kM4fv4Y+R/9hfFq/NuljP8hmPBlfw/5rf6F+NsGJJ9T/UD5o
sdrPBfqZBa10vIG8yh4H/dML7Hmk/miJgbxXZ3I8tcaY9F3jU0k3YhDfIb8d
Zf2gB/WvqvNFYNd3TWgfF3DU9VWa72PM+I7vd2An60d98Xdvaf39YP/Su84y
/vuB3m8W+9cA3b1uC+djNtCLdr16jPmnH+KpvT//gD8sfd0zhtQv/DWqqP/1
M/vDd8ai40d/1Lckn/VZ+6NcJTfLG/2R3+d/yvmqrb8Rav69ncr6+xsvPP1z
9aeVrB/ljbVfMh97+iP+rC/SPt7+RsDTSe+hVJ3fDUA9UZ9SHytwl9TXNP4H
mPY/eCjiHOsH3XrjYUnRzwHse/Gu5h9g49FNHS8HmO2b48/H3gGwV/HIPYy/
gYjPgXsZH1bgaq+WYn8bwPFlb2j+G2jK3z70VR1fBmK8vVCLdNdAc35pnbCa
83HPQKPE0z8zKnL96DXLO7atmPKQ7R9kyh86di3bZwUuulNH4x/4jSrtmU9t
wOEj7nO8dgwy/jAbeHQ043+Q2V89ej84wfw3CPVHOvey/kFm/wf5841lMOy1
433a2zoY9Q35m+OLAXpuXo1bzD/AKUd26Hx6MMb3Y17q7wLd+c9kjX/IC/+m
D+PbO9i0V/D6mRaP1D/EKPmU/84Ujk/WISb/hha7tf4h0O9xFfq3Ddh1qo/m
X/CndytS+w8x9dnyTRD9wSPlXy2gfl5g25RLOn+3m/zNJ1RmfwfZTbojOo7r
Ayuw5eNpbG+oHfPdd17n/MwA3bfwT9oz0m7ce6rQh1U20152tOfoULbfDlzU
5oqb8SPynr15UrBTcL8KnK+5gI1PG7G8G/rWTD+r81HUP6zkPrYvz47xYkD+
/9he1JdebS7t5wN/zMw/ztP/h0L+9224fg0aasr3nhnFeLcONflDU9VfQsEf
urSdzhdB9/R20J8jgX0ZTchvk/LTZ2n7ga17jXNsv+ArtxhPTsEVEohdwJba
n9P+7qFYv01so/PRofDvBSG/sf1Dsb5slaXxPtTMH5tONGP+9EGe8eJK9f9h
JvYaCfSHoGFm+YbD3uX8xzrMtEdoi9Mcb0LB7z5+X+ebwL5GvTjeRALn/0/H
Qxuw3R9v9mGY752I5XrJMczUL6dMDOPTOQzj+/qXqI8L+M6CBPqzW/RrrOOj
B/IDJ5bn/CUP/J5xJ3W8h/6WxvV3sP2CLxfX/Z7h5no1vuoPe6U/gobD3t9O
pv9ZgYM7FlP/H471aPY2HZ+Gm/p8fi+b40sk6JYSi7gesKG8+6WGzF920MvN
rKvzV2Bb15OcDzvB713ZV+cToDu+Pcj9Ifdwo/hTezzzO/fTPKi/qMw5+lee
8F9Zp/0Pedmt/uZ80QfsWNOc8i0joM9fpTj+BI14Ki++4c/nmV+sI8A/4wD9
IRTYNqiirreB66wpw/6JHAF9jj6mf9hAd/rnJ3bUZ6TUZbw6RP7WEvQvJ8pv
a6j96wJ/WL2Ix+x/8Lu3eKifBzj/8AHaOw/YdXQ/51deyFs9fiLjyQe6pV8U
490yEvli+J1d7P+RJj3uXFmWt47E+N95E+efoaDbLM/TfgZwJb++kSNN/7LP
jmZ+sAE7PujD/GwHv6ONzlccwCkTtD3Okdify++2g+MZ6Hn+/Rw3sOGqwP7y
ADtdubR3HnBiwinOL7wjzXwcvyiR623fSDN/JJVuyXxhGWXyR1230z5BozD+
P6PrUyvorlb3ma9CR5n9kf/BGeprgL8oOITxEAl6wNHqOl8APfyazlfskGdp
XF33J8DvKDyp7Qf/wS930x9co0z7p/d6k/nYDX5Pm+w8tn+UcfNpgcn7VrP9
oBuu90j3oj7v8VLMBz6p/9EJHf9Gm/jBmkv05yDgwmUttP9HY3+p9IekhwLb
bhdo/huN+fbCsxr/o0194itfZ76xgd/yXV/N/5Bv652t+6HAxukLlOcEzv+y
q+b/0VjfxOl+uhvyor6do/6P+sMt/WivPOA5/v0L72j4b+Off2L7RZ8HazX/
xWL8CDo7he2PNesPW3pF4x+41SQdj0JjsR5Y+TPta4BuTNN8Ghlryt/+icaD
DXTH4K7Mn3Zgz7Afdf4o9FNNOH44Y039eyS7Ge8u4EUjGrI/3MBFFTYz/jyx
Znw5rUn0tzzR/24b5jsv9HENXsv+84GeG9FX93/GmPaZ4x+fgsagPZVnU38r
8PuvtaM9Qsdg/ym0xRUpb4yBvx5w6PwHdIs1mPFpG2PWn/3tDsaTHfIKXw7R
9gNbUs/r+A95D3N3cn/OBRw+eYKO/yL/2d95nuABdgzQ9X0e5Hk7DyuU8l7U
bxmdzPHMNwb7s2Vq7GL/j8V+yi0r5QWNNcvbRj/R+TCw9+OrnD+ECj04+Djb
P9bUb2v/HNo3EvTIyXO4nrONRbyeCOD4bAf/BxOn6fwVuGWHe+xPJ3C1sZfp
Ty7Ic57X+Ycb2PN1nK5vBf+UovkP2BLtn++ONdaYDtVvGtsP+eETXtf13ziT
P7jcaJYPAs7rqfFpHYf1T1ETzrdCx8l+ffdf6f/gdzeJYHxGjjP+Ms+LGq1n
+8eZ7W/0kcaDHfxe3x+6fwO6MclCfZ2QnzNgMf3dJfVtqsB4c48z+69Hz7Rs
jv8ir/IPOv5DXsfzF9g+L+iW8wU6/oPu6a7ts8Rhv+xiVY4XQXGgp03W/QjQ
54R+RfuExpnywlq+Qn81wG/3j0+RoA+2faL9j/Jdrjajv9hBz8yeSP90xMF/
Hz/i+OEEf9GPP7J+V5w5XjmSanL8dYPf1qg07eVB/dZNo+l/eYIXnKZ/eOOM
2+b6//aPbD/qd9TT+bRlPOo/6OB4FDTejIczbe9zf846HvJ8On6Fjjf/2sdO
4v68AWw5pevtSPBbKs7YzvYDO07NYfvs45EvPu2i++PAG1LUfk7gMyuOcz7o
Gm9cwr8PYv+jvqj4N3Q/WPTtnc75Rh7o1npu9pcXOP/HYGIfsMe5jfyWCcDr
y14UfYOAg0tPpb9Yga0fNGI+Dp1g2qv86ua0vwH66TfGUn7kBMTLlTS2zwa6
t9RQ+rN9Avarzt3X/X1gT+YB2s8pOPYB840L5S02Xd+5gY0j+3V/SfTrcIzx
lzfB3F+xTFjK/Xkv6K3fqKPzP8h3FP+B8WSJN7H7XlXqExSP8bLl4ywpb42H
fZYO1vbHY33VtKOeF8XjfDzJSGb7wW8vG095tnj470evMn/Y443Cp/3/1jLu
hznAn3drj85/oI/3XFn6owvY00rt4Rb9MiYzn3pA//e8Lw/6TSt5n/ndC7ql
0yjK86G+k/71k8Vh8g+rf4jrkUAH+BvfJw5yYL25bvAPYo9g8Oc8V1n3yxym
PMcT3U8MAbbGbWP/hwq+9ukjwWEi79IZD+MH9Mgf32F9EQ6zffGny5AeCXrw
9Ebsvyjod7WaU88DHKY/xrYczf2mGIc5n3G8+DPPW+woH7rqJv0nFvq3T/ef
7wC/E3CJ+SJR2vfJOI6HTpS3zPFx/ElBfUZGX93vhj42/35qFsoX5X5FeW4p
v7wY/TvbYfqnq1ozrj88wLaJg4lzUf7MsF/oD3mwx4YDza6LPfIhz1Pmqu4n
Cn5f81kB7X+K9vFB3+yR5Y9K+UJpf9ww2sMy0eQ34h+QPxDYmdOvGPS2BE1E
PJfsT/8Nngj/6HvSw/4HvajeA9JDgDv/fJrtDYW8gaHtuT4MM8s7bh5x6PoJ
dM8k3Y+KQPl3fk1i/olEfa5FbzK/RIm+zbL1PAQ4cqGF/DETcf6x+Cr3G+2i
X18n9xtipX1hp/U8XtqT/h3Hm0TRp+N1xpdT6rtWh/6ZAmz98Dfa2wX5n20Z
xfyTBXne4ecYH+6JmJ/64zNb7PnH1xc4fkOe75/XOF7nTjTz+TubX2b85KG8
47tzzGf5KF/mWD3OP73A4XvDGd8FE5FvJj3H/OaT9mXNYL4vBP8nRis9f5tk
1hd+4CeWD5wE+x2+sJrjwSTT/8KLok4z/ieZ+ha0G8X9LuskU17JSoH0x5BJ
hu/pP9jucrwNRfl7/X/g/kUYyvuc1fV8bZIRaHbLrVT2/6T/2isS/EHNvtzD
/gd2bSvN/rABh7x+lP0ZA+y5UU7HG2DLB3foL7HA2cZhnX+i/Qdj6tE+iWhP
0YclWZ9T5IVmav8D27qkMN+4gKMMzU9ZUt8fjZgP3JAX/+Fprp+zJ5n7X+0P
tdjA+Jf29d7G/ddc4f+hMs9X8wTfvsbz4XyxT7H+Bxn/k4wKT/+kvbSG/S/6
3c9lfvJNwvhR/iX6Q+EknI8NW8j7HpbJJr/3t1zqHzj5v+NJEOgRL6wmPRh0
R9FHzG9W0ANP27X/RZ5/fzkUOLJrIf0rbDLWL29uzWf+hzxb44ws9v9k7Nf2
0vP4yMlm/1S7c5ztiRL5x6rpeQDkNdqg9xliJmN8HNCE9rCD7hmYyPVhLOS3
f+thgfA7IM8XVMD+TQQ9p9Ih7jc4gfcUlOL6KQXyHPmJnC+7UN5RWI7r6yzR
b93ftJdb7BXVjO3PBn1v6+I6fwPdmJ3D/JY7GfOXoLvcD80T+f7xNR/6HKyz
lfHjBS57RM+vC4R/qFv3e4EtNaryvLJwsrHPnF87Uxj/CcgfZXU8DUxAvl38
JfNhEOj3ar3J9gcnoL9X3ND5IbB3yV3mwxBg26/VmR9CgZMOt+B9hTDIy7mS
y/HBAN1yftXf0h8RwEaH9zlfiIQ+zgfa/iiU/+vDzrq/nID9249rcr4QI/Jm
eFnejvJ5/vE+VvC3y3X+DXkXvx3J+X4i6IG267ofAxz7xTX2V0oC/HfX57o+
R32J31al/bKAPb4its8NbJ0xiuWzE+Q8cizvR3lE341DOF7kAjv8+/15wMEX
NxDnJ5j7v5ZRy3m+4oV+nvq/8v5PAbC7ZhHXX74E4yVToK8X+1/qa/Ac/cEy
BfVN6UF7BApu+vEW9v8UrE9+n8B4DwaO//WU7g8IPXwry4egvOfBq+yvUGDf
lc06/gv9mK5XDJQfc2Y8+zNiCuLrl/mcb0VOwf7/ewb9PQrlrZ/01vgH3fZB
nzPsf2DLqna63wb51SrHavyjfF71JI1/4d/wGeM5EfzzArfofhT4La98z3hM
AbYFf0P/cIG/6A8r5WeBXlDtC/q/e4qcN7z8LfO/6Dt8uJ7PSflyfzNec1E+
0n9emwf6b8FVeV6VPwXna78G8L6MV/rrYgzzbQH4j2Zm8TzfN8Vcb8TXTSR/
Iej3kmcxfi1TTXzjRxfrC5xqjseO6gFcvwZNNfUdu2852xM81azP6T9/tk41
83OHX1/jeicEOD7xIOcXoSi/ufY69kcYylu8WcxXBnDHJQ91/g994t9Ppv9E
AocfWUR/iAJ/SvwHOv+fauZL72en/2D/i/wPdf/CPhXrif7vcPyIBb+xfR/n
Iw7wu7oeoD0SoW/wgGSOl07Qx775Gu2bAnrI/Fqcr7ugX5cPdT2VBf688nV1
vw78sVPvcH2dDfuc/y6A8eIB3cipS3/LnQp/2VmB89U8yMv6oZD7lflCb5Oi
9xlQf3ruTxx/C4Dn3z5GeT7gomYJPzP+p+K84+3nOH+3TIO9v3md8RU4DfHw
537moyDQi+a/TP8Mnmbq47hzj/1tnYbx+esvOF6GoHxe5SDdL5/23/sHYaA7
Eu5p/0+DPp7DvL8aAbpr5kQd/0Wf5FiuV6JQv+2LKbSvDfRN92pQnxjgbF8q
xys7+C2r1zO/x0Kf9B/v0T8doGdvmkT+RGDryOq6HyvtyV/L+5Ap04xaptrF
U5j/QQ99Y4HGP8obk8roeQ3owyZtYn9kiz4Pj9B/PWKP92twvMoF3ffHG/TH
POg7unomx5N86Y85FZjvvSKvzGryF0z7730q3zT4y8UlXJ8VCv+3O1ifJRF4
QFWd/yVC/syW9K+gROi39TnWHwxsqfSezv/Bf+vTEPZPCOR5ptp5fyY0EecF
/TdwPR6G8qEzg3X9L/XtLc/6I0R+i0O6n5yI8WDOy7RflPAXlmc82oS/fyL9
KQb0HPs/1MeeiPlgvyncv4gFPT7zsc7/Ud7WrYzmf2DXzcXMz06zPY4ut96n
fVPQPu/15cxPLvAbcz+hPlmg+2KT6L9u0S/6bZ6/ZYMe9kLinxz/xV7lunJ+
lCvyx+n8OQ849PLbtE++2NPzEf3Xm2i8aKrZZgX7H/TzqaN0/o/6fTOjuP4o
hLxyq/W+imU6zhvnBPA+UOB0k+441VXnf9Oh/92hvE8TPB3233OY5w1W4LOv
7tT9H+D4kJ/p36GQF+Q/jwqbjv5sP472NUC3vvYW4zdiupkP4ifN43gVCXlz
flrC+zFR041ST1sdcnKj0G3QL2/QEMZfzHTMn1s8R377dOOfpwL+1577bbGo
L3byOF3/i77h33M9lwhcNvV33m92SnutdenvKSif6s/3LqF/W5H7hVnQJynk
JuezbuDmNQ9wvpCN8l2b+u8vTDdumA6bxP7LBd01arOeZwCHfbOe/pov9Js6
/noh37rFQ30LpP9m6XrCJ/pVyOP+ZSFwQ7/+lhnIhyuuMP8FzsD6//NMrseC
ZmD8mqj2Cp5hyq+5sDzHAytw0x49SA8BLlyzRs/LUN5epjb9N2wG1q9vBXE8
N1B/y3lu5pcIlM+a/puO/8C+gS3pP1EzzP51FLTh/pwNdEfTRrr+h7z2vSbQ
f+wzjHfNvzfHMv5BX333ht7PnmHGS+dDv50SeqLIS1vI+YgT/F1C3iZ/yoz/
nq+6UP7MyDjGRxboRWHb9LwS8ryLV3H+lg2c/Yqe/3mALXeX8HwkF9i6rin7
Iw840jik8S/2XFBKzzdQf/gb8zjfK4B9HbGPOb/3oXxKR12/FAJ7qn+h9z9m
mvmx7INZjOfAmcjPpdSeQTOh76yHzEfBM7F/a02mvawzZXy+oP0Pfk8rF+WH
Anuvt9T9X2B3vfd0/o/yrtbPs3zETJwnLkzR+xTgT3kUr/u/wJYR13T+PxP7
qQ/WcP8kBuXnvLeV44F9Jvrnk77cT4lFedeDb/V7I/D32Hib+3GJoDtsPzJe
nDONW08Zhs/g/c6UmaZ9Xc0+1Pt+0D+/f4qu/6CPZb2P+ccNedZ+oZyvZKO8
o9jQ3cz/Yt8xG2mvXOhTdOoX6p830zhkLmDqc38sH/y2xDf1fBPyfIdtnK8W
QJ/Yv1/V+Ie8zt8XZ/8Viv1iS+j3V0mmvr6Y93leEJhk0oN2tOf9xCDgmKFL
df8nCft1Hb77lvEPuqv7JMoPSTLt3f7u83pfKAnj44JdjPewJNhzWdh69n8S
2lt3MekRSeZ6pSh9OtefkSjvezde4z8J/pf5Hu1rQ/3eRjepXwzkxTebpPP/
JMz/HwRzvh4r/JEzNP9DflSHOcSJoPuWfarjfxLuq7UszvuEKeC/3KWS3k9M
kvOq7Yy3LNS/wX9f0A265eYJ7u9mQ35g6lyd/yUZ1c38nzqB/Q9+63PNuF7I
A/9ue0POX/MhP/1KJ/q7F/SozzW+C4Atq0bQn3xJxhKzwwaHcPxPwnh/bRPn
X5ZZ5nhbdkV5rjcCZ2G+d/Q083vQLOwne9+mvwTPMuWnvF1K78cAuzboflcI
sKeTk/YJnYXz12eid0p9YaAbl7rr+THk+97vrOM/6Nv951ORwEFTEjm+RUE/
u/ue3q8E3fvCQvLHiPzmi/h9gR04e8UfjIdYlL9R36X354E9D/I4X0qchXg6
9JzeR0N5S6Sep6cAWx+X0/U/yoctna3xD3pw2zFsvxvY/n0I+yN7lnnf17Uu
YwXjX+Tvy2Q+yxX7tQnn+JMH3KzbPq7H8oXeZInO/2cZ50yHS+L9p4JZmL98
XEvPO8UeO7+mvQpFH//4ZZmN9ezz8zi/DZyN+5iDdnI8CZqN+fO6S3r+Nxvr
kXYzeV/XCpx+7wT1DwHOCczQ+6KzYa9lYxh/YbOx3pv90Vb2/2zTHgPXt+d9
tAjUP+SbkWx/5Gzk0+u3+P1qFOSVLzWM6wvbbNzH6dZd13+ge16er/EPbJvT
gPPtWOgXPjBI718Jf1A7ro8TQS+5IIH+5JxtvGKqtSRdyqdAv6JrZTmeuFD+
0LFo5usskfdJbdrTDXnxY3S8ygZ+5+NC6uuR9kVP+479L/Y7tYrrtTzRv67u
B+aLfPtlvd8x24wf48QRyiuQ8u2WcT7sAy5KXcb5QiHw6mdf1u8H55jySo2t
TnsEzkG+8n/PFQR8q+ZB3f8Dv2e5rtesoHu76f3nENDtY4brfcE52H//agL1
CQM9saN+/2LMwf5c+16MlwjgohZ9+f1O5BzT3u/1O6b7P6Df8N+XsEFeYfcz
Ov8Dfu36Lr1vK/KPnmH/xILuXTGbdMcc2H/EYu7HJkr7z8ax/5zA7oV3qH8K
yjviytL+LmDbiVeZH7NE/pvD+D2kG9i65xnaN1vsdaUj5XuE/13t31yx7+1i
bE+e2CMyk9/j588x+zvybne93y7lJ+h6sQDyHb3/4HrWh/I5r7Sl/QrRH5aH
/9Pv350m/XjVVM53ApyIz5p5vJ8fCPqZ8PWcn5ZxmvXlXdf1R5Dzv/s75Z2Y
32ycSv8KBr8x5Xn2bxUn1hcvP+B+jxV0Vx1tf00n5vcVcjmfCXFi/hAYxP2I
OqgvvlOy3i8A3flWJ/ZPfSfOKz0neJ87DPSsTl6uLxoDW44k0H4G6s/q8Sf9
uTnoBdUKKS/Cafpfj8DdnB+3dRrPm9VWWiLyI6FP2Y0hbH/H/2OfKGDPn6UZ
T9HAtiH7dP8C5Yt257I/+qC+8OjZjLcY2NN48wDnewOhn+OV9XqfGPIcv1bj
ecQIYN8dzcex4LcP0PvHcaDnHpvN/nag/mpBUdQ/AfhGYxvXb4ko3+ebD6hP
Eug9tufR/52Ql/JwMtuTDHq6Q/0xRfpvle7XpUl77bl6v1faM34r68sAblRq
ut6nQPv3H5pG/deC7itfjOODW8o/WcTxeLMT91mz3Fz/ZTsxf2m0kvl9B+p/
xz/+eYDDx9oof5f0z0eXdT8O/VF0YgnPW/dL+38v4niWh/qtjbayf49If/zx
CvXJB91VvQ3Ho1Pif/de1PvJ4h+19zDeLwAHbfuC9i1wGs89lff3C7xPeFXa
d/OHXMa3tN/7mPLuiLwNEzXeoe/B0rqee+TE92pdH+cw/uea/JbX9HvjgLmI
r91tmL8CgYvWzeT8tgz4gz4aQX8MAnZdvM35YnmRdySI9/GDgT3fvM35RJW5
pr7NqhXX+8WQf9+/H1JzrtlfFePLkz8E/El3fud9uzpSn1f3t0LnYv7TZBfP
0+tD3qLf45lvwqT+++vpT43nIj/1e6D3D0TfKzo+NAd2uK7zPCFirlHDYn4A
Nl1wW8jfuiCT+kdCXmz+XK7/O8413zuwWI5/JDgK8tzj+tEfoqW+PXq+YQPO
evYF+mMfyL/hz6cxwu+10d8Gwh6el6ozHu2ibwO9rz8CdN97N7h+iQUO3HWO
+S1uLs5njmq+cqC84b+/lDDXzP853//J865E9Ifl9G+cvydBnqNpgMY/sOvD
QLYveS7WhwH6fkyK8E9qTf9LQ/s2PBym99thP8u6Hdx/y4B+ZdM70b+yoF/k
OQv7c63g7F6cT7vnmvk+55KuBzajvs31Kuh9G9T3zuONtNcOqW+uh/7jgTxb
w9scL3eh/L/3WXNRPqfDQOb//XNx/vbcau4n5kl8VJ/E+wxHUP7B++rP+cDX
Hz2hv5wSf9j3JvOhV+LtwBDiC2h/zrFkrscLUD605QH251Xwt3e9yPj2iX5n
enP+dwf8Ub8/0PU+sLd9HsfjR9LfYX31++N5yH+WuhzfA+aB/4Xi1CdwHux1
tjH7owzoQZWr6f7wPNP+Zw7Up3+WB90Tovcrg+dhP8Cl9qwCeUZYGf3edZ5x
wTRg0mSpvyb44088T3uHQJ7lmXPkrzMP/risJr/XCQV9x+yFHP/qzzPbl19V
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
C+Fv99cflP4LBN3iOsr+K7PwqTzHNxsnMx8ELcT6/0k/5rfy4Dd2nmP8Bpv8
lpj9O26KvCqgO7o9r+/tAduGhNC/ai4073dZds/l/faQhWZ7vTl6vlIH+rXs
vkfvl4NuGaP3e+uL/Dfe5notbKGch6m9Gy80/enWtlz6jwH9okY1ZT5uDmyL
T9LxHzj0wf/YP22lvpcmMR9Hgm6Z9BK/z+qI+ob4/TcKdOOUl/aLBrauacD5
hA24/s/ZbH+fhRj/ve/r+L8Q3+sPLM/zz4FS3/r97F+7yK+fwPneCMGXJ7G/
Y6U9V5ZQ/zgpX/ME95cc0Ldo8hraJwE4/Cf/91DCn96F9xGSgIMunCTdCeyw
v874SYb9fe92Zn5JgbxFAZnMP2lS3ztleP7jWmiOXx7HIZ7HZKB/DjbS96Gz
hP9bzcdrgdMPJTC/ucHf3r/+2yztr3md5bPFnx8vJ32H+LOlMev3iL4BT0jf
Jf7zYVnqmyvtH6bv4e4HPul/7yUP8j84/gPPl44Af1130jMe4HzoF7//V77H
eEr6339/3ivyh/5J+RckHp5dw/33AtCzTq9ivr0K7PvkI36/4BP/bv0L7XEH
dHepWfy+vlDo/vHkEeI1/pNtXP9YFuG+Ze1U3kcKWIT1WqUcnp8FLjLlZU9Y
yPxSZhHOD2Iu6veBi0z5P3XT99rKgz/LquvpYGBL6yq6/y+44AM9P0b5at8b
HN9qLsJ9gxYNOH8PEf7EFcxHdYCNfH3vNHSR8bpplgVpjP9FGC+cBygvDDhn
bDvd/0P5Sk387ysuwvr2wD36c/NFuB/jWcvv/yJAt42MpX3borznnu5fRwJH
VN7PfNgR7RnS9EXuD0UJnuGjf0VDnmPzXP1+EeW9fS9Sfh/QLVMjshn/6A+3
P58MhLyiOXfYfjvK2yq8zO9VR4h91l/gflMscGxNXQ/HQX7WvNl6/2ERxsf1
jThfTwC/M1ffI06U9o7LYT5JkvrzM/X7WMjL32tn+5PBX7Ayl/sLKbB/j0O6
Hk5D/75zcpp+Pwn+4DezaM8MtPfAmDm8L5m1yDhv5ouM5YLXonz44/a8T+0W
fZ7c5/p+8yLMl98syfyWLfr732/YIf3Zq7i+H7cI3498uYXzt12Q16NHcY1/
sW/KYY7v+yUebj/W+/lCL1mL+89HpD8XVNfzP8g788Ftxu8p0EOHf8b7K17x
b//3bRegn732K/TXAomPoNK6/pf2nrPr+C/t2Xme+faO6DNtAemFwOVf283x
9hGw7+ts+p8lxcSRDXQ9EABsXHbq9yAp8Nd11xnfZUAPszRlPgkC9k7szvGz
PPC/68HgFKO9qdBeO8f/FJxHFgRQX6vUv3gox7OawLYE3a8IAX/4rl3EdUC3
vBfH/Y5QwYEW5pv6giP0e6IwkffPJ4yvxmiPq+trHB8MYPdLnelvzcHvi22v
91HEHvU+0/m/yD96meu1SOhXcuzz7K+OkJdXrRjnz1Hgt27T+4XR4K9WoxTj
x5aCfHv6a97v6wP6jfRjLB+D8ok3Auk/A0Hv0eQ52sMO3KX/p+yvEajfcv1D
zn9iU3Ae4H9/LS4F74G9PmiTtNeB8kV7LYynBOjj+fwjfq+RKPYrNpv+nATs
iHhNv49BfTsCWlK/ZLGX/356Sgq+V5z/Gc9r0qT8T0P0fQ/g7P0z6E8ZwK41
Pv2eRuitZtG/1qbgvpNjpe7/i79tiWN/bQaOOnWF8ZQN/YyTqxkPO1IwvvwS
x/uTHtAj9pSm/XdJ/24+y3jOTfnvft1+se+hmxr/4r+DA+lfR4CDOm74R8rn
w/5FRWs4vzkl7Vt5iv7pFfufWs18c0HwlU/Y/wWCAwfT36+i/rjXAvR+n9R3
+yX6/x3xt4lWyi8UvKcx/feR2NN//9yyGPOf5jnMhwGL0X/Fd9OfA0G37H2D
7SsDeuG12wc4/gNbNvXl+qj8YtzvXVBzI+Mf5Q1LBeaXKuCP/FX3x63Azv9t
5nlPTWCXfz8qZPF/14N1IM+RrvtfoYux/iql34/UR/nmR2J1/Af94IQptGdj
lPc++Ebfq5f2ujpzPt4cODBotX6PCux9/X3d/0N5T+mL9M9I0B0/FdH/O0Lf
+CZN6E9RYp8uKWx/NPT5uvLr+j4i5MV130h6H9DbL71De8aIPTI+Jv9Aaf8r
a3i+agd//JTROv4DF+U10PF/Md4rjpvH773jFmP9cmCWvl8t+p3QfJaA8qsf
nqb9EtGeokG9OR9MEnu83YLjtxP6WMvqfdNk0H2e6YzvlMW4Xzd4G/0/TeQ1
mKjve0n9zx3hejED8oKnd+V8Ogv0vDd0/2At9Osx5wL3y91S/s8ixuNmYGvZ
FNovG/w5HXU83CH9tWCovk8Ofapt2Mv42CX2/lx/LyNX/OPVFfT//ZB3Zkw2
258n+vnXH0dg312bQhmv+eIvn/3KeDqF8uGjd+n5n+jf+HPiC6CnL9nFfFaw
GPcp0o/r/t9i7F/2nann/6Lvuwc4vtxZjPPY0fnc3y0Uf/npbY5vjyTeH72t
v1+SivhYOJT5JyAV8f77WR3/U9H+5S72b5lUjFfRa/S9UJSv5j/PKg9+z9fV
KC9Y5Pt0P7wK6Nbsl/kejRXYkfod54c1UzFeZJTm/cMQlB9e4jH9pQ74GzXQ
+Xuo6FuiBu8P1wf/veCD7K8wqe+ZGxr/0N/yz2J+X2CgfOSGXWxvc5F3KYbx
EwF5Oa0+1PV/KtbnVn0/IRL6Otq34/5pR5H/RlPO36NSzf2MvGW9tgk9Gvq4
pnXR+b/U925Vyu8j9qjXTe+zphqvPf2zZijPYwYK/7VE2t8uuGQ28QiUd4+7
TRwL/Yx73Zmv40D/d3/YkYr7cbd+43w5QcpHrOZ4kpiKeC15SM//Rb9nWtI+
TtTvPXiZ8ZQs5bvP0++lUL5HvRzaP03s2bO8xj9wfM/3uX+TAdzjBw/zRxZw
+N0pnC+vTcUPFBWUm8n4R33eQl2PbQZ2OuszH2QDV6qu7wntgL5BjiWMbw/6
y/NDGvPpLugbP20m83cu+D1/jKI990v/1tL99jzoN+RmNP3nCOqzfLqS9shH
+VDXMbb3FOhB/57/pRotnv6Zv5Hvh12Q8rd/o/0KUrFeeuMK7ytcFbr/PoAP
8p39Z9NedyQev9Tz/kK0JyfvNeafR2L/af73v5eY8lz1H7G/A4Atvy/ieBe4
BPnO14Djcxng8Jb+++FLzPuwkV8c53u15UGPH3RT74uLvHkvMf9WAS5cMEbX
/0swH//xc/p/TdFn9Tj2V4jIa3mb9Drg94536PflwJ6EGM7n6qO8+9/vTUV+
kJv5qLHQqzj0/VrggjL5zF/Nl6B/W1bS7xFA/zjGyf5sK/ptelPfu12C9ebv
73G+3BH6Fv19jvksSvTLqsv8G71E7mudZ3tsS3B+E9c5k/EPfqejF/szBvo4
qqu/DQTd4a6t3zdAH8er14hHAHsa7uV9hVih++/zxy3B/s8vCZTnAD2pSQDv
+yUsQbynLKc9E6W9vV+gvZKAjb/0/oRT+Mvu5feYyeIf/v3tFOB/v4dKQ/kd
315hPLvQntv339LzP8j77mEhcRb4//3+Ya3o//xbvM/mBj2osv5e12bU13LC
Tv3eRtqfb+d7nTvEfw5f0d+HAX/Z5p+w/C7IL7rZlfthucI/cSvtsR/YmpOh
9/PFv5sPJ/+RJeZ+2v9s3ZhP8kW/uBS9/4fyxmvr9fcAUH/7Oi6O9xfEvotS
GY8FsEfOT0Ppj1elvksanz7gsM53uD66I/70qYP+V4j68gvusf5HS2Q+/JX+
nl6aWT6lvIP1B6Shfc+F6/2fNLP+9KaV2R9lwO+ZrPkjCPzZn+p9w/Kgu0u9
yfLBafCHf5rTXlWAy57ZwfmLNQ3x1mHMd6JPTeDIlfHsjxDIM/rf0/1/4Nif
dHwJBR77/VvMB/VFv9bBuv4HLvR//9rYxI6/D+n9PAP1GW93Z33NpfzI7/V7
VOj7733xtmn4vaHjh35g/IPfsuwE568dgR0RFzl/jgK2ttyr939FflRffb8u
TfaPJxD3AT3xgJ6PxUj7/OexA4EffLZB3zdLk/PJTtR/hNRfPVDfO4P8nPX6
3nYc+CM/0vukDvDHvDmD/pEA/qKOP7G/E0EvaP0l+zNJ6tu5keOdE9hzqwv9
PTlN3iPdr++lge7tP5ztT4P8Ls+M1t+LAY6/W4P5OQM4feN8Pf+T9vjP09eK
fmsj9fcA0J/fVJ9A/9ss/vuC2jNb/Mf/e1s70oz+T/8E/dCN8S/9830qzy93
pWH+fPBZvn+TC3m2cWU4fu0Hv63zD/p9tuj3gu6XHRH6vmjy59OfLjJeTwFH
tVus7zfCXuHb9f2XC2n4viTxpL7nhvpD9+rv01wVf4kewHzoS8N64I1RzId3
0uR8LZ/6FIq9/mnG/d1HqP/f94UsS41Pnv4/cGQnxv9Sw/z9z2F63ztwKfJ7
eDS/Fyiz1CzfvOFs+mfQUrO+Mue7c/+oPHDk5ob6vTD43bd0flZlKc6/e+Ux
XqxLsT5c9Zj611yK/d1zdfT8H/JuhTbU+T9w6NnP9ftyyPc038n7h/VBD7v6
un5vvhT3UX59l/m78VLTHiHf/a7jP8rHJKSyvuag5zQrwfVmBOjOURofbZca
L5sduJfz8UjYZ9MRvX/TEfx5v90mf5S0358/opfiPvBb9fh7iDbQU2r8qef/
Yr8793X9D32KTo9l/huI+npsWaXvaQs9oy71HYHyMXWm0j9jl+J76jdvcL8v
DvVZ2z3R388Bv6teT+aTBJFX5wPaIxH8fW7NK+YBThK6T/vTif602LvxPlDy
UuzPtbzH/YIU0D3btrL/0lC+7PY1vL/gAj6zei31zUB9trhIPf8T/IW+d78W
+uZdWEV7uUF3dFnPfLMZdEtARX5PmS3007oftsPEjjF7Z+v8H/y2uBTWtwv8
3rU6vuRCf9erR/X8H/rGt9X5TZ7wx99m/x+BvMAhj/X+r9RfI5DvdZ4S+y0p
q+/Toz/jJ41i/rwA/rCDh+nfBYIHdmf+ugocOHuTvu+K8ulf3ef5852l5vhU
7ZvNPL8qRH0HG73F+32PUN7SJlrff1iGePKvRwKAM/ts1/v/y8z7QQU1RnD/
ocwyjOcf6v5wEPgD27+s5//LkC/qfMb1ffAytL/uE+ajKsB9+vbh+ZAV8nKc
+j1DTdDzGv7J+A1ZhvW1ryH3s+uA/y//+WIo6vfM0/d264Ne9KaO52Giz5x1
nL83hvx/10+G6DdlLtvfHPLyQvU+bQTkfRBzi/7QFvz5A1X/SPC7vb/p/r/I
O6r3M6JQf3iPZ9m+aPCP9d+PskH+s5ErdfwHbrm/P+fnMZAX1u8I6QNBn1Ot
I/3LDnm2k6/r/X9p/8NCfg8euwz7FXm/a/xDnqve7/r+PPR7+csIji8Jy/A9
REYQz8MSIX/GG/r+WRKwpdZr+j4y6jtj9KM/Jgu9n97HSFlm5gPXiO9pjzTU
75mo80eX2PvDBrRPhvjXLz15Pp0l/vHZB3r/H+Xv9tT3NNzQ1zakNPPjZtBD
i+/j/eFske8//9gh/d9huP5+Auje3b11/g9s/bQz9csFNvy/17If2JV9gfsD
eZAXO2U+7XkE+ljKv8/7rPmiT/1i+v2f0K8e4n1BL+zfo3Z19veFZTjvLNne
JfQCtH/rQp2vXhX7tO5ZDO2w+IDv2a7p/t8yrF/S9ul7nxIfm+x6/gf+9CP6
vqolHfa90oH2DkiH3E4vs3wgcNRnhp7/pyNf1fof4zsoHd/zLurF/bTy4HcM
Hs58HZxu/Of31qqA7uxVoPv/wO7vdP+tptS/qAXndyHARqsJxHWkvtfmcP8t
FPpXe+MQ94vrp5vtzR2g7xmHoby9az2OP42lvSUW8L0rA3jO/Ww9/wP/g6xw
+lcE5HmGXmL724I+fbL+Hkokym84/BrHl46iTxPdT4pKN8aYCnQcL/Kj042y
T//02ZnB+E+X99DP0b/7wL7VVuQwfmJQ37/vZw2EPt6TsZzP2IEt71nJPyId
30/v6MD99liUjx0TQf+MM7Fj+uz5+v4Z6utRrhjjJwHyXH+m8feJE1E+5mRV
nf+DfqSjft/hBM7+8QnnC8ng91Yazv5Mkf7b52Y+T5P+bXWZ+dsF7On3I/NP
htCX/0X9soCr7DtfDP9uWQv79qjzssa/1PfaGvrT5nTMh/P0/kO20J85w/7b
AX901Cilv08I+r+/D71L7NvnS32PUfz5ge7H7Uf94W2/1N8bAG5YX/P5Ecj3
2gyd/0t7fqnI72FPQb97oR8zfrwof+v2WD3/A3/kSn3/uwD+4diWxfZcBf+Q
E/P192yAizL1/Z876XivYtgk3h8rFH/fqe9dPxJ/3ThYz/9c8J/93fh9RjEX
7HViNM8vAlyY7zy/jfqVAN0d+ImeD6B8V/996dLAnr9KMB7LgN8I0vIvAIcu
KMn1UBDkv+Jf35YD7lH6EeWXd5n7a8EBbfi9ZUUXft/x/vP6faEL8bNyLnEl
yPdcqq3nDZBX8o9t9I+qrv/mcyvob36k59nVUd6S94D5ryb4Ha8HMr/WcmE+
0aka/SUE/GPrj6d9awNHHvbpfqXI27ia39PVBXZFPdTf0wF2hISwfD3o806Z
CrqfIf1TXN+/bCD88/X7yzDqO5/x0wjlN/i/t2wMur37McZvUxfeC0y+yO+l
DbHHr3/z/LKZyCuzmONjc+DYW3rfpQWwLfprfa8R9Z3ppL933Rry7LVmcnxp
C/qNF/T3k9q5kP+cJZYyf0r7DjTi/cIOkB+zTd/L6Sj23vA3/bGT+FPFEzyP
iBJ7fBXK+O4KHFSmPfNLtPjzcF1/d0d9toP6vZANeOPBSOazXsB5ndYS94H+
f51eQH36wt9qfdVK87ML65udl5g/+4u+bbrNk/YMlPZF/8B8NdiF95B+0fHS
Lvp5hzA/DANu9K7GwwgX1puu6/y+bxT06VJD52OxIv9ud/rrWPH/93S/NE7i
t1MVxscE6Y/nGuv71yif2/pzypsk+sRuYn8miL2W6fnfVNCt7z6n72UJ9t+H
myH2KNL7RUniHwd0v3K26LPATv93Sj7xj2/zXFivbljN9Vuy9Oe+GM4PF0p8
ZOzkeJ6C+pK7rGJ/pbqwf3O/KeczaeL/5+zUd5n4yzf6Pq5L4rG4jfG2wpQf
v/j3N/Q+ivDPmkh7ZcIe3hKN6Q9ZEi+p39Fea6BfUb/JmwSvBX/w402Mn/WS
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
au9E8Vf/+ekM9FdRYUvd/19pHH6Kf3uW5/Wzxf6T9Pf/nIhXzzNtOX7PgzxX
E/39ieSV5nrs3pa3mW8WorwneK3eL5H+ChzPfJEKekabr6l/mvBXUX9ZBv5g
j+5HusQ/ep/m/HcF8pul3EXel8kQ+Tf19xky0b7wEaH6PhXo1qG6n7UG8ryf
t+X6ci34e/R28rx3PdpTtKMD848b/NsndKH+GyEvpfFe/Z5V8lWs3ofYgv7J
eSaL+03Zot9ifT9ju/jDd0kcT3cAx565xfp2SvyXOq3fv6N+10oP9+9+lvzU
dJG+hwf6rZ0zmM92rzRmWswf3IwXebnS3m2ZzCd7xR6pAyh/v9BXJPF8+YD4
36UyjJc82Gda1/a8T3ZI/G+e7v8eQfuDms1gfx5Decv6/nq/TuKlzVbOJ04i
P83xr+9OCX+2+xuO/6iv8piN/L1QL+QndL3J+ck50T+lL+dTF1Zi/G5ZfDLH
f7Ff/x91/Jf2bPqc+zeXVxpBT//4uvC8+upK442nf5xdJwq+Lv3ZfTPt7ZN8
130Yz1duiT/uK2T9d6S+SqU5/72L9t7ooeuXwpVGU1PhJpT/AP4Vb3uJ67dH
ot+3+l7yExnvD7/K82hLBuz38kLGY7EMxG+TdK7nAkDPWVSR688SGZD3iUV/
LwLYsnoL7V86A+PJFws5vywDurP9Ia4HXoD8+CTtr6AMjG8132W+K5eBfLfy
I76XUh71L8ruxfG2IvgtTSbq7wugvuRhmq8qoT6rN5H2qQIccb0y7VkV2PbB
LP39WujTocy7tG910Fv98T/qWxO4MHsJ46EWsOfzXF3/iz7JTo7PtSFvTiW9
f1QnA+8pDrmzTtpTF/pa8gIZL6GQF/vuW8zH9UT/nJbsr/oZZn8ltd7H92oa
oLwnUvf3wsDv9b9v0UjkH57P86/GYs/m17mf1hT8uTGv8H6PAfsOsV9g/mkG
evakEI53zYFDR8xn+1uIvxx4l/ESYdbneMOzl/Or1tKerdWJ28Ie6SNrM1+3
E/+pOUN/3w3y/v2+ogP0d3aaz/7sCJz7ayLnn50yzPcLchI68P5AFOS3Snid
40VX0a/2MOJo1Bd2/iDt2R04JE/vc9vEX/2/19BL7Dm8N/2jj/hL6Uncz+sL
HLN2IPN9jMRL0Wyud/qLv50qT38dmGHu11i3deJ+2OAMo5y5/snne7d21O8N
bsrv64ah/O5ySbTvCImfV96iPqMy/jufjxX62fH097HiP9+cpj/FwR7pvfX3
uSaAHlXviv7+ndgr6yP2zyTgDffW0B8SRF6vW5xPTQV2HT7L+E2E/zt2f0f+
GWhPnxkv63ux4E/8oxXrmy39b22v78dK/cP09w7nZeA8Oqgu82ky5Dlyojk+
L5R88yCO30ekiH4x47m/nQr7/FA1gvZOQ/n878ro+T/4Hf7fo3CB7tuVxnhc
IfoV1/EvA/TAKfp7LJnAtgorWT4L8WnzzuLvd6wR/VbV43x2rdR3ZinH6/US
nyvrcP3lFn+5oPdxN0p/3lZ/3Cz9VfxF0rcAL/3yuH7fIvr2rc98ux3tz3n7
I/rrDtQX6v/9853iz5ft9H+P6Bug7f0ZOGXPMfrLLpS37/qT/bsbuHupevo+
Lvh9cyPYn3slP30+lN8/7Zf2P85k/B6Q/Gm5rL9vLbhwEce/QxnYf5+5juPX
Eal/i4f6HgM2PtfxJl/yb9Ob3D89Ke2bX5znTafEPxcNo31Oiz7ja3A+5RV/
ntmG/nfu/8TXBdA/v3KF8XVJ7D3NyfxWIP5ZvRnLXxZ/3lqR/FfB33Wpl/a5
Lvklv6F+vyP2z3qf5W+hfPhZpd+B/ITjz3D+dVfG49ZTOZ4Vij0+aEj/egB5
kR8H6fe+Iv+rqxy/n6D8nBI5+v7PKsx399bh+0rFVpn8BeVr098DVqE9TzrS
HiVWob6Hmu8CwW80tbJ9pYF9dRO4/imzSu63HGD9L4Ce13EAv08NAnb43z8q
B2xNnKnn/6hvvd/fKkLe6JmjaK9g4JwqE/j+XSXwe1YuYP6pAnq1dTvo31VB
d+St0fcHpf7rDTkfqw7+9v54qSnyR/xK/6sF/sgMzR8hwO5xsxkftVdhfyuw
rt7/Az2rcT3+3l7dVbj/dfxj3s8PFfu+cfm60OtBP8vmfvqesdT/0hfUp8Eq
3O8ueMz5Rpgp3zG+1lnq0wj0ISd/Zfsao/yQo0XUp6nYt7j+Ppkh/VOhHsfL
ZmK/hjv0e2ixh72I43EL4H9/7ylC7Ldbzx9ar8J4uFLHk7aQl9xtEPNhO/An
nq9Ef4mU8r2f4/leB2DbKh2/OgJb+uj41Una71vNeI8S+7XU3zfpChz+yTX6
fzRwySYaD92lv37P5PzHBmw/ovOBXmJv//2gPmjPhpAIxnNfsd9HGn8xIu/N
2sT9pf92tdD3muAPXutHHL8GS3mfvvdmBw7sOIr1DxP7T9L8NELaZ9P2j1pl
eE37frpI9I8Vfzt6l+vRsZD37/cVcWK/x5XY/xOAUyz99f632LPrXa6/J0n7
N6j9E8C/f4fO56aiPkuVAbRnothv/89szwyUf8cznvUlSb5w9qA/zgZ/kD++
nKvM+aknaQrXG/PAb0t5neWTxV4HRlL+Qom/2oH6+1KoL33kAMpLBd3bbAfz
f5rE+27dH1yG9vZoHEL7uqS9Ny6zf1eI/3oXMr4ygDddbEL/zZT+Gv6ajv9i
3w1zqc8a4MJWtxhfayUf+ucb6yEvfq6+z+OW/uqfx3y7Uez573uWEh/j+rI9
W4DDTsTr7wkKfVJDlt8u9m4Qo/fdpX2jdP6+E/yV6hzV8V/6q9ti1vez2LtD
OdJ3iT3WeJi/d6P/Q6NrfM/xH/SW/xzjfGMvysfuOq335VfhvPJkq20c/1Hf
mZQXmJ/zZPz4y8X8eWgV7m9G/cHvb49Iflqp4+mxVf99Dypf4m3e5/ye46TE
/5dh+t6G2Pf8BPKflng6qfbzgu7y/x7ROdBXd3+s3+PL+FgpdzvHf4mfD+7o
7y1K/cGaPy+jfI+GD3i+fVXqqzOT9OviLy8+1N9nFf2WqX1vgf/rB5X093xg
70ebG3K8vbvKGG8acBF/z7oQ9XvXZ3E/5YHYM7sr/e8RcHCVocznT6S+oS72
ryUT4+npZ9jeYsDhb+l5WUCmyZ94YQznFyWAjWnnmc8CgVOe7UT/L52J+drJ
cZxflAF2btL7PC9kIl810t+PDEL50Hrb2P/lMnEfc0/vBRz/Ud4yVvN3Rak/
WvNhMORZok+t5PifafaXY0cj7mdWAf3f9zOrQl7I9kL6pxXYWuK23v9D+4v8
85GaqC+v+zruV9cCf9CoXtQ3BHSL5WXOd2uD7ijVhfm4DnByl3zmm7qQn752
Pu8fhoKeXVnfY6sn9b//WH/PJBO/jzQkn+/DNEB9YXtbUb8wsU/DtXr/P9PM
b+kdLFz/NAZ/0M9v0h+aAhcWjNL7f8AxNz5gfzfLNG7jwn1PKd8c9EM/Xqc/
tgD+9/2gCNTvsZZn+1qLPY6eJX9b0B/4f8+3HbA7ZyTpkeAvcGfp/b9Mo9bT
Pylll0r9HcHvfXCD8dRJ5M/Q+XpUJvazjP3cH++aif26rbHcr47ORP75Xy7P
37qjfKV+exh/tky8V5dUled3vcT+1+7x9z76QL4j4xHHp75i7z1fc/0Wk4n9
4LiK3N/sD/kO/37CQPGfS9dp/8GCr2WzvXbgrN263hom7Slxj+eVI1Cf0Wwc
+2sU/Nk2sSXzYWymuV7qsbUFx5Ox0P/gdJ++9wD94ktkcT9hAvCGRZv0948l
fga4eb9yEsofXjKI640E8eexT8g/FfRFXTrr+7BCf2jn98czRF7pxuyvJLFn
+lTqOzsT+f2zP7kf5cz873prHvjjh2xhPCVDnqf/SJZfCP8ue20294tTxB8a
9KD/p4o/3tP4TRP9HvSi/GXSnwu6cr7jgvywH2oxXlcI/+qu3C/PEOyfD2ai
Pk/9T7heyAL29qvE8W+N5BP/ftxatKfskCzqv17y19RX6V9ukT9f90M3ZuI8
xjJmBMd/aV/nV/g97hYp320x80+20BP1PZXtEl/++dUO1J+z7B0d/8EfMVLv
e3nEn1MzOb//GfTIknc5Pu4Czj8VT//bDXlDXnmO41mu1L8xgv62F/QzHx2i
P++XePC/B3pA8s3YrdQnT/LphWbMB4eAXX/+wfg8IvkuRr/3Pybtbz6D+z35
Iv/0eupzEv4R/+EG7g+fyjR+e6rQ2+3ni/1Om/yOzyoeYP1elHf9Xprj3zno
33JKQ+63XsjE+3vd3uF4cgn82S8v1t9bh76B31Rg+csyfhZt19/rAr+z8Tm9
/y/2/rqn/j6v+OuiHznfvSXjg6sj23tH/D++N/3trsRT0DV930Pi6WYB93sf
iL7Vx/G8/ZH0p//3kp9IfWGJ9HfLapOeN2ntNbFPMWBH3E6u3wJWQ99l2+gP
JUB/sH4Y2xsIbMz9lfFUWvD3l6l/mdV4X3ra0nUc/1djfvWV7scGQX7+i/o9
UTnQ4595nvtp5Veb7T+94STvj1YU+f78Ggz+om3BrK8S6Pn7ZvL+fpXVZn55
6XY3jk9VUV/u+POcT1iBPRXfJb066nP681FNaX+5UozPWlJflZb0rxDU5wzQ
33urjfKhUy4R11ltvGV2gMHxuy7KPztrtP5+8WrsB3z1Ge8/1IO8lG/199Xq
o/7spA85XjQAdvx5Ut83BX/hGH0ftxGw563PiBuLvfy/79kU9b9bzmC8GJBn
nCzi/kMzYGuj2xzfmqN8wZ6t+v0f2uct/4uO/5D3Rocf6e+twR/aXc+H2gp+
Jov93W417g/MD6f+kZD3/7q68viaryz+EFsYDVK7iKVqDUWNYnhVJR98JBNB
RCQpmYg0Ig1DBHmPSSMMmthrlFCV914iyWiEhhJq7EtqamlsqUYs1SS17xnv
e77n52P++n3O59zfvWe759zl3HutjfS+IT+Rb0t9P9Qf+hvYKJHxd4zQO74l
7T8A+MqOs3gfU6D8/8MqvkcYJPrrPoH9NRjl9w1OoL2Ginz8o2nPE8X+E9Uf
h6VjPDHtFO93DBd6TW9r/h/qf50PHYn/cyIuMP8iCvSUTxlCfqMBn55spv5j
0jHedbEwnyIW+KtfplL/M0Sf9zSfbiZgz151aA9xKB9y9BnheJHH2ATSNxfl
3a/r/d8JQp8Rn6zgxzPYh+P5BcDHFR3S9yBR/9hfP2X7ScDHtK+u8V/k57eI
6wWLRd/LDuh7Uelvrhctg7zi9vfV99VRPvRSJNtfDnzajfu0h5Vi311yNP9f
5B+5nuOdtaj/h6K+mv+P8qaJAeR/vdCT+YLzkQ3O8pZ/W/9F+aZJ+Vnfsn9s
Fv3HO1xEPlukP/vaNP8P7c1a20ffp4a8s1fFEu8Q/zW5gP49Mx3vE3fpsVns
J0vs8Uddj8iR/rPsO8prO9r3bRJIf5SL9mOi4rk/lCf0tXXo+zbS3rx3GT/z
xV7idT14D/4PTTrJ8dFesbfPLNyfLkB5b/NH5OeA6GPebj0PL/CC5Vz/OSTy
+psH+98RtP/nP4ZSn8fAX8Vl12oivxOAAzZEsv+fkv+HrmF/KJT+cSSI+jiD
8q/v6/hJ+vOObix/Lh37mR8kMN/hgsjjh6W0lyLpj3V8WN8lwNMntOB46YrY
63/bkt9i0cfJKMrnGtrLTv3+hci7RPrPR1sp39J084NXBeq3Zb7OzXRzufOH
Qq7n3k43N3/18RrB89V3pL8Y458yse+wgfS/FcLv1yMov7vCb9dJHM/dB7zR
rOPth6ivo1Xvn3gMuMLYP32K+lLS9Lz483TnfWLWDdO5/vIS9c025mMmm/P/
gg9esnxVwGvvPmX9LjbEG+O+zxo2jP9O/8HzJrWAbzJZ74d3xf+mf3RlfKwL
vMm3jPKtB3zamhb6fhDg0NFpjBcN5P/m29hf3QFbdxTxfHgjG/Tvs4P5qU0E
P7s1/WkzJ32W70pd9fy/s33r7Eq9L9QD5QPem0rYU+irfZXl2wAutlchvp3g
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

      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.003666666666666667],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.003666666666666667],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Training Set\"", TraditionalForm], 
    FormBox[
    "\"Algebra 2 Probability divided by highest other\"", TraditionalForm]},
  AxesOrigin->{0., -2.7415660063568126`},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{
     Charting`ScaledTicks[{Log, Exp}], 
     Charting`ScaledFrameTicks[{Log, Exp}]}, {Automatic, Automatic}},
  GridLines->{{}, {0}},
  GridLinesStyle->RGBColor[1, 0, 0],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 3514}, {-2.7415660063568126`, 3.0429026186466217`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->FrontEndValueCache[{Automatic, 
     Charting`ScaledTicks[{Log, Exp}]}, {Automatic, {{-2.3025850929940455`, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.1\"", 0.1, AutoDelete -> True], NumberForm[#, {
           DirectedInfinity[1], 1}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.6931471805599453, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.5\"", 0.5, AutoDelete -> True], NumberForm[#, {
           DirectedInfinity[1], 1}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {0., 
       FormBox["1", TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {1.6094379124341003`, 
       FormBox["5", TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {2.302585092994046, 
       FormBox["10", TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.995732273553991, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.8134107167600364`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.659260036932778, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.5257286443082556`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.4079456086518722`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.6094379124341003`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.2039728043259361`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.916290731874155, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.5108256237659907, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.35667494393873245`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.2231435513142097, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.10536051565782628`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {0.6931471805599453, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.0986122886681098`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.3862943611198906`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.791759469228055, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.9459101490553132`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.0794415416798357`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.1972245773362196`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.995732273553991, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {3.4011973816621555`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {3.6888794541139363`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {3.912023005428146, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.0943445622221, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.248495242049359, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.382026634673881, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.499809670330265, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.605170185988092, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.700480365792417, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.787491742782046, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.867534450455582, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.941642422609304, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {5.0106352940962555`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {5.075173815233827, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}}}]]], "Output",
 CellChangeTimes->{3.7715105141117487`*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"1074fb68-be20-4680-a262-fb092b4fbfd2"],

Cell[BoxData["\<\"C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\3pset_trained_NB.pdf\"\>"], "Output",
 CellChangeTimes->{3.771510514967839*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"cf48eb5a-4840-4574-a423-b1f8117dcaab"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"turnOffEquivFrac", "[", "question_", "]"}], ":=", 
   RowBox[{"StringMatchQ", "[", 
    RowBox[{"question", ",", " ", 
     RowBox[{"{", "\"\<*raction*implest form\>\"", "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"equivilentFraction", "[", 
       RowBox[{"x_", ",", " ", "y_", ",", " ", "n_"}], "]"}], ":=", " ", 
      RowBox[{"n", "*", 
       RowBox[{"x", "/", "y"}]}]}], " ", ";"}], "/", "turnOffEquivFrac"}], 
   "\[Equal]", "False"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"isMatrix", "[", "answer_", "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"answer", ",", " ", "MatrixForm"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"allpoints", "[", "question_", "]"}], ":=", 
   RowBox[{"StringMatchQ", "[", 
    RowBox[{"question", ",", " ", 
     RowBox[{"{", "\"\<*all points*\>\"", "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"eitherPointfirst", "[", 
   RowBox[{"a_", ",", " ", "b_", ",", "c_", ",", " ", "d_"}], "]"}], ":=", 
  " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", "a", ",", " ", "b", ",", " ", "\"\<)\>\""}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<(\>\"", "c"}], ",", " ", 
       RowBox[{"d", "\"\<)\>\""}]}], "}"}]}], "}"}], "\[Rule]", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<(\>\"", "c"}], ",", " ", 
       RowBox[{"d", "\"\<)\>\""}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", "a", ",", " ", "b", ",", " ", "\"\<)\>\""}], 
      "}"}]}], "}"}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"isPoint", "[", "answer_", "]"}], ":=", 
   RowBox[{"StringMatchQ", "[", 
    RowBox[{"answer", ",", " ", 
     RowBox[{"{", "\"\<(*,*)\>\"", "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"commutative", "[", 
    RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "+", "b"}], "\[Rule]", " ", 
    RowBox[{"b", "+", "a"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"distributive", "[", 
    RowBox[{"a_", ",", "b_", ",", " ", "c_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "*", 
     RowBox[{"(", 
      RowBox[{"b", "+", "c"}], ")"}]}], "\[Rule]", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"a", "*", "b"}], "+", 
      RowBox[{"a", "*", "c"}]}], "/;", " ", 
     RowBox[{"isMatrix", "\[Equal]", "False"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"commutativemulti", "[", 
      RowBox[{"a_", ",", " ", "b_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"a", "*", "b"}], "\[Rule]", " ", 
      RowBox[{"b", "*", "a"}]}]}], ";"}], "/;", 
   RowBox[{"isMatrix", "\[Equal]", "False"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"associative", "[", 
    RowBox[{"a_", ",", " ", "b_", ",", " ", "c_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "+", 
     RowBox[{"(", 
      RowBox[{"b", "+", "c"}], ")"}]}], "\[Rule]", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"a", "+", "b"}], ")"}], "+", "c"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"associativemulti", "[", 
    RowBox[{"a_", ",", " ", "b_", ",", "c_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "*", 
     RowBox[{"(", 
      RowBox[{"b", "*", "c"}], ")"}]}], "\[Rule]", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"a", "*", "b"}], ")"}], "*", "c"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"sin2", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "\[Rule]", " ", 
    RowBox[{"2", 
     RowBox[{"Sin", "[", 
      RowBox[{"x", "/", "2"}], "]"}], 
     RowBox[{"Cos", "[", 
      RowBox[{"x", "/", "2"}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"cos2", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], "\[Rule]", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"Power", "[", 
       RowBox[{
        RowBox[{"Cos", "[", 
         RowBox[{"x", "/", "2"}], "]"}], ",", " ", "2"}], "]"}], "*", "2"}], 
     "-", "1"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"cos2alt1", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], "\[Rule]", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "1"}], 
      RowBox[{"Power", "[", 
       RowBox[{
        RowBox[{"Sin", "[", 
         RowBox[{"x", "/", "2"}], "]"}], ",", " ", "2"}], "]"}], "*", "2"}], 
     "+", "1"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cos2alt2", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Cos", "[", "x", "]"}], "\[Rule]", " ", 
   RowBox[{
    RowBox[{"Power", "[", 
     RowBox[{
      RowBox[{"Cos", "[", 
       RowBox[{"x", "/", "2"}], "]"}], ",", " ", "2"}], "]"}], "-", 
    RowBox[{"Power", "[", 
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"x", "/", "2"}], "]"}], ",", " ", "2"}], "]"}]}]}]}]}], "Input",
 CellChangeTimes->{{3.7710690813754177`*^9, 3.7710691204935193`*^9}, 
   3.771069190433951*^9, 3.771102351223105*^9, {3.771182760383189*^9, 
   3.7711828691128426`*^9}, {3.771182984216877*^9, 3.7711830284306865`*^9}, {
   3.771235072613437*^9, 3.7712352026724358`*^9}, {3.7712352410053663`*^9, 
   3.7712353509382486`*^9}, {3.7713479525094604`*^9, 3.771348048363394*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"c7c8062e-a44d-44d6-9860-e4bb30b9612d"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771183039335494*^9, 3.7711830410035667`*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"075af11f-332b-44ef-b6ed-18482c0a4326"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "include", " ", "the", " ", "above", " ", "graphs", " ", "and", " ", "the",
     " ", "test", " ", "functions", " ", "to", " ", "show", " ", 
    "infeasiability", " ", "of", " ", "doing", " ", "the", " ", 
    "classifier"}], "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{"questionClassifier", "[", "\"\<What is 10% of 110\>\"", "]"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"questionClassifier", "[", "\"\<sin(\[Pi]/5)\>\"", "]"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "Need", " ", "to", " ", "add", " ", "more", " ", "training", " ", 
      "about", " ", "sine", " ", "to", " ", "a2"}], ",", " ", 
     RowBox[{"derivative", " ", "to", " ", "calc"}]}], "*)"}], "\n", "\n", 
   RowBox[{"questionClassifier", "[", "\"\<315+35\>\"", "]"}], "\n", 
   RowBox[{
   "questionClassifier", "[", 
    "\"\<Derivative of \!\(\*SuperscriptBox[\(x\), \(6\)]\)\>\"", "]"}], "\n", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"questionClassifier", ",", " ", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<algebra 1\>\"", "\[Rule]", " ", "algebra1Questions"}], 
       ",", 
       RowBox[{"\"\<algebra 2\>\"", "\[Rule]", " ", "algebra2Qs"}]}], " ", 
      "|>"}], ",", "\"\<Accuracy\>\""}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.771088662797636*^9, 3.7710886895019336`*^9}, 
   3.7711017977833295`*^9, {3.7711019578388124`*^9, 3.7711019757038107`*^9}, 
   3.77110252488804*^9, {3.7711040215410056`*^9, 3.771104055131591*^9}, 
   3.7711051107461853`*^9, {3.771105347712582*^9, 3.7711053479387584`*^9}, {
   3.771150327390992*^9, 3.771150329615141*^9}, {3.7711510820919733`*^9, 
   3.771151103725484*^9}, {3.7711639811964626`*^9, 3.7711639823005247`*^9}, {
   3.771173181133225*^9, 3.7711731947498894`*^9}, 3.7714260081465397`*^9, {
   3.7714262193973017`*^9, 3.7714262212055855`*^9}, {3.7714262807611113`*^9, 
   3.7714262861219215`*^9}, {3.771426625425836*^9, 3.771426628443963*^9}, {
   3.771428130141677*^9, 3.7714281324943485`*^9}, {3.7714281707935686`*^9, 
   3.771428183914912*^9}, {3.771428826909436*^9, 3.7714288332399554`*^9}, {
   3.7715096735205946`*^9, 3.7715096889497137`*^9}, {3.7715126854492145`*^9, 
   3.771512750138853*^9}},
 CellLabel->
  "In[141]:=",ExpressionUUID->"1927aef9-607f-4a49-a59a-07062997209f"],

Cell[BoxData["\<\"algebra 1\"\>"], "Output",
 CellChangeTimes->{3.7715105151478214`*^9, 3.7715126439914656`*^9, 
  3.771512715606115*^9, 3.7715127515608635`*^9},
 CellLabel->
  "Out[141]=",ExpressionUUID->"f1025216-75f7-41ae-adac-59ffbf7e0b44"],

Cell[BoxData["\<\"algebra 2\"\>"], "Output",
 CellChangeTimes->{3.7715105151478214`*^9, 3.7715126439914656`*^9, 
  3.771512715606115*^9, 3.771512751633915*^9},
 CellLabel->
  "Out[142]=",ExpressionUUID->"3280a512-60d6-4a05-934c-3dbfcbe77a37"],

Cell[BoxData["\<\"algebra 1\"\>"], "Output",
 CellChangeTimes->{3.7715105151478214`*^9, 3.7715126439914656`*^9, 
  3.771512715606115*^9, 3.771512751638919*^9},
 CellLabel->
  "Out[143]=",ExpressionUUID->"e2cfa92d-de0a-4dc9-8ed3-af9105713471"],

Cell[BoxData["\<\"algebra 1\"\>"], "Output",
 CellChangeTimes->{3.7715105151478214`*^9, 3.7715126439914656`*^9, 
  3.771512715606115*^9, 3.771512751644924*^9},
 CellLabel->
  "Out[144]=",ExpressionUUID->"0c05bb67-a430-4bbc-8753-12e97179c64d"],

Cell[BoxData["0.6935729515686871`"], "Output",
 CellChangeTimes->{3.7715105151478214`*^9, 3.7715126439914656`*^9, 
  3.771512715606115*^9, 3.7715127520101857`*^9},
 CellLabel->
  "Out[145]=",ExpressionUUID->"6ef87fdf-260d-4f43-bb15-26b5f5c9b3a5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"questionClassifier", "[", 
  "\"\<A salesman is paid a monthly salary of $200 plus 6% commission on his \
monthly sales.\\nDetermine the amount of sales required for his total monthly \
income to be $5.\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.77117350100593*^9, 3.771173526311931*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"9a0f02f8-0dcb-4fa0-a434-3dab92e35e3d"],

Cell[BoxData["\<\"algebra 1\"\>"], "Output",
 CellChangeTimes->{3.7715105157798653`*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"542c5d56-3339-4115-854a-57c7bf36e9b0"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Have", " ", "a", " ", "working", " ", "classifier", " ", "on", " ", 
     "algebra", " ", "1", " ", "and", " ", "2"}], ",", " ", 
    RowBox[{
    "to", " ", "add", " ", "calc", " ", "would", " ", "need", " ", "an", " ", 
     "extra", " ", "data", " ", "set"}]}], "*)"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.771173538075275*^9, 3.771173570911613*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"410c0451-9b50-4726-838d-507ca1520553"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"correctAnswer", "[", 
   RowBox[{"answer_", ",", " ", "correct_"}], "]"}], ":=", 
  RowBox[{"MatchQ", "[", 
   RowBox[{"answer", ",", " ", "correct"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"setLevel", "[", 
   RowBox[{"question_", ",", " ", "tag_"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"UnsameQ", "[", 
     RowBox[{"tag", ",", " ", "\"\<\>\""}], "]"}], ",", " ", "tag", ",", " ", 
    RowBox[{"questionClassifier", "[", "question", "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.7711736593103347`*^9, 3.7711737074880314`*^9}, {
  3.771173871939076*^9, 3.771173874042588*^9}, {3.7712336619774513`*^9, 
  3.7712338084910626`*^9}, {3.771233866828873*^9, 3.771233956929276*^9}, {
  3.771347249512906*^9, 3.7713472771428676`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"25eb0e56-d2cb-4e3c-833f-4d9862c278b6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tagAssociations", ":=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<algebra 1 theorems\>\"", "\[Rule]", " ", 
      RowBox[{"{", 
       RowBox[{
       "commutativeAddition", ",", " ", "commutativemulti", ",", " ", 
        "distributive", ",", " ", "associative", ",", " ", "associativemulti",
         ",", " ", "equivilentFraction"}], "}"}]}], ",", " ", 
     RowBox[{"\"\<algebra 2 theorems\>\"", "\[Rule]", " ", 
      RowBox[{"{", 
       RowBox[{
       "isMatrix", ",", " ", "sin2", ",", " ", "cos2", ",", " ", "cos2alt1", 
        ",", " ", "cos2alt2", ",", " ", "eitherPointfirst", ",", " ", 
        "isPoint", ",", " ", "commutativeAddition", ",", " ", 
        "commutativemulti", ",", " ", "distributive", ",", " ", "associative",
         ",", " ", "associativemulti", ",", " ", "equivilentFraction"}], 
       "}"}]}]}], "|>"}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.771234300395832*^9, 3.7712343261973624`*^9}, {
   3.7712349783800793`*^9, 3.7712350377545757`*^9}, {3.7713246875147505`*^9, 
   3.7713247160686665`*^9}, {3.771324750887334*^9, 3.7713248208968925`*^9}, 
   3.7713469260459433`*^9, {3.771346958148202*^9, 3.771346967732873*^9}, {
   3.7713473319306927`*^9, 3.7713473600851464`*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"66e41b82-96ad-4d5a-885b-44a2b04ac964"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7713403299709625`*^9, 3.7713403451194363`*^9}, {
  3.7713472317837057`*^9, 3.771347238884147*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"266398ea-08f6-44ac-9796-54783f49bc3b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"equivilentAnswer", "[", 
   RowBox[{
   "question_", ",", "tag_", ",", " ", "answer_", ",", " ", "correct_"}], 
   "]"}], ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"correctAnswer", "[", 
     RowBox[{"answer", ",", " ", "correct"}], "]"}], ",", " ", "True", ",", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"turnOffEquivFrac", "[", "question", "]"}], ",", " ", "False", 
      ",", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"qTag", ":=", 
        RowBox[{
         RowBox[{"setLevel", "[", 
          RowBox[{"question", ",", " ", "tag"}], "]"}], "<>", " ", 
         "\"\< theorems\>\""}]}], ";", "\[IndentingNewLine]", "\t", 
       RowBox[{"(*", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"qTag", ",", " ", "\"\<calc theorems\>\""}], "]"}], ","}], 
         " "}], "*)"}], "\[IndentingNewLine]", "\t", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Series", "[", 
             RowBox[{"answer", ",", " ", 
              RowBox[{"{", 
               RowBox[{"x", ",", "0", ",", " ", "6"}], "}"}]}], "]"}], 
            "\[Equal]", 
            RowBox[{"Series", "[", 
             RowBox[{"correct", ",", " ", 
              RowBox[{"{", 
               RowBox[{"x", ",", " ", "0", ",", " ", "6"}], "}"}]}], "]"}]}], 
           ",", " ", "True", ",", " ", "False"}], "]"}], ","}], " ", "*)"}], 
       "\[IndentingNewLine]", "\t ", 
       RowBox[{"proof", "=", 
        RowBox[{"FindEquationalProof", "[", 
         RowBox[{
          RowBox[{"answer", "==", "correct"}], ",", " ", "qTag"}], "]"}]}], 
       ";", " ", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Need", " ", "to", " ", "get", " ", "this", " ", "correct"}],
          ",", " ", 
         RowBox[{
         "ask", " ", "Jonathan", " ", "for", " ", "help", " ", "in", " ", 
          "building", " ", "this"}]}], "*)"}], "\[IndentingNewLine]", "\t", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"ContainsAll", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"proof", "[", "\"\<ProofDataset\>\"", "]"}], "[", 
            RowBox[{"All", ",", " ", "\"\<Statement\>\""}], "]"}], ",", " ", 
           RowBox[{"tagAssociations", "[", 
            RowBox[{"Select", "[", 
             RowBox[{"tagAssociations", ",", " ", 
              RowBox[{
               RowBox[{"UnsameQ", "[", 
                RowBox[{
                 RowBox[{"#", "[", "All", "]"}], ",", " ", "qTag"}], "]"}], 
               "&"}]}], "]"}], "]"}]}], "]"}], ",", " ", "False", ",", " ", 
         "True"}], "]"}]}]}], "\[IndentingNewLine]", "\t\t\t", 
     "\[IndentingNewLine]", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7712339645218053`*^9, 3.7712340834723206`*^9}, {
  3.7712341214519916`*^9, 3.7712342880157833`*^9}, {3.771234329577595*^9, 
  3.7712346331069736`*^9}, {3.771346981397788*^9, 3.77134716216393*^9}, {
  3.771347286675481*^9, 3.7713473206139*^9}, {3.7713474013435993`*^9, 
  3.771347484110985*^9}, {3.7713475425553865`*^9, 3.7713475937449694`*^9}, {
  3.7713476722052555`*^9, 3.7713478773306417`*^9}, {3.7714317454519825`*^9, 
  3.771431795422159*^9}, {3.771431851008607*^9, 3.7714318570408945`*^9}, {
  3.7714319111093416`*^9, 3.771431952229925*^9}, {3.771432267307972*^9, 
  3.771432307461824*^9}, {3.7714323484569607`*^9, 3.7714324736960325`*^9}, {
  3.7714325398832517`*^9, 3.7714325806896996`*^9}, {3.771432625155306*^9, 
  3.7714326690584106`*^9}, {3.7714327930935664`*^9, 3.771432828985076*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"2c8ae09e-5141-49f8-bc2c-efd2a2324a89"],

Cell[BoxData[
 RowBox[{
  RowBox[{"pDiffProblem", "=", 
   RowBox[{
    RowBox[{"Import", "[", 
     RowBox[{"polydiffurl", ",", " ", "\"\<Data\>\""}], "]"}], 
    "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7712357417153225`*^9, 3.771235782034418*^9}, {
   3.7712358223189893`*^9, 3.7712358593789177`*^9}, 3.771236085297859*^9, 
   3.771236670446211*^9},
 CellLabel->"In[83]:=",ExpressionUUID->"7cf76789-eb97-4c2e-91e6-102698972f28"],

Cell[BoxData[
 RowBox[{
  RowBox[{"strippedQuestion", "=", 
   RowBox[{"\"\<question\>\"", "/.", "pDiffProblem"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.77123586515536*^9, 3.771235903687064*^9}, 
   3.7712365956914773`*^9, 3.771236674226424*^9},
 CellLabel->"In[84]:=",ExpressionUUID->"322b59e5-9d1b-4e2d-aeb2-b791e94df4bc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"equivilentAnswer", "[", 
  RowBox[{
  "\"\<a+b\>\"", ",", " ", "\"\<\>\"", ",", " ", "\"\<b+a\>\"", ",", " ", 
   "\"\<a+b\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.771235907603317*^9, 3.7712359333726025`*^9}, {
   3.7714315729738474`*^9, 3.771431620186404*^9}, {3.7714316513077955`*^9, 
   3.771431661070717*^9}, {3.771431959038764*^9, 3.771431960657363*^9}, {
   3.771432321595851*^9, 3.771432322220305*^9}, {3.7714324807025595`*^9, 
   3.771432517136608*^9}, 3.7714326835777297`*^9, {3.771432757099984*^9, 
   3.771432769136568*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"957a51f1-e3b5-4fcc-a441-b5abb27dc864"],

Cell[BoxData[
 TemplateBox[{
  "FindEquationalProof","notheory",
   "\"Unknown named axiomatic theory \\!\\(\\*RowBox[{\\\"\\\\\\\"algebra 1 \
theorems\\\\\\\"\\\"}]\\).\"",2,85,1,15903502438734284038,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771510516443912*^9},
 CellLabel->
  "During evaluation of \
In[85]:=",ExpressionUUID->"67e505c8-0246-4d45-be86-104e3daf5234"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"ContainsAll", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"FindEquationalProof", "[", 
        RowBox[{"False", ",", "\<\"algebra 1 theorems\"\>"}], "]"}], 
       "[", "\<\"ProofDataset\"\>", "]"}], "[", 
      RowBox[{"All", ",", "\<\"Statement\"\>"}], "]"}], ",", 
     RowBox[{"Missing", "[", 
      RowBox[{"\<\"KeyAbsent\"\>", ",", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"algebra 1 theorems\"\>", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
           "commutativeAddition", ",", "commutativemulti", ",", 
            "distributive", ",", "associative", ",", "associativemulti", ",", 
            "equivilentFraction"}], "}"}]}], ",", 
         RowBox[{"\<\"algebra 2 theorems\"\>", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
           "isMatrix", ",", "sin2", ",", "cos2", ",", "cos2alt1", ",", 
            "cos2alt2", ",", "eitherPointfirst", ",", "isPoint", ",", 
            "commutativeAddition", ",", "commutativemulti", ",", 
            "distributive", ",", "associative", ",", "associativemulti", ",", 
            "equivilentFraction"}], "}"}]}]}], "\[RightAssociation]"}]}], 
      "]"}]}], "]"}], ",", "False", ",", "True"}], "]"}]], "Output",
 CellChangeTimes->{3.7715105165439177`*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"15359d3a-b0e5-4841-8039-1475396797b6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"equivilentAnswer", "[", 
  RowBox[{
  "\"\<35+11\>\"", ",", "\"\<algebra 1\>\"", ",", "\"\<46\>\"", ",", 
   "\"\<46\>\""}], "]"}]], "Input",
 CellChangeTimes->{
  3.771431643472208*^9, {3.7714323296295614`*^9, 3.7714323309865437`*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"de3f1b3a-9fda-48c3-8f4b-ef2110e9593d"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.7715105166359253`*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"1967bd68-9dcc-45d5-a060-ec42715b7067"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"correctAnswer", "[", 
  RowBox[{"\"\<ab\>\"", ",", "\"\<ab\>\""}], "]"}]], "Input",
 CellChangeTimes->{
  3.7714316470577583`*^9, {3.7714316922852125`*^9, 3.7714317103520403`*^9}, {
   3.771431815648549*^9, 3.7714318279082813`*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"31a57a72-e7f2-44a1-b72e-95c9958e6bc1"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.7715105167559347`*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"f74db09f-7138-4ac5-807d-2a5fd67a8a4f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"strippedQuestion", "=", 
   RowBox[{
   "\"\<<math>\>\"", "<>", "strippedQuestion", "<>", "\"\<</math>\>\""}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7712359768419514`*^9, 3.771236017605138*^9}, 
   3.7712366770106707`*^9},
 CellLabel->"In[88]:=",ExpressionUUID->"d707c0a0-6561-43e9-9fd0-a43a755a3534"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ImportString", "[", 
    RowBox[{"strippedQuestion", ",", " ", "\"\<MathML\>\""}], "]"}], " ", "//",
    "RawBoxes"}], ";"}]], "Input",
 CellChangeTimes->{{3.7712360210094275`*^9, 3.771236051359496*^9}, {
  3.771236611469623*^9, 3.7712366126217575`*^9}, {3.7712366800468817`*^9, 
  3.771236682434343*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"e080f098-be02-4782-988d-080fb60799bf"],

Cell[BoxData[
 TemplateBox[{
  "XML`Parser`XMLGetString","prserr",
   "\"Expected end of tag 'mo' at Line: 1 Character: 252.\"",2,89,2,
   15903502438734284038,"Local","XML`Parser`XMLGetString"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.7715105169439464`*^9},
 CellLabel->
  "During evaluation of \
In[89]:=",ExpressionUUID->"acecad3e-539b-4620-b88e-c54235c02248"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7712360976547728`*^9, 3.771236106727406*^9}, {
   3.7712362010749397`*^9, 3.7712362044232264`*^9}, {3.7712362370974526`*^9, 
   3.7712362649236383`*^9}, {3.771236347168664*^9, 3.7712364023625517`*^9}, {
   3.771236622058362*^9, 3.771236639479291*^9}, 3.7712368002319756`*^9},
 CellLabel->"In[90]:=",ExpressionUUID->"00aac20e-7712-4382-bdcd-1a0f47667dfa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pDiffStorage", "=", 
  RowBox[{"{", "}"}]}]], "Input",
 CellChangeTimes->{{3.771236318520415*^9, 3.7712363247768025`*^9}, {
  3.7712368523205495`*^9, 3.771236920349883*^9}, {3.7712371406349945`*^9, 
  3.771237142395172*^9}, {3.7714076858936605`*^9, 3.771407686761722*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"1d39c30e-2952-4c75-b7a7-9b9256359d5d"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.771510517027953*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"095b1ebb-9eb9-45fa-9bd0-910350b5bb68"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["polydiffurl"], "Input",
 CellChangeTimes->{{3.7712383301870437`*^9, 3.7712383336152873`*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"8a2df4ce-9c44-47a1-bde1-ff1c4d183497"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/polynomial-differentiation.\
json\"\>"], "Output",
 CellChangeTimes->{3.771510517091958*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"1e200987-391e-4c2e-87fe-bd145cce2573"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trigdiffurl", "=", 
  "\"\<https://math.ly/api/v1/calculus/trigonometric-differentiation.json\>\"\
"}]], "Input",
 CellChangeTimes->{{3.7712383828806543`*^9, 3.771238407866433*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"c65c0dd0-81b7-4955-8c52-e9b2bed36fa7"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/trigonometric-\
differentiation.json\"\>"], "Output",
 CellChangeTimes->{3.7715105171559615`*^9},
 CellLabel->"Out[93]=",ExpressionUUID->"c7e3476b-3a33-47e1-abd7-f2acde030555"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expodiffurl", "=", 
  "\"\<https://math.ly/api/v1/calculus/exponents-differentiation.json\>\""}]],\
 "Input",
 CellChangeTimes->{{3.7712384289872923`*^9, 3.771238464023595*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"9bdfa35f-8e9a-4070-8882-15d68d851348"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/exponents-differentiation.\
json\"\>"], "Output",
 CellChangeTimes->{3.771510517215966*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"3b346045-587d-438a-86d2-544988022026"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"polyinturl", "=", 
  "\"\<https://math.ly/api/v1/calculus/polynomial-integration.json\>\""}]], \
"Input",
 CellChangeTimes->{{3.7712384945360937`*^9, 3.7712385164416804`*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"3917c014-4521-4d91-8543-b5d914f1cc18"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/polynomial-integration.json\
\"\>"], "Output",
 CellChangeTimes->{3.7715105172799835`*^9},
 CellLabel->"Out[95]=",ExpressionUUID->"2c28b98f-1686-4c97-a669-7d8c8fcf8c27"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"triginturl", "=", 
  "\"\<https://math.ly/api/v1/calculus/trignometric-integration.json\>\""}]], \
"Input",
 CellChangeTimes->{{3.7712385417954173`*^9, 3.7712385534442115`*^9}, {
  3.771238599654127*^9, 3.771238600526188*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"467d54c9-fca1-43d0-97cf-f2d46c7284b1"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/trignometric-integration.\
json\"\>"], "Output",
 CellChangeTimes->{3.7715105173519745`*^9},
 CellLabel->"Out[96]=",ExpressionUUID->"ca1edffa-8312-4520-8962-1da286d552c8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trigdefinturl", "=", 
  "\"\<https://math.ly/api/v1/calculus/trignometric-definite-integrals.json\>\
\""}]], "Input",
 CellChangeTimes->{{3.7712385694564934`*^9, 3.771238570572569*^9}, {
  3.771238603426363*^9, 3.7712386239398203`*^9}, {3.771323928898393*^9, 
  3.771323930748708*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"f8bb0306-7bc5-4dc8-9d8e-1e8f7ab2e834"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/trignometric-definite-\
integrals.json\"\>"], "Output",
 CellChangeTimes->{3.771510517471984*^9},
 CellLabel->"Out[97]=",ExpressionUUID->"ac731156-86b9-4813-9eaf-b6ee1c517ef0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"expointurl", "=", 
  "\"\<https://math.ly/api/v1/calculus/exponents-integration.json\>\""}], "\
\[IndentingNewLine]", 
 RowBox[{"expodefinturl", "=", 
  "\"\<https://math.ly/api/v1/calculus/exponents-definite-integration.json\>\"\
"}]}], "Input",
 CellChangeTimes->{{3.771238670241479*^9, 3.7712387130644655`*^9}, {
  3.771238853404136*^9, 3.771238856744407*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"5e485a53-0caa-4994-a3a3-d3d69cde3b52"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/exponents-integration.json\"\
\>"], "Output",
 CellChangeTimes->{3.7715105175399876`*^9},
 CellLabel->"Out[98]=",ExpressionUUID->"35a0a796-024d-4c6f-882d-ee64129bd5d6"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/exponents-definite-\
integration.json\"\>"], "Output",
 CellChangeTimes->{3.7715105175479884`*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"ca2b63dd-914b-4cc0-91b7-1cd404e62106"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["\"\<https://math.ly/api/v1/calculus/exponents-definite-\
integrals.json\>\""], "Input",
 CellChangeTimes->{{3.7713239365858574`*^9, 3.771323938260048*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"cfb0e200-36f9-494c-88e2-8eba067033a5"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/exponents-definite-\
integrals.json\"\>"], "Output",
 CellChangeTimes->{3.771510517607995*^9},
 CellLabel->
  "Out[100]=",ExpressionUUID->"d1470dc5-0538-4711-860f-7953bd4232ea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"polydefinturl", "=", 
  "\"\<https://math.ly/api/v1/calculus/polynomial-definite-integrals.json\>\"\
"}]], "Input",
 CellChangeTimes->{{3.7712387241332893`*^9, 3.7712387427025843`*^9}, {
  3.7713239444234276`*^9, 3.7713239461686683`*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"9db4f7e5-a195-45b4-868f-2359598971c3"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/polynomial-definite-\
integrals.json\"\>"], "Output",
 CellChangeTimes->{3.771510517671999*^9},
 CellLabel->
  "Out[101]=",ExpressionUUID->"57b38527-49cd-40fd-8df1-c5f3a082ffbc"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"getcalcPs", "[", 
   RowBox[{"url_", ",", " ", "dataarray_"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{"pDiffProblem", "=", 
      RowBox[{
       RowBox[{"Import", "[", 
        RowBox[{"url", ",", " ", "\"\<Data\>\""}], "]"}], 
       "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"strippedQuestion", "=", 
      RowBox[{"\"\<question\>\"", "/.", "pDiffProblem"}]}], ";", " ", 
     RowBox[{"strippedQuestion", "=", 
      RowBox[{
      "\"\<<math>\>\"", "<>", "strippedQuestion", "<>", "\"\<</math>\>\""}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"iS", "=", 
      RowBox[{
       RowBox[{"ImportString", "[", 
        RowBox[{"strippedQuestion", ",", " ", "\"\<MathML\>\""}], "]"}], " ", 
       "//", "RawBoxes"}]}], ";", " ", "\[IndentingNewLine]", " ", 
     RowBox[{"Append", "[", 
      RowBox[{"dataarray", ",", " ", "iS"}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7712387867010036`*^9, 3.7712388409796124`*^9}, {
  3.7713238410054216`*^9, 3.771323877530431*^9}, {3.7713240218104286`*^9, 
  3.7713240244493046`*^9}, {3.771324059714985*^9, 3.7713240915278735`*^9}, {
  3.7713241576472826`*^9, 3.771324185723219*^9}, {3.771324253192051*^9, 
  3.7713242609812126`*^9}, {3.7713242926597095`*^9, 3.7713242947501965`*^9}, {
  3.771324562719307*^9, 3.7713245902837057`*^9}, {3.7713246299600267`*^9, 
  3.771324636399604*^9}, {3.771340655579898*^9, 3.7713406586721134`*^9}, {
  3.7713462726215763`*^9, 3.771346352383828*^9}, {3.771346433079231*^9, 
  3.7713464332472515`*^9}, {3.7713465172028217`*^9, 3.7713465690705833`*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"87f57da9-00aa-4b46-ab12-6608300fc354"],

Cell[BoxData[
 RowBox[{
  RowBox[{"urls", "=", 
   RowBox[{"{", 
    RowBox[{
    "polydefinturl", ",", " ", "polydiffurl", ",", " ", "polyinturl", ",", 
     " ", "trigdefinturl", ",", " ", "trigdiffurl", ",", " ", "triginturl", 
     ",", " ", "expodefinturl", ",", " ", "expodiffurl", ",", " ", 
     "expointurl"}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.77123886244076*^9, 3.7712389039876523`*^9}, 
   3.771323949742208*^9},
 CellLabel->
  "In[103]:=",ExpressionUUID->"855d2f73-4d92-458c-92f8-4997982eeb95"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pdefint", "=", 
  RowBox[{"{", "\"\<integral of x^6 dx from 0 to 1\>\"", "}"}]}]], "Input",
 CellChangeTimes->{{3.771238920772838*^9, 3.771238974896619*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"c5d465ea-1c08-42a8-9ef9-344addb687c8"],

Cell[BoxData[
 RowBox[{"{", "\<\"integral of x^6 dx from 0 to 1\"\>", "}"}]], "Output",
 CellChangeTimes->{3.7715105177640047`*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"dcf1025e-8b15-4288-b9ea-b75fb7f81f74"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pint", "=", 
  RowBox[{"{", "\"\<integral of x^3 dx\>\"", "}"}]}]], "Input",
 CellChangeTimes->{{3.771238936982003*^9, 3.771238979260905*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"fbec490a-a8cf-4334-a943-dcc80a67bcec"],

Cell[BoxData[
 RowBox[{"{", "\<\"integral of x^3 dx\"\>", "}"}]], "Output",
 CellChangeTimes->{3.7715105178280077`*^9},
 CellLabel->
  "Out[105]=",ExpressionUUID->"0e7b0483-dde9-49fd-9cfe-ce91f178abc1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"tint", "=", 
   RowBox[{"{", "\"\<integral of cos(x) dx\>\"", "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"tdefint", "=", 
  RowBox[{
  "{", "\"\<integral of tan(x) dx from 0 to \[Pi]/4\>\"", "}"}]}]}], "Input",
 CellChangeTimes->{{3.7712389870494747`*^9, 3.771239047741536*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"53522faf-b64c-4e4b-98e4-8562af9b3595"],

Cell[BoxData[
 RowBox[{"{", "\<\"integral of tan(x) dx from 0 to \[Pi]/4\"\>", 
  "}"}]], "Output",
 CellChangeTimes->{3.7715105178920126`*^9},
 CellLabel->
  "Out[107]=",ExpressionUUID->"f80da7c9-b4df-46ab-a36d-d48384fc5e69"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tdiff", "=", 
  RowBox[{"{", "\"\<Derivative of 1+sec(x)\>\"", "}"}]}]], "Input",
 CellChangeTimes->{{3.771239053694174*^9, 3.7712390858044004`*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"cb59bb07-5383-42bf-81be-5f35fcdab709"],

Cell[BoxData[
 RowBox[{"{", "\<\"Derivative of 1+sec(x)\"\>", "}"}]], "Output",
 CellChangeTimes->{3.77151051795203*^9},
 CellLabel->
  "Out[108]=",ExpressionUUID->"d2f4cb57-ccb1-45bf-9c1d-f728013290e9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"expodefint", "=", 
   RowBox[{"{", "\"\<Integral of ln(x) from 1 to e\>\"", "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"expodiff", "=", 
  RowBox[{
  "{", "\"\<Derivative of \!\(\*SuperscriptBox[\(e\), \(3 \
\*SuperscriptBox[\(x\), \(2\)]\)]\)\>\"", "}"}]}]}], "Input",
 CellChangeTimes->{{3.7712390904847517`*^9, 3.7712391509510117`*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"0355aab1-cd18-479e-ba9f-08006c50833e"],

Cell[BoxData[
 RowBox[{"{", "\<\"Derivative of \\!\\(\\*SuperscriptBox[\\(e\\), \\(3 \
\\*SuperscriptBox[\\(x\\), \\(2\\)]\\)]\\)\"\>", "}"}]], "Output",
 CellChangeTimes->{3.7715105180120354`*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"0f224181-5626-4274-95f6-f643a9e32da3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expoint", "=", 
  RowBox[{"{", "\"\<Integral of ln(1-x)/x dx\>\"", "}"}]}]], "Input",
 CellChangeTimes->{{3.771239154995311*^9, 3.7712391824772387`*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"d08078e9-646b-410d-b3da-7b07d3631460"],

Cell[BoxData[
 RowBox[{"{", "\<\"Integral of ln(1-x)/x dx\"\>", "}"}]], "Output",
 CellChangeTimes->{3.771510518072039*^9},
 CellLabel->
  "Out[111]=",ExpressionUUID->"14846806-2d47-4add-bfbc-5f75ea1a3277"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"arrays", "=", 
  RowBox[{"{", 
   RowBox[{
   "pdefint", ",", " ", "pDiffStorage", ",", " ", "pint", ",", " ", "tdefint",
     ",", " ", "tdiff", ",", " ", "tint", ",", " ", "expodefint", ",", " ", 
    "expodiff", ",", " ", "expoint"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.771239190008418*^9, 3.771239264929635*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"42c8cf32-1946-44b8-9562-13038f11fb94"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "\<\"integral of x^6 dx from 0 to 1\"\>", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "\<\"integral of x^3 dx\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"integral of tan(x) dx from 0 to \[Pi]/4\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"Derivative of 1+sec(x)\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"integral of cos(x) dx\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"Integral of ln(x) from 1 to e\"\>", "}"}], ",", 
   RowBox[{
   "{", "\<\"Derivative of \\!\\(\\*SuperscriptBox[\\(e\\), \\(3 \
\\*SuperscriptBox[\\(x\\), \\(2\\)]\\)]\\)\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"Integral of ln(1-x)/x dx\"\>", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7715105181360292`*^9},
 CellLabel->
  "Out[112]=",ExpressionUUID->"23f8d0de-eb23-472a-842a-6139e4015024"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"arrays", "[", 
    RowBox[{"[", "2", "]"}], "]"}], "=", 
   RowBox[{"getcalcPs", "[", 
    RowBox[{
     RowBox[{"urls", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
     ",", " ", 
     RowBox[{
     "arrays", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7712392766864295`*^9, 3.7712394164874935`*^9}, {
   3.771243280668398*^9, 3.7712433195398664`*^9}, {3.771243378474556*^9, 
   3.771243381457677*^9}, {3.771243572090003*^9, 3.7712436107423344`*^9}, {
   3.771323976371134*^9, 3.7713239941517715`*^9}, {3.77132412292959*^9, 
   3.7713241250761147`*^9}, {3.7713242760389147`*^9, 3.771324278193434*^9}, {
   3.771340683921874*^9, 3.7713406864540544`*^9}, 3.7713463338625298`*^9, {
   3.7713464526129932`*^9, 3.771346460481491*^9}, {3.771346578099216*^9, 
   3.7713466209861546`*^9}, {3.7713466756642265`*^9, 3.7713466864449787`*^9}, 
   3.7713534192736344`*^9, {3.771353450199747*^9, 3.771353454352031*^9}, {
   3.77140771499571*^9, 3.7714077193519974`*^9}, {3.771424641326947*^9, 
   3.7714246457470894`*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"0ab75f01-46a1-4e5f-adf2-7d5307d5762b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"arrays", "[", 
    RowBox[{"[", "1", "]"}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"-", "1"}], "]"}], "]"}], "//", "InputForm"}]], "Input",
 CellChangeTimes->{{3.771239364927622*^9, 3.771239366876547*^9}, {
  3.771243590686597*^9, 3.7712436033828382`*^9}, {3.7713463724892244`*^9, 
  3.7713463764335003`*^9}, {3.7713466311588645`*^9, 3.7713466333150187`*^9}, {
  3.7714079136310825`*^9, 3.771407914043096*^9}, {3.771416430671318*^9, 
  3.7714165068655033`*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"6140b4bf-cb5c-4e9a-960e-e3b85328145c"],

Cell["\"integral of x^6 dx from 0 to 1\"", "Output",
 CellChangeTimes->{3.7715105183800516`*^9},
 CellLabel->
  "Out[114]//InputForm=",ExpressionUUID->"ba1ef9c2-4756-445b-ba53-\
19ba24864af2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"arrays", "[", 
   RowBox[{"[", "2", "]"}], "]"}], "/.", 
  RowBox[{
   RowBox[{"RawBoxes", "[", "$Failed", "]"}], "\[Rule]", " ", 
   "Nothing"}]}]], "Input",
 CellChangeTimes->{{3.771416518498773*^9, 3.771416601572257*^9}, {
  3.771421674174217*^9, 3.771421693223977*^9}, {3.771424654087017*^9, 
  3.7714246543602133`*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"95b96204-eca8-4b83-b10f-34c442d68937"],

Cell[BoxData[
 RowBox[{"{", 
  FormBox[
   TagBox[
    RowBox[{
     FractionBox["\[DifferentialD]", 
      RowBox[{"\[DifferentialD]", "x"}]], 
     RowBox[{"(", 
      RowBox[{"4", "-", 
       RowBox[{"6", 
        SuperscriptBox["x", 
         RowBox[{"-", "1"}]]}], "+", 
       RowBox[{"4", 
        SuperscriptBox["x", 
         RowBox[{"-", "2"}]]}], "-", 
       SuperscriptBox["x", 
        RowBox[{"-", "3"}]]}], ")"}]}],
    "MathMLPresentationTag",
    AutoDelete->True],
   TraditionalForm], "}"}]], "Output",
 CellChangeTimes->{3.771510518476055*^9},
 CellLabel->
  "Out[115]=",ExpressionUUID->"7671a8b9-5763-432f-9a11-78752da7a5ea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DumpSave", "[", 
  RowBox[{"\"\<final_progect.mx\>\"", ",", " ", "questionClassifier"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.771353313618944*^9, 3.7713533966804457`*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"dd10fb84-5fff-4fba-9083-85431c8f6cfd"],

Cell[BoxData[
 RowBox[{"{", 
  TagBox[
   TemplateBox[{RowBox[{
       StyleBox[
        TagBox["ClassifierFunction", "SummaryHead"], 
        "NonInterpretableSummary"], 
       StyleBox["[", "NonInterpretableSummary"], 
       DynamicModuleBox[{
        Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
        TemplateBox[{
          TemplateBox[{
            PaneSelectorBox[{False -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                  GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                   Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, 
                    LabelStyle -> {FontFamily -> "Arial"}, 
                    Method -> {"ScalingFunctions" -> None}, 
                    PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                    Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                   ImageSize -> 
                   Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                   FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                   GrayLevel[0.94]], 
                  GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Nominal\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"algebra 1\"", "\"algebra 2\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], True -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                  GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                   Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, 
                    LabelStyle -> {FontFamily -> "Arial"}, 
                    Method -> {"ScalingFunctions" -> None}, 
                    PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                    Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                   ImageSize -> 
                   Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                   FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                   GrayLevel[0.94]], 
                  GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Nominal\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"algebra 1\"", "\"algebra 2\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["6566", "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}]}, 
             Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
           "SummaryPanel"], 
          ButtonBox[
           DynamicBox[
            ToBoxes[
             If[
              
              Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
               "Local"], 
              Style["This object cannot be used as input.", "SummaryEmbed"], 
              BoxForm`EmbedSummaryLabel[ClassifierFunction, 1470400, 
               Dynamic[Typeset`embedState$$]]], StandardForm]], 
           ButtonFunction :> 
           BoxForm`EmbedSummaryInterpretation[
            ClassifierFunction, 
             5411681452185419317380656314699820841411505845589741876736, 
             EvaluationBox[], 
             Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
           "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
           Dynamic[
             
             And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
              "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
           Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
         "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
       StyleBox["]", "NonInterpretableSummary"]}]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
   False,
   BoxID -> 5411681452185419317380656314699820841411505845589741876736,
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",
 CellChangeTimes->{3.771510518564073*^9},
 CellLabel->
  "Out[116]=",ExpressionUUID->"c573f50e-4153-4d3f-94b3-0af0a72179fd"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Need", " ", "to", " ", "create", " ", "the", " ", "Gui", " ", "using", " ",
    "Dynmaic", " ", "Module"}], "*)"}]], "Input",
 CellChangeTimes->{{3.7713536464785004`*^9, 3.771353664571615*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"504bd9cc-d90b-476c-be9f-d82b78e41ae7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DumpSave", "[", 
  RowBox[{"\"\<final_progect.mx\>\"", ",", " ", "arrays"}], "]"}]], "Input",
 CellChangeTimes->{{3.7713616243121543`*^9, 3.7713616393978906`*^9}, {
  3.7713616722922544`*^9, 3.7713616744753747`*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"a0308418-3e41-4b79-b3be-d01011649c9a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "\<\"integral of x^6 dx from 0 to 1\"\>", "}"}], ",", 
    RowBox[{"{", 
     FormBox[
      TagBox[
       RowBox[{
        FractionBox["\[DifferentialD]", 
         RowBox[{"\[DifferentialD]", "x"}]], 
        RowBox[{"(", 
         RowBox[{"4", "-", 
          RowBox[{"6", 
           SuperscriptBox["x", 
            RowBox[{"-", "1"}]]}], "+", 
          RowBox[{"4", 
           SuperscriptBox["x", 
            RowBox[{"-", "2"}]]}], "-", 
          SuperscriptBox["x", 
           RowBox[{"-", "3"}]]}], ")"}]}],
       "MathMLPresentationTag",
       AutoDelete->True],
      TraditionalForm], "}"}], ",", 
    RowBox[{"{", "\<\"integral of x^3 dx\"\>", "}"}], ",", 
    RowBox[{"{", "\<\"integral of tan(x) dx from 0 to \[Pi]/4\"\>", "}"}], 
    ",", 
    RowBox[{"{", "\<\"Derivative of 1+sec(x)\"\>", "}"}], ",", 
    RowBox[{"{", "\<\"integral of cos(x) dx\"\>", "}"}], ",", 
    RowBox[{"{", "\<\"Integral of ln(x) from 1 to e\"\>", "}"}], ",", 
    RowBox[{
    "{", "\<\"Derivative of \\!\\(\\*SuperscriptBox[\\(e\\), \\(3 \
\\*SuperscriptBox[\\(x\\), \\(2\\)]\\)]\\)\"\>", "}"}], ",", 
    RowBox[{"{", "\<\"Integral of ln(1-x)/x dx\"\>", "}"}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7715105186840744`*^9},
 CellLabel->
  "Out[118]=",ExpressionUUID->"48aa0031-b4a7-4709-9448-2ec1d5fea8a0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra2Qs", "\[LeftDoubleBracket]", 
   RowBox[{"120", ";;", "130"}], "\[RightDoubleBracket]"}], "//", 
  "InputForm"}]], "Input",
 CellChangeTimes->{{3.77140794464546*^9, 3.7714079578276772`*^9}, {
  3.7714091443685756`*^9, 3.771409220976266*^9}, {3.771409791809289*^9, 
  3.771409793773464*^9}},
 CellLabel->
  "In[119]:=",ExpressionUUID->"c152a1f2-bf7c-435c-8fac-a14c7491d047"],

Cell["\<\
{\"34\", \"    4x - 7 = - 56 - 3x \", \"35\", \"    2x + 1 = 34 + 5x \", \"36\
\", \"    - 7x - 9 = 4x - 97 \", \"37\", \"    - x - 4 = x - 18 \", \"38\", \
\"    x + 6 = 2x + 2 \", \"1\\r\\n39\"}\
\>", "Output",
 CellChangeTimes->{3.771510518748072*^9},
 CellLabel->
  "Out[119]//InputForm=",ExpressionUUID->"5584d5ee-f5ed-4b31-a840-\
1e123d52079b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra2Qs", "=", 
   RowBox[{"algebra2Qs", "/.", 
    RowBox[{
     RowBox[{"WhitespaceCharacter", ".."}], "\[Rule]", "Nothing"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.77140981597823*^9, 3.771409876978485*^9}},
 CellLabel->
  "In[120]:=",ExpressionUUID->"1efddd34-8aca-4eb7-83c5-9214d7e9b2d9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "algebra2Qs", "]"}]], "Input",
 CellChangeTimes->{{3.771409858725211*^9, 3.771409886163163*^9}},
 CellLabel->
  "In[121]:=",ExpressionUUID->"1116899d-8fc6-4a3e-ab24-2005f84130e2"],

Cell[BoxData[
 RowBox[{"{", "3514", "}"}]], "Output",
 CellChangeTimes->{3.7715105188280797`*^9},
 CellLabel->
  "Out[121]=",ExpressionUUID->"78688c5b-e8a1-4f40-b789-6aad7bb91458"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"calcQs", "=", 
   RowBox[{"callAPI", "[", 
    RowBox[{
    "\"\<CalculusSummary\>\"", ",", " ", "2000", ",", " ", "\"\<Beginner\>\"",
      ",", " ", "False"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.77141111890777*^9, 3.771411230243497*^9}, {
   3.7714247138132477`*^9, 3.771424746048686*^9}, {3.771424794234933*^9, 
   3.771424912095244*^9}, {3.771424945011282*^9, 3.771424947220871*^9}, 
   3.7714253519553366`*^9, 3.771425392718534*^9, {3.771425425643009*^9, 
   3.7714254685095615`*^9}, {3.771425605179101*^9, 3.7714256138032155`*^9}, {
   3.771425657677994*^9, 3.7714256664812503`*^9}, {3.771426300614221*^9, 
   3.771426323551214*^9}, {3.7714263889356856`*^9, 3.7714264202942295`*^9}, {
   3.7714282462357583`*^9, 3.771428310088002*^9}, {3.7714284031656094`*^9, 
   3.771428403795043*^9}, {3.771428459749776*^9, 3.771428469461689*^9}, {
   3.7714290345064077`*^9, 3.771429096727632*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"9e358958-2066-4c09-b911-0db3a4cff49b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1Questions", "=", 
   RowBox[{"Flatten", "[", "algebra1Questions", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7714112332757053`*^9, 3.771411254477025*^9}, 
   3.7714114513156786`*^9},
 CellLabel->
  "In[123]:=",ExpressionUUID->"0f4d8182-7287-4694-b4bc-38892ec81f4a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindEquationalProof", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"ToExpression", "[", "\"\<5/4\>\"", "]"}], "\[Equal]", 
    RowBox[{"ToExpression", "[", "\"\<1 1/4\>\"", "]"}]}], ",", " ", 
   RowBox[{"AxiomaticTheory", "[", "\"\<WolframAxioms\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.771433001608056*^9, 3.7714330921239557`*^9}, {
  3.7715128867560263`*^9, 3.771512945909917*^9}, {3.77151299007643*^9, 
  3.7715130358331504`*^9}, {3.7715130782013617`*^9, 3.771513153954116*^9}},
 CellLabel->
  "In[153]:=",ExpressionUUID->"46529bd2-69d9-4b26-983c-4a55970ef73d"],

Cell[BoxData[
 TemplateBox[{
  "FindEquationalProof","invs",
   "\"Invalid specification of propositions \
\\!\\(\\*RowBox[{\\\"False\\\"}]\\) and axioms \\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{SubscriptBox[\\\"\[ForAll]\\\", RowBox[{\\\"{\\\", RowBox[{\\\"\
\[FormalA]\\\", \\\",\\\", \\\"\[FormalB]\\\", \\\",\\\", \
\\\"\[FormalC]\\\"}], \\\"}\\\"}]], RowBox[{RowBox[{RowBox[{\\\"(\\\", \
RowBox[{RowBox[{\\\"(\\\", RowBox[{\\\"\[FormalB]\\\", \\\"\[CenterDot]\\\", \
\\\"\[FormalC]\\\"}], \\\")\\\"}], \\\"\[CenterDot]\\\", \
\\\"\[FormalA]\\\"}], \\\")\\\"}], \\\"\[CenterDot]\\\", RowBox[{\\\"(\\\", \
RowBox[{\\\"\[FormalB]\\\", \\\"\[CenterDot]\\\", RowBox[{\\\"(\\\", \
RowBox[{RowBox[{\\\"(\\\", RowBox[{\\\"\[FormalB]\\\", \\\"\[CenterDot]\\\", \
\\\"\[FormalA]\\\"}], \\\")\\\"}], \\\"\[CenterDot]\\\", \
\\\"\[FormalB]\\\"}], \\\")\\\"}]}], \\\")\\\"}]}], \\\"\[Equal]\\\", \\\"\
\[FormalA]\\\"}]}], \\\"}\\\"}]\\).\"",2,153,13,15903502438734284038,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.771512925066306*^9, 3.771512946722496*^9}, {
  3.771513000975194*^9, 3.771513036625721*^9}, {3.771513118015309*^9, 
  3.77151315483174*^9}},
 CellLabel->
  "During evaluation of \
In[153]:=",ExpressionUUID->"9938165a-0edf-41a7-b211-72942e002d54"],

Cell[BoxData[
 RowBox[{"FindEquationalProof", "[", 
  RowBox[{"False", ",", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["\[ForAll]", 
      RowBox[{"{", 
       RowBox[{"\[FormalA]", ",", "\[FormalB]", ",", "\[FormalC]"}], "}"}]], 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"\[FormalB]", "\[CenterDot]", "\[FormalC]"}], ")"}], 
         "\[CenterDot]", "\[FormalA]"}], ")"}], "\[CenterDot]", 
       RowBox[{"(", 
        RowBox[{"\[FormalB]", "\[CenterDot]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"\[FormalB]", "\[CenterDot]", "\[FormalA]"}], ")"}], 
           "\[CenterDot]", "\[FormalB]"}], ")"}]}], ")"}]}], "\[Equal]", 
      "\[FormalA]"}]}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{{3.771512925099347*^9, 3.7715129467635264`*^9}, {
  3.7715130009931884`*^9, 3.771513036643716*^9}, {3.7715131180333233`*^9, 
  3.7715131548487782`*^9}},
 CellLabel->
  "Out[153]=",ExpressionUUID->"46501060-793c-4570-9232-4c9b306c7d0a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToExpression", "[", "\"\<Sin[\[Pi]]\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.771513183949328*^9, 3.771513185998782*^9}, {
  3.77151326684365*^9, 3.7715133018878717`*^9}, {3.7715134262002263`*^9, 
  3.771513429570622*^9}},
 CellLabel->
  "In[165]:=",ExpressionUUID->"32fdcce0-b740-49a8-bff1-d801620115a1"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.7715132851346607`*^9, 3.7715133030977335`*^9}, 
   3.7715134302410984`*^9},
 CellLabel->
  "Out[165]=",ExpressionUUID->"368aea56-daec-4d02-9d78-b9b3df38464d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Head", "[", 
   RowBox[{
    RowBox[{"Interpreter", "[", "\"\<MathExpression\>\"", "]"}], "[", 
    "\"\<asjkdjfadjf asd asd8asf; hwfjp jfihad fasd jfajsdf\na fasdjf \
ahsfhaksldf ahskfj ashdfa jwfj yr29y yera\>\"", "]"}], " ", "]"}], "//", 
  "InputForm"}]], "Input",
 CellChangeTimes->{{3.77151333553694*^9, 3.771513415239447*^9}, {
  3.771513450412088*^9, 3.771513534290158*^9}, {3.771513706752988*^9, 
  3.7715137700880203`*^9}},
 CellLabel->
  "In[174]:=",ExpressionUUID->"8d6bede3-d66c-4e6b-9e85-850ae2b1df8b"],

Cell["Failure", "Output",
 CellChangeTimes->{{3.7715133662860823`*^9, 3.771513415957947*^9}, {
  3.7715134832615447`*^9, 3.7715135364076767`*^9}, {3.771513716944249*^9, 
  3.7715137285905085`*^9}, {3.7715137625726786`*^9, 3.771513772109457*^9}},
 CellLabel->
  "Out[174]//InputForm=",ExpressionUUID->"ddb3093d-ed25-4fe6-8fc5-\
0cd608d9a7c0"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7715135470498667`*^9, 
  3.7715135489041777`*^9}},ExpressionUUID->"8def94e3-5809-4779-852d-\
54a61cb53596"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReleaseHold", "[", 
  RowBox[{"HoldComplete", "[", 
   RowBox[{"Sin", "[", "\[Pi]", "]"}], "]"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[164]:=",ExpressionUUID->"e49bfbfb-f0ed-45d2-a33a-884754d59b77"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.7715134200128365`*^9},
 CellLabel->
  "Out[164]=",ExpressionUUID->"cb346600-8528-40a0-9369-29532eabe561"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReleaseHold", "[", 
  RowBox[{"HoldComplete", "[", 
   RowBox[{"Sin", " ", "\[Pi]"}], "]"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[162]:=",ExpressionUUID->"3f797684-3324-47ca-a341-29291b316545"],

Cell[BoxData[
 RowBox[{"\[Pi]", " ", "Sin"}]], "Output",
 CellChangeTimes->{3.771513409790564*^9},
 CellLabel->
  "Out[162]=",ExpressionUUID->"ba6b52b4-1c7f-4934-9ec8-d092ab7c4f77"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReleaseHold", "[", 
  RowBox[{"HoldComplete", "[", 
   RowBox[{"sin", " ", "\[Pi]"}], "]"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[160]:=",ExpressionUUID->"0ee77f26-00e3-4d07-8258-f563f42459e8"],

Cell[BoxData[
 RowBox[{"\[Pi]", " ", "sin"}]], "Output",
 CellChangeTimes->{3.7715133968080897`*^9},
 CellLabel->
  "Out[160]=",ExpressionUUID->"14379949-4619-4173-8982-dc61b190c254"]
}, Open  ]]
},
WindowSize->{766, 772},
WindowMargins->{{Automatic, -7}, {Automatic, 0}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 1640, 26, 55, "Input",ExpressionUUID->"2333ef13-77fd-4cdf-b6bd-0173171dc2ca"],
Cell[CellGroupData[{
Cell[2223, 50, 970, 19, 67, "Input",ExpressionUUID->"2d263997-c8cc-4cfe-a7ea-3727e1faf43b"],
Cell[3196, 71, 816, 15, 71, "Output",ExpressionUUID->"274edfd9-ab05-4757-a26f-8ff52ef29019"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4049, 91, 1829, 42, 148, "Input",ExpressionUUID->"6c60326b-e42a-4217-9c4b-5a627cce92a1"],
Cell[5881, 135, 487, 9, 32, "Output",ExpressionUUID->"b93245ec-03bc-4fcf-a576-9dea6fdff793"],
Cell[6371, 146, 499, 10, 36, "Output",ExpressionUUID->"50a9a7bf-2c90-478a-8b67-6f8038260d64"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6907, 161, 599, 11, 48, "Input",ExpressionUUID->"13a45433-da7c-48b3-b716-61b7e0f7a0b0"],
Cell[7509, 174, 503, 10, 52, "Output",ExpressionUUID->"ad0dfe0e-b4be-49eb-a95a-a874c15bad9b"]
}, Open  ]],
Cell[8027, 187, 561, 12, 32, "Input",ExpressionUUID->"a7ae84c8-e77e-4163-a09b-03f6288de0b4"],
Cell[8591, 201, 508, 11, 32, "Input",ExpressionUUID->"965f7365-78f2-4e84-8c81-fb88f95c8219"],
Cell[9102, 214, 381, 9, 28, "Input",ExpressionUUID->"e9cacc85-48d6-4d31-ab94-5d755d539cc0"],
Cell[9486, 225, 589, 12, 32, "Input",ExpressionUUID->"7421c56f-d5af-4df6-8034-ece5d5384058"],
Cell[10078, 239, 1630, 26, 124, "Input",ExpressionUUID->"e86a1b17-fc00-41b9-8941-ba78eb4e043a"],
Cell[11711, 267, 646, 13, 28, "Input",ExpressionUUID->"5d0e39cd-11b1-4595-aeb9-0fdbd16ece9d"],
Cell[12360, 282, 3530, 57, 227, "Input",ExpressionUUID->"82a03de3-0e12-4c59-bb42-528749c4d97e"],
Cell[15893, 341, 2616, 45, 172, "Input",ExpressionUUID->"a376c96d-0f17-43df-a243-6359725f0331"],
Cell[18512, 388, 3380, 57, 209, "Input",ExpressionUUID->"222a3863-676a-4a91-8ed5-bf086815e19f"],
Cell[21895, 447, 2705, 44, 142, "Input",ExpressionUUID->"82bd9a2c-9f48-402b-90c8-7cb9d90eee9e"],
Cell[24603, 493, 447, 10, 28, "Input",ExpressionUUID->"9c835307-f52b-4c42-8b0e-c58da6c73503"],
Cell[25053, 505, 1585, 31, 48, "Input",ExpressionUUID->"75320f2e-dcf8-44e4-a6d6-2ae166718cea"],
Cell[CellGroupData[{
Cell[26663, 540, 210, 3, 28, "Input",ExpressionUUID->"b66b3ba1-ab74-45a5-8467-dbae2cc45c3d"],
Cell[26876, 545, 176, 3, 32, "Output",ExpressionUUID->"28257d28-3b86-41c2-94c6-e5cd13bca960"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27089, 553, 265, 5, 28, "Input",ExpressionUUID->"f8211263-5caf-4966-8332-3088ef6adc52"],
Cell[27357, 560, 521, 9, 147, "Output",ExpressionUUID->"5cfd8b3b-a27f-4902-bbe7-013f21110686"]
}, Open  ]],
Cell[27893, 572, 304, 6, 28, "Input",ExpressionUUID->"4d882cf2-cadf-422e-aa45-f2e75454a042"],
Cell[28200, 580, 848, 18, 28, "Input",ExpressionUUID->"c682d2c2-cecf-4416-9beb-d00d0da3e4f3"],
Cell[29051, 600, 173, 2, 28, "Input",ExpressionUUID->"568cbba2-205d-43c3-b6bd-e23a73e39cba"],
Cell[29227, 604, 768, 17, 28, "Input",ExpressionUUID->"b11e39b9-7017-44bc-a385-0b07d552a794"],
Cell[29998, 623, 455, 8, 28, "Input",ExpressionUUID->"f2914d32-3898-4e48-bf07-c89efc28a175"],
Cell[30456, 633, 282, 6, 28, "Input",ExpressionUUID->"45bf30fe-2ff2-417c-b0d5-9bcaed87df8f"],
Cell[30741, 641, 280, 5, 28, "Input",ExpressionUUID->"cf4f547c-9e66-4b6e-b324-93cb9ff9ea9f"],
Cell[31024, 648, 862, 18, 67, "Input",ExpressionUUID->"102780d6-70d9-4d69-b9aa-dab665404545"],
Cell[31889, 668, 273, 4, 28, "Input",ExpressionUUID->"796a2e9c-8057-4199-a61d-18737ea5c77f"],
Cell[32165, 674, 667, 15, 67, "Input",ExpressionUUID->"a2e10f07-4728-467e-9476-720a45f82e9f"],
Cell[CellGroupData[{
Cell[32857, 693, 408, 7, 28, "Input",ExpressionUUID->"5e97059b-605d-41af-bf6a-9add47d91f50"],
Cell[33268, 702, 176, 3, 49, "Output",ExpressionUUID->"96fd058e-7b89-4311-adfc-1d47e1116932"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33481, 710, 334, 6, 28, "Input",ExpressionUUID->"3622a052-38d9-47fa-b1f3-baec31be1a1e"],
Cell[33818, 718, 223, 3, 32, "Output",ExpressionUUID->"86ef8658-b23f-4fa7-9bf6-6badb8c9ca49"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34078, 726, 811, 15, 48, "Input",ExpressionUUID->"caaa5ecf-7ab4-401d-a3be-1c829e3f17a2"],
Cell[34892, 743, 572, 9, 71, "Output",ExpressionUUID->"84ee8c29-4d06-4501-87c6-dba2ee940272"]
}, Open  ]],
Cell[35479, 755, 2144, 44, 316, "Input",ExpressionUUID->"ecc237eb-c7c5-4f4c-802d-a347edb29d8d"],
Cell[37626, 801, 298, 4, 28, "Input",ExpressionUUID->"27ab713a-2eff-460c-a212-f7c044730315"],
Cell[37927, 807, 1200, 31, 48, "Input",ExpressionUUID->"d115907f-0489-4c18-846c-70d8b91076f7"],
Cell[39130, 840, 265, 6, 28, "Input",ExpressionUUID->"30fa7177-112c-4b2f-8d75-ad044976cb11"],
Cell[39398, 848, 696, 15, 48, "Input",ExpressionUUID->"1b4a1e63-2ed8-4e94-980a-6acdb5398e92"],
Cell[40097, 865, 798, 19, 28, "Input",ExpressionUUID->"c6ef38bf-5447-41ad-a628-b450c1060117"],
Cell[40898, 886, 511, 8, 28, "Input",ExpressionUUID->"668f10c3-844a-457f-8a43-219bf32e4678"],
Cell[CellGroupData[{
Cell[41434, 898, 223, 4, 28, "Input",ExpressionUUID->"f6d4d22f-6a89-4e27-873a-76ae645cd594"],
Cell[41660, 904, 158, 3, 32, "Output",ExpressionUUID->"f3a8f4a2-9c84-4bd7-9af0-b01e7ae37e27"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41855, 912, 3675, 55, 67, "Input",ExpressionUUID->"4a6c27e2-f698-4942-9e0f-b4b815b04b6b"],
Cell[45533, 969, 794454, 12770, 71, "Output",ExpressionUUID->"54b2435e-05fa-4f37-97d1-1b93278ba515"]
}, Open  ]],
Cell[CellGroupData[{
Cell[840024, 13744, 365, 8, 28, "Input",ExpressionUUID->"60c92252-fe5c-46b2-af32-5525ecaa013f"],
Cell[840392, 13754, 215, 4, 32, "Output",ExpressionUUID->"2124b85a-d6e6-4a3e-b44c-dcfcb6865d66"]
}, Open  ]],
Cell[840622, 13761, 3243, 80, 181, "Input",ExpressionUUID->"5652c7f2-04fa-4c09-af67-9f4f252f0675"],
Cell[843868, 13843, 1003, 24, 28, "Input",ExpressionUUID->"1571ed99-a23c-4960-8b79-e86ea7951882"],
Cell[CellGroupData[{
Cell[844896, 13871, 1333, 32, 48, "Input",ExpressionUUID->"a58ec1c8-41a6-4b44-8b8b-48c35008ce34"],
Cell[846232, 13905, 34616, 608, 166, "Output",ExpressionUUID->"89f0cb7b-9e1a-464d-8079-5409bd1b2c6b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[880885, 14518, 2061, 45, 67, "Input",ExpressionUUID->"5f8ee03a-5a6c-4fc8-b268-7b1aba34af42"],
Cell[882949, 14565, 43504, 753, 166, "Output",ExpressionUUID->"1074fb68-be20-4680-a262-fb092b4fbfd2"],
Cell[926456, 15320, 298, 4, 32, "Output",ExpressionUUID->"cf48eb5a-4840-4574-a423-b1f8117dcaab"]
}, Open  ]],
Cell[926769, 15327, 5458, 164, 295, "Input",ExpressionUUID->"c7c8062e-a44d-44d6-9860-e4bb30b9612d"],
Cell[932230, 15493, 173, 2, 28, "Input",ExpressionUUID->"075af11f-332b-44ef-b6ed-18482c0a4326"],
Cell[CellGroupData[{
Cell[932428, 15499, 2316, 44, 205, "Input",ExpressionUUID->"1927aef9-607f-4a49-a59a-07062997209f"],
Cell[934747, 15545, 244, 4, 32, "Output",ExpressionUUID->"f1025216-75f7-41ae-adac-59ffbf7e0b44"],
Cell[934994, 15551, 242, 4, 32, "Output",ExpressionUUID->"3280a512-60d6-4a05-934c-3dbfcbe77a37"],
Cell[935239, 15557, 242, 4, 32, "Output",ExpressionUUID->"e2cfa92d-de0a-4dc9-8ed3-af9105713471"],
Cell[935484, 15563, 242, 4, 32, "Output",ExpressionUUID->"0c05bb67-a430-4bbc-8753-12e97179c64d"],
Cell[935729, 15569, 246, 4, 65, "Output",ExpressionUUID->"6ef87fdf-260d-4f43-bb15-26b5f5c9b3a5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[936012, 15578, 393, 6, 28, "Input",ExpressionUUID->"9a0f02f8-0dcb-4fa0-a434-3dab92e35e3d"],
Cell[936408, 15586, 167, 2, 32, "Output",ExpressionUUID->"542c5d56-3339-4115-854a-57c7bf36e9b0"]
}, Open  ]],
Cell[936590, 15591, 526, 12, 48, "Input",ExpressionUUID->"410c0451-9b50-4726-838d-507ca1520553"],
Cell[937119, 15605, 886, 18, 48, "Input",ExpressionUUID->"25eb0e56-d2cb-4e3c-833f-4d9862c278b6"],
Cell[938008, 15625, 1354, 25, 67, "Input",ExpressionUUID->"66e41b82-96ad-4d5a-885b-44a2b04ac964"],
Cell[939365, 15652, 226, 3, 28, "Input",ExpressionUUID->"266398ea-08f6-44ac-9796-54783f49bc3b"],
Cell[939594, 15657, 3739, 83, 181, "Input",ExpressionUUID->"2c8ae09e-5141-49f8-bc2c-efd2a2324a89"],
Cell[943336, 15742, 487, 10, 28, "Input",ExpressionUUID->"7cf76789-eb97-4c2e-91e6-102698972f28"],
Cell[943826, 15754, 327, 6, 28, "Input",ExpressionUUID->"322b59e5-9d1b-4e2d-aeb2-b791e94df4bc"],
Cell[CellGroupData[{
Cell[944178, 15764, 644, 11, 28, "Input",ExpressionUUID->"957a51f1-e3b5-4fcc-a441-b5abb27dc864"],
Cell[944825, 15777, 398, 9, 21, "Message",ExpressionUUID->"67e505c8-0246-4d45-be86-104e3daf5234"],
Cell[945226, 15788, 1426, 31, 71, "Output",ExpressionUUID->"15359d3a-b0e5-4841-8039-1475396797b6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[946689, 15824, 339, 7, 28, InheritFromParent,ExpressionUUID->"de3f1b3a-9fda-48c3-8f4b-ef2110e9593d"],
Cell[947031, 15833, 154, 2, 32, "Output",ExpressionUUID->"1967bd68-9dcc-45d5-a060-ec42715b7067"]
}, Open  ]],
Cell[CellGroupData[{
Cell[947222, 15840, 335, 6, 28, InheritFromParent,ExpressionUUID->"31a57a72-e7f2-44a1-b72e-95c9958e6bc1"],
Cell[947560, 15848, 154, 2, 32, "Output",ExpressionUUID->"f74db09f-7138-4ac5-807d-2a5fd67a8a4f"]
}, Open  ]],
Cell[947729, 15853, 342, 8, 28, "Input",ExpressionUUID->"d707c0a0-6561-43e9-9fd0-a43a755a3534"],
Cell[CellGroupData[{
Cell[948096, 15865, 431, 9, 28, "Input",ExpressionUUID->"e080f098-be02-4782-988d-080fb60799bf"],
Cell[948530, 15876, 386, 9, 21, "Message",ExpressionUUID->"acecad3e-539b-4620-b88e-c54235c02248"]
}, Open  ]],
Cell[948931, 15888, 403, 5, 28, "Input",ExpressionUUID->"00aac20e-7712-4382-bdcd-1a0f47667dfa"],
Cell[CellGroupData[{
Cell[949359, 15897, 375, 6, 28, "Input",ExpressionUUID->"1d39c30e-2952-4c75-b7a7-9b9256359d5d"],
Cell[949737, 15905, 166, 3, 32, "Output",ExpressionUUID->"095b1ebb-9eb9-45fa-9bd0-910350b5bb68"]
}, Open  ]],
Cell[CellGroupData[{
Cell[949940, 15913, 186, 2, 28, "Input",ExpressionUUID->"8a2df4ce-9c44-47a1-bde1-ff1c4d183497"],
Cell[950129, 15917, 221, 3, 32, "Output",ExpressionUUID->"1e200987-391e-4c2e-87fe-bd145cce2573"]
}, Open  ]],
Cell[CellGroupData[{
Cell[950387, 15925, 284, 5, 28, "Input",ExpressionUUID->"c65c0dd0-81b7-4955-8c52-e9b2bed36fa7"],
Cell[950674, 15932, 226, 3, 32, "Output",ExpressionUUID->"c7e3476b-3a33-47e1-abd7-f2acde030555"]
}, Open  ]],
Cell[CellGroupData[{
Cell[950937, 15940, 280, 5, 28, "Input",ExpressionUUID->"9bdfa35f-8e9a-4070-8882-15d68d851348"],
Cell[951220, 15947, 220, 3, 32, "Output",ExpressionUUID->"3b346045-587d-438a-86d2-544988022026"]
}, Open  ]],
Cell[CellGroupData[{
Cell[951477, 15955, 278, 5, 28, "Input",ExpressionUUID->"3917c014-4521-4d91-8543-b5d914f1cc18"],
Cell[951758, 15962, 219, 3, 32, "Output",ExpressionUUID->"2c28b98f-1686-4c97-a669-7d8c8fcf8c27"]
}, Open  ]],
Cell[CellGroupData[{
Cell[952014, 15970, 329, 6, 28, "Input",ExpressionUUID->"467d54c9-fca1-43d0-97cf-f2d46c7284b1"],
Cell[952346, 15978, 221, 3, 32, "Output",ExpressionUUID->"ca1edffa-8312-4520-8962-1da286d552c8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[952604, 15986, 388, 7, 28, "Input",ExpressionUUID->"f8bb0306-7bc5-4dc8-9d8e-1e8f7ab2e834"],
Cell[952995, 15995, 226, 3, 32, "Output",ExpressionUUID->"ac731156-86b9-4813-9eaf-b6ee1c517ef0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[953258, 16003, 467, 9, 48, "Input",ExpressionUUID->"5e485a53-0caa-4994-a3a3-d3d69cde3b52"],
Cell[953728, 16014, 218, 3, 32, "Output",ExpressionUUID->"35a0a796-024d-4c6f-882d-ee64129bd5d6"],
Cell[953949, 16019, 227, 3, 32, "Output",ExpressionUUID->"ca2b63dd-914b-4cc0-91b7-1cd404e62106"]
}, Open  ]],
Cell[CellGroupData[{
Cell[954213, 16027, 252, 4, 28, "Input",ExpressionUUID->"cfb0e200-36f9-494c-88e2-8eba067033a5"],
Cell[954468, 16033, 227, 4, 32, "Output",ExpressionUUID->"d1470dc5-0538-4711-860f-7953bd4232ea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[954732, 16042, 345, 7, 28, "Input",ExpressionUUID->"9db4f7e5-a195-45b4-868f-2359598971c3"],
Cell[955080, 16051, 228, 4, 32, "Output",ExpressionUUID->"57b38527-49cd-40fd-8df1-c5f3a082ffbc"]
}, Open  ]],
Cell[955323, 16058, 1802, 37, 86, "Input",ExpressionUUID->"87f57da9-00aa-4b46-ab12-6608300fc354"],
Cell[957128, 16097, 521, 12, 28, "Input",ExpressionUUID->"855d2f73-4d92-458c-92f8-4997982eeb95"],
Cell[CellGroupData[{
Cell[957674, 16113, 264, 5, 28, "Input",ExpressionUUID->"c5d465ea-1c08-42a8-9ef9-344addb687c8"],
Cell[957941, 16120, 214, 4, 32, "Output",ExpressionUUID->"dcf1025e-8b15-4288-b9ea-b75fb7f81f74"]
}, Open  ]],
Cell[CellGroupData[{
Cell[958192, 16129, 249, 5, 28, "Input",ExpressionUUID->"fbec490a-a8cf-4334-a943-dcc80a67bcec"],
Cell[958444, 16136, 202, 4, 32, "Output",ExpressionUUID->"0e7b0483-dde9-49fd-9cfe-ce91f178abc1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[958683, 16145, 406, 10, 48, "Input",ExpressionUUID->"53522faf-b64c-4e4b-98e4-8562af9b3595"],
Cell[959092, 16157, 226, 5, 32, "Output",ExpressionUUID->"f80da7c9-b4df-46ab-a36d-d48384fc5e69"]
}, Open  ]],
Cell[CellGroupData[{
Cell[959355, 16167, 256, 5, 28, "Input",ExpressionUUID->"cb59bb07-5383-42bf-81be-5f35fcdab709"],
Cell[959614, 16174, 203, 4, 32, "Output",ExpressionUUID->"d2f4cb57-ccb1-45bf-9c1d-f728013290e9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[959854, 16183, 467, 11, 59, "Input",ExpressionUUID->"0355aab1-cd18-479e-ba9f-08006c50833e"],
Cell[960324, 16196, 280, 5, 44, "Output",ExpressionUUID->"0f224181-5626-4274-95f6-f643a9e32da3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[960641, 16206, 260, 5, 28, "Input",ExpressionUUID->"d08078e9-646b-410d-b3da-7b07d3631460"],
Cell[960904, 16213, 206, 4, 32, "Output",ExpressionUUID->"14846806-2d47-4add-bfbc-5f75ea1a3277"]
}, Open  ]],
Cell[CellGroupData[{
Cell[961147, 16222, 429, 9, 28, "Input",ExpressionUUID->"42c8cf32-1946-44b8-9562-13038f11fb94"],
Cell[961579, 16233, 820, 16, 92, "Output",ExpressionUUID->"23f8d0de-eb23-472a-842a-6139e4015024"]
}, Open  ]],
Cell[962414, 16252, 1219, 24, 28, "Input",ExpressionUUID->"0ab75f01-46a1-4e5f-adf2-7d5307d5762b"],
Cell[CellGroupData[{
Cell[963658, 16280, 594, 13, 28, "Input",ExpressionUUID->"6140b4bf-cb5c-4e9a-960e-e3b85328145c"],
Cell[964255, 16295, 192, 4, 46, "Output",ExpressionUUID->"ba1ef9c2-4756-445b-ba53-19ba24864af2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[964484, 16304, 442, 11, 28, "Input",ExpressionUUID->"95b96204-eca8-4b83-b10f-34c442d68937"],
Cell[964929, 16317, 648, 22, 51, "Output",ExpressionUUID->"7671a8b9-5763-432f-9a11-78752da7a5ea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[965614, 16344, 283, 6, 28, "Input",ExpressionUUID->"dd10fb84-5fff-4fba-9083-85431c8f6cfd"],
Cell[965900, 16352, 10904, 216, 90, "Output",ExpressionUUID->"c573f50e-4153-4d3f-94b3-0af0a72179fd"]
}, Open  ]],
Cell[976819, 16571, 320, 7, 28, "Input",ExpressionUUID->"504bd9cc-d90b-476c-be9f-d82b78e41ae7"],
Cell[CellGroupData[{
Cell[977164, 16582, 323, 6, 28, "Input",ExpressionUUID->"a0308418-3e41-4b79-b3be-d01011649c9a"],
Cell[977490, 16590, 1394, 37, 102, "Output",ExpressionUUID->"48aa0031-b4a7-4709-9448-2ec1d5fea8a0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[978921, 16632, 416, 9, 28, "Input",ExpressionUUID->"c152a1f2-bf7c-435c-8fac-a14c7491d047"],
Cell[979340, 16643, 360, 8, 46, "Output",ExpressionUUID->"5584d5ee-f5ed-4b31-a840-1e123d52079b"]
}, Open  ]],
Cell[979715, 16654, 338, 9, 28, "Input",ExpressionUUID->"1efddd34-8aca-4eb7-83c5-9214d7e9b2d9"],
Cell[CellGroupData[{
Cell[980078, 16667, 221, 4, 28, "Input",ExpressionUUID->"1116899d-8fc6-4a3e-ab24-2005f84130e2"],
Cell[980302, 16673, 180, 4, 32, "Output",ExpressionUUID->"78688c5b-e8a1-4f40-b789-6aad7bb91458"]
}, Open  ]],
Cell[980497, 16680, 1022, 18, 28, "Input",ExpressionUUID->"9e358958-2066-4c09-b911-0db3a4cff49b"],
Cell[981522, 16700, 313, 7, 28, "Input",ExpressionUUID->"0f4d8182-7287-4694-b4bc-38892ec81f4a"],
Cell[CellGroupData[{
Cell[981860, 16711, 601, 12, 48, "Input",ExpressionUUID->"46529bd2-69d9-4b26-983c-4a55970ef73d"],
Cell[982464, 16725, 1279, 22, 25, "Message",ExpressionUUID->"9938165a-0edf-41a7-b211-72942e002d54"],
Cell[983746, 16749, 1052, 27, 38, "Output",ExpressionUUID->"46501060-793c-4570-9232-4c9b306c7d0a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[984835, 16781, 332, 6, 28, "Input",ExpressionUUID->"32fdcce0-b740-49a8-bff1-d801620115a1"],
Cell[985170, 16789, 209, 4, 32, "Output",ExpressionUUID->"368aea56-daec-4d02-9d78-b9b3df38464d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[985416, 16798, 551, 12, 48, "Input",ExpressionUUID->"8d6bede3-d66c-4e6b-9e85-850ae2b1df8b"],
Cell[985970, 16812, 341, 6, 46, "Output",ExpressionUUID->"ddb3093d-ed25-4fe6-8fc5-0cd608d9a7c0"]
}, Open  ]],
Cell[986326, 16821, 156, 3, 28, "Input",ExpressionUUID->"8def94e3-5809-4779-852d-54a61cb53596"],
Cell[CellGroupData[{
Cell[986507, 16828, 242, 6, 28, "Input",ExpressionUUID->"e49bfbfb-f0ed-45d2-a33a-884754d59b77"],
Cell[986752, 16836, 155, 3, 32, "Output",ExpressionUUID->"cb346600-8528-40a0-9369-29532eabe561"]
}, Open  ]],
Cell[CellGroupData[{
Cell[986944, 16844, 237, 6, 28, "Input",ExpressionUUID->"3f797684-3324-47ca-a341-29291b316545"],
Cell[987184, 16852, 181, 4, 32, "Output",ExpressionUUID->"ba6b52b4-1c7f-4934-9ec8-d092ab7c4f77"]
}, Open  ]],
Cell[CellGroupData[{
Cell[987402, 16861, 237, 6, 28, "Input",ExpressionUUID->"0ee77f26-00e3-4d07-8258-f563f42459e8"],
Cell[987642, 16869, 183, 4, 65, "Output",ExpressionUUID->"14379949-4619-4173-8982-dc61b190c254"]
}, Open  ]]
}
]
*)

