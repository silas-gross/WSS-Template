(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    499249,       9176]
NotebookOptionsPosition[    484103,       8943]
NotebookOutlinePosition[    484446,       8958]
CellTagsIndexPosition[    484403,       8955]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsPEMDAS", "=", 
   RowBox[{"{", " ", 
    RowBox[{
    "\"\<What is 2+2\>\"", ",", " ", "\"\<2+3\>\"", ",", 
     "\"\<What is 2+3\>\"", ",", " ", "\"\<What is 1+1\>\"", ",", " ", 
     "\"\<What is 20+22\>\"", ",", " ", "\"\<What is 1+15+21\>\"", ",", " ", 
     "\"\<What is 33+5+8\>\"", ",", " ", 
     "\"\<Simplify (2-5\!\(\*SuperscriptBox[\()\), \(2\)]\)\>\"", ",", " ", 
     "\"\<Simplify 2-\!\(\*SuperscriptBox[\(5\), \(2\)]\)\>\"", ",", " ", 
     "\"\<Simplify 10-7+1\>\"", ",", " ", "\"\<Simplify 10-(7+1)\>\"", ",", 
     " ", "\"\<Simplify 24/(4-2\!\(\*SuperscriptBox[\()\), \(3\)]\)\>\"", ",",
      " ", "\"\<Simplify 4+5(1+12/6\!\(\*SuperscriptBox[\()\), \(2\)]\)\>\"", 
     ",", " ", "\"\<Simplify (15-3)/(1+5)\>\"", ",", " ", "\"\<1+12\>\"", ",",
      " ", "\"\<10% of 11\>\"", ",", " ", "\"\<30+40\>\"", ",", " ", 
     "\"\<15+12\>\"", ",", " ", "\"\<20% of 33\>\"", " ", ",", " ", 
     "\"\<11+12\>\"", ",", " ", "\"\<What is 5% of 100?\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7710111217256823`*^9, 3.7710111540272284`*^9}, {
  3.7710111885866814`*^9, 3.7710113104444427`*^9}, {3.771011349072077*^9, 
  3.7710114614252415`*^9}, {3.7710717742904773`*^9, 3.7710717974684796`*^9}, {
  3.7710825794066696`*^9, 3.7710825944885254`*^9}, {3.7710828568271475`*^9, 
  3.7710828576980124`*^9}, {3.77109972947976*^9, 3.77109975449656*^9}, {
  3.7710997929256735`*^9, 3.7710998004862556`*^9}, {3.7711007075997024`*^9, 
  3.771100733777379*^9}, {3.771101333629407*^9, 3.7711013629989295`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"2333ef13-77fd-4cdf-b6bd-0173171dc2ca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a1QsFractions", "=", 
  RowBox[{"{", 
   RowBox[{
   "\"\<express 3 2/7 as an improper fraction\>\"", ",", " ", 
    "\"\<express 12 1/3 as an improper fraction\>\"", ",", " ", 
    "\"\<Express 42/5 as a mixed number\>\"", ",", " ", 
    "\"\<Express 53/9 as a mixed number\>\"", ",", " ", 
    "\"\<write 3/18 in simplest form\>\"", ",", " ", 
    RowBox[{
    "\"\<write 42/54 in simplest form\>\"", " ", 
     "\"\<What is 3 2/7 as an improper fraction\>\""}], ",", 
    "\"\<What is 12 1/3 as an improper fraction\>\"", ",", 
    "\"\<What is 42/5 as a mixed number\>\"", ",", 
    "\"\<What is 53/9 as a mixed number\>\"", ",", 
    "\"\<What is 3/18 in simplest form\>\"", ",", 
    "\"\<What is 42/54 in simplest form\>\""}], "}"}]}]], "Input",
 CellChangeTimes->{{3.7710119043974237`*^9, 3.771012096049966*^9}, {
  3.771071582527122*^9, 3.77107158335518*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"2d263997-c8cc-4cfe-a7ea-3727e1faf43b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"express 3 2/7 as an improper fraction\"\>", 
   ",", "\<\"express 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"Express 42/5 as a mixed number\"\>", 
   ",", "\<\"Express 53/9 as a mixed number\"\>", 
   ",", "\<\"write 3/18 in simplest form\"\>", ",", 
   RowBox[{"\<\"What is 3 2/7 as an improper fraction\"\>", 
    " ", "\<\"write 42/54 in simplest form\"\>"}], 
   ",", "\<\"What is 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"What is 42/5 as a mixed number\"\>", 
   ",", "\<\"What is 53/9 as a mixed number\"\>", 
   ",", "\<\"What is 3/18 in simplest form\"\>", 
   ",", "\<\"What is 42/54 in simplest form\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.77140773426797*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"5a51fcff-2435-4c7b-956b-4f6b96456cac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"{", 
  RowBox[{
  "\"\<express 3 2/7 as an improper fraction\>\"", ",", 
   "\"\<express 12 1/3 as an improper fraction\>\"", ",", 
   "\"\<Express 42/5 as a mixed number\>\"", ",", 
   "\"\<Express 53/9 as a mixed number\>\"", ",", 
   "\"\<write 3/18 in simplest form\>\"", ",", 
   "\"\<write 42/54 in simplest form\>\""}], "}"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"a1QsOppFrac", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Multiply 24/3 and 27/8\>\"", ",", " ", "\"\<Multiply 8 and 3/24\>\"",
      ",", " ", "\"\<Add 1/2 and 1/3\>\"", ",", " ", 
     "\"\<What is  24/3 * 27/8\>\"", ",", " ", "\"\<What is  8 * 3/24\>\"", 
     ",", " ", "\"\<What is  1/2 + 1/3\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"a1QsAbsoluteVal", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<What is the absolute value of -1?\>\"", ",", " ", 
     "\"\<What is |1|\>\"", ",", " ", "\"\<What is |-30|\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"a1QsNegatice", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<What is 3-(-2)?\>\"", ",", " ", "\"\<What is -3+4\>\""}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"a1QsIntovars", "=", 
  RowBox[{"{", 
   RowBox[{
   "\"\<Evaluate \!\(\*SuperscriptBox[\(a\), \
\(2\)]\)-\!\(\*SuperscriptBox[\(b\), \(2\)]\) when a=5 and b=3\>\"", ",", 
    " ", "\"\<Evaluate a-\!\(\*SuperscriptBox[\(b\), \(2\)]\) when a=4 and \
b=2\>\"", ",", " ", 
    "\"\<Evaluate \!\(\*SuperscriptBox[\(a\), \(2\)]\)+b when a=7 and \
b=1\>\""}], "}"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7710183957665844`*^9, 3.771018693615785*^9}, {
  3.7710715604288125`*^9, 3.7710715669824667`*^9}, {3.771071599899954*^9, 
  3.771071624993181*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"6c60326b-e42a-4217-9c4b-5a627cce92a1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"express 3 2/7 as an improper fraction\"\>", 
   ",", "\<\"express 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"Express 42/5 as a mixed number\"\>", 
   ",", "\<\"Express 53/9 as a mixed number\"\>", 
   ",", "\<\"write 3/18 in simplest form\"\>", 
   ",", "\<\"write 42/54 in simplest form\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7714077343279743`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"a73ad4f1-965a-451f-8b72-535a32dddef2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Evaluate \\!\\(\\*SuperscriptBox[\\(a\\), \
\\(2\\)]\\)-\\!\\(\\*SuperscriptBox[\\(b\\), \\(2\\)]\\) when a=5 and \
b=3\"\>", 
   ",", "\<\"Evaluate a-\\!\\(\\*SuperscriptBox[\\(b\\), \\(2\\)]\\) when a=4 \
and b=2\"\>", 
   ",", "\<\"Evaluate \\!\\(\\*SuperscriptBox[\\(a\\), \\(2\\)]\\)+b when a=7 \
and b=1\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7714077343319745`*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"a4ec7dd7-fa0a-4ab7-b4e6-0422c865bd43"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "\"\<express 3 2/7 as an improper fraction\>\"", ",", 
   "\"\<express 12 1/3 as an improper fraction\>\"", ",", 
   "\"\<Express 42/5 as a mixed number\>\"", ",", 
   "\"\<Express 53/9 as a mixed number\>\"", ",", 
   "\"\<write 3/18 in simplest form\>\"", ",", 
   "\"\<write 42/54 in simplest form\>\"", ","}], " ", "}"}]], "Input",
 CellChangeTimes->{{3.771071389445044*^9, 3.7710714057846594`*^9}, {
   3.771071505249978*^9, 3.7710715347214036`*^9}, 3.7710715778464785`*^9},
 CellLabel->"In[23]:=",ExpressionUUID->"13a45433-da7c-48b3-b716-61b7e0f7a0b0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"express 3 2/7 as an improper fraction\"\>", 
   ",", "\<\"express 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"Express 42/5 as a mixed number\"\>", 
   ",", "\<\"Express 53/9 as a mixed number\"\>", 
   ",", "\<\"write 3/18 in simplest form\"\>", 
   ",", "\<\"write 42/54 in simplest form\"\>", ",", "Null"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.771407734387977*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"abe71e69-95f5-41d1-8dff-ca16f0b41750"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsCombineLikeTerms", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Combine like terms of 3a-6a+10a-a\>\"", ",", " ", 
     "\"\<Combine the like terms of 5x-10y+6z-3x\>\"", ",", " ", 
     "\"\<Combine like terms of 3n-5\!\(\*SuperscriptBox[\(n\), \(\(2\)\(\\\ \
\)\)]\)+6n-10+2\!\(\*SuperscriptBox[\(n\), \(2\)]\)\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7710187153865156`*^9, 3.7710188213954906`*^9}, 
   3.771101374565879*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"a7ae84c8-e77e-4163-a09b-03f6288de0b4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsDistrbutive", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<5(2x+4)\>\"", ",", " ", 
     "\"\<-3(\!\(\*SuperscriptBox[\(x\), \(2\)]\)-2x+7)\>\"", ",", " ", 
     "\"\<-(5\!\(\*SuperscriptBox[\(x\), \(4\)]\)-8)\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7710188742668247`*^9, 3.7710188984740705`*^9}, {
   3.771019155256483*^9, 3.7710192378708935`*^9}, 3.771101371539567*^9},
 CellLabel->"In[25]:=",ExpressionUUID->"965f7365-78f2-4e84-8c81-fb88f95c8219"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsSolving", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<8x-2=22\>\"", ",", " ", "\"\<-x-2=12\>\"", ",", " ", 
     "\"\<2/3 x+3 =15\>\""}], "}"}]}], " ", ";"}]], "Input",
 CellChangeTimes->{{3.7710193041936626`*^9, 3.771019361406973*^9}, 
   3.771101382125491*^9},
 CellLabel->"In[26]:=",ExpressionUUID->"e9cacc85-48d6-4d31-ab94-5d755d539cc0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsPolynomials", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Factor 3\!\(\*SuperscriptBox[\(x\), \(2\)]\)+4x+1\>\"", ",", " ", 
     "\"\<Factor \!\(\*SuperscriptBox[\(n\), \(2\)]\)+5n+6\>\"", ",", " ", 
     "\"\<Factor \!\(\*SuperscriptBox[\(a\), \(2\)]\)+3a+2\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771019367476872*^9, 3.7710193984622173`*^9}, {
  3.7710194762827587`*^9, 3.7710195744093504`*^9}, {3.7711013112902584`*^9, 
  3.7711013126543474`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"7421c56f-d5af-4df6-8034-ece5d5384058"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsPercent", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<A $750 watch is on sale for 15% off. Find the sale price.\>\"", ",", 
     " ", "\"\<A salesman tells you that the $140 earrings are already marked \
20% off. What\nwas the original price?\>\"", ",", " ", 
     "\"\<Tommy\[CloseCurlyQuote]s grandma gave him a $50 gift card to Toys R \
Us for his birthday.\nSales tax is currently 9%. Determine the price of the \
most expensive toy Tommy can buy with\nthe $50 gift card.\>\"", ",", " ", 
     "\"\<A salesman is paid a monthly salary of $2,300 plus 7% commission on \
his monthly sales.\nDetermine the amount of sales required for his total \
monthly income to be $3,000.\>\"", ",", " ", "\[IndentingNewLine]", 
     "\"\<What is 10% of 100\>\"", ",", " ", "\"\<What is 4% of 16?\>\"", ",",
      " ", "\"\<200% of 3\>\"", ",", " ", "\"\<What is 45+300+4\>\"", ",", 
     " ", "\"\<30+30\>\"", ",", " ", "\"\<90+200\>\"", ",", " ", 
     "\"\<1+5\>\"", ",", " ", "\"\<34+1\>\"", ",", " ", "\"\<10% of 11\>\"", 
     ",", " ", "\"\<5% of 112\>\"", ",", " ", "\"\<41+2\>\""}], " ", "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.77101961019419*^9, 3.7710196924983225`*^9}, {
   3.77107136787315*^9, 3.7710713732095246`*^9}, {3.7710825303308954`*^9, 
   3.771082555173584*^9}, 3.7711013068393455`*^9, {3.771103600684926*^9, 
   3.771103646960228*^9}, {3.7711039584884386`*^9, 3.771103975026537*^9}, {
   3.7711041538209133`*^9, 3.7711041766438804`*^9}, {3.7711049603491745`*^9, 
   3.771104971313301*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"e86a1b17-fc00-41b9-8941-ba78eb4e043a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1Questions", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"{", 
     RowBox[{
     "a1QsAbsoluteVal", ",", " ", "a1QsCombineLikeTerms", ",", " ", 
      "a1QsDistrbutive", ",", " ", "a1QsFractions", ",", " ", "a1QsIntovars", 
      ",", " ", "a1QsPEMDAS", ",", " ", "a1QsSolving", ",", " ", 
      "a1QsOppFrac", ",", " ", "a1QsPercent", ",", " ", "a1QsNegatice"}], 
     "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7710197639313936`*^9, 3.77101991115589*^9}, {
  3.7711012946740265`*^9, 3.7711012982787495`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"5d0e39cd-11b1-4595-aeb9-0fdbd16ece9d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"algebra2PSetList", "[", 
  RowBox[{"[", 
   RowBox[{"8503", ";;", "8510"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7710581376943464`*^9, 3.7710581674301476`*^9}, {
  3.7710581977897487`*^9, 3.77105819797186*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"a315aa41-887f-4376-b5a7-9f6614771663"],

Cell[BoxData[
 TemplateBox[{
  "Part","take",
   "\"Cannot take positions \\!\\(\\*RowBox[{\\\"8503\\\"}]\\) through \\!\\(\
\\*RowBox[{\\\"8510\\\"}]\\) in \
\\!\\(\\*RowBox[{\\\"algebra2PSetList\\\"}]\\).\"",2,30,5,
   15902530251911880643,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771407734507987*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"81478dec-76c8-415e-8a00-e01f4bb8dc0c"],

Cell[BoxData[
 RowBox[{"algebra2PSetList", "\[LeftDoubleBracket]", 
  RowBox[{"8503", ";;", "8510"}], "\[RightDoubleBracket]"}]], "Output",
 CellChangeTimes->{3.77140773452799*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"641b6a9f-9191-45f2-bf1e-eb0a3e7a6de7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra2Qs", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<What is the most specific subset of the real numbers that -7 is a \
part of?\>\"", ",", " ", "\"\<Plot 1.25, 2/3 and 2 on a number line\>\"", ",",
      " ", "\"\<Identify the property used in the equations below as \
distributive, inverse or associative\>\"", ",", " ", 
     "\"\<Evaluate 2\!\(\*SuperscriptBox[\(x\), \(2\)]\)-9 for x=-3\>\"", ",",
      "  ", "\"\<Expand (a+b\!\(\*SuperscriptBox[\()\), \(3\)]\)\>\"", ",", 
     " ", "\"\<What is (a+b\!\(\*SuperscriptBox[\()\), \(n\)]\) (Hint: What \
theorem is this?)\>\"", ",", " ", "\"\<Solve 4x-9=11\>\"", ",", " ", 
     "\"\<Solve 3(x-5)+4=10\>\"", ",", " ", "\"\<Solve 3(x-5)+4=10\>\"", ",", 
     " ", "\"\<Solve 9(x-3)+4=10\>\"", ",", " ", 
     "\"\<Solve (x-1/2)=(2x+3)\>\"", ",", "\"\<Solve 3|x-5|=12\>\"", ",", 
     "\"\<Solve 8(x-5)+4=10\>\"", ",", 
     "\"\<Solve (\!\(\*SuperscriptBox[\(x\), \(2\)]\)-5)=20\>\"", ",", "  ", 
     "\"\<Use the law of sines to find the missing side of this triangle\>\"",
      ",", " ", 
     "\"\<What is the largest value for the missing side of this \
triangle\>\"", ",", " ", "\"\<What is sin(60)\>\"", ",", " ", 
     "\"\<What is tan(30)\>\"", ",", " ", 
     "\"\<Write 30 degrees in radians\>\"", ",", " ", 
     "\"\<Write \[Pi]/4 in degrees\>\"", ",", " ", 
     "\"\<Is x=-8 a solution to 1/2x+6>3?\>\"", ",", "  ", 
     "\"\<Solve and graph the solution to 2x-3<7\>\"", ",", " ", 
     "\"\<Solve and graph the solution to |3x-1|\[GreaterEqual]10\>\"", ",", 
     "  ", "\"\<How many miutes are in a day?\>\"", ",", " ", 
     "\"\<Wrie the standard form of y=3/2 x+2\>\"", ",", " ", 
     "\"\<Write slope intercept form for a slope of 2 and y-intercept of 12\>\
\"", ",", " ", 
     "\"\<Find a perpedicular line of y=3x+2 with y intercept of the origin\>\
\"", ",", 
     "\"\<What are the domain and range of the trigonometric functions?\>\"", 
     " ", ",", " ", "\"\<Graph the inequality y<3x+4\>\"", ",", " ", 
     "\"\<Find the equation of best fit for the below listed data\>\"", ",", 
     " ", "\"\<Graph the parabola give by \!\(\*SuperscriptBox[\(x\), \
\(2\)]\)+3x+2. Find the zeros, vertex and intercept\>\"", ",", " ", 
     "\"\<What is the sum from 1 to 5 of a=10n+3\>\"", ",", " ", 
     "\"\<What is the next term in the series \>\"", ",", " ", 
     "\"\<what is the sum of the geometric series from 1 to infinity of \
9(1/10\!\(\*SuperscriptBox[\()\), \(n\)]\)?\>\"", ",", " ", 
     "\"\<What are the discontiuities in the function y=(x+2)/(x+3x+2). Which \
are fundamental and which are removable?\>\"", ",", " ", 
     "\"\<What is ln(1)?\>\"", ",", " ", 
     "\"\<What are the domain and range of \!\(\*SuperscriptBox[\(e\), \(x\)]\
\) and ln(x)\>\"", ",", " ", "\"\<sin(40)\>\"", ",", " ", "\"\<cos(45)\>\"", 
     ",", " ", "\"\<tan(63)\>\"", ",", " ", "\"\<sin(121)\>\"", ",", " ", 
     "\"\<sin(\[Pi]/3)\>\"", ",", " ", "\"\<sin(\[Pi]/5)\>\"", ",", " ", 
     "\"\<cos(\[Pi]/13)\>\""}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7710582068470354`*^9, 3.771058864236945*^9}, {
   3.77105889644958*^9, 3.771059060194398*^9}, {3.771059094253581*^9, 
   3.7710591689725113`*^9}, {3.771059213441484*^9, 3.771059436664031*^9}, {
   3.771083696942418*^9, 3.7710837178362527`*^9}, 3.7711012136346254`*^9, {
   3.771103066357688*^9, 3.771103174458703*^9}, {3.7711034741487684`*^9, 
   3.771103548963587*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"82a03de3-0e12-4c59-bb42-528749c4d97e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"calcQspcalc", "=", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Evaluate f(x)=3-5x-2\!\(\*SuperscriptBox[\(x\), \(2\)]\) for the \
below values: f(0), f(x+h), f(6-t)\>\"", ",", " ", 
      "\"\<Compute  the difrence quotient for the given function\>\"", ",", 
      "  ", "\"\<Find the domain of (\!\(\*SuperscriptBox[\(w\), \
\(3\)]\)-3w+1)/(12 w-7)\>\"", ",", 
      "\"\<Find the inverse of f (x) = 6x +15\>\"", ",", " ", 
      "\"\<Find inverse of W (x) =  (9 \[Minus]11x\!\(\*SuperscriptBox[\()\), \
\(1/5\)]\)\>\"", ",", " ", 
      "\"\<Find the exact value of cos(5 \[Pi]/6) without using a \
calculator\>\"", ",", " ", 
      "\"\<Find the exact value of sin(-4 \[Pi]/3) without using a calculator\
\>\"", ",", " ", "\"\<Solve  4sin (3t ) = 2\>\"", ",", " ", 
      "\"\<Solve 4sin (3t ) = 2 in [0, 4\[Pi]/3], 2cos(x/3) \
+\!\(\*SuperscriptBox[\(2\), \(0.5\)]\) = 0 in [\[Minus]7\[Pi] ,7\[Pi] }\>\"",
       ",", " ", "\"\<Solve 4y sec(7 y) = \[Minus]21y\>\"", ",", " ", 
      "\"\<Solve 3\[Minus]14sin (12t + 7) =13\>\"", ",", " ", 
      "\"\<Solve 3sec(4 \[Minus] 9z) \[Minus] 24 = 0\>\"", ",", " ", 
      "\"\<Sketch the graph of f(x)=\!\(\*SuperscriptBox[\(3\), \(1 + 2  x\)]\
\)\>\"", ",", " ", 
      "\"\<Sketch the graph of h(x)=8+3\!\(\*SuperscriptBox[\(e\), \(2  t - 4\
\)]\)\>\"", ",", "  ", 
      "\"\<Determine ln(\!\(\*SuperscriptBox[\(e\), \(4\)]\))\>\"", ",", " ", 
      "\"\<Combine 2 \!\(\*SubscriptBox[\(log\), \(4\)]\)x +5 \
\!\(\*SubscriptBox[\(log\), \(4\)]\)y - 1/2 \!\(\*SubscriptBox[\(log\), \
\(4\)]\)x\>\"", " ", ",", " ", 
      "\"\<For the function W(x)=ln(1+\!\(\*SuperscriptBox[\(x\), \(4\)]\)) \
and the point x=1, find the secants at point Q and the tangenet line\>\"", 
      ",", " ", 
      "\"\<For the function f(x)=(8-\!\(\*SuperscriptBox[\(x\), \(2\)]\))/(\!\
\(\*SuperscriptBox[\(x\), \(2\)]\)-4), find the values at the below listed \
points and th limit as x aproaches 2\>\"", ",", "  ", ",", " ", 
      "\"\<For the function f(y)= sin(y)/y find the value at the below listed \
points and the limit as y approaches 0\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7710601633187313`*^9, 3.7710602840576377`*^9}, {
   3.7710603739809523`*^9, 3.7710610326160107`*^9}, {3.7710611060732737`*^9, 
   3.771061255410469*^9}, {3.7710613977488184`*^9, 3.771061607861419*^9}, {
   3.7710707202458553`*^9, 3.7710707343529253`*^9}, {3.771083528708667*^9, 
   3.7710835661734114`*^9}, 3.7711012380737867`*^9},
 CellLabel->"In[32]:=",ExpressionUUID->"a376c96d-0f17-43df-a243-6359725f0331"],

Cell[BoxData[
 RowBox[{
  RowBox[{"calcQsderivs", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<For the function f(x)=(8-\!\(\*SuperscriptBox[\(x\), \(2\)]\))/(\!\(\
\*SuperscriptBox[\(x\), \(2\)]\)-4), use L'Hoptial's rule to find the limit \
as x aproaches 2\>\"", ",", "  ", 
     "\"\<For the function (2-(\!\(\*SuperscriptBox[\(t\), \
\(2\)]\)+3\!\(\*SuperscriptBox[\()\), \(1/2\)]\))/(t+1), L'Hoptial's rule to \
find the limit as x approaches -1\>\"", ",", " ", 
     "\"\<Use the definition of the derivative to find the derivative of \
f(x)=6\>\"", ",", " ", 
     "\"\<Use the definition of the derivative to find the derivative of V (t \
) = 3\[Minus]14t\>\"", ",", " ", "\[IndentingNewLine]", " ", 
     "\"\<Use the definition of the derivative to find the derivative of \
z(n)= (n+1)/(n+4)\>\"", ",", "\[IndentingNewLine]", 
     "\"\<Use the chain rule to find the derivative of \
Q(t)=(3\!\(\*SuperscriptBox[\(t\), \(3\)]\)-4\!\(\*SuperscriptBox[\()\), \
\(1/2\)]\)\>\"", ",", " ", 
     "\"\<Use the quotient rule to find the derivative of z(n)= \
(z+1\!\(\*SuperscriptBox[\()\), \(1/2\)]\)/(z+4)\>\"", ",", " ", 
     "\[IndentingNewLine]", 
     "\"\<Find the deriviative of f (x) = 2cos(x) \[Minus] 6sec(x) + 3\>\"", 
     ",", " ", 
     "\"\<Find the deriviative of g (z) =10 tan (z) \[Minus] 2cot (z)\>\"", 
     ",", " ", "\"\<Find the deriviative of  tan (w)sec(w)\>\"", ",", " ", 
     "\"\<Find the deriviative of R(t)=(t+ tan(t))/(1+csc(t))\>\"", ",", " ", 
     "\"\<Find the derivative of f(x)=2\!\(\*SuperscriptBox[\(e\), \
\(x\)]\)-\!\(\*SuperscriptBox[\(8\), \(x\)]\)\>\"", ",", " ", 
     "\"\<Find the derivative of g(t)=4 \!\(\*SubscriptBox[\(log\), \
\(3\)]\)(t)-ln(t)\>\"", ",", " ", 
     "\"\<Find the derivative of 2 cos(x)+arccos(x)\>\"", " ", ",", " ", 
     "\"\<Find the derivative of \!\(\*SuperscriptBox[\(x\), \
\(2\)]\)/\!\(\*SuperscriptBox[\(y\), \(3\)]\)=1\>\"", ",", " ", 
     "\"\<Find extrema of f(x)=12+6\!\(\*SuperscriptBox[\(x\), \
\(2\)]\)-\!\(\*SuperscriptBox[\(x\), \(3\)]\)\>\"", ",", " ", 
     "\"\<Find extrema of g(w)=tan (w)sec(w)\>\"", ",", " ", 
     "\"\<find the taylor expanision of g(w)=tan (w)sec(w) at w=\[Pi]/4\>\"", 
     ",", " ", 
     "\"\<Find the MacLauren Expanision of z(n)= (z+1\!\(\*SuperscriptBox[\()\
\), \(1/2\)]\)/(z+4)\>\"", ",", " ", "\"\<Find the Derivative\>\"", ",", " ", 
     "\"\<What is the Deriviative\>\"", ",", " ", 
     "\"\<Evaluate the derivative\>\"", ",", " ", 
     "\"\<Integral of ln(x) dx\>\"", ",", " ", 
     "\"\<Integral of f(x)=x ln(x) from 0 to 10\>\"", ",", " ", 
     "\"\<Integral of tan(x)\>\"", ",", " ", 
     "\"\<Integral of (1+x\!\(\*SuperscriptBox[\()\), \(1/2\)]\)\>\""}], 
    "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7710613709186153`*^9, 3.771061384907164*^9}, {
   3.7710616124774094`*^9, 3.7710616655644417`*^9}, {3.7710617100829606`*^9, 
   3.7710618108407326`*^9}, {3.771061850599373*^9, 3.7710619681588216`*^9}, {
   3.771062006314955*^9, 3.7710621511121435`*^9}, {3.771062535101706*^9, 
   3.7710626530990715`*^9}, {3.771062685514902*^9, 3.771062905169672*^9}, {
   3.771083128947034*^9, 3.7710831451490726`*^9}, 3.7710834388275137`*^9, {
   3.771083811256686*^9, 3.7710838448272*^9}, 3.771101228641127*^9, {
   3.771103378443286*^9, 3.771103451873962*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"222a3863-676a-4a91-8ed5-bf086815e19f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"calcQsIntegral", "=", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Find \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) \
\[Minus]18\!\(\*SuperscriptBox[\(x\), \(2\)]\) + 7 dx\>\"", ",", " ", 
      "\"\<Find \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) dx \
\[Minus]18x + 7\>\"", ",", " ", 
      "\"\<Evaluate \[Integral]z^6 + 4z^4 \[Minus] z^2 dz\>\"", " ", ",", 
      "\"\<Determine f (x) given that f'(x) = 6x^8 \[Minus] 20x^4 + x^2 + 9\>\
\"", ",", " ", "\"\<Find \[Integral] 2cos (w) \[Minus] sec(w) tan (w)dw\>\"", 
      ",", " ", 
      "\"\<Find \[Integral]12 + csc(\[Theta] ) [sin (\[Theta] ) + \
csc(\[Theta] )] d\[Theta]\>\"", ",", "\[IndentingNewLine]", 
      "\"\<What is \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) \
\[Minus]18\!\(\*SuperscriptBox[\(x\), \(2\)]\) + 7 dx\>\"", ",", " ", 
      "\"\<Find \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) dx \
\[Minus]18x + 7\>\"", ",", "\[IndentingNewLine]", 
      "\"\<What is the integral of sin(2x)?\>\"", ",", " ", 
      "\"\<Find the area under the curve of |x| from -1 to 1\>\"", ",", " ", 
      "\"\<What is the area under the curve \!\(\*SuperscriptBox[\(sin\), \(2\
\)]\)x from 0 to \[Pi]/2\>\"", ",", " ", "\"\<Find the integral\>\"", ",", 
      " ", "\"\<What is the integral of x dx\>\"", ",", " ", 
      "\"\<Derivative of f(x)=\!\(\*SuperscriptBox[\(x\), \(2\)]\)\>\"", ",", 
      " ", "\"\<Integral of x dx\>\"", ",", " ", 
      "\"\<Integral of \!\(\*SuperscriptBox[\(e\), \(y\)]\) dy\>\"", ",", 
      " ", "\"\<Derivative of \!\(\*SuperscriptBox[\(x\), \(3\)]\)\>\"", ",", 
      " ", "\"\<Derivative of x\>\"", ",", " ", 
      "\"\<Derivative of f(x)=20 ln(x)\>\"", ",", " ", 
      "\"\<Derivative of x/(x+1\!\(\*SuperscriptBox[\()\), \(2\)]\)\>\"", ",",
       " ", "\"\<Derivative of \!\(\*SuperscriptBox[\(x\), \(n\)]\)\>\"", ",",
       " ", "\"\<Derivative with respect to x\>\"", ",", " ", 
      "\"\<Derivative of \!\(\*SuperscriptBox[\(x\), \(3\)]\)\>\""}], "}"}]}],
    ";"}], " "}]], "Input",
 CellChangeTimes->{{3.7710629557064366`*^9, 3.771063175011337*^9}, {
  3.7710705208432536`*^9, 3.7710706472117586`*^9}, {3.771083157663864*^9, 
  3.7710831939580765`*^9}, {3.771083409161805*^9, 3.7710834215095205`*^9}, {
  3.7710838521801443`*^9, 3.771083899380905*^9}, {3.77108395416064*^9, 
  3.7710839612743645`*^9}, {3.7710840024611387`*^9, 3.7710840037268524`*^9}, {
  3.7710893022644253`*^9, 3.7710893039790277`*^9}, {3.771100980753831*^9, 
  3.771101027715567*^9}, {3.7711029731478615`*^9, 3.771103032713256*^9}, {
  3.771104068418116*^9, 3.7711041148737974`*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"82bd9a2c-9f48-402b-90c8-7cb9d90eee9e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"calcQs", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"{", 
     RowBox[{
     "calcQspcalc", ",", " ", "calcQsIntegral", ",", " ", "calcQsderivs"}], 
     "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771063178168848*^9, 3.771063202032632*^9}, {
   3.7710832208648396`*^9, 3.7710832477843122`*^9}, 3.7711030484073133`*^9},
 CellLabel->"In[35]:=",ExpressionUUID->"9c835307-f52b-4c42-8b0e-c58da6c73503"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7710883122777357`*^9, 3.7710883204823074`*^9}, {
  3.771088420900962*^9, 3.771088426201332*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"d1ec6521-5d52-4665-927a-fa1d165f502a"],

Cell[CellGroupData[{

Cell[BoxData["wpgRadicals"], "Input",
 CellChangeTimes->{{3.77111168491525*^9, 3.771111689080016*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"92ef74ea-3f9f-40e0-96ef-8699243bb53a"],

Cell[BoxData["wpgRadicals"], "Output",
 CellChangeTimes->{3.7714077346279955`*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"a949bb7a-a4bf-4517-95ee-fff31b4a867d"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"algebra2set", "=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{
      "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\algebra_2_set.pdf\>\"", ",", " ", "\"\<Plaintext\>\""}], 
      "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<.)\>\"", ",", " ", "\"\< \\r\\n\>\""}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"algebra2set", "=", 
   RowBox[{"algebra2set", "/.", 
    RowBox[{"\"\<\>\"", "\[Rule]", "Nothing"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7711120076672792`*^9, 3.7711120625554457`*^9}, {
   3.7711121558516006`*^9, 3.771112156475644*^9}, {3.7711123345075665`*^9, 
   3.7711123519011602`*^9}, {3.7711124575278187`*^9, 
   3.7711125792356033`*^9}, {3.7711129500643063`*^9, 
   3.7711129744580154`*^9}, {3.7711135154660063`*^9, 3.771113528502914*^9}, {
   3.7711135747654824`*^9, 3.7711136239169626`*^9}, {3.7711136598725877`*^9, 
   3.7711136673051133`*^9}, {3.7711138005283823`*^9, 3.771113882444995*^9}, {
   3.771113923861324*^9, 3.7711139967667465`*^9}, 3.7711140366803074`*^9, {
   3.771115247995644*^9, 3.771115290794779*^9}, {3.7714075129150295`*^9, 
   3.7714075212076015`*^9}, {3.7714079867932816`*^9, 
   3.7714079961101527`*^9}, {3.771408041492993*^9, 3.771408086566082*^9}, {
   3.77140893564396*^9, 3.7714089415483866`*^9}, {3.7714099626364465`*^9, 
   3.7714100979099627`*^9}},
 CellLabel->
  "In[222]:=",ExpressionUUID->"75320f2e-dcf8-44e4-a6d6-2ae166718cea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.7714100755563707`*^9, 3.771410080688718*^9}},
 CellLabel->
  "In[221]:=",ExpressionUUID->"b66b3ba1-ab74-45a5-8467-dbae2cc45c3d"],

Cell[BoxData[
 RowBox[{"{", "3470", "}"}]], "Output",
 CellChangeTimes->{3.7714100819928193`*^9},
 CellLabel->
  "Out[221]=",ExpressionUUID->"1bda458b-b2f2-4d0c-80c7-0a6ba55f0ae6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"algebra2Qs", ",", " ", "algebra2set"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.7711153238971057`*^9, 3.7711153701043634`*^9}, 
   3.7714075253799353`*^9},
 CellLabel->
  "In[227]:=",ExpressionUUID->"4d882cf2-cadf-422e-aa45-f2e75454a042"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"algebra2Qs", "=", 
    RowBox[{"Flatten", "[", "algebra2Qs", "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Algebra", " ", "2", " ", "eats", " ", "eaverything", " ", "now"}], ",", 
    " ", 
    RowBox[{"but", " ", "this", " ", "is", " ", "good"}], ",", " ", 
    RowBox[{
    "can", " ", "do", " ", "for", " ", "the", " ", "rest", " ", "of", " ", 
     "the", " ", "types"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.771112075136426*^9, 3.771112125458478*^9}, {
   3.7711123851826544`*^9, 3.7711124082559347`*^9}, {3.7711140417686634`*^9, 
   3.7711140462529755`*^9}, 3.7711140840312815`*^9, {3.7711141663660173`*^9, 
   3.7711141784225335`*^9}, {3.7711142415860786`*^9, 3.7711142709325714`*^9}},
 CellLabel->
  "In[228]:=",ExpressionUUID->"c682d2c2-cecf-4416-9beb-d00d0da3e4f3"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7711121110671053`*^9, 3.771112115205637*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"568cbba2-205d-43c3-b6bd-e23a73e39cba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1set", ":=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{
      "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\algebra_1_set.pdf\>\"", ",", " ", "\"\<Plaintext\>\""}], 
      "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<.)\>\"", ",", "  ", "\"\< \\r\\n\>\""}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771114780231673*^9, 3.771114802941305*^9}, {
  3.7711149655562925`*^9, 3.771115000928453*^9}, {3.7711150811480117`*^9, 
  3.771115086204361*^9}, {3.771410103166297*^9, 3.77141010406636*^9}},
 CellLabel->
  "In[224]:=",ExpressionUUID->"b11e39b9-7017-44bc-a385-0b07d552a794"],

Cell[BoxData[
 RowBox[{
  RowBox[{"settoappend", "=", 
   RowBox[{"algebra1set", "/.", 
    RowBox[{"\"\<\>\"", "\[Rule]", "Nothing"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7711148118338814`*^9, 3.771114908463847*^9}, {
  3.7711150974731426`*^9, 3.7711151965200577`*^9}, {3.771408232430397*^9, 
  3.7714082604615946`*^9}, {3.7714101141711454`*^9, 3.771410134840543*^9}},
 CellLabel->
  "In[226]:=",ExpressionUUID->"f2914d32-3898-4e48-bf07-c89efc28a175"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"algebra1Questions", ",", " ", "settoappend"}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771115205960713*^9, 3.771115225430067*^9}},
 CellLabel->
  "In[170]:=",ExpressionUUID->"45bf30fe-2ff2-417c-b0d5-9bcaed87df8f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1Questions", "=", 
   RowBox[{"Flatten", "[", "algebra1Questions", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7711152299584055`*^9, 3.77111523891906*^9}},
 CellLabel->
  "In[229]:=",ExpressionUUID->"cf4f547c-9e66-4b6e-b324-93cb9ff9ea9f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"algebra1Questions", ",", " ", 
    RowBox[{"StringSplit", "[", 
     RowBox[{
      RowBox[{"Import", "[", 
       RowBox[{
       "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\Maths Question Generator.pdf\>\"", ",", " ", 
        "\"\<Plaintext\>\""}], "]"}], ",", " ", "\"\<\\n\>\""}], "]"}]}], 
   "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.771149045287571*^9, 3.771149110757823*^9}, {
  3.771151025984123*^9, 3.7711510342007504`*^9}, {3.7714101914471455`*^9, 
  3.771410213824761*^9}},
 CellLabel->
  "In[231]:=",ExpressionUUID->"102780d6-70d9-4d69-b9aa-dab665404545"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1Questions", "=", 
   RowBox[{"Flatten", "[", "algebra1Questions", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771149127407035*^9, 3.771149145932294*^9}},
 CellLabel->
  "In[232]:=",ExpressionUUID->"796a2e9c-8057-4199-a61d-18737ea5c77f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{"algebra1Questions", ",", " ", 
   RowBox[{
    RowBox[{"MatchQ", "[", 
     RowBox[{"#", ",", "\"\< \>\""}], "]"}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.771149200951104*^9, 3.771149240069831*^9}, 
   3.771173306999384*^9, {3.7714102298938265`*^9, 3.771410249607214*^9}},
 CellLabel->
  "In[234]:=",ExpressionUUID->"5e97059b-605d-41af-bf6a-9add47d91f50"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{
  3.7714077355960608`*^9, {3.7714102450588875`*^9, 3.7714102502672663`*^9}},
 CellLabel->
  "Out[234]=",ExpressionUUID->"4248e821-a147-4083-895e-cb19278b6fa8"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7711723935283384`*^9, 3.7711724196759048`*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"a34bd91b-332e-47df-9227-c111d8b411a5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"polydiffurl", "=", 
  "\"\<https://math.ly/api/v1/calculus/polynomial-differentiation.json\>\""}]]\
, "Input",
 CellChangeTimes->{{3.7711514475428724`*^9, 3.7711514768209143`*^9}, {
  3.7711518244068594`*^9, 3.771151863997607*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"3622a052-38d9-47fa-b1f3-baec31be1a1e"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/polynomial-differentiation.\
json\"\>"], "Output",
 CellChangeTimes->{3.7714077356560664`*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"40804649-e1d7-4cf7-ad23-48c9fd54c124"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"s", "=", 
   RowBox[{
    RowBox[{"Import", "[", 
     RowBox[{"polydiffurl", ",", " ", "\"\<Data\>\""}], " ", "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{"s", "=", 
  RowBox[{"\"\<question\>\"", "/.", "s"}]}]}], "Input",
 CellChangeTimes->{{3.7711514831933584`*^9, 3.7711515672774487`*^9}, {
   3.7711517082965136`*^9, 3.771151743302946*^9}, {3.7711518471804204`*^9, 
   3.7711518890793953`*^9}, {3.7711520237376146`*^9, 3.771152169092266*^9}, {
   3.7711528706872387`*^9, 3.77115295321529*^9}, {3.771153038758667*^9, 
   3.771153051718769*^9}, 3.771153756577385*^9, {3.771157365990517*^9, 
   3.7711573666509705`*^9}, 3.7711575213869724`*^9},
 CellLabel->"In[52]:=",ExpressionUUID->"caaa5ecf-7ab4-401d-a3be-1c829e3f17a2"],

Cell[BoxData["\<\"<mfrac><mo>&DifferentialD;</mo><mrow><mo>&DifferentialD;</\
mo><mi>x</mi></mrow></mfrac><mo> ( </mo><mrow><mo> - \
</mo><mn>4</mn></mrow><mi>x</mi><mo> + </mo><mn>13</mn><mo> ) </mo>\"\>"], \
"Output",
 CellChangeTimes->{3.771407736376134*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"1879eb5e-eecd-4bf1-af82-b0af6380d325"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Clear", "[", "questionClassifier", "]"}], "\[IndentingNewLine]", 
 RowBox[{"questionClassifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<algebra 1\>\"", "\[Rule]", "algebra1Questions"}], ",", " ", 
      RowBox[{"\"\<algebra 2\>\"", "\[Rule]", "algebra2Qs"}], ",", " ", 
      RowBox[{"\"\<calc\>\"", "\[Rule]", "calcQs"}]}], "|>"}], " ", ",", " ", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}], ",", " ", 
    RowBox[{"Method", "\[Rule]", "\"\<NeuralNetwork\>\""}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.771063215443462*^9, 3.7710633502457542`*^9}, 
   3.771071823090603*^9, 3.7710828946484957`*^9, {3.771083581540978*^9, 
   3.7710835945884523`*^9}, {3.771084258837575*^9, 3.771084260138427*^9}, {
   3.771089106079487*^9, 3.771089118126458*^9}, {3.771089317703972*^9, 
   3.7710893251804914`*^9}, {3.771089589321455*^9, 3.7710895907860775`*^9}, {
   3.771101595283745*^9, 3.7711015962158113`*^9}, {3.771101911187518*^9, 
   3.771101914767723*^9}, {3.771101993407687*^9, 3.771101997373905*^9}, {
   3.7711020881095395`*^9, 3.771102097689073*^9}, {3.7711022108895693`*^9, 
   3.771102212561736*^9}, {3.771102244507637*^9, 3.7711022454461393`*^9}, {
   3.7711023227187014`*^9, 3.7711023237187867`*^9}, {3.7711024319268856`*^9, 
   3.7711024687285357`*^9}, {3.7711026925353866`*^9, 
   3.7711027066808434`*^9}, {3.7711027405195894`*^9, 
   3.7711027412324157`*^9}, {3.7711028088330135`*^9, 
   3.7711028648262777`*^9}, {3.7711029558182993`*^9, 3.77110295696642*^9}, {
   3.7711032411393385`*^9, 3.7711032422553596`*^9}, {3.7711032955593557`*^9, 
   3.7711032996276913`*^9}, {3.771103336061694*^9, 3.771103338980618*^9}, {
   3.771103370475107*^9, 3.7711033714511166`*^9}, {3.771103765164311*^9, 
   3.771103786799837*^9}, {3.7711038503910933`*^9, 3.771103876489087*^9}, {
   3.7711039191807985`*^9, 3.7711039200623417`*^9}, {3.7711042220788345`*^9, 
   3.7711042229363375`*^9}, {3.7711048598276873`*^9, 3.771104865050381*^9}, {
   3.7711051200758305`*^9, 3.7711051210515237`*^9}, {3.7711052010468435`*^9, 
   3.7711052118901978`*^9}, {3.7711052803879633`*^9, 
   3.7711053140416017`*^9}, {3.7711053727435007`*^9, 
   3.7711053821161613`*^9}, {3.771105449918454*^9, 3.7711054605800343`*^9}, {
   3.771105546996733*^9, 3.7711055473579893`*^9}, {3.7711058366348667`*^9, 
   3.771105838832412*^9}, {3.7711059259343805`*^9, 3.771105934874683*^9}, {
   3.771115446077047*^9, 3.7711154471611223`*^9}, {3.7711502712421603`*^9, 
   3.7711502722062826`*^9}, {3.771158783329757*^9, 3.771158784547639*^9}, {
   3.771172246946286*^9, 3.771172250715967*^9}, {3.771410605095007*^9, 
   3.7714106062590704`*^9}, {3.77141065532251*^9, 3.771410665411251*^9}, {
   3.7714257129443073`*^9, 3.771425716612913*^9}, {3.771425930412616*^9, 
   3.771425935242029*^9}, {3.771426020951641*^9, 3.771426021861288*^9}, {
   3.7714262381336164`*^9, 3.771426238932184*^9}, {3.771426482848578*^9, 
   3.7714264833619432`*^9}, {3.771428755019416*^9, 3.771428759832837*^9}, {
   3.771428844102657*^9, 3.771428845100365*^9}},
 CellLabel->
  "In[733]:=",ExpressionUUID->"4a6c27e2-f698-4942-9e0f-b4b815b04b6b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Nominal\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"algebra 1\"", "\"algebra 2\"", 
                    "\"calc\""}, "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Nominal\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"algebra 1\"", "\"algebra 2\"", 
                    "\"calc\""}, "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["10893", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 1574584, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            5411350634152402544085200221455357445350659291852405695808, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 5411350634152402544085200221455357445350659291852405695808,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellEditDuplicate->True,
 CellChangeTimes->{
  3.7714077774805465`*^9, 3.771408063593605*^9, 3.7714081910423794`*^9, 
   3.771408280093029*^9, 3.7714090209519653`*^9, 3.7714103382648897`*^9, 
   3.771410611943468*^9, {3.7714106589027596`*^9, 3.771410677420034*^9}, 
   3.77141154229117*^9, 3.771425736896944*^9, 3.7714259367591076`*^9, 
   3.7714261789570317`*^9, 3.7714262414429693`*^9, 3.7714264404375763`*^9, 
   3.771426566565623*^9, 3.7714283420994425`*^9, 3.7714286260722804`*^9, 
   3.7714287110767517`*^9, 3.771428762070429*^9, 3.771428949119955*^9, 
   3.7714293728233404`*^9, 3.771429769027283*^9},
 CellLabel->
  "Out[734]=",ExpressionUUID->"39b52277-7308-4ace-b265-a1786e1f1fcc"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"calcIsCalc", "=", 
   RowBox[{"questionClassifier", "[", 
    RowBox[{"calcQs", ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<calc\>\""}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"calcIsAlgebra1", "=", 
   RowBox[{"questionClassifier", "[", 
    RowBox[{"calcQs", ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 1\>\""}], "}"}]}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"calcIsAlgebra2", "=", 
   RowBox[{"questionClassifier", "[", 
    RowBox[{"calcQs", ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 2\>\""}], "}"}]}],
     "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"algebra1IsCalc", "=", 
   RowBox[{"questionClassifier", "[", 
    RowBox[{"algebra1Questions", ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<calc\>\""}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"algebra1IsAlgebra1", "=", 
   RowBox[{"questionClassifier", "[", 
    RowBox[{"algebra1Questions", ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 1\>\""}], "}"}]}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"algebra1IsAlgebra2", "=", 
   RowBox[{"questionClassifier", "[", 
    RowBox[{"algebra1Questions", ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 2\>\""}], "}"}]}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"algebra2IsCalc", "=", 
   RowBox[{"questionClassifier", "[", 
    RowBox[{"algebra2Qs", ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<calc\>\""}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"algebra2IsAlgebra1", "=", 
   RowBox[{"questionClassifier", "[", 
    RowBox[{"algebra2Qs", ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 1\>\""}], "}"}]}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"algebra2IsAlgebra2", "=", 
   RowBox[{"questionClassifier", "[", 
    RowBox[{"algebra2Qs", ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 2\>\""}], "}"}]}],
     "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{
  3.7711580435433702`*^9, 3.7711581045325623`*^9, {3.771158178293239*^9, 
   3.7711582669439397`*^9}, {3.7711583616162257`*^9, 
   3.7711584535961103`*^9}, {3.7711585350279884`*^9, 
   3.7711585464551077`*^9}, {3.7711585872250843`*^9, 
   3.7711585886280823`*^9}, {3.7711725238773365`*^9, 
   3.7711725272497325`*^9}, {3.7711727585554667`*^9, 3.771172776237033*^9}, {
   3.7714257394225016`*^9, 3.771425753421451*^9}, 3.771426588098028*^9},
 CellLabel->
  "In[735]:=",ExpressionUUID->"5652c7f2-04fa-4c09-af67-9f4f252f0675"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lp2", "=", 
  RowBox[{"ListLogPlot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#calcu", "/", "#alge"}], "&"}], "@", " ", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<calcu\>\"", "\[Rule]", " ", "calcIsCalc"}], ",", " ", 
       RowBox[{"\"\<alge\>\"", "\[Rule]", "calcIsAlgebra1"}]}], "|>"}]}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Training Set\>\"", ",", 
       "\"\<Calculus Probability divided by highest other\>\""}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.771158271668297*^9, 3.7711583575393267`*^9}, {
  3.771158458432547*^9, 3.771158592709983*^9}, {3.7711725459129972`*^9, 
  3.7711725536575017`*^9}, {3.7714257576324434`*^9, 3.771425892017308*^9}, {
  3.771426598929728*^9, 3.771426599207924*^9}},
 CellLabel->
  "In[744]:=",ExpressionUUID->"1571ed99-a23c-4960-8b79-e86ea7951882"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     PointBox[{{1., -3.475636601448059}, {2., -3.4739705324172974`}, {
      3., -3.8951642513275146`}}]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Training Set\"", TraditionalForm], 
    FormBox[
    "\"Calculus Probability divided by highest other\"", TraditionalForm]},
  AxesOrigin->{0., -3.928125050119175},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{
     Charting`ScaledTicks[{Log, Exp}], 
     Charting`ScaledFrameTicks[{Log, Exp}]}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 3}, {-3.928125050119175, -3.4739705324172974`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->FrontEndValueCache[{Automatic, 
     Charting`ScaledTicks[{Log, Exp}]}, {Automatic, {{-3.912023005428146, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.0200\"", 0.02, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 4}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.7942399697717626`, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.0225\"", 0.0225, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 4}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.6888794541139363`, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.0250\"", 0.025, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 4}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.5935692743096115`, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.0275\"", 0.0275, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 4}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.506557897319982, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.0300\"", 0.03, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 4}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-4.045554398052668, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-4.017383521085972, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.989984546897858, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.9633162998156966`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.937340813412436, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.8873303928377747`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.863232841258714, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.83970234384852, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.816712825623821, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.7722610630529876`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.750754857832024, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.7297014486341915`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.7090821614314557`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.6690768268177565`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.649658740960655, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.6306105459899607`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.611918412977808, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.575550768806933, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.5578511917075324`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.540459448995663, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.523365015636363, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.4900285953687713`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.473768074496991, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.4577677331505496`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.4420193761824103`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.4265151896464454`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}}}]]], "Output",
 CellChangeTimes->{{3.7714258620280905`*^9, 3.771425910707594*^9}, 
   3.7714259442959504`*^9, 3.7714261991008043`*^9, 3.7714262577714686`*^9, 
   3.771426453667981*^9, {3.771426591193228*^9, 3.7714265999013987`*^9}, 
   3.771428723827833*^9, {3.77142877113487*^9, 3.771428782952287*^9}, 
   3.7714289580086517`*^9, 3.771429407505908*^9, 3.7714297850737057`*^9},
 CellLabel->
  "Out[744]=",ExpressionUUID->"f62ea7a7-2d26-43a4-a439-d2973b18ff6b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lp", "=", 
  RowBox[{"ListLogPlot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#right", "/", "#wrong"}], "&"}], "@", " ", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<right\>\"", "\[Rule]", " ", "algebra1IsAlgebra1"}], ",", 
       " ", 
       RowBox[{"\"\<wrong\>\"", "\[Rule]", " ", "algebra1IsAlgebra2"}]}], 
      "|>"}]}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Training Set\>\"", ",", 
       "\"\<Algebra 1 Probability divided by highest other\>\""}], "}"}]}], 
    ",", " ", 
    RowBox[{"GridLines", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", " ", 
       RowBox[{"{", "1", "}"}]}], "}"}]}], ",", " ", 
    RowBox[{"GridLinesStyle", "\[Rule]", "Red"}]}], "]"}], " "}]], "Input",
 CellChangeTimes->{{3.7711586979645214`*^9, 3.771158763987009*^9}, {
  3.7711589034919567`*^9, 3.7711589198291035`*^9}, {3.7711638938445168`*^9, 
  3.771163931375168*^9}, {3.7711726666542597`*^9, 3.7711726714516697`*^9}, {
  3.7711728159418964`*^9, 3.77117289478926*^9}, {3.7711729758869505`*^9, 
  3.7711729969018683`*^9}, {3.7711730367321424`*^9, 3.7711730394760923`*^9}, {
  3.771173076851448*^9, 3.7711731307854276`*^9}},
 CellLabel->
  "In[745]:=",ExpressionUUID->"a58ec1c8-41a6-4b44-8b8b-48c35008ce34"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.003666666666666667], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxdfX9AlFXW/2yyRa7ZVGxRkU5GLttSsUbFtiRPSUVFOSpb5JJOSkaGOioa
KcqjkpKSjoqKijgqGhkVGVtUFJORka/VrJGRuToV32Jb16glo7L4Op9zzr3e
5/0j9vOec88995xzfzzP3OfjpROmjX7wNJfLdfbvXK7oX/q/7oyT/9t+eFN7
C/8/rL6+vox7wv9hHGv99uR/b7rmBcbuqPybK6/uZRwXxaX+579iHG/9xuUK
tXuOMk6woo0qVoi+B/IbnxX5kKg84EnqZpwIHFj/LeOhUew64BF/kqLtXX8/
/F/GV0Sx79NLRD85qh++7Uzp76oornr/8x8Zp0Rx9z0rRP/P0fb2JaHPGA9D
f6tf/5zxNVFsf/3c94xTo9ibkyL42uj4+y44vofxdWj/8gHx93rYv6f0G8Zp
Uf3b9kX+x/gvUX3fnF9+ZnwD7M297jDjv0blva8XfMc4PYqtoyM+YnyjFXPS
/hPndTAejvg9OFHimRG11/LZ0yK3ovJQ403HCNvAKdsK+4VIflMUV/z5yuMs
B44sHSH93xzF7tdv/oXlwL4lb/SwfEQUdw35M8fbHoF8nVj0Ncszo9g6+A37
Z2diPKlLuT/XLYjv3HNEfgviMWzg/2P5rVF5+NyxYv9WxPf5odL/bRhvX4OM
77aoPDD6+RMsz8J4/rv4J5ZnoX5v72V91+2oz4+HS/+3R/XLU8oknndEsWvK
O5x/Gzj4xW3S/51Re5v/bzfXl30n9Lc178sgeTbGc869XP92NvJRc7fU613Q
n+c5yHJg94FzxP+7o/hEZ0TyczfG+/b1Ul8jo/5HShbI+EdG9e0x14p/XuA9
yeyfBdx54Y2/CZG+F/nqkXyFIA998YPkZ1RU3hbzeBe3HxWVx39YwfVjA9df
W/UDtx8V9e9I5yLxb3RU7hnm4vq3gIPr/4/r3ybc/zyORwg4VDJX6m8M1qeP
h3/B7ccg/40dH3P7MdaJkwrbZ7Zxe8iznr9A/M9BfNtdHE8rB/HLOcbz1c6x
fjpZD9u3H+H20PftDct8/5sVXTvTv+D5af0tKvdPSeL1zwaONO/h8YSAg+/P
lPXmHoznPcEWsO8DwfY9yJ/SDwH79qn296K9klvAPoVtYI+yHwK2lH1XLvzT
7XMxH3X7XNNeCNjW/t+H+On295n92fdZvScDetbQl6neQ5AHldw11uzPGmvG
xx4bzcd43b9D3/V3U99yYBs4ouIV+ruj/zxgJbfyovY9Ctt5jvjnOdrf74g/
sGevan+/qR+6Pzqewdr/cZCrfFjAPh2/cdavJ8cfVu3HmfF2jTfzYwHrerLH
R/2vz31e6g/y7E8SpL0vihvar+L1z+PD+hfezfufBXla7PDTQqQO7PrL21Lf
PtTjt1URwkHI7Xc+4/kZArbqw6wf8UX3J1f+ap5PrgewPv7B5vnkAR7/wAFu
bz2A+XX2pHcI+x6A/YTBvF7YD0T77474eDzBB6z+J//coOoNcpeKbwT2W3T+
Jpj59UxA/vR8BI4o7APW9WID6/kQBNb5CzlwxGHfNRH2df8THf1PNNv7gE+p
b4c8ONEcbwhyPV8iE836duWb/XnyzfFZ+ciPwr58cz7a+Y7+yZ6ebw77kXz0
r+v3QcwH3f+D0Ff1bgFH1Hh8wLaO/4PIn8JBaq/nq0M/8qDpr2uSY/zAer5a
k8z8+CY5xk9y3T/kRwKnf8n9Q+67t4nrOQIc3tpf9o+HojjUMlf6B7YvnMr7
rUXyG357iPsH9k/YK+cNYM+RON5fgw/hvLLnFp6PIeBIwzM8XyLA1vcj+7j/
AvTXuJ/PAx5g99JreL2wgH3W5Xze8RWgHh5S56kCM97BAuRX1x/JdfwLzHi6
Hka8df0D6/lmPWzG1/dw1L5eL+2HEW8d/4dNf0LAej+NOPpzTQbW+Qe2df+T
TX0fsK5Pm7Cu/8nwR89/h/2Io73rEcf4gS1d/8B6f/E9YtqzHzHHF3wE80nH
n9rr+AOfsn8XmvHyAJ+yHxWa/fkKsR5nyfpqF5rxChaa+1vI0T5C/enzxxQT
e6bgPKf7h1yvRz5g171fdPL4oX99dQo/DwQhD+04zPUZovZ5O6X+ga2Eh6X/
qVa/k/8devHr3P9UMx/WVMf4Hdieau4fwalmPEJTzfUu4mjvmob9U49/WlR+
Sv0D23r9Aw7dmCf737To+WDzlKP8PBckeyUZ/DwUmoZ4jjuP528E7Ssu7Jbn
X38Ud7uH8/rh9kN/+wviD+ShIzMYp/ij9ntuuF7O65DHr5j+K2EvcOSbQl6f
fMDB4+9xez/sl87K5f3fhjw2YyyvRwF/dDx9O2o+5fH4rV9O4iul3hqgf8r8
9pvn4TDs9+l695v56QY+Jf7Tzfi6gS29HgDr+kyZbra3ppv+eKdjfDpfkOt6
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
XeXQnzqB+48tj+qHJvzI/rqBXW+fyeONB7bC+WzfQ/I3F3P/SeXm70kp5fCv
59o2wmnAm/Nr5L5wOer3uu/f5PyT/USX5B/6LXcV8/kyt9y8D+Cj9pes4N9X
C9Derp3F508/cCDxv3yfqZjkp1tyvxft7asaOZ7lkHtCLtn/y7E/elT+4c8H
k8u4foLk379zOT51ZO/5Xdx/A+x1PXuM66OJ5OVxPN9CFL9h17E/beTfb1Nl
/yd8xjReXzuAvS8+KPO/HPvNWTdy/Logd4/9jter7nLsjzeq+U/+JmfK+68n
ovqRmkRen2OB69LO4Pvb7ifwvLqwhOs1HnJ7f5bMf2DXOPX+5wm8n7uvgseT
Arln5L0cr7QnsJ621sv7c9j31N/E9Zb1BJ4vhp7J8fOifc5rl3H7XOpvRoa8
XyQ8VvovAA7eeBbvV37011fXGOb8A48/c5Ss/9AP5G7j+ihH/xnzLjnA+Yd+
xmcP8v27Khr/3h+53oLUX1KrrP/A1oI35fd6iu8Lt8r8Bx4wyJL9n+Lz6p1y
/n/Cio0OWM1/9N9yYxu37yD/b6+S/JP/j+5i/7uesM45+Sdb2nfT+AeNZn97
yb+CKsn/0uh41w2YwueP2KWwXzpJzv9LEd+bGvn8E7+Uvi84zvqepdH8+fvd
wPWWBH1r00LOTwrkocN3cT7TlmK/zRf/LMjDP7/I8ycL9vtuiefzsXcpzjue
bbx/5JK9DZWs74P+tPC7cv4nee4c+b0VOC3xDMbF5N+nF8r3AcC9JcN4vpUD
hzrjuX4D5O8MNf8h90zP4HgHKT73tfF9ijpq/8/tsv8vtb496eBIad9E/l0i
78dD1L5O7pO0Adue7zm/YehbV7ZwvjooHo9X8Pobgb57boDH10X9/+YRjk/3
Uty/f1TNf8h9h2+R7z+WRXG3u4LzG7ssat+7/K/cnxtyd94bXH/xwPWtQ3g9
8gD7N+/i+koC9n7+jvxevgz1Yp3G+2Ea5IHuDXy+t4CtAXJfNQtYryfeZaiP
riR5/ofcXrmL9X2Qh7b/yPVYQPb6y+9rfsIvvcXxLV6G/eNC9fszyf90Orcv
J/+/fofnZ4D6i/2Yz49VwJ4fR/D4gstwP/+eND6P12G8GStkPjQgnp5tv/D7
zqZl5nk7ROP96nleT9vInyse5PUuDBxMl++JOoBDDWs4fhFq3/YR13MX8NFB
e+T3Dmp/5a1cT73wt+XyPfL9TQX2zws/k/e/FVH9yFcvSv4rouO598txHO94
6Ie+/C3HwwN9vf4mQW59/AnbT0H7jH6j2V4acF97kP21KlDPN0v7LJI/+SzP
Jy/1t/Z77i8X/dlfe//J+Yc8OPoyjndBBT1v/oPnlx9yj72SzxvFaB9eJt8b
2GTvg4f4fFRO/uy+judXoMI6ftLgg2r+Qz/09F38/juI/l6eN5jXg7oKfH+w
du6LpN9QEY33kfT1vJ40UbxLj8n3TBSvEffx/GiD/ZTpD8n8h/2RRcmSfxrv
OJfMf7L3TirHqwvYbi+R57+KaL1ZlXGtnP8Ka2A0rDIe15PR/nKv+g0/r8U+
af3vZIe3qftAkO+7PZ+/B4sHLr9S9D1PYj+/5hqOZxLwiuWreb6lQN8acYfk
H/K+/33J+7H1JMb/8DR+v5j1JObn5S283nuftK45ecApPXoL+ZMLe+GssRxv
H+xlnBgr53/I9fj8kP9pRALP52LIs5LFfxvY3pzD61c59Fv+sYr9DUAeav+Y
x1dF8rm3cb0FaXzz5Xu8OtJ/6XPOVwP5F5Hv2ZogDxZtY39DFI+Y63h/bCP/
1foXfhLnqUev4PWj40nkz6d+36X+A2dyfXUhnnbZdPn9B3J3WQv72wvsCb0l
z//L0f7Ro7xexgK7Vsn5170czwe9I3n+xUPuyfqv3I8ADh3tJ89/y3EeuK1R
fv+B3L76THn/A7ll93F8rOXm/MqC3PWvYZJ/8uc3v8j7v+WI1xkb+bzlI3+u
Pp/zWwDs3+3nfPmBI61+Wf/J339m8vyz0V9WwjFuXw55cPJ9nK/Acnw/uFrN
f7KX9B+5nwlcFR7L86OOxjv+S7mvsRzPc9PV/k/+PztL7q9Bv+Dz5WyvDf6E
Vyzj9TNM8XrjJp7vHctx3/Srv67l/CM/oTMaOd9d0G+YWcH57Kb8vvc2r9+9
6L+0oFO+J16Ben6kh+s/FvhR9xx5/luB+I//kfMRvwLPd/r9D/RHzpP1KYn0
/bJ+pUBeusqS/R9480uzeTwW6fcfzvtBFnC4YZW8/1uB9wePVPN5MHcFnneW
qec/2Ptm7rncfwHaB25v5fXcD1xwxs9c/8UrMD/c/5LnP7Tv27SDf28sp/7m
if0A4WduZP0q2LPHDZXv3che9oe8v9TReMpf4vNRA7Bn8088/iaSH5T6DgEH
H5L9uQ04dMMYbh+G/ZD/He6/g+TTutjfCLW/1Mfx6iL7fb/n8XevwPlzpjr/
YTylM1fz+usKIP/vT+J6jQlg/p09kuszNhC11123je0PgDw00CvnA8j1/h8H
HDNqopwXYT+j8CKu5wTIGwZczOc5T8DqiRZIA6/viZDb1dmynpD9jAn8PUAy
sPX0FrmPQfKl0n8qsPuSqbxepQGHLkxk/XRg32/XyvdNAayv2z/j57tM8nfN
J7zeZgUQr5oijn82xh+3eyXXmxf29mem83qSQ/6UyfuY3ADq9U+j9pB/eeTP
L8Nl/6L+N7fx/M0n/fXqeZb83fss91cI7Hn9fVnf4O/Ie+/g9bEI/vZdKu2L
A1hfl/yrmeQlZK/9WVn/yN/kdF4fy4ALVvtZXo7xFt8r91sqIG+96GVeXwLU
vnIq+1MZwHo5L3Y3zxfy9+qXuP6rA7j/aYl/Qdi3p9zD60EtxlP65hL5PQ3t
A7WZbL8e42tZ8A/ORwPV668Tef1qjOrbrVfM5nptonrpmMD9N9P4L/fL8zdw
WfM8rsdWGs+uK/n9ZxvsW883cH72Qd658gfOXziA5/VUGU97IPr7jmuenLc6
SD5c5IfI/uM3cfsI1YOaz50Yf9/BefJ7DsmfuIPzcxQ4ePkjvF50kz2fnAd7
aD6Pv5rH20v1PGwrn4dP0PwKvsPrrWtlFBf+YRKPPwbYVXcJ/94Qu9K83zMA
cmuRl+ezm/BIWa/iVqK//XJeiid7NZdz/SasRL7Gv8n58kDunyr7RSJw9x8y
5Pck2Ct9XM4vyZCHXlou+wuwJ5jD97VSCR9/Q84bK833hemQl/f/lf21VprP
H5mEm2S9zoK+N8PP9ZRN42mQ86IX/vU9M5nHmwN55CXhi8iFfHDKJWwvj+L1
+wFyP5Twytm8XuVTfM74mderAsjtC7eyv4Uk3yz585O89zqOb9FK8351Mcmf
K+D5XEL5iczh9dWGvdDfT2NcBv2CMTt5vpdT+5FHOZ4VaN+y9xjvLwHgkR+9
KPOfxrNGxlO1EutRk8yn6pVWd/QFk5r/6N+alcrvK2rRPuydyPGuQz4szz+4
vutX4n3Mder3NaoHS/bfRsrPjx/u5flP2C37WTPsed6czvUbIvnat7meWsmf
Mllf2iAPvvgy+7OP4jXC4uetMNVH/8u4fTtwwzk24w6Kxzuf8fn+ENrbn5/G
+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
yeNIX+3f58OfESo/8dvN+X0RcKfyLwE4X9XjIOAYpe/Zbp6nh6B/fV5JBM5R
9TuUxqf8TSJ91f4KYL1eJwM3qv6vAu5U9ZKC/l9U9odRe+V/KuSrVf1eR/FS
+Umj8aj+bnC0T6d4Kflw4EXKX4vsqf5vBtbnk0yyp/y9FTgxqPZ/ypfy7w4a
r97/yZ7e/6m9yq+X6k/V52iKt/I/B/Jtyv49wF8o/3LJf4XHOuolj/pT9sdR
e+WPj/Kn5BOA9f6ZD5yqxjMJ7c9TuADyVpXfyTQflL1CR/ymkr8qfn4ar97/
4X+RWi+KaP6peMym+lP2iwmr+TWHxqvyWUL1r+zNB9b92TQ+5f9C8k/Fp4zm
k97/HfEpp3iqfC6FXJ+fKsi+Wu+XO+Z7gPxX688q2OunxltJ9aTqde128/m9
ivQV3uDQr6b4K39raD6p9SNI/avxbnX4V+uI5w7Kr+qvjvKv4rmTsMpPvWM9
eA7+63g3wJ+3lL+7aD1T7RtJrp//yZ7yv4nqUfn3KumreDc71uM3KD+qvxDN
X4V30/hUvFqpvd7/ab6o/tqovVov91K89PM/rTeq/t+n+Cgcxngb9f7vqO92
Wj+U/gHqX9VLB7B178P8/vEg+ssovILxIeDSmRcyPkzyyany7++gve3byN/f
fw5/XBdN+YBwJ/T7HhH9L7fj+4sJot8F7LpK9L/eHr3/GXpQ9I9S+xzRP4b+
XMlB+X5/O35PzBH977bj/eUDot8DfZ/SPw4cekD0e8n/+0T/J8JK/wT6b5ko
+r/S+MaIvmtHVD941i/8/vC0HdH3tS0PiX4McOlE0T99B70fFv1YtLfGin7/
HXg/+nfRHwC5669F/L5x4A68X80VfTfpjxP9c4G9Vwzh96dxO3C/0i/65wOf
XKBYPx72fX8U/YuA7VyphwT4m+GXehhE/qw/WQ//H3n7oW0=
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.003666666666666667],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.003666666666666667],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Training Set\"", TraditionalForm], 
    FormBox[
    "\"Algebra 1 Probability divided by highest other\"", TraditionalForm]},
  AxesOrigin->{0., -3.009793366182022},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{
     Charting`ScaledTicks[{Log, Exp}], 
     Charting`ScaledFrameTicks[{Log, Exp}]}, {Automatic, Automatic}},
  GridLines->{{}, {0}},
  GridLinesStyle->RGBColor[1, 0, 0],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 2831}, {-3.009793366182022, 1.6703189760446548`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->FrontEndValueCache[{Automatic, 
     Charting`ScaledTicks[{Log, Exp}]}, {Automatic, {{-2.995732273553991, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.05\"", 0.05, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.3025850929940455`, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.10\"", 0.1, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.6931471805599453, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.50\"", 0.5, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {0., 
       FormBox["1", TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {1.6094379124341003`, 
       FormBox["5", TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.8134107167600364`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.659260036932778, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.5257286443082556`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.4079456086518722`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.6094379124341003`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.2039728043259361`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.916290731874155, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.5108256237659907, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.35667494393873245`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.2231435513142097, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.10536051565782628`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {0.6931471805599453, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.0986122886681098`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.3862943611198906`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.791759469228055, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.9459101490553132`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.0794415416798357`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.1972245773362196`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.302585092994046, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.3978952727983707`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.4849066497880004`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.5649493574615367`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.6390573296152584`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.70805020110221, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.772588722239781, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}}}]]], "Output",
 CellChangeTimes->{{3.771410694305224*^9, 3.7714107050439873`*^9}, 
   3.771411562908627*^9, {3.771425920150321*^9, 3.771425949584708*^9}, 
   3.7714262031316805`*^9, 3.771426260952712*^9, 3.7714264538080807`*^9, 
   3.771426594290428*^9, 3.771428729803079*^9, 3.771428788799426*^9, 
   3.771428960712593*^9, 3.7714294169967747`*^9, 3.7714297953770123`*^9},
 CellLabel->
  "Out[745]=",ExpressionUUID->"55ab6427-523f-4bc2-9f65-8152fd3dba54"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"lp1", "=", 
  RowBox[{"ListLogPlot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#right", "/", "#wrong"}], "&"}], "@", " ", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<right\>\"", "\[Rule]", " ", "algebra2IsAlgebra2"}], ",", 
       " ", 
       RowBox[{"\"\<wrong\>\"", "\[Rule]", " ", "algebra2IsAlgebra1"}]}], 
      "|>"}]}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Training Set\>\"", ",", 
       "\"\<Algebra 2 Probability divided by highest other\>\""}], "}"}]}], 
    ",", 
    RowBox[{"GridLines", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", " ", 
       RowBox[{"{", "1", "}"}]}], "}"}]}], ",", " ", 
    RowBox[{"GridLinesStyle", "\[Rule]", "Red"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Export", "[", 
  RowBox[{
  "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\3pset_trained_NeuralNetwork.pdf\>\"", ",", " ", 
   RowBox[{"{", 
    RowBox[{"lp", ",", " ", "lp1", ",", " ", "lp2"}], "}"}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.771163950480488*^9, 3.771163966361644*^9}, {
  3.7711726416850667`*^9, 3.7711727266470737`*^9}, {3.7711728102008142`*^9, 
  3.771172811149503*^9}, {3.7711728436986227`*^9, 3.771172844611272*^9}, {
  3.7711729042891684`*^9, 3.7711729045893817`*^9}, {3.7711731459772415`*^9, 
  3.771173155041668*^9}, {3.7714078186095667`*^9, 3.771407818761632*^9}, {
  3.771410619264017*^9, 3.771410622004174*^9}, {3.771410726969519*^9, 
  3.7714107347740626`*^9}, {3.771411551143805*^9, 3.771411554360064*^9}, {
  3.7714259678915176`*^9, 3.7714259817153482`*^9}, {3.7714260411191463`*^9, 
  3.7714260552031565`*^9}, {3.771426490534024*^9, 3.771426491953046*^9}, {
  3.7714287963828144`*^9, 3.771428801408313*^9}, {3.771428854019704*^9, 
  3.771428856941781*^9}},
 CellLabel->
  "In[746]:=",ExpressionUUID->"5f8ee03a-5a6c-4fc8-b268-7b1aba34af42"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1: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
/iKV5LVP5XP8Ccv4ySQs49tHWPYPfsJpxX5ePwj3HdfX5GuQcHzxISMPjabx
mmvtJ7mcXyKjXX/Ujnbn0wb0v+eYWZ+aSB6YuYnvT16geIj9L7j2JL1A8Xz8
JXP+Tn3BtceL8hvLTD5nvuDmq4/wOXse8FN575mpfF6H/B/bzPwVJLmsD6EX
XPvC6O9br7mPixCW/K2l9pZcdq9ZLxpeoPi99N1+Yz/ak/wf47YfDyzzEeFg
fpbxVyrh+htOm/nMS1juBzLHuP7xEQ785rhZf/2q/QDq2/6DY6L3X71O3WfG
V2iMG88wyst9AGHJ11oq77u2g7lfaUD5H3YY3AT9ZP15kbCtH/+i217Si+59
QuqL5F+Z/6h8JD3P3NdlAkv8Cct86Kf2ArmhBmM/Yd/ViWY9CKL/s1M5/0ku
7YWVfhHCXhn/kHcfYvKrgeoH3/Dy+Ff1PWOjOHfuX9j+scp+wlOyPzXjMxVy
2Z8SDlmcOZb6u+nYt8Z+knuSeb/lB5b1i3Bij2/YfsKpDz5g7gtChGW+DBNu
TryE1zfC3je+Nfu92rE0/l6/yYynBuhr/dOE/mX/+5Ibn3jC3tZvmfUo6SUa
/1ey/qkvufsJ70vu+pJJ9WU8+Qh7tvpNe37CLfYPL7nrUfAlV78QylscpvKR
zdkm3yKQ35xs2q9F/7LfQXsy/6P8qzez/fnueTGesIyvpPzoeDw3k+ff1Pxo
/Yicz/LpvJ2xnvOf5PkNF5n7UB9hX8qlZv30ExZ/Bai/0OELTflgvuufUD7N
/zMaPjH257v7kwiV99c8YdqvRXtfXszxB7b2NeW784nnb6SPxJ9w06Jqk19J
hCU/UlV579/cfMgkuXfng2b/5yPs9/c330v8f1P2o/zTD7L9wHtizHoSQv23
LzTjOfw3ym+5z1L61BIueGiw8UeDkjcp7BkXxbIexAPLeYCwzM+phIPxP5vx
6iXsHfO9GR+Z47y/nlfwCc4X3zh3f+tX7QfG0fr3fMjYFyS5r7iD+b4SQnnJ
f8jFfsKee71mfa5Fecn/ccp+1Lf57XmZ7Ct4z8Qr/mXKj/YTjf+SXnbrpxIO
2fXc+7J7v5JJ8tquca28sP9lV1//y+r+gOThESNNf0Fqz7f2NpMPIZT/H39P
Cb/s3h9EoI/M/wo3oH+xn9rbfk8rc37yFND4vXiPWR/jC8j+UbVm/k0qcPtL
pfIP/3KV8be3INp+6hPtTf1Mkn8/Y7ip7yO5zCd+wv66PXx+Jdz41guc/wXu
eApRe1/fOcOsh2Eq78nYb/IvQlju32rRn+z/qP652yK8/yF58D/p/H3xlShu
sf95xY1P0ivu/Jz6iru/81L91KvKzH4ok7A3cJXRz6fa91P9c18/tNvYT7iX
jVeQ8AOzF5j9XUjVDxNuvsbL6x/hnku+Mve1tYR9pzqZfGkAlvir9jzjSf7p
V2z/+Oh8673oR7NfSxrv1k8dr+6rx7v+yBzvzrc+woGaEbz/o/Za3B+r9oNK
HkJ//8lj+0keufZDc38bQX3Jf9SX+BOW+a0J8j8f5O9fE0j/kilmvxw/IWp/
5HU+nyaR/HHbfuqEaP0W+3/CmZfMN+tvJmFZT32EI4GHeP0jnNbuArOfDhCW
+SOI+rdcb8qHgGseN/kURnk5/0zw/nJewVE839ZOUPaT/h+vPGXsbYI+dv7y
BNx8jyV87rVYs/+OD0TLy/hKINzifBBw19Nkksv3tFTCWWU3mvxMI9ziflH1
n0HtSfwzqbzvnY/N/JAdcO8PfSSX+TkX+t522MxHfuhr5fkBdz4LkLyp8EXj
nyLC4ZrbzfwVpPLi75KAex8fIrx91Kz/wP8VsL9qvcmHMLC1pyrgnh8i8Hfn
H0w+VFN/wavTOJ9hv91v1ZM8Kbedyc8G2G/bbySc2cz3aU2o3533w82mvXKz
3npeJf9I/F+l8SDz4avR/nq+8i9TP4HKy34/6VU3fslUvqHdKr4vofKBP8ww
+8O0V914eV91v9dkkDz97YFmfssk7M1pZ+pnE5b9hO9Vd/7JJby+kvPdD32t
f/JfdeenAOy3uEiVD77qjTn/T38eXyXQ971ys18IobzVvwL2ynxNOFxeZPxX
Bfsv/YK/p5I+4v9qyGU9o/5mpPF8UA+5rO+vuvc7jbDnkxlmfW4iHHyPv183
Qz/Z/01024ud6PojnnAk7hGzX0ggHDiTYtaXpInR77Xy/SN54nl7Al9c+Kzx
f+pEss+2l4b25fxMWO5rM6CPrCcTyb6Fr5r5OXuiGx+fKp9LuPbVD0x5P+T3
Xc3xhz0DgvyeBP1b/xURDtr76CDh1C93tAIuUf4JKX0qSN8JO9qa76Xhie79
QRX8d/03/D2Z5JHnq8x8Wz3R3W/UTnTni3qq798cZ/zbMNGdLxsnqvMOlffW
HzbzSzO1d+7n/+P3Rq+59sQS9n2/z8Q3/jXqv366ydcEyOV+gLCc55Nfc9eD
VKq//cxb5nyehv7+NY/vj15zz88Zqv1Mqn/IzjfZhCd88F9zPvBRebkfySVc
f12mmT/8hBt+GW78lU/1e41MNPuRwGuuv4ugn6zHJPeUdjXrTwnJN3X90qwv
IcLeu08Zf1WgP6tvmLDf6lNF7UVum8vvSQhX3Jdo7uerX6Pz07N2PX/N3Q/X
w95XhvL8Tzj8RaVZXxvJvnbdOxl502vu/NwM//6+q1mfPIVR+Q2b8kz/sYVR
eVP1ZjM+4gnL+Eog3OJ+gHB20j9MfiQXuvNxKsl9dj1KA5b5n7DkXwbhFvdJ
KP+mh8c/4ZgHM43/fYXu+MhF/eX5PP4Lo/cX2y+rM/NhfiHF87Uyfg+F9m39
IpLX5mTxfXwh9q92/afysl8LFdL6MJDjVVGI92wz+byO8rc2mP6qVH+RQjX/
w98y/xfS/ccjQTNf1JPcX/c7sx9sUP5rJHz8mwdNPjQRDr/wPccf9jzUy+xv
PK+TPjL/E/ZePo/3w4RFv4TX3e+JSSSX8Zf8OrV/Rzrfl5Hcn7XN6JtGcjnP
e0ke2tPPjM8MkudXbDf5l0ny1HZvGX9mo7zM/9BPxj/V910w1cwP/tfd/Uz+
6+54Dyj7iqDfv/j7evB1dz4rQf+y/3vd9X/F6+731bDpv8qc56oI97r3L2Y9
jbzuzn/Vyp5axEf2f4TH/DLXzCcNyh+NSr8mwrLeN8OfeVfy9+9J1I7En3CL
7yGEW4x/wnLfnDQJ74vGmfgmT3L7SyUs61HaJNc/XpKH6+8z/s5Q7WcSlvNE
9iTXXz5qb7uV55Lcd9lFfN9K9dNjxhh78ye5/goo+4rQ/+Vf8n0E/FMfx/M/
4Rbrv9KnAu3JfRXJj11xP8ef9D1kz18Rkou/qkm+ZO/HfJ+FeFh5vdK/Qfm7
Ef2fPWX82aT0bVb6eSZ7ne+nsZOpP9n/T6b4frHK2J9Acs8zz5nxmgT5gMsM
TiZ5i/V/srt+pU129fFOpvkt/Xszv2VMdt9PZE52z3vZaH/Oa/weAvp+lGri
m0v9JX3C5f3Q78gB44/8yep9HeFesv+f7MYzSO17O+4z9UuAO8WbfA8p/1VM
dr8/h6m8tFdF8sl2Px+ZTPfrlz5o3o9XT3bjWYv+ZP2n+tu/OWjOQw3K3kYq
H/9orcm3psnei87/s7jbNhN/qr9E4l9E+tn+Ygm3uA8jLPmWAPlnPD8mFbnn
o2S0J/clCqeh/qLFJl+8qv8M1V8mYd/xv5jy2YQDW8ab/aSPsNz35Ra5+eYH
vmKtmQ/yi9z1NoD6v/D+pIhwsOk+Xv8JeyKnTLxLitz3lCGlf0WRu18NF5H/
B7B/qmCP3N+gv9B3pv1q+KeG97e1Kh718I983wfO4e8HjcofTUVuPjeTPO1f
r7SGvZ43aP45+JKxN/YN0m/yFya+8YQl/xKAG58w/SW94eqTTLhF/AlLPqep
8l5VPoNwxqYH+D75Ddf+bJSX+f8N1/+5b9B+b/fTZr/lR39y/n/D3Z8G3nD9
UwR9H/nGnA+CJI/0aW/2IyXwTwzvD0OEZT9cAfz+22Z+CgP/+wLz+5QqtN8t
y+zPI2+462G1sq8W2LZfTzhh1SFe/6n+uYO3fWTir/zRRLj6T3z+aCbcYWwb
/j3MFNLPrkexU1x/xU9x97cJJE/6bx+OP7DNj+Qprj2pU1x70gjXv/ZhK+jj
neKOxwySe+18ljnFPb9kk9yXdZnJT98U934hF3K5byec903I6JsPuaz/hBt/
ucjsh4sIx+ct4fFP7Uc+3mrmj5Iprn9DU7xtzv/T2+7/Sd9zmQvN+TpM+IY5
Pcz+tQr+kv0/7LX6VxP22P1nreqvXtVvQLxk/Yf+Y2L4vhfyjxcb+5pJn15p
F/L3j6muv2Knuu3FT3XvSxOmuvvnpKnu99jkqfR7ptsOmXxPnerqnzbVjad3
qrt/y0B5+Z5GOHC4P8efcMpzMfweUOmXO5Xej/ztVvN7M7+yJ5/KxwQfM+Mh
QPIBH7X+DXARYdlvBkm/c7L/J7n30Hjz/SFE2F9+j8mvCmpf3u+Ep7rv66qm
qvfpVN/z2H/MeaCa6nvP7TTt1ZI8dSy//62f6p53G6a6+6NG+Evuf6a678ea
4d/YHRz/aVEs54tYwl77+4d4wiW3DjD+TpjmxjNJ1U+eRvubz3vx/S/JJV/T
CIfeeNPM714lz5jmxiuT2usVd7uZj7NJHogbbfzlQ/8y/gnLedQPe/Z35fsf
tO/zG3sC09z8KaL+5r1/1szPQSpf2/3fPP9DXxn/aP+OL3n+R/vyXkX5p4qw
/488H0fgT5n/0Z7M/8o/9bCvpovZ3zWg/h9HGfsa4a+hqWa8N6F/Of8RlvtO
z5tu/sS+GZUHm/aa8RNP8l6Zb5n2Et5018ukN93vgclUv8X+/033/Wfam64+
XsLxNt8yVHuZb7r2Z6O+rP/Qp9NFxh+5hCP9p/N7Iyov4zkf+sn6/6b3wvP/
e81D5rxVBPnQ50x+BN9033OWkFzuq0Nvuu/1KwivfOk6o0+Y8PIbPzfjoUr1
HyF9PZf824zvatgn3zPfdM8X9Sgv7xvedN9HNlL9wDX8XqnpTXe/2qz86ZlO
/pH9P2HPH340vyeNn07zvbUvYbpbP2m6e55Knu49cf4/vLN3rYn/dDdeaYRl
v+ed7u7HMqi/2n9tNfvhTJS38mzVv4/Kx7fbY85DubBn936+/yUs32PyUV/e
709387NI6RckHPzvfHOfVqLkIaVPhbI3TNjbareZT6qm0/1uaLP5/h8h/cW+
amVvLeIh9z+QX9aDf09D+m+vW2jab4Q+sv+b7n5/aEb9PpP495czyP+PvW/2
q7EzonL/wWd4/z/DtSdhhqtfEuHc3xeY++NkwvH9Z/D8P8PNj7QZav2f4e4n
Mqh+bDd+35A5w/V39gzX3z7IZf4nXG3r+wlLfufD3q0djL0Bwje8X8H7P7Qv
8Y/KJ0zo/qD5flICf7y9lH/vQljmgwrIZf1He1a/qhnq/RrJM6fsN+t9NeHA
C9Vm/NbOcOfnerT3t3d5/MO+skITz8YZtP9644zZfzaRf8X+ZhU/TzCKs/vc
Zu4fYoKuf2ODbrziCE9Y09qMh3gq7/vgCuPvDqp+QpDOl4P4PJdI8tC/C838
mERYzoddIZf5hPDOPSlmPk5Bf/K+IOje7/aEvgtOmPGQFnTP4+lBNx5e0k9+
v9iH5HNfyjD2ZKD+sYuMvf3Rv+xPSL69zziz381S+mcH3fweAn1tfz4qP+vQ
68Y/Oah/1VITz1wq3+vtXWZ9ykP/cr4Btu2NIZz41MfGX/lU//5m/l5QQHJ5
jxAg/WS/UUhyGW9FiHf3kQZPC7rnu6AqX6ziUxJ072NKqf57aVfz/RmVzzzL
808Z7C/7iccT4mX9V0lYvjeG0b/Fm6i/iH1fXwV7/z7SrA9bVfwjqG/t2ani
W63yv0bJawmHl31i4leH/uS8hvKP8fvfA7DvNw/z+3yl/xFg+Z5D9oj9x5A/
j0VMe01ReeT/Uo6Y+fZk0Nt8vsAcu99X8Tmt4uOZ6fojZibtZ85W1pnxD/yn
fHPeiaPyqf+z54OZ7nmnw0z3/jZhphv/RKof//PNJj5JhOV7e9eZaj8x070v
T5npxit1phufniQP/KXSnA/SUH7NLDN+0gmH7X7TS/qJP/qo9jJmuvun/oS3
3/BfM19mor/0yWb/naXqZ5Nc9sNDZrrx9imcQ/Un3LrIzF+5JK8tWWTim0fY
s6C3mW/8pL+cN8aQXOaDfPjf4gLot8/+fhT9/7GHycdC1Lf+KQK27U9DeVkf
Z7rrUzHwo2vN+lUC+/8ZNOOjFP63+RNC/tn6ZQpXoD3bf6WyL0z2eX4ZZfrb
ROXbWf2rUN7O/1uVPRHEz7a3E/ku43+muz+tof4C8y4z80ktyZfY/upU+/Ww
x9Y/MNO9r29AeRn/iM/vmY+mEfZfdL+x7xj8aftrUvlzcmb0POPpZ8f/TPe8
dlr51zOL7DkzxJyvY2ZR/VbXVpvxP8v9PhI3yz3vxM9y9e8wy52vEtC+zZdE
Kh+aOZXvDwnX2nzoSu0vseM9eZY7H6RQ+Ra/xwGW8Y/27yg39+dphIPWX+mz
XH95Z7nx6oP6Mv4JeyYdNfup/qTPoYkPmvkrU7WXRVj2j9mz3PExZJb7PdlH
5QPXJhp9cwhnWn1zZ7n7mzz0J+/JCcv5dswsd/7Jh9ziAvQn799g/19eM/Eo
JDxtzldmvBahvB0f0+AfuR+b5Z4vime59ykl8F/gEnOeLCX91rdbZPYnIdhj
34eUwX8y/me560clysv5SsVvE+ztusrs56sI+60/t6r4RJA/Fu+c5e7XqmGv
ldegvvzeDvl9YKX5fWQd4bBdz+pnufd1B1Bfvt/AP1Z+hMpvl/tckh/4upXx
1zH0933AzNdNyl8nVfybMb7W8HvI0yS/wf4+yjM7Khe+kxjCEr/Y2a79cYRl
vY8nHLn/e/O9pcPsaPtPtnnP7J8TZkfPIxlX/GDukxLRvrwfQvuy/yfsyeT3
acmzaX6f9YJZ71JILvflqWhPxj/qy/fm2a4/0klef3Qvvz+b7f35fIEXeL7s
Q/IW3yNhn6z/s11/Z1L7T5d3N+ffLPRXf8b4I3s2nfcfzqpE+0PIHjnv+GCP
9UfObPe+Jxf2/TnLxC+P2p/QvsSsD37Ut+XHEJb5Nn+2e79eAP0/tut/VD5h
TfHvzXxWiHjI9zBT3o5/pV9wtnueLSa5v+Rnc74rofoJV/H3wlLC4SuvN+ep
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
Y36U8y30nc/89FuovWAy89NvRT73Zn76bZhPZP1D+/a97g7CmbcyP/1OKl91
D/PT7wq5v5esRv5b+3fDn1OYn74G873lp98D/VKZn75WzWd74Y9OzE9fh3yv
ZH76fSj/L+anr1f5vV+NtwMkz72K+ekPwl55f0M43r7POhxy939HVL4cDbn3
C43I19nMT/8tye/+K/PTH1PxOg7/WH76JqxH7Zmf/gTi8yrz058Mufvvnwg/
P5z5R5uVPqeQbxafDtHfJ7f8g2exvrzN/PSepdT/LcxP32pptL7YH7PUvR9s
vdTtLxb1BzI/fRuqH/8t883EEZb5qC2VX/ot89PHo/1RzE/fnnDDg8xP32Gp
ez/QEf13ZH76BOhrx2Mnwi3uG5a6+6HOwHcyP30StXfDQ8xP3wX6yvpPOFzD
/PTdqPxLa5mfPpnwjMuYn/461X8KYTk/dKfySzzMT59Kcrm/7bFU3Wcsdfcz
t0Bu//572lJ3frx9qft9PH2pu3+6C/rJ+Qf6VTM/fW8qv/0e5qfvA//K+q/8
k6H670fy0l+Zn74/+rPyAYRbnJ9Uvg0knPoM89Nnobztb9BS9345W8V/sMrP
Iei/lvnphyKfbHkf7LHr37Cl7v4ih+T+r5mffrjKx1ySS3sjgOV7Dfq3+owk
/R643PLTk7zy3AvG3tGq/zFL1foPfyQwP30+/GH56ccpfQpUvMar8Rgg3P8P
zE8/cam7Xy1Evtn6k5ZG9w8NtcxPX6T8MQX5JL8XV/PHdPjjNPPTBwnLeXEW
9Lf2FsNeWf/V+Cqh9r1fMz/9AsJpI5mfvpTKp9/P/PSLVb6FVHvLlH/KqD3P
3cxPX678WYH2ZP2H/nOZn77SzD/MT78O413ur1H+G+an36j027TUPe9sVuOx
CuP7d8xPvwX+SGB++q0kF76xbSo/Imo87aD6FTfxfn4n2jsz0PwebJfK52qF
d0Ofk8xPX6Ps3UPy9YOZn752Kb1PGsD89HuV/XVL3fcS+9T4qlfz437kWy3P
jweW0v1DFq9/B1X7DSreh6HvQuanP6LsO6r81Yjy3zM//bfI5/eYn/6YWn+O
L3XPF03Qx/LTn4A+Nl4nqb/v7e8RfiJ5puWnb8Z4+zvz059S+p5W9p0Flu9/
y+i+76/sn1bLqL6c/5fRfqiM+elbE458yPvbWCov478NsLwXIpyUy98P2qJ9
4Q9Y5t7/tSd57GfMT98B7X3J/PQdCQcsP30C2rf1OwF/zXwTiYRlvHZe5p7P
k5S9XQi3eI+g6ncj3Pg28xkmK/2vQ//yvWKZe77vvozOX5afPpX0ke/nPZR/
ehKW9fIWam/CIOanT4N/7mF++ttRvhXvD9OXuevzXfDfe8xP70X/9cxP35vk
3s7MT98H7dv9b99l7njMgNzq349w2krmp++/jN7bHWJ++gHwp6z/hKvt38ca
SPqk5DM/fRb8adsfRP3L79Gyl7l/n3ow8rWR+emHAFv7hy5z7wd9y9zvycMI
f2356XOWuffFw6G/fJ+BXNZ/kocsP33eMnc9H0ly2Q/6SR53lPnpRyv5GML1
p5iffizhpheYnz4f8bL89OMQD1u/YJn3Yk8LfuDxyB/LTx9Ae3OZn37iMnf/
VAh7rP6TSN+A/b1ZEfwh6z/iZetPgz1WPp3q11p++iDJEy0//Szqf7vlpy9e
5p7H5ir7Soz9jBcof5eq8bcY9vdgfvoQ9JX1X+EyYDsflyt5BdprYH761STP
y2N++spl7vq9Dv4oYH76MLDVfyOVf2sG89Nvgn8sP/3mZe7+vmqZe97dgvl5
N/PTb6X6/uXMT79tmXtfE1nmjf59kh6cHzuofIvvYTRfNY1mfvpdJPecYX76
asK1L/H7393KPzWEZf+/B/VtPGqX0ff7B7j/vdDvUuanr1P27UN7wq9FuOrP
zE+/H/3Le1tlz0GUP8j89A0qPw6jvOWnP6Lmz6PQR/g5MR9dxvz03yJ/OzE/
/TFl73HlnybIP2N++hNkf6blpz8Je235n0ie/Q/mp28mudfy059CeVn/0Z/l
pz+r/OFZ7o73Vsuj8ibLTx+z3N2vtCZ5i98HEZb4tiHs+4j56eOAr2V++rYo
P5j56eOXq/V/uTt+Oyx31+uOaO+CT834SUB7WcxP30nZk0hy+b1p5+Wu/5NU
+S4kb/F7BMLye5tu6N/am6z0v075I4Ww9zLmp++O9jKYnz4V7dn1p8dyNz49
yX7PpcxPfwv0t/z0acvd+eV2ZV+68uddJI99kfnpvVR/YQrz0/de7p6P+0Df
NsxP3xftyfkf+lr/9SPcgi9tOf39mO48vgdAP8tPn4nycv6n9uV9Y5by9yDE
szPz02cr/w9GeavfEPQn6/9y7+HzFT5nfnqf8tcwFf+c5e78MJzktZ8xP32u
Kj8C+sn5n+o/8Fvmpx+JfNhj+emRL7b90UqfMYRl/hgL++T7Lup/z/z048z4
s+s//GvvN8YrfQPL6b3FmQ/NfDJxubf1+f/6DfPTF6J9Of+jfatPkWpvCvKj
LfPTT8P4/Sfz009He/J+VNk3C+3dz/z0xehvCPNDz0U+1jM/fYlqbwH5W36f
Uro8un6VXMn89IupfHwG89OH1Hy2DNjmX5ma/8pJnmHfN1Qof69Gffm9KuIt
6z/hbFs/rPy3EfZYfvpNaG8L89NvXu6eP6ui+gVuvYn56begv83MT79Vtb9N
xS+i7N+h8n0n4RkzmZ9+F+EJLzI/fbWaP3ejPctPX0Py7y0//R6Kh3cx89PX
wl7r770Y/3L+J5x/N/PT71P21C9390P7sX6tZn76A4T9u5if/qCaTxqQf9l8
njsMfID56Y+o+eOoGt+NhIOWn/5bNV6OLVfnf+RTKfPTNy13789OqPn/5HL3
/uwnwkMtP30zlU+1/PSn1Hg6DdyL+enPIj/k77+Uuf5sVeautzEk7/Ql89O3
Jhzqyvz0sWW0/3mX+enbkFzu6+IIy3zWltqPy2F++niS5/3C3wval7n53UHp
17HMXZ8SSB64nvnpO5W5/kskLP7tXObuJ5PKXP92ofJbezE/fVfC4TM8/3SD
/ZafPrnMXV+vI7nEOwX+sP7uDnzBNDM+U8uI/28T89P3gFzu/+E/a+8thOU+
LQ32yfqv7E8ne18qZX76u1R5L+GEB/n9b28q3yuO+en7wL9y/w8s53/YK+s/
4Vwf8y31j+LIe6nMTz+gjH4v8jTvBzLL3O8dA2GvvKdU8R8E+69aa/jps+G/
m5iffjDJhR9wCMpbfwxV+vrK3PlrGOw/wfz0OVS+1rY3XNmfS/pLPEaofM9D
vtj+RyK+WcxP74c+S5iffjRh4R8bo/Qfq/I/H/WtfBzJI92Zn74A/d3O/PTj
EX95/6Xyc6Ia/4Vl7vw0ifyzvSfz0xcRnjGf+emnwB+Wn34a2rP6Tlf5GVT+
nIX5xN7fFsO+PzE//dwy9z60BP627S2Av217pSrei1F+KPPTh0g/j+WnX4bx
bvl9ysrc+6Fy+Mu2V6HydTXKy+9V4I9fmZ9+nYpvWPljI/LR4k2Q2/Y2q/mq
CvZZ+RbEZw7z029Ff/b79rYy9z4lAn9Z+3ZgPpPfw6l821VGvze6nPnpq2H/
hcxPv5uw3/qvRuX/njL6veli+/ftlX171Xisg79PMT/9PuRHG+anr1fz2X6M
Fzn/q/n0IPSV7/8qfoex/gSZn/4I2rP8NkfVfNyoxue3qr1jar4+bsYj89M3
IT7WXyfU+nRSrS8/lbn7s2bCE15hfvpT8MdrzE9/GvOr1e9smXte8qyg8nL+
X+F+T4khXP1H5qdvTeWFbzcW9eX8T1jGYxxhmZ/arnDjG09yeT/TfoXrzw6Q
38P89B0J95/L/PQJpJ/01wn9yfmfsNjTmbDkQxLwNOan74L+L2V++q6EW5z/
V7jn7WS0b/u7boX7/TRlhevv7ijfjfnpUwn77fjsofTrqfAtyr9pK9zve7fD
X/LeeQXuJ5mf/i6SCx+RV8W/N/xn++sDuW2/r2o/g9q/w/LT94P/mpifvv8K
N38HrHDv4zOBV/J7yIHo7w1+D5qF9qz/B8F+2382ysv5f4U7PoZQ+55BzE8/
lMrX/pb56X0rovsHn+WnH6bq58Be2/5w+GcAv0/LBZ7O/PQjlD/zUN/aO1Lp
70c+WPlowvWNzE8/ZoX7+6axKp/zlf3jVPwKCFdXMD/9eLI39Dnz0wdWeP9z
vv3lzE8/UeV3odJ/ErDNvyLCgbuYn37KCrpPuJz56aetcO+bp0N/Wf9XuN9j
ZsE/sv5HceC92cxPPxf5IN//lT4LVrjvE0sJy/vmxbDP8tOHCH/cmb8XLqP2
hJ++TMWzXOlfocb7amVPJfAs5qdfp+IVVvHciPEu79mVfLPKnyry97lRzE+/
BfNrBfPTb8V4t+vLNmVPZIV7v7ED8ZTzP7Dtfxe1/0AK89NXQ9885qffTTju
Weanr1H5swf6y+9n1HqwF/7ax/z0dVS+yPLT71P61Kv29gPb98MHyL7AvcxP
fxDzud1/Naj14rDKryNqfj+q4tMI/3VnfvpvIbf89MdILn9v6rga700qH06o
+JxU8p+AezE/fTPWY9v+Kehv2z+t8Fm1XnvKyV/y/r+c7meWMD99DMk965mf
vjVh+XsqseWuP9qUu+eHOLRvcVvC3lXMTx9POPFG5qdvT7jhGuan71Du+qNj
uWtPAmEZ/50IByw/fWI5ve+z+naGPvL3R1Bfzv/oX+7/lT3dCAfuZH76ZOgz
hPnpryMs+7mUcnf+647ywl8AfeT7P7C1ryfFI7SZ+elvIXtmtGJ++rTy6PuW
yCjmp79dtZeu7LmLsKwPXmo/8hTz0/dW8eqj/N+X7JF4Z8Df8v0f5ROZn74/
/FvK/PQDCLfgT4V+Nn4D0Z71T5aSD0J7Vp4d1Sfw3e12/Yd/LT/9ELLP04P5
6Ycqf/jK3fPUMOX/HMIDbmN++uHI993MT59L9eXvS42Afja/8uAP+f4P/Sz2
q3iNJhyfw/z0Y1Detj+23F1v8pU941T7BYQrruHveeMJp81lfvoA6tv2J6r2
CpEvcv5X+haZ8cq/f5qC/u38Ok35Y7oab0GFZ5W79ynFKh5z0X4V85OXEM6y
/PQLVPlSNV8tVvkUUvPHMiUvU/qVl7v3kxUYD5affjWVl7//VFnunufWIX/k
/Z+afzdi/ljE/PSbqP6EC5mffjPal79vp+K1Rem/leYHT4D3j9tIXruP+ekj
5biPZn76HSSX35fshL6y/qv2q8vd/fJuwt/b/XwN9P2A+en3qPq18K+s/8rf
dSrf9iH+73D866m/Xs8zP/1+Vf6Aau8g+rf52EB4507mpz+MfMpifvojiIeN
51HVfmO5+z7gW5V/x1S8j6t4NUG+ju9LT2D8W/+fVPP1T2o+aS53z1enMH8K
34/S5yz6u4H56T0ro1j48FutdPdjMStd/7UmLOfzWCr/dIj56duQXH7fF0dy
+T1bW9VePGFZX9qvpPcofSyfEMnLLT99R8JJtv0EwrJf7QT9hG9Mtd8Z2L43
SyIcsfz0XYBt+a6EW7z/U+0lEy7ex/z0162k/UE989OnwB/Wv91hv62fCnss
7qH833Oluz7dQjitA/PTpxH2Wn7626k9Gb/p8I/V/y7Vvlf133ul+968j7K3
L+HMCuanz4C/7fjoh/6svv3hPzn/r3TvQzJJLvPLQFU+i8pP3cT89INIHm/5
2LJXuu8RB8Meuz8YotobutKdv33K/mHAOcxPn4N4Xcr89MOV/rmq/gjVXx6V
//ha5qcfSfL0/zE/t1/FYzT8LXyOSj4W/cn6j3ydzvz04xAfG/8Cpe94+Fvu
/5W+E9FeE/++rhDlxzA//STIbbyLlH5TVPynoX/792ano78I89MH0Z6s/7DP
2l8Mf1j5XBW/kpXR96XbpzA//QKSn1v51kyz/qv4LFbthVT/y5S/yhB/ef+H
9t63/PQ0/iLlzE+/WsWncqU37vw/fp7P1in7wmo+2Ei4+izz02/C+P8N89Nv
VvN1FfS3/tii7N260l2ftmG8vs/89BHEaxfz0++g/hJ+ZH76nYiXfT+yS80H
1ejP9r9bze81hP3TmJ9+D+G805z/tSpf9qp8qlvp3kftQ/82HvWEUz9mfvr9
VH77L8xPfwDlrb8OrnTvOxpWqvd/mE/l/E846b88Ho5iPDQyP30j5ntb/1tl
z7GV7veU48q+JrW+nEC8n2J++pNK/hPat+01q/w5pdaL02r9PYt8SWF+ek8F
xcfeB7ci3IIPmLDsj1tDLu//Kmj9/5r56duQ3HeC+enjCHsmMT99Wyr/9SXM
Tx+P8tXMT9++gu5LcpmfvgPJvYeZn74j4UgB89MnUHuTVzM/fSeU/5j56ROp
Pc9A5qfvTOUnLGB++iQq37Cb+em7EA48zPz0XSui58faocxP3w32b2V++uQK
Nz7XVbj7/ZQKN97d4Q/hL61wz3M9YJ/c/6M/Wf8Jx1cxP31aBe3vU+zv/1W8
0uFfWf9Ve94Kd//YG/bI/T/qW337Alt5hirfD/a9xPz0/al93638+/4BZK/8
PdJMkrc4/6O8fP9X+ThI2ZONeMnv/yCX+38Vj6HQT77/o7ydT4ZVuOfPHBXf
4fCv8LMpf44gfNby0+cRDq5ifvqRKj7+Cvd+abSydwzs8zA//VjC6T2Ynz4f
9hyM8Ps/ai/wCPPTFwDXMT/9eBXvAPSx56GJwHL+V/k4ScW7CPrZ+lMIp9r9
xzTU38r89NOhz0vMTx9U9s7CeJDzv/L/XNhr41Wi7FlQ4a53pdDPyhdXuOt7
CP635ZdVuPvfMuWfcjX/VUA/+f5POGsR89NX0vyR+iLz06+DPnL+r3DXo40q
/zep/Nis5pMqJd9S4X6v31rhrgfboK/8/k/Zt0P5eyfi9w7z0++C/p8zP321
6n+3yo8aFd89avzUKvlezN+y/le49437VH7Wq/G6X43HA2r8H4Q9sv5X0PeT
c4Pexvx5WMX3iMqvo2p+aVT9favmo2PKP8cr3P1Gk/LXCeArmZ/+JOy1/PQ/
VbjrebOK7ynMr3L+V/PlWeVfzyqv8/6q1SpXnxjCcj5rTVjOV7GE5XzZZpXr
77hV7n697Sp3/MWvcvlZ2qv+O6j+O65y45Ggynda5cYjEfWz+PcpnQnL70OT
Vrnx6YL6cv5X9nRT/SeTXPgJr6P6cv+QgvYsP313wpF3mZ8+lXD4Yuan77GK
7j+Gsj96Un8tfv+3ys2fNKov4/d29Ce//0d8bPm7YL/w/6xyz8+9qb+kV5if
vs8q4mc5w/z0fdH+tfx+PwP9y+//lT/7Q27xAPRvcSbiJ+s/1ZfzTNYqur+3
v18bpOzLXuXO34Nh72nmpx9COPUq5qcfCnwf89P7oJ/tb5jCOcpfw5X+uavc
/f0IZU+eitdIxF/Wf+Wv0ahv8Rhg2/5Y1X8+2rPnm3GIp+WnLyB58Hvmpx8P
fw5kfvoA8tvy009c5b53K1zlrk+TkJ/LOB5FajxPUeNx2ip3Ppqu5oOgys9Z
yLduzE9fjPYsP/3cKA7cH2J++hKMN/n+D3/I+z/oJ9//V7nvxUMoL+s/8usG
5qcvI9zsZX76cozHpZaffhXxqyxkf6xe5c7HlWo+WbfKXd/D0E9+/4f5StZ/
M1/Z9R/xqWH+vyqS11p++i0qf7aq+GxT+kTQvvz+n8oLX8jOVe5+apcan9Wr
1Pt/1V4N4tuZ+en3IF5B5qevhVzWf6VvncL7VL7Uw545zE+/n3Dmk8xPfwD2
vGZ//4/52urXoOw7rOJxRM33R9X614h4Wfytiu8x6LuP+emPo7+nmZ++Sc0v
J9T8c1LNnz8RLpnF/PTNhDu+zPz0p6j9B+YxP/3pVfT7q0zL/6Py07Oa7JH1
n7Ds92MIe/YwP31r4NnMTx+72s2XNqtd/eNIvn0489O3XU37Nfn9P+pXMj99
+9XufNNhtbuf7Ui44Szz0ydQf7WWn77Tave+KJHkki+dUf4b5qdPgr2y/hNu
sPz0XVfT+3LLT9+N+hf/JEMfO19eB3/a9lIIZ/qZn7476ffBjcxPn0py2Y/1
UPb3hP6/ZX76W6Cf7T+Nykv8bkd7p5ifPl3F4y6FvcDWv72BLT99H7T3A/PT
90X/8vu/1e761U+13x9Y1v/V7njLJP9GejA//UCUl/t/xF++/yOfRjM/fTb6
/wPz0w9GfctPP0T5a6hq36fyZRj8fQPz0+eg/hvMTz9cjY9cyOcwP/2I1e59
Th7pN/IR5qcfqfznV/4YTeWD3ZmffgzGm/295NjV7nkon+T9LT/9OOR3JvPT
F6x27zPHw37LTx+APTOZn34i6XPl6/z+snC1O99PQnnbfxHyXX7/j3y5iPnp
p2F8J7H+05X/g2jPjp9Zq939QjHJfe/w71PmqvwqofLye+wFq93ze6ny92LE
dw3z04fgn1uYn37Zanf+LlPzRzn0G2f56dX8uVrVr1ztbRcNm73/R3ty/w/7
s5mffiPh6gbmp98E/ZOZn34z6tv+quDvr5iffovyz1b443Xmp9+22j0vRzA/
WX76HZhPGpiffqdqb9dqd39YjfhYe3ajvOWnr1Hjbw/K2/5rlf/2wr87mJ++
juRNzzM//T6lTz3qj2B+mf2wz/LTH8D4+Tvz0x9E//L9X+XHYcIHBjI//RH4
18qPqvxtVPZ9i/Fp9wPHVrvr7XHY04756Zug7zPMT39itXv+O6nWk5/Qv33f
2Iz8eZ756U+h/FTmpz+t9D0Le+T93xpa3+5lfvpWa9z9Tswa1z+tFY5dQ/vp
vzE/fRvIf8f89HGqvbaQW3vi17jrR3uSZ3ZlfvoOqnxHwuLfBMLBZ5mfvhPk
lp8+kXC85afvTFjW+6Q17vzRZY37frcrlZfx1o309fZmfvpkKr+9DfPTX0fl
k8YwP30KYVn/ulP96pguxt+pKP8089P3IOybzfz0Pde49w+3QP+9zE+fRu2V
VDE//e2oL+d/kiffyfz0d6G/PsxP71X29Ya/5ff/a+h+7E/MT9+X2vNbfvoM
lLfjqR/al+//wLL+A9v8yUR8kpiffiDiP5H56bMIy3w1iPxx7iPmp89e4+6/
BiMfZjM//RDV/1DCVfb31z5q707LTz8M+XqK+elzlL7DVf7nIv61zE8/Av70
MD99HuJv9Ru5xj0v+VFezv9qPIxBPr7P/PRj17j3f/nKP+MQf/l7L4Tzv2N+
+vEo34X56QNr3PV24hr3vqJQ5e8kwrmWn74I+TiH+emnQN/X+Hw6DfrYfJiu
/BEkezMvYX76WSpexShv+ennUvvvdGR++pI17vlwAbVXm878daWIp+WnX6zG
U2iN+/cxl6n+yxDvCn7PVg5s61fAPrn/RzxnMz99JfS3/l2n7A+rfNiI+vL+
n+Q3rWB++s1Kv6o17n5zi8rXrYjnO/w+c5sa3xH4z+bLDvRv+el3qvjtUvlZ
DTye+el3o34N89PXrHHPJ3tgv8W1JA/cxfz0e5FPlp++Tum7T8W7ntYvz9XM
T78f/SczP/2BNe793EHoa/npG2Cfjcdh1Lffr46gfjLvh48iXpafvhHjSdb/
Ne790jGSH3uV+emPK/2b1rjfu07A3t8yP/1JrGfXMD/9T2vc/USzyodThNPe
Zn7609Anl/npz6r1wVPp5l+rSorPCs73GMhl/a904xdLWPK1DeRy/q907x/a
VkbXkyX/YH76eCov81d7wmJfh8qovfFLmZ++I+GkS5ifPkHp04mw5Gci4WrL
T98Z5WX9Jyznmy6Q72d++q6E43fw9+tuqr9k2G/buw7tyfd/0jfSmvnpu5Pc
/zPz06fCPyPZPz2i/p4Q8jxr/N8T/pD7/0r3vJpWqc7/qnw6lT+3kPnp76p0
7xe8le547k31kyYzP30f4LuZn74v4eBfmJ8+g7Dw8/YjnGnfk/QH/or56Qeg
Pbn/V/oMrIy+55oQYX76LJKLfwdVRt87BG5lfvrsSro/GMH89INV/IcAy+//
CddXMT+9T+kzrNLdr+YgnnuZn3444n3G/v6v0j1fj0B7x/i9UB7aq2N++pHK
336V/6NV/oyh+G2/kPnpx6J9y0+fr/J5nLK3QI2n8dTeBMvfGVD5PxHxuoHf
xxZS+UNnmZ9+EunvGcX89EWoL+//Kt3702mwt4T56aejvOWnD0JfL/PTz4K+
cv4nnG3f684l3JTG/PQlhDP6Mj/9gkpvm/P/9LZ/b0bZv5jmnwmvMT99CP7/
nPnpl2F83cT89GWwX97/IZ6JzE9fQdi/gfnpV2M87GV++krUt/5YB7mc/9H/
H5mffiPia/XdhPnHjqfNyt9Vaj7YovJnK/LH8tNvI3nXfsxPH4H/bfkd8Jfl
p9+J9i5hfvpdGH8vMD99tRo/uwmHLT99DeYfu77ugb3y/h/5lGH5/6DPJuan
r8P478H89PvUfFuv9N+vxv8BlH+c+ekPIr+/Zr6ZBtgr9/+E91t++iOk/wPP
Mz/9Ucy3DzE/faPK12/Rfwfmpz8GbN9PHlfzXZOK3wn458/MT3+ScO3DzE//
E9YT+f5P8uRPmJ/+FOGiVcxPfxr5Gc/89Gcr3f2iZy3pL/f/hJMsP33MWtc/
rQmL/rGE5T6wzVraL3zG39fjSC7ny7aqv/i1ND9Y3B5y+Xui6M/y03ek8p77
mZ8+AeWtPp3WuuMtEfWF/4fwkNPMT5+01v0+2IXkcp7sCn/Y9roRjrf89MmE
5X3CdWvd70spaM/i7sBW31S0X8P89D1U/Z4oL+d/ZU8a4aZ/Mz/97ZDb8umo
L/y/6E/e/yn7ehPO/B3z0/chvOcs89P3RfvWPxkqH/ohPp2Yn74/4m/56QeQ
XOKbCbms/0q/LMLFnZmfftBadz+fjfhbfwxGe3XMTz9krbtfHqry2af6H2by
/1fjzxyVr8NVPHLXuuN5BPLB4jySew8zP/1I+Otp5qf3I/8fYH760SYf7Pqv
8nusGh/5lC/nbmd++nEqPwowPm398dB/FvPTB9BeNfPTT1zrzkeFGB9fMT/9
JOXPIuWPKWvd88I0wr0uZ3766Sh/OfPTB9X4mQV7LC5W43kulW+0/PQlpE/k
F+anXwD/Wf+UKnsWQ5//MT99COPNypchHg8xP33ZWu+P5wv8nfnpy5W9FYRl
/7Ya/hf+n7XufeI6YPv+KLyW3j89yuvfxrXu+XCTmj83k36BJcxPX6XG+xaV
P1sR/+PMT78N7W1nfvqIyu8dqv+daL8T89PvUu1XYz60vwfZTTj1BPPT16D/
bcxPv0f5q1aNn71q/NetjfJRerqwf/atde+/6ql87TLmp99v5gPe3x5Q89tB
pX8D8NP8/eCwyscjKt5HCTfXMT99I/LrMPPTf4v8L2R++mNq/B5Hfn3HfBNN
a937qBNr3f3mSTVf/aTsaVb+OwV/bGQ+w9Mqv88q7Fnn3n+3Wkf74w+Ynz5m
natf63WuPbGEZT1rg/o5zE8fR/Iky0/flnDgAt4fxkMu53/Cngjz03cAtvz0
HUmfXn9ifvoE9C+//1/nnq8S17nnuc5UPq2C+emT1tH7+cPMT9+F5FK+K+Fm
+/exuhEuHMv89Mmq/HVKn5R19Pf5HuT87Y7ylp8+VenbY517H9sT9svf/yNc
Ucj89GkqHrfDv3L+h1y+/1N/voHMT++FXNZ/Fe8+JI/7jvnp+6J9+f0/tdf8
K/PT9yO5fzTz0/cnHKlhfvoB6M+2n7mO+G2Wsn8GUv/nLD99FpXPXML89IOU
Pdnwt21vMOpbfvohKh5Dlb9869zv78Ng3wvMT59DeM9HzE8/HPXTmZ8+l+yX
+XmEimfeOvd+beQ6d371o7x8/8f4SWF++jFKv7FK/3yMH9veOOSLLV+A8XKE
+enHk/zYc8xPH0B8bP2JKP8K89MXIl/l/p9wnyDz0xdR+ZX/ZH76Kevc933T
1rn3m9PXEb/IIeanD1J78ZaffpbyXzFhz1zOj7mqvRKqX+tjfvoFiF+r9017
pVQ/cyy//12s/Bla596fLVP5VLbO+9P5Ctdy/+Xwfxvmp69Q7a0mvN7eH1dS
+erbmJ9+3Tr3viis/L+R5PWHmJ9+E+Ir/H/AU5ifvgrxtv7YAiznf8LeS5if
fhu1H2nL/PSRde7+agf8J+s/yd85yPz0uwhPsPz01Wr+34354G3mp6+h8h/f
yPz0e5R/a2H/ncxPv1fZU6fmm32Y/+z9VL0aD/thr/y93XXufvSg6Z/56Rvg
j2Tmpz+M+fEp5qc/ouw7ivEg/D/r3O9l31L94Om9Zvwcgz4PMT/9cbXeNSl7
T6j56qSKx09qfm/GfCv8P2q8nl7nnm/Pwt9W7llP9dozP30rwg33Mj99zHq3
/9brabzI+g/575mfvg3JQw8xP30c5NZfbQnL95b49e732/YoP4b56TsQPnID
89N3XO/ODwloL4756TsRbvH+f73r786E5b4zaT39fZoXeXx3gT/se6uu6914
dFtP67O1J1npcx3Jz13O/PQp0M/e/3RHe/L7v/Xu+Ouxnr5HBpmfvif0t/3f
st5935RGcon37YRr9zM/ffp6d/9zl+rPS3iGh/npe1P98D+Zn76P0rcvsO0v
A/rZ8dZvvbu/7I94Hmd++gHwh6z/0N/igevd72dZ8OdJ5qcftJ72U3XMT59N
9eU8MXi9+x51yHp1/if54x2Yn94H/+xlfvph6935OUflz3D49x7mp8+FPy0/
/QiqH/yC+enzVP6MRH7J/T/y8Qrmpx9NuP4e5qcfs949P45Fe3a85MOfcv9P
/ed34/cNBfC/7X88ylv/Bta75+OJJM+37yMKoZ/w/8F/7zI/fRHJ4/+P+emn
KP2mRfUJfJDB/PTToc87zE8fRPzl938qf4rXu+vrXOXPEpK3m8L89AtQ3/LT
lyp7FyOeLzM/fQj5voT56ZchPm8wP32Z6q98vbtfqyB5VW/mp1+N+nL+V+Nv
HeYPy08fRj5VMz/9xvXueW4TYc/DfJ7bjHz+gvnpq5R+WyCX9//Qz/LTb1Pz
SWS9u37tgH0h5qffifbl+z/qy/s/Jd9N7X3yN+anr4F/v2V++j2It9z/0/y7
/R7mp9+L9cXK61T89qn1pJ7wtq+Yn34/xuMfmJ/+AMbPeuanP6j0bVD6HCZc
OYz56Y+QPunN/L3gKOYHWf+hn9z/q/F0DPG9gfnpj8N/wv+nxveJ9e754CTy
yc6vP5H82XTmp28mfeI9u8x4PAV9ypmf/rSaX8+q+dATJn2s/heEyb4z/L6+
FeFAOfPTXxh2vx/EUH3Zv15EWNaH1sC2/d8Qlvk1lnDjQuan/23Yzcc2JG9+
mN//Xkw4dBHz08eF3XhcQnKxry36s+21g72PMt9SfBRHnrT89JdSe55B9veI
YXc9uizsno87hN18/R21HzhZafjpO4bpvHMD89NfTnLh40yAf2x8fx9255dO
6M+Otytg34/MT59IWPZ/f4C98r2DsJwHrlT6JoXd+fUq2DuQ+em7UPnQYuan
vxr62u+RXREP699roJ/F3cLu96pr4d8bmJ8+GeUtP/0fER/5PSXK2/p/gj3W
Xymk7zmLr4c8lfnpuxOuXcD89DdAPoX56VMRL+ufG1W+9lD5dJOJF98v9IT9
f2R++psJC3/XLahv9bs1rN5vhN393G0o/xTz099u7GV++jtgz4+W3wnxtu3f
qfS9C/bZ9nspuRfj+Rfmp/8z8tPq3zvs3l/cHXb3u33C7vp2D/xhcV9gG897
oe9c5qfPUOPhPswn8j0J+tn8vx/tye9LEA/b/l+gX0fmpx+AfLqI+ekfICz8
OZlh9/7zr8inV+x9lJrPHlT2ZEHfZuanfwj1E5iffhD6t/UfVvmWrfz7SNjd
vw5GvGx/jyIf3mR++iFo347Hx1T7Q9X89TjKW7kP9ln8BNq/g/nphxEWPtMn
1fjMUfPvU4Rb/F4W5QuYn/5p+O9V5qfPRX1r7zNq/hih1otn1XyTR/Vjk5mf
/jmMP6vvyLC7nj4P/8jvb9T6MEr1N1qN1xdgz17GY6j/+Ezmp3+R5CmWn36s
8v9Lan3LV/n8N8yXcp8HfV9nfvqX0V475qcvwHxg+fhfUfk0Xtk/QeEA2rf6
vUry9dcyP/1E5IedD15T47tQjY/XVXwmKf9OVvNrEfr/gvnp3yAs/GVTML7s
+J+K/JD7ReW/N1U+Tyd8rJH56WegP8tPH1T+mKn2N7MwHtbwe8jZJG83md+D
FmN82O9fc8Lu+XFu2N1vzVPzWwn2V1nMTz8f7Vl++gWEs5OZn35h2D0flKrx
vChMf59jEL9PWwx7g8xPv0TNR6Gwu/9civatP5cpfy4nedpR5qcvg3+G83y5
AvG2+VSu4rVS7Z8qSB5r+elXwf/7mZ9+dRj8HA8afvo1an6ohD9t+2uVfeug
/53MT78e82s75qcPq/G+Qa3HG9V4egvx+pTX/01R+YRnS5if/m3V/2YVn3fU
/Fml/Psu4eT5zE+/hXB9F/5e+H+EhZ9+q2rv72o8bFP78+2It9UvAhxkfvp/
qPZ2qPH6nto/7FT2va/s3wV/PsP89B+gvxDz01dj/rLj/cOw+z1lN8aP7f+f
an6sUfH5CO1Zfvo96H8089N/TPjiPOanr4W+tv1Pwu77g73Knk+R759ZfnrC
VW2Zn/5fKn/2qfh+pvYP9ci/XsxP/2/sd+18sl/Z97mK5wG1fn4Rdu/3DqL9
HsxPfwj6FTE/fYPar36p2j+s1q+vlD+OKP3+g/h5mZ/+KPLVrsdfq3xqDLv3
Pd+o/f23qv3vEJ/FzE9/DPnwFvPT/xfzp/DtK/9/r8Z7k8rfH2C/5ac/Qfi0
5af/Ee1dy/z0J9V8/j+l70/Knz9jvbH89M1qff1F1T+l9gu/qvF9Wp0Pz8D/
lp/+LPz5GPPTnyMsf5/Js8GN5wWEJT9bbXDPixeSXM6TMRvoPf9a5qe/iORN
FzI/fWvC3heZn/43hFu8HwC27f12g+vPNhsoP4YzP/3FKC+/L1D4Etgj3xsI
S/zbQf+rmJ8+HvotYn76Swn77X6q/Qb3+8llqr0Oyp7fKXs6RutPePQmxpfD
vyeYnz5hA90PZDM//e+hv7xnUPG5QvWXSPpd2ov56f9A8fL/nfnpO5P8ARvv
K5W/kja431Ovgj8s7rLBnV+upvLthjE/fVf4y85X18A/cv4nLPvLaxFfO76T
YV8Kf8/7I+Hs+cxPfx3ssePjTxvc82cK+rPtX4/4Wnl35G83/v3TDSSX99Sp
G9z15UZlb48N7n7rJugv7zOUP2+GveuYn/wWwnFfMT/9rSp/0lDfxuc26k/2
u7ejP2vfHYiPvO/c4O7X7lT5dxfy7X3mp+9FWP7+ghflbft/Vri38ufdhMML
mZ++D+Jxhn9fdA9h+XsIfWGvtedeZU/GBve+7T6SF9cNbIX6/Sjflixifvr7
ob8dn/03uPuBvyh/DFDj5wGSN63l/Xwm8qGG+en/quIzEONfzv9qfsna4O7v
H6L58Nwajv8gtDeS+ekfRj7K+V/F85EN7nlkMMkLLT/9o4QLspmffgj8Ycff
Y4i3vHdR+j6u4usDtuPxCZS3/Q/D/LuW70ufVPmao/LtqQ3ueXm4av9pjA95
P6vmu2eQbzcxP/0IwrI/fFbZk7fBvX94TsV7JOEKy0//POknfw/Gr+aTUUq/
0fCnlb+wwev8PfMxJO9r+elfVPqOVevpS2p9y0d+yPkf+Wn/Xsc40nd7iPnp
X1b5WaDWg1fQvpWPp/rvfcH89BNgn+WnDyh9X1X2TlT9vabys1D563WST/4d
89NPQnyGMj/9ZOS78Icr/7+B9oRPBHLb/lSVL9PUfP0m4cBK5qefjvFt7Zuh
9i9Bla8zN7jn4VlqfM/e4N53FlN7KW8zP/0c7H/s+Jir4jMP41/4S9X8OF+N
zwXwl+V7WAj9LT99Kez7HfPTL1Lr+eIN7n3cEjU/hLCe38z89EupfOUFfzPj
ZZnKh+VKvzI13lYoeTny+U3mp1+J+crGo0Ll1yq13qxW8jXwn+XjrkS+D2d+
+rXoz+bXOrRn/bce+snvr6G//b3KBvjb8tNvVPn+lrJvk7L/beXfzVgPpjE/
/Tsb6P3CtZtmAldh/bPl31Xz6ZYN7nn9/1Q+bcV4sfjvWA+rmZ9+G+xZyvz0
25U/IxuIb2QAz2f/UONrh9r/v4f+zzA//U6Uj2V++vexH7Tx3QX/W399AH3k
/bga/x/CfzuYn3432q9mfvp/boi+181tYn76GjXffaTa26P6+1iNt1roO4/5
6T/BeLb5v1fF91M1X9ehfTue/7XBvd/aR/jjWuan/wzxOc389PVYX+188W+V
//vRv23/c/hHzv9YH77n8fAF6h9lfvqDan96SK3vDcqeLze495+H0b7FX0H/
YcxPf0Ttv/+j7D+KeFj9v97gnvcbN7jn22+Q71cxP/23yj/fqXgcU/i/mJ+t
Psfhr34dTb5+j3hsm2z2M02QX1th8ukHOo95Htpmzqsn4L9Wp017P1L9pz13
GP+eRPwv627i+T/C1TfNNP39BHsOv2ja/5nkaYWb+O/3Ed704RFzP/UL4fSr
K5jPB+1PqjPr569Y79buNuP7NMZnQ57p7wz88X+83z8L+25sNOvxOcKNli/f
s5Hef91xjdlfXLCR1os9zJ/famO0fO1vbjLxvpBw4FHm048hHGn3irnfu4iw
p4T59VtTe56BT5jyv9mI8cl8+7FUvuGdYyZ/f4v69zH/fhvCqQ+uNOPn4o3R
+PifZD7+OJLnbokz/rmE2k96l/n526L9nL+b+u0Ih60/4qm9tMu7Gf0uJfmB
d+7nv0dI/rn3Cv591GWEJ7QJ/wO4A/T97z/M/fzvCGd9l9QK7Xck7P2mnal/
OeHQLbuZvwD+u7yLsef38O/v3zT7+06Qt5lv9L+C7Iv33GjyJZHkRe3Znj8Q
9j36ismPzuj/wK9GvyupfuihZUafJNjTfMTIr9oYfY8/IT5+E9aDLlQ/uHWr
yZeroV9cR+ZHRHz/+prJn2sgH/GR0a8b7B3bypS/Fv5afKHxdzLic/AT0/4f
Ee8OzO9wHbXflJ1v9P0T6XvlC4tNfynoL/CVyb/rqXwgv7cZb9030veQz741
6+8NVP9cv2c/BE4F7nKjGb83wh9HFpr7sx7UfvxN7N+bCDfvutPkR08qv2Qj
/175ZuTjuzeb8reY/Bhi+r8V+Mt0o18a8BL2x22I98XZ/HtOav9Q8vVmvroD
9o+6y+B0Kp/U8d8m3+/EeL36baPfXfDPd/y9phfVf3wt3wd7Yf8Xvc34+TP5
L7h8sjlv94Y9E+aa+eBuKr/+3CiTn32ofOZDt14Ie+/B+P4n/163L/xnx9u9
GH8rOvHfj6L2er2w0uTffRuj63tD8GXj/34kv6HtAuOP+5HP48uN//qjfO0k
g/9C49kzONHYM8Dk1xSj/wPob9VB8/0nk/QteqaOz/+Y/3L5PdJAqt/z2nrj
vwfh373D+PxP/UU+n2K+ZzyE/qau49+rEE5449aLYP/D0L+U452N+Fx7nYnf
I5Cf8Rn/DIb8zXOm/KPQ/3/fM791VL76wtfvMvo/hv4OjjX2DkU+z91o9H8c
8bnfb8aLD/PlG+1Nfj5B42XJhzONPcPQf5cnTHyexPxyf4zpP4fqe+Majb5P
EY60usTkz3Dqf/uKRDO+nkb96UGjXy70879v7kueQX6kcr6MwPzy/QXG389C
n2evN+3nYfxcO8rkx3OQ16029o7EfPLKSNPf8xhfrd4y+eIH7pds2htF8Qzm
HTD5MRrj6+qVZv17AfNL/9eNPWMQr3NfmPHwIuaD8GOmv7GQ7//C1H+J6se9
1JPP/yTP/L98U/5v6O/ch8aecdB/2jVmPL0M+/I/N/oVULyujHnaxOcV6v8B
O97Gw99Lbjfz5wTk5/93ddVhWS5PG1ERG7tQsLGx0aOCih1gYxzFbsTGBMXA
xkZFwQQbpUPAbsXGBLsFu+X7Mfc9j9d3/nqveWd3dnp3n60OB9i+F+zlp/44
B/oevpr991zo13Kyzv8BV/Wif8+D/raGMx/PB33Xm4yfBehvGnxk+YWH5ftJ
rWGnAfsgHy0YTPwi8FNUz9cvFnrX9+l+1yWZsNem422IXwr9RH+gvpYJvbSz
mn+WI16WuJO/FYjfy71Y3xf2id5Df1iJfPgiC/lfJfgnfc7SPqtBz2u1vk8O
ei+uMX7XIj/f8ie9dRhf+QSw/Hrkl5LtmL/9YK8e9jr/h/1XWeh+ZuSnvc0Z
b5vgf6/6kr4/9D3tKvnbjHicpe+NbIF8F/S9mADoy/CPQCmfdH8f43cr7Jv9
A8cj22Df9xXpb9uBv1+E8uyA/E3XEt6J9iv1YD7ZhfLdCzCfB8H/kxsxXoKB
b/KK96nvRj46uZr62YP2L0US3gv/b7yK9tmH+Fn4gfraD/191/sGDghc7tNq
ynsQ9EuVYn4IwfimjurjEMZXz5bSPw5j/DIoiPoLhX13PyI+DPJuzkl5w9E/
9nCiP0SA347e1Gck8m/jbPT3KNi3WZDO/9F/eXlTHzGwX6s41o+VeE8Y5Ev7
x8H+P1tSP0egz9aFSD8e8e//mvZJQHz75NH7XwRvfrMl5T8q9D0fPiH9Y4jH
mfMp33HwE9lE74eDvv0nUZ8npT/2co3R+2Igf1Q33td8Gv5bxYH+dAb0glyZ
T88i/lzsqd9zAudP1vtkz9NfevJ76wXQy5I3GeUvgt8+Xjr/Z36K43zyMvqj
7QHkJwn+0Cme/n8F9nUcyfpXBe9+vyr99Rr8zfCX61J+dSlb+vcNtFftEv3l
Jvwnpjntc0vKj/PtSXsky3g7Y9ioq4BvQ75De6n/O9Bf73ZcH7yL+vMi6N/3
Dsv5pdlnLiUIfB/62GTD+g/QfptCzB8psK/XWPb/qfCfgo+o/4fgP28pyvtI
/NGrWXbOJx5L+8X2RFKfT+D/iVkJP5X68wreprzPIN/zbEmAnwve3dDfC/Dn
f1Tn/+j/PXU/9itp33r2J9J/jfy734PwG+Qvo398C3/sO5n8v8P8KH4t5U+D
f3w7fxNwOvT9Yi/5fY/x6oK59PcPUj5kv/ZPH1H+SONbgD+hfJODjIfPwt/w
rpNp/y8Y34zOxXj4mkkvcXhMM8r7Dfaqtkfn/5DvXCv65w/Yf9BI8vcT9gnZ
y/j4BXm8u7J/+43+9rsT5f8D2Owx9ZkB/vdeJX8moeI/Xq5hgLOEij4X1mX+
MhXYenFO8pc1VOYjzSuSn2yhmfQmNdP9iNmlfKpbCPkxE3zIM0/GVw6B043+
x1xg16YabzmlvsnBEfz+kgt4w765BU51iiI/eQROtJxAefNKfY9VMZQvH8ov
akx58gv/TsOzsL+0EDjDrxH5KyDlA99e0vl/qPjv117rAReS8hN/K75wqNwf
MD8X9y8WkfZDlim/RcH/ie0sX0xgh6L79f4igW0v6HilhMDW2UOYH0sKPdd+
+6ifUoK3MOLHEvoNuqvr/5D39wzKX0Zgr88f2X9YCf/2PWswnq2FfuLZacxf
ZaGPHGOYX8oJ3mutjg/LC35Ar1rUfwWh7zG5HuGKofK9+6LuV6wkePfmlszX
lQV2NsYrNtBHlL6HVAXyrmqo9ylD3nz6PlI1ad9q1jTyVx31V9pS3hoCZ9ux
nv5QE/htl4mvJfUDpoXr/YuC93WqT3+uDf2tbsPxeh3486g+xNeV+vn7LaA9
6iE+3M2Irw/9TviX/DYAv79KUp6G8O+ll44AtoP/Bl1ie40E7+Cm59Maw345
31LefwSu8MqF+mwi5edZFKJ8TcH/oM5srxnkM+LNHv71Xd9zcsjkLyHvmVVs
v7ngL3hfZDy0gH9+0fW8lgIvraT3NTuC/6xbab9WApvU+Uz/bg19L9d4aIP8
cWE45WkLf5mk/Wc7+It1F/pHe4Gjhj4m/Q4Ct30eSX47wp9ybKP+OyF+HZfr
fROMp03UhxP4G5XO/O4s8JO9U/h9uQviydBXV/h/zwvsv7ohngf01Pk/4Bc7
df+/yOeZPQvzQU/Yv8dhxnMvybeefb05XnGBP3Qcy/F6b4HTS+t7VX1Av8ZL
6rsv4rPue+L7oX6TTezP/4W/ttL5fX+Bq5v0ZTwMgH5SXur6P+gV6M35/kAp
71LRgvoYBP8b1pL8Dxb4Ta4Z1O8Q5I8TF2jvoYJPOvCQ+GGwb9aTtwEPB39B
xXX9H/7apCztORL6s1vP/mOUlLfoP5P2G438euCdrv9L+YQxzuRvLOzZuZfe
twl7N6xF/sZlwl6FWjgxX7nDvjN1fD8e+qnTnfUnwH/2anxOBHw6Qs/ngt8u
89j+ZLR3coO+1wH7t9f521Rpz9ZX48ED5W9X53htGvJVajLHN9Ohv39rXAA8
A+0fnkn/nYnyvfX84yzE47m85Gc27HO5Hul5Ct5vc21T2NcL9ghW+eZAnuP3
me/nor2xN6kfbynvPEz7z3mwn3cZ4uf/p39agPHEPy2YTxYKft+aBtSvj8DB
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
PChfz1/X/wVvMjCN+yfyAba4pOf/pfzqkkXofxYRmetHidE7Wb+A8JO6Ue//
KCiww5ZN1GchoZfq4858W1hg6wsDdP1fYN+Cz6jPosD/KsT+rRj4nbmR8hfP
xCe+LtKS+iwh5Ud8DSa9kgL/PT9dSvhJcqxG/7aEfFmfUh+lIySfNbrC8U8Z
wYeEPdf1f5TvqOdbrSNkPmNajd8fykbI+pqxvlwO/I9tyvxcPkLOb57rwflN
BZHHauce+kdFKW++2Yv+X0lg12KXqc/K8Id/F5MfG8GPCvDgfLSKwHFFK+n5
f6HvuVHPA1YDvVruuv8f8lzW+WkNgd1v1aW/1IQ/dm/B+K0VIe8rZZsQBdhW
8M4zbpGf2sJf1Tp56B91gDf0X1f0a1L5J+nVgzw5XzI/1oc/NytB/2iA+sb8
pSH4XeTGeLCDP5wNo780kvr3Ko6ifRsjHv30fdF/pL5twZrkpwniw2wV460p
4IL9aL9m0F/bX6RvD31UjqO/O0h7Jr9mc7zZHPH1+bbO/+HPbfQ+85aoH6f7
2RyhD/cxnN+0QnwMsyf/rVE+XvdXtpH2/u6vbwv/clrO/NVO+M3oU5T2bA99
7dH93B0Ev2LjEvpDR8RHax3/doI9EnX9rjP8oZquvzpJ/ZTzjcm/M/QVq+/b
dgGcMY/26YryEYcofzfI86chy3cX+ImDBe3dA/45rArxPREvSbf5faEX6HfS
++JdBA40/KM39JeQRP33gX12mlG+vii/db6+bwl6/bbT3v8iP68rRfr9Yc+L
FSnvAPBv9Heu0FenKzr/F3lnWBVg/UEov2Gw7v9H+Yr+tMcQ4EeYkf5Q+FuA
3tc0DPYx9pcOB77TTtIbAf6PvWH+Ggl6DTvr+j/y76G+XN8fLbDXGEvWHyOw
dXQ26nss9NdA35t1+49+x8G/ghLpr+6C39dN59fjIV/qY9p/Auon7dL1f9R3
msHvUZOg3xNO1N9ktH+8HctPQfxc0f0NU1G/7kPmWw/Ya+4Dyj8tQt6btI+I
ADwd+tih49cZUt73is7HZoJfl666/g9/yf+Q45PZ0FfVR7r+j3godUvf/wS/
/rr+NAf5ppLeVzUX8bdB+wNvyFt2BfPFPOkvMqpePA54vuAvVDxAeywA/yeX
cfy2EPz6VGT/5yOwh2VF4hchn5h04/rqYsTTj2P0/yXQ13T176XwnwLjmY+X
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
IeprhchrXWqgnv+H/Yzx3Urw49iV+WkV4J5DqY/VIl/+Fhm03xqBN2zV79dr
Ea+VShC/Dv6005fweuSXzrp/2w/6a1zZFPU3QP6jiZRnI/R5XL9PbIJ/GeM5
f/BXajn9azPy9Yya5HeL9Dc9Lo6k/QOgnzU6Hw6EP9VP1fv/gffV9ZltoN/i
ve7/hzzHipCfHSjfZwbjeyfisekdXf+HPjIaEw5CeROdDwdj/Hk9Uuf/kDdL
Pn4v2yP4q7Ut6D97Qf/RTfrXPrFnSNMabH8/xhNTs1DfBzDe8dD7Sg8iP3ho
vIXAHh/b0B6HIN+nNxxfHga/qauJD4W+Hiaxfw4Dvwld6E/hwO9bRn1GCBy8
ZAnliYQ+xup9RlHoH+59ID/RwBvnx2NAz8WL9opFvP/R82Fx4L+xO/k5gvz8
LIXyxgt/U92ms70EwZ8aVp/xmoj2/lSh/o9iPGPMB45B/l663/Q4+ou1duT3
BPS1dgzLnxT41+c0tnfqP/n4tMDJn8YRf0bg9LJlyf9ZyPd9AemfE9jc2P9+
HvadpvexXoD++qUTvoj+5WMbyn8J/pKrF/PJZalve6Wh7v9HfvJerPf/g16B
UPJ3FfObmbd1/g99z8hO/q5LfHm/3074BvTVsa6e/5f6K9alUb5byF95l1Bf
ydBfdC7G622Bx4yvre/ZI95nd6b+78K+0Y7sj+8h/10Zo/v/QS/yH+5PegA4
+Sj5T4F9DXukQv91ncn/Q/Cfqy37n0eA93szfh+jvSI7CT+B/+wPp76eyvgw
oUsJjreeQf/G94Tn8Oei9Vj/BeqvKMv6Lzl+0PvbXsEfjPu4XkP/J29TH2/g
X9NaUV9vEY9RaxiP75C/XM9yvJuG9hrOYL5PBz/u3Uyhj/doL2Ql4/UD+ufV
yxlvHzEfMfLvJ8RDu05s7zPgGfo++xfIM7kN/esr9OH8mvnlG/ibMIv56zv6
lz+6H+4H+I3qy/Z+gl7BBzr/x/h+ZWHm99/MV7r/4w/8rbOeB8zAeK257u80
iZLxYRf9fpUlSsbDLTro/X9RmfTu5a9KfWQVOLFeMb3/H+VX63m97IL3WraY
/YdZlMSXs76/mQP0tur5CXOBnY3v4zml/IktXwjnEvzf8VFugVMN/80j7Sf4
byZ/edF+23vUdz6h51C1m97/J7DrOT2PawH+jfFVAdTvod+PCkr5hrPrUX+F
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
8URAPb3vcgbofz7yzf7/AKgSJzo=
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Training Set\"", TraditionalForm], 
    FormBox[
    "\"Algebra 2 Probability divided by highest other\"", TraditionalForm]},
  AxesOrigin->{0., -0.9521257049596581},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{
     Charting`ScaledTicks[{Log, Exp}], 
     Charting`ScaledFrameTicks[{Log, Exp}]}, {Automatic, Automatic}},
  GridLines->{{}, {0}},
  GridLinesStyle->RGBColor[1, 0, 0],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 8059}, {-0.9521257049596581, 2.878321275115013}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->FrontEndValueCache[{Automatic, 
     Charting`ScaledTicks[{Log, Exp}]}, {Automatic, {{-0.6931471805599453, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.5\"", 0.5, AutoDelete -> True], NumberForm[#, {
           DirectedInfinity[1], 1}]& ], StandardForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {0., 
       FormBox["1", StandardForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {1.6094379124341003`, 
       FormBox["5", StandardForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {2.302585092994046, 
       FormBox["10", StandardForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.3025850929940455`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.6094379124341003`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.2039728043259361`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.916290731874155, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.5108256237659907, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.35667494393873245`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.2231435513142097, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.10536051565782628`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {0.6931471805599453, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.0986122886681098`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.3862943611198906`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.791759469228055, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.9459101490553132`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.0794415416798357`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.1972245773362196`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.995732273553991, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {3.4011973816621555`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {3.6888794541139363`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {3.912023005428146, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.0943445622221, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.248495242049359, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.382026634673881, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.499809670330265, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.605170185988092, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {5.0106352940962555`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {5.298317366548036, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}}}]]], "Output",
 CellChangeTimes->{
  3.7714077783446074`*^9, {3.771409033504843*^9, 3.771409036301037*^9}, 
   3.771409096309222*^9, 3.77141036909923*^9, 3.771410642389591*^9, {
   3.7714107111204133`*^9, 3.771410735810136*^9}, 3.771411572616968*^9, {
   3.7714259641378503`*^9, 3.771425982417843*^9}, 3.7714262094641695`*^9, 
   3.771426266574707*^9, 3.7714264632865353`*^9, 3.771426609103939*^9, 
   3.771428736928125*^9, 3.7714288030314646`*^9, 3.771428966367594*^9, 
   3.771429422579741*^9, 3.7714298018466115`*^9},
 CellLabel->
  "Out[746]=",ExpressionUUID->"476ae1f1-9faa-4efb-be40-462ff18e8d7f"],

Cell[BoxData["\<\"C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\3pset_trained_NeuralNetwork.pdf\"\>"], "Output",
 CellChangeTimes->{
  3.7714077783446074`*^9, {3.771409033504843*^9, 3.771409036301037*^9}, 
   3.771409096309222*^9, 3.77141036909923*^9, 3.771410642389591*^9, {
   3.7714107111204133`*^9, 3.771410735810136*^9}, 3.771411572616968*^9, {
   3.7714259641378503`*^9, 3.771425982417843*^9}, 3.7714262094641695`*^9, 
   3.771426266574707*^9, 3.7714264632865353`*^9, 3.771426609103939*^9, 
   3.771428736928125*^9, 3.7714288030314646`*^9, 3.771428966367594*^9, 
   3.771429422579741*^9, 3.771429802940404*^9},
 CellLabel->
  "Out[747]=",ExpressionUUID->"40cf7626-16de-431c-9935-f601e62d4179"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"turnOffEquivFrac", "[", "question_", "]"}], ":=", 
   RowBox[{"StringMatchQ", "[", 
    RowBox[{"question", ",", " ", 
     RowBox[{"{", "\"\<*raction*implest form\>\"", "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"equivilentFraction", "[", 
       RowBox[{"x_", ",", " ", "y_", ",", " ", "n_"}], "]"}], ":=", " ", 
      RowBox[{"n", "*", 
       RowBox[{"x", "/", "y"}]}]}], " ", ";"}], "/", "turnOffEquivFrac"}], 
   "\[Equal]", "False"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"isMatrix", "[", "answer_", "]"}], ":=", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"answer", ",", " ", "MatrixForm"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"allpoints", "[", "question_", "]"}], ":=", 
   RowBox[{"StringMatchQ", "[", 
    RowBox[{"question", ",", " ", 
     RowBox[{"{", "\"\<*all points*\>\"", "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"eitherPointfirst", "[", 
   RowBox[{"a_", ",", " ", "b_", ",", "c_", ",", " ", "d_"}], "]"}], ":=", 
  " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", "a", ",", " ", "b", ",", " ", "\"\<)\>\""}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<(\>\"", "c"}], ",", " ", 
       RowBox[{"d", "\"\<)\>\""}]}], "}"}]}], "}"}], "\[Rule]", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<(\>\"", "c"}], ",", " ", 
       RowBox[{"d", "\"\<)\>\""}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", "a", ",", " ", "b", ",", " ", "\"\<)\>\""}], 
      "}"}]}], "}"}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"isPoint", "[", "answer_", "]"}], ":=", 
   RowBox[{"StringMatchQ", "[", 
    RowBox[{"answer", ",", " ", 
     RowBox[{"{", "\"\<(*,*)\>\"", "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"commutative", "[", 
    RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "+", "b"}], "\[Rule]", " ", 
    RowBox[{"b", "+", "a"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"distributive", "[", 
    RowBox[{"a_", ",", "b_", ",", " ", "c_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "*", 
     RowBox[{"(", 
      RowBox[{"b", "+", "c"}], ")"}]}], "\[Rule]", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"a", "*", "b"}], "+", 
      RowBox[{"a", "*", "c"}]}], "/;", " ", 
     RowBox[{"isMatrix", "\[Equal]", "False"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"commutativemulti", "[", 
      RowBox[{"a_", ",", " ", "b_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{"a", "*", "b"}], "\[Rule]", " ", 
      RowBox[{"b", "*", "a"}]}]}], ";"}], "/;", 
   RowBox[{"isMatrix", "\[Equal]", "False"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"associative", "[", 
    RowBox[{"a_", ",", " ", "b_", ",", " ", "c_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "+", 
     RowBox[{"(", 
      RowBox[{"b", "+", "c"}], ")"}]}], "\[Rule]", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"a", "+", "b"}], ")"}], "+", "c"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"associativemulti", "[", 
    RowBox[{"a_", ",", " ", "b_", ",", "c_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "*", 
     RowBox[{"(", 
      RowBox[{"b", "*", "c"}], ")"}]}], "\[Rule]", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"a", "*", "b"}], ")"}], "*", "c"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"sin2", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "\[Rule]", " ", 
    RowBox[{"2", 
     RowBox[{"Sin", "[", 
      RowBox[{"x", "/", "2"}], "]"}], 
     RowBox[{"Cos", "[", 
      RowBox[{"x", "/", "2"}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"cos2", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], "\[Rule]", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"Power", "[", 
       RowBox[{
        RowBox[{"Cos", "[", 
         RowBox[{"x", "/", "2"}], "]"}], ",", " ", "2"}], "]"}], "*", "2"}], 
     "-", "1"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"cos2alt1", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], "\[Rule]", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "1"}], 
      RowBox[{"Power", "[", 
       RowBox[{
        RowBox[{"Sin", "[", 
         RowBox[{"x", "/", "2"}], "]"}], ",", " ", "2"}], "]"}], "*", "2"}], 
     "+", "1"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cos2alt2", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Cos", "[", "x", "]"}], "\[Rule]", " ", 
   RowBox[{
    RowBox[{"Power", "[", 
     RowBox[{
      RowBox[{"Cos", "[", 
       RowBox[{"x", "/", "2"}], "]"}], ",", " ", "2"}], "]"}], "-", 
    RowBox[{"Power", "[", 
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"x", "/", "2"}], "]"}], ",", " ", "2"}], "]"}]}]}]}]}], "Input",
 CellChangeTimes->{{3.7710690813754177`*^9, 3.7710691204935193`*^9}, 
   3.771069190433951*^9, 3.771102351223105*^9, {3.771182760383189*^9, 
   3.7711828691128426`*^9}, {3.771182984216877*^9, 3.7711830284306865`*^9}, {
   3.771235072613437*^9, 3.7712352026724358`*^9}, {3.7712352410053663`*^9, 
   3.7712353509382486`*^9}, {3.7713479525094604`*^9, 3.771348048363394*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"c7c8062e-a44d-44d6-9860-e4bb30b9612d"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771183039335494*^9, 3.7711830410035667`*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"075af11f-332b-44ef-b6ed-18482c0a4326"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "include", " ", "the", " ", "above", " ", "graphs", " ", "and", " ", "the",
     " ", "test", " ", "functions", " ", "to", " ", "show", " ", 
    "infeasiability", " ", "of", " ", "doing", " ", "the", " ", 
    "classifier"}], "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
   "questionClassifier", "[", 
    "\"\<Derivative of f(x)=\!\(\*SuperscriptBox[\(x\), \(2\)]\)\>\"", "]"}], 
   "\n", 
   RowBox[{"questionClassifier", "[", "\"\<Integral of x dx\>\"", "]"}], "\n",
    "\n", 
   RowBox[{"questionClassifier", "[", "\"\<What is 10% of 110\>\"", "]"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"questionClassifier", "[", "\"\<sin(\[Pi]/5)\>\"", "]"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "Need", " ", "to", " ", "add", " ", "more", " ", "training", " ", 
      "about", " ", "sine", " ", "to", " ", "a2"}], ",", " ", 
     RowBox[{"derivative", " ", "to", " ", "calc"}]}], "*)"}], "\n", "\n", 
   RowBox[{"questionClassifier", "[", "\"\<315+35\>\"", "]"}], "\n", 
   RowBox[{
   "questionClassifier", "[", "\"\<Derivative of Power[x, 6]\>\"", "]"}], 
   "\n", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"questionClassifier", ",", " ", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<algebra 1\>\"", "\[Rule]", " ", "algebra1Questions"}], 
       ",", 
       RowBox[{"\"\<algebra 2\>\"", "\[Rule]", " ", "algebra2Qs"}]}], " ", 
      "|>"}], ",", "\"\<Accuracy\>\""}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.771088662797636*^9, 3.7710886895019336`*^9}, 
   3.7711017977833295`*^9, {3.7711019578388124`*^9, 3.7711019757038107`*^9}, 
   3.77110252488804*^9, {3.7711040215410056`*^9, 3.771104055131591*^9}, 
   3.7711051107461853`*^9, {3.771105347712582*^9, 3.7711053479387584`*^9}, {
   3.771150327390992*^9, 3.771150329615141*^9}, {3.7711510820919733`*^9, 
   3.771151103725484*^9}, {3.7711639811964626`*^9, 3.7711639823005247`*^9}, {
   3.771173181133225*^9, 3.7711731947498894`*^9}, 3.7714260081465397`*^9, {
   3.7714262193973017`*^9, 3.7714262212055855`*^9}, {3.7714262807611113`*^9, 
   3.7714262861219215`*^9}, {3.771426625425836*^9, 3.771426628443963*^9}, {
   3.771428130141677*^9, 3.7714281324943485`*^9}, {3.7714281707935686`*^9, 
   3.771428183914912*^9}, {3.771428826909436*^9, 3.7714288332399554`*^9}},
 CellLabel->
  "In[748]:=",ExpressionUUID->"1927aef9-607f-4a49-a59a-07062997209f"],

Cell[BoxData["\<\"algebra 1\"\>"], "Output",
 CellChangeTimes->{
  3.771407778988659*^9, 3.7714090462977333`*^9, 3.77141074576283*^9, 
   3.7714115815935955`*^9, {3.771425995070835*^9, 3.7714260085978613`*^9}, 
   3.7714262222333164`*^9, {3.771426272124654*^9, 3.7714262874908943`*^9}, 
   3.771426469439207*^9, {3.7714266177443767`*^9, 3.7714266303753557`*^9}, {
   3.7714281742930565`*^9, 3.7714281884721346`*^9}, 3.7714287426972275`*^9, {
   3.7714288143224916`*^9, 3.7714288337893276`*^9}, 3.7714289743792872`*^9, 
   3.7714294289964848`*^9, 3.7714298079719625`*^9},
 CellLabel->
  "Out[748]=",ExpressionUUID->"e62b6c20-ede8-4daa-95ff-9bed7854437c"],

Cell[BoxData["\<\"algebra 1\"\>"], "Output",
 CellChangeTimes->{
  3.771407778988659*^9, 3.7714090462977333`*^9, 3.77141074576283*^9, 
   3.7714115815935955`*^9, {3.771425995070835*^9, 3.7714260085978613`*^9}, 
   3.7714262222333164`*^9, {3.771426272124654*^9, 3.7714262874908943`*^9}, 
   3.771426469439207*^9, {3.7714266177443767`*^9, 3.7714266303753557`*^9}, {
   3.7714281742930565`*^9, 3.7714281884721346`*^9}, 3.7714287426972275`*^9, {
   3.7714288143224916`*^9, 3.7714288337893276`*^9}, 3.7714289743792872`*^9, 
   3.7714294289964848`*^9, 3.771429807984971*^9},
 CellLabel->
  "Out[749]=",ExpressionUUID->"d8017133-d40a-441a-b354-936c9c40e336"],

Cell[BoxData["\<\"algebra 1\"\>"], "Output",
 CellChangeTimes->{
  3.771407778988659*^9, 3.7714090462977333`*^9, 3.77141074576283*^9, 
   3.7714115815935955`*^9, {3.771425995070835*^9, 3.7714260085978613`*^9}, 
   3.7714262222333164`*^9, {3.771426272124654*^9, 3.7714262874908943`*^9}, 
   3.771426469439207*^9, {3.7714266177443767`*^9, 3.7714266303753557`*^9}, {
   3.7714281742930565`*^9, 3.7714281884721346`*^9}, 3.7714287426972275`*^9, {
   3.7714288143224916`*^9, 3.7714288337893276`*^9}, 3.7714289743792872`*^9, 
   3.7714294289964848`*^9, 3.771429807990976*^9},
 CellLabel->
  "Out[750]=",ExpressionUUID->"c74d11c6-9aed-43f6-b68e-951f7060c2dc"],

Cell[BoxData["\<\"algebra 2\"\>"], "Output",
 CellChangeTimes->{
  3.771407778988659*^9, 3.7714090462977333`*^9, 3.77141074576283*^9, 
   3.7714115815935955`*^9, {3.771425995070835*^9, 3.7714260085978613`*^9}, 
   3.7714262222333164`*^9, {3.771426272124654*^9, 3.7714262874908943`*^9}, 
   3.771426469439207*^9, {3.7714266177443767`*^9, 3.7714266303753557`*^9}, {
   3.7714281742930565`*^9, 3.7714281884721346`*^9}, 3.7714287426972275`*^9, {
   3.7714288143224916`*^9, 3.7714288337893276`*^9}, 3.7714289743792872`*^9, 
   3.7714294289964848`*^9, 3.771429807997984*^9},
 CellLabel->
  "Out[751]=",ExpressionUUID->"f6616d49-abd6-4bba-875e-ef8e64091d02"],

Cell[BoxData["\<\"algebra 1\"\>"], "Output",
 CellChangeTimes->{
  3.771407778988659*^9, 3.7714090462977333`*^9, 3.77141074576283*^9, 
   3.7714115815935955`*^9, {3.771425995070835*^9, 3.7714260085978613`*^9}, 
   3.7714262222333164`*^9, {3.771426272124654*^9, 3.7714262874908943`*^9}, 
   3.771426469439207*^9, {3.7714266177443767`*^9, 3.7714266303753557`*^9}, {
   3.7714281742930565`*^9, 3.7714281884721346`*^9}, 3.7714287426972275`*^9, {
   3.7714288143224916`*^9, 3.7714288337893276`*^9}, 3.7714289743792872`*^9, 
   3.7714294289964848`*^9, 3.7714298080039854`*^9},
 CellLabel->
  "Out[752]=",ExpressionUUID->"843bb940-fc52-4601-9559-0bd9e5e1fb80"],

Cell[BoxData["\<\"algebra 1\"\>"], "Output",
 CellChangeTimes->{
  3.771407778988659*^9, 3.7714090462977333`*^9, 3.77141074576283*^9, 
   3.7714115815935955`*^9, {3.771425995070835*^9, 3.7714260085978613`*^9}, 
   3.7714262222333164`*^9, {3.771426272124654*^9, 3.7714262874908943`*^9}, 
   3.771426469439207*^9, {3.7714266177443767`*^9, 3.7714266303753557`*^9}, {
   3.7714281742930565`*^9, 3.7714281884721346`*^9}, 3.7714287426972275`*^9, {
   3.7714288143224916`*^9, 3.7714288337893276`*^9}, 3.7714289743792872`*^9, 
   3.7714294289964848`*^9, 3.7714298080099893`*^9},
 CellLabel->
  "Out[753]=",ExpressionUUID->"4570f153-f3e6-40de-ac67-5b7d12361f57"],

Cell[BoxData["0.7723599632690542`"], "Output",
 CellChangeTimes->{
  3.771407778988659*^9, 3.7714090462977333`*^9, 3.77141074576283*^9, 
   3.7714115815935955`*^9, {3.771425995070835*^9, 3.7714260085978613`*^9}, 
   3.7714262222333164`*^9, {3.771426272124654*^9, 3.7714262874908943`*^9}, 
   3.771426469439207*^9, {3.7714266177443767`*^9, 3.7714266303753557`*^9}, {
   3.7714281742930565`*^9, 3.7714281884721346`*^9}, 3.7714287426972275`*^9, {
   3.7714288143224916`*^9, 3.7714288337893276`*^9}, 3.7714289743792872`*^9, 
   3.7714294289964848`*^9, 3.771429808504341*^9},
 CellLabel->
  "Out[754]=",ExpressionUUID->"1b05d7c1-3a60-4c4d-97ee-5583072ba564"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"questionClassifier", "[", 
  "\"\<A salesman is paid a monthly salary of $200 plus 6% commission on his \
monthly sales.\\nDetermine the amount of sales required for his total monthly \
income to be $5.\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.77117350100593*^9, 3.771173526311931*^9}},
 CellLabel->
  "In[573]:=",ExpressionUUID->"9a0f02f8-0dcb-4fa0-a434-3dab92e35e3d"],

Cell[BoxData["\<\"algebra 1\"\>"], "Output",
 CellChangeTimes->{3.77140777924067*^9, 3.7714281657570076`*^9},
 CellLabel->
  "Out[573]=",ExpressionUUID->"aae49e1d-624f-407d-a604-4648101ea6a5"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Have", " ", "a", " ", "working", " ", "classifier", " ", "on", " ", 
     "algebra", " ", "1", " ", "and", " ", "2"}], ",", " ", 
    RowBox[{
    "to", " ", "add", " ", "calc", " ", "would", " ", "need", " ", "an", " ", 
     "extra", " ", "data", " ", "set"}]}], "*)"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.771173538075275*^9, 3.771173570911613*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"410c0451-9b50-4726-838d-507ca1520553"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"correctAnswer", "[", 
   RowBox[{"answer_", ",", " ", "correct_"}], "]"}], ":=", 
  RowBox[{"MatchQ", "[", 
   RowBox[{"answer", ",", " ", "correct"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"setLevel", "[", 
   RowBox[{"question_", ",", " ", "tag_"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"UnsameQ", "[", 
     RowBox[{"tag", ",", " ", "\"\<\>\""}], "]"}], ",", " ", "tag", ",", " ", 
    RowBox[{"questionClassifier", "[", "question", "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.7711736593103347`*^9, 3.7711737074880314`*^9}, {
  3.771173871939076*^9, 3.771173874042588*^9}, {3.7712336619774513`*^9, 
  3.7712338084910626`*^9}, {3.771233866828873*^9, 3.771233956929276*^9}, {
  3.771347249512906*^9, 3.7713472771428676`*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"25eb0e56-d2cb-4e3c-833f-4d9862c278b6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tagAssociations", ":=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<algebra 1 theorems\>\"", "\[Rule]", " ", 
      RowBox[{"{", 
       RowBox[{
       "commutativeAddition", ",", " ", "commutativemulti", ",", " ", 
        "distributive", ",", " ", "associative", ",", " ", "associativemulti",
         ",", " ", "equivilentFraction"}], "}"}]}], ",", " ", 
     RowBox[{"\"\<algebra 2 theorems\>\"", "\[Rule]", " ", 
      RowBox[{"{", 
       RowBox[{
       "isMatrix", ",", " ", "sin2", ",", " ", "cos2", ",", " ", "cos2alt1", 
        ",", " ", "cos2alt2", ",", " ", "eitherPointfirst", ",", " ", 
        "isPoint", ",", " ", "commutativeAddition", ",", " ", 
        "commutativemulti", ",", " ", "distributive", ",", " ", "associative",
         ",", " ", "associativemulti", ",", " ", "equivilentFraction"}], 
       "}"}]}]}], "|>"}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.771234300395832*^9, 3.7712343261973624`*^9}, {
   3.7712349783800793`*^9, 3.7712350377545757`*^9}, {3.7713246875147505`*^9, 
   3.7713247160686665`*^9}, {3.771324750887334*^9, 3.7713248208968925`*^9}, 
   3.7713469260459433`*^9, {3.771346958148202*^9, 3.771346967732873*^9}, {
   3.7713473319306927`*^9, 3.7713473600851464`*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"66e41b82-96ad-4d5a-885b-44a2b04ac964"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7713403299709625`*^9, 3.7713403451194363`*^9}, {
  3.7713472317837057`*^9, 3.771347238884147*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"266398ea-08f6-44ac-9796-54783f49bc3b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"equivilentAnswer", "[", 
   RowBox[{
   "question_", ",", "tag_", ",", " ", "answer_", ",", " ", "correct_", ","}],
    " ", "]"}], ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"correctAnswer", "[", 
      RowBox[{"answer", ",", " ", "correct"}], "]"}], "\[Equal]", "False"}], 
    ",", " ", "\[IndentingNewLine]", 
    RowBox[{"If", "[", "\[IndentingNewLine]", "\t", 
     RowBox[{
      RowBox[{"turnOffEquivFrac", "[", "question", "]"}], ",", " ", "False", 
      ",", " ", "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"qTag", "=", 
        RowBox[{"AppendTo", "[", 
         RowBox[{
          RowBox[{"setLevel", "[", 
           RowBox[{"question", ",", " ", "tag"}], "]"}], ",", " ", 
          "\"\< theorems\>\""}], "]"}]}], ";", "\[IndentingNewLine]", "\t", 
       RowBox[{"(*", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"qTag", ",", " ", "\"\<calc theorems\>\""}], "]"}], ","}], 
         " "}], "*)"}], "\[IndentingNewLine]", "\t", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Series", "[", 
             RowBox[{"answer", ",", " ", 
              RowBox[{"{", 
               RowBox[{"x", ",", "0", ",", " ", "6"}], "}"}]}], "]"}], 
            "\[Equal]", 
            RowBox[{"Series", "[", 
             RowBox[{"correct", ",", " ", 
              RowBox[{"{", 
               RowBox[{"x", ",", " ", "0", ",", " ", "6"}], "}"}]}], "]"}]}], 
           ",", " ", "True", ",", " ", "False"}], "]"}], ","}], " ", "*)"}], 
       "\[IndentingNewLine]", "\t ", 
       RowBox[{"proof", "==", 
        RowBox[{"FindEquationalProof", "[", 
         RowBox[{
          RowBox[{"answer", "=", "correct"}], ",", " ", 
          RowBox[{"tagAssociations", "[", "qtag", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\t", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"ContainsAll", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"proof", "[", "\"\<ProofDataset\>\"", "]"}], "[", 
            RowBox[{"All", ",", " ", "\"\<Statement\>\""}], "]"}], ",", " ", 
           RowBox[{"tagAssociations", "[", 
            RowBox[{"Select", "[", 
             RowBox[{"tagAssociations", ",", " ", 
              RowBox[{
               RowBox[{"UnsameQ", "[", 
                RowBox[{
                 RowBox[{"#", "[", "All", "]"}], ",", " ", "qtag"}], "]"}], 
               "&"}]}], "]"}], "]"}]}], "]"}], ",", " ", "False", ",", " ", 
         "True"}], "]"}]}]}], "\[IndentingNewLine]", "\t\t\t", 
     "\[IndentingNewLine]", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7712339645218053`*^9, 3.7712340834723206`*^9}, {
  3.7712341214519916`*^9, 3.7712342880157833`*^9}, {3.771234329577595*^9, 
  3.7712346331069736`*^9}, {3.771346981397788*^9, 3.77134716216393*^9}, {
  3.771347286675481*^9, 3.7713473206139*^9}, {3.7713474013435993`*^9, 
  3.771347484110985*^9}, {3.7713475425553865`*^9, 3.7713475937449694`*^9}, {
  3.7713476722052555`*^9, 3.7713478773306417`*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"2c8ae09e-5141-49f8-bc2c-efd2a2324a89"],

Cell[BoxData[
 RowBox[{
  RowBox[{"pDiffProblem", "=", 
   RowBox[{
    RowBox[{"Import", "[", 
     RowBox[{"polydiffurl", ",", " ", "\"\<Data\>\""}], "]"}], 
    "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7712357417153225`*^9, 3.771235782034418*^9}, {
   3.7712358223189893`*^9, 3.7712358593789177`*^9}, 3.771236085297859*^9, 
   3.771236670446211*^9},
 CellLabel->"In[98]:=",ExpressionUUID->"7cf76789-eb97-4c2e-91e6-102698972f28"],

Cell[BoxData[
 RowBox[{
  RowBox[{"strippedQuestion", "=", 
   RowBox[{"\"\<question\>\"", "/.", "pDiffProblem"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.77123586515536*^9, 3.771235903687064*^9}, 
   3.7712365956914773`*^9, 3.771236674226424*^9},
 CellLabel->"In[99]:=",ExpressionUUID->"322b59e5-9d1b-4e2d-aeb2-b791e94df4bc"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771235907603317*^9, 3.7712359333726025`*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"957a51f1-e3b5-4fcc-a441-b5abb27dc864"],

Cell[BoxData[
 RowBox[{
  RowBox[{"strippedQuestion", "=", 
   RowBox[{
   "\"\<<math>\>\"", "<>", "strippedQuestion", "<>", "\"\<</math>\>\""}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7712359768419514`*^9, 3.771236017605138*^9}, 
   3.7712366770106707`*^9},
 CellLabel->
  "In[101]:=",ExpressionUUID->"d707c0a0-6561-43e9-9fd0-a43a755a3534"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ImportString", "[", 
    RowBox[{"strippedQuestion", ",", " ", "\"\<MathML\>\""}], "]"}], " ", "//",
    "RawBoxes"}], ";"}]], "Input",
 CellChangeTimes->{{3.7712360210094275`*^9, 3.771236051359496*^9}, {
  3.771236611469623*^9, 3.7712366126217575`*^9}, {3.7712366800468817`*^9, 
  3.771236682434343*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"e080f098-be02-4782-988d-080fb60799bf"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7712360976547728`*^9, 3.771236106727406*^9}, {
   3.7712362010749397`*^9, 3.7712362044232264`*^9}, {3.7712362370974526`*^9, 
   3.7712362649236383`*^9}, {3.771236347168664*^9, 3.7712364023625517`*^9}, {
   3.771236622058362*^9, 3.771236639479291*^9}, 3.7712368002319756`*^9},
 CellLabel->
  "In[103]:=",ExpressionUUID->"00aac20e-7712-4382-bdcd-1a0f47667dfa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pDiffStorage", "=", 
  RowBox[{"{", "}"}]}]], "Input",
 CellChangeTimes->{{3.771236318520415*^9, 3.7712363247768025`*^9}, {
  3.7712368523205495`*^9, 3.771236920349883*^9}, {3.7712371406349945`*^9, 
  3.771237142395172*^9}, {3.7714076858936605`*^9, 3.771407686761722*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"1d39c30e-2952-4c75-b7a7-9b9256359d5d"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.7714077801327343`*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"b16912a7-6bd9-43bb-a49d-5511231b6070"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["polydiffurl"], "Input",
 CellChangeTimes->{{3.7712383301870437`*^9, 3.7712383336152873`*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"8a2df4ce-9c44-47a1-bde1-ff1c4d183497"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/polynomial-differentiation.\
json\"\>"], "Output",
 CellChangeTimes->{3.7714077801647367`*^9},
 CellLabel->
  "Out[105]=",ExpressionUUID->"8f2b40e5-5806-465b-9e7a-d7300441eeee"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trigdiffurl", "=", 
  "\"\<https://math.ly/api/v1/calculus/trigonometric-differentiation.json\>\"\
"}]], "Input",
 CellChangeTimes->{{3.7712383828806543`*^9, 3.771238407866433*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"c65c0dd0-81b7-4955-8c52-e9b2bed36fa7"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/trigonometric-\
differentiation.json\"\>"], "Output",
 CellChangeTimes->{3.7714077802007384`*^9},
 CellLabel->
  "Out[106]=",ExpressionUUID->"1542070a-e517-4611-a234-849b11418754"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expodiffurl", "=", 
  "\"\<https://math.ly/api/v1/calculus/exponents-differentiation.json\>\""}]],\
 "Input",
 CellChangeTimes->{{3.7712384289872923`*^9, 3.771238464023595*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"9bdfa35f-8e9a-4070-8882-15d68d851348"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/exponents-differentiation.\
json\"\>"], "Output",
 CellChangeTimes->{3.771407780248741*^9},
 CellLabel->
  "Out[107]=",ExpressionUUID->"6b6e4ed5-53b9-4b6b-a4fb-968e16e8883c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"polyinturl", "=", 
  "\"\<https://math.ly/api/v1/calculus/polynomial-integration.json\>\""}]], \
"Input",
 CellChangeTimes->{{3.7712384945360937`*^9, 3.7712385164416804`*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"3917c014-4521-4d91-8543-b5d914f1cc18"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/polynomial-integration.json\
\"\>"], "Output",
 CellChangeTimes->{3.7714077802847433`*^9},
 CellLabel->
  "Out[108]=",ExpressionUUID->"cf65e442-89fa-406f-9041-f2d17d792c9d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"triginturl", "=", 
  "\"\<https://math.ly/api/v1/calculus/trignometric-integration.json\>\""}]], \
"Input",
 CellChangeTimes->{{3.7712385417954173`*^9, 3.7712385534442115`*^9}, {
  3.771238599654127*^9, 3.771238600526188*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"467d54c9-fca1-43d0-97cf-f2d46c7284b1"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/trignometric-integration.\
json\"\>"], "Output",
 CellChangeTimes->{3.7714077802967453`*^9},
 CellLabel->
  "Out[109]=",ExpressionUUID->"bee93cc0-1c3f-40f1-b350-34c12374ace2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trigdefinturl", "=", 
  "\"\<https://math.ly/api/v1/calculus/trignometric-definite-integrals.json\>\
\""}]], "Input",
 CellChangeTimes->{{3.7712385694564934`*^9, 3.771238570572569*^9}, {
  3.771238603426363*^9, 3.7712386239398203`*^9}, {3.771323928898393*^9, 
  3.771323930748708*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"f8bb0306-7bc5-4dc8-9d8e-1e8f7ab2e834"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/trignometric-definite-\
integrals.json\"\>"], "Output",
 CellChangeTimes->{3.7714077803327475`*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"c8eedc54-4381-4b1a-b93b-60e7e4880d18"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"expointurl", "=", 
  "\"\<https://math.ly/api/v1/calculus/exponents-integration.json\>\""}], "\
\[IndentingNewLine]", 
 RowBox[{"expodefinturl", "=", 
  "\"\<https://math.ly/api/v1/calculus/exponents-definite-integration.json\>\"\
"}]}], "Input",
 CellChangeTimes->{{3.771238670241479*^9, 3.7712387130644655`*^9}, {
  3.771238853404136*^9, 3.771238856744407*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"5e485a53-0caa-4994-a3a3-d3d69cde3b52"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/exponents-integration.json\"\
\>"], "Output",
 CellChangeTimes->{3.7714077803687673`*^9},
 CellLabel->
  "Out[111]=",ExpressionUUID->"0b612e65-5748-4321-8c95-046de8da445b"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/exponents-definite-\
integration.json\"\>"], "Output",
 CellChangeTimes->{3.771407780372753*^9},
 CellLabel->
  "Out[112]=",ExpressionUUID->"a00a3cf8-dfec-4d03-be68-f6c0042c65b2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["\"\<https://math.ly/api/v1/calculus/exponents-definite-\
integrals.json\>\""], "Input",
 CellChangeTimes->{{3.7713239365858574`*^9, 3.771323938260048*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"cfb0e200-36f9-494c-88e2-8eba067033a5"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/exponents-definite-\
integrals.json\"\>"], "Output",
 CellChangeTimes->{3.771407780408753*^9},
 CellLabel->
  "Out[113]=",ExpressionUUID->"2100db1b-2484-4291-a3e1-fb570003fb94"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"polydefinturl", "=", 
  "\"\<https://math.ly/api/v1/calculus/polynomial-definite-integrals.json\>\"\
"}]], "Input",
 CellChangeTimes->{{3.7712387241332893`*^9, 3.7712387427025843`*^9}, {
  3.7713239444234276`*^9, 3.7713239461686683`*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"9db4f7e5-a195-45b4-868f-2359598971c3"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/polynomial-definite-\
integrals.json\"\>"], "Output",
 CellChangeTimes->{3.7714077804207535`*^9},
 CellLabel->
  "Out[114]=",ExpressionUUID->"4220632d-b7c2-4123-a22c-a72ea1ab4542"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"getcalcPs", "[", 
   RowBox[{"url_", ",", " ", "dataarray_"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{"pDiffProblem", "=", 
      RowBox[{
       RowBox[{"Import", "[", 
        RowBox[{"url", ",", " ", "\"\<Data\>\""}], "]"}], 
       "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"strippedQuestion", "=", 
      RowBox[{"\"\<question\>\"", "/.", "pDiffProblem"}]}], ";", " ", 
     RowBox[{"strippedQuestion", "=", 
      RowBox[{
      "\"\<<math>\>\"", "<>", "strippedQuestion", "<>", "\"\<</math>\>\""}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"iS", "=", 
      RowBox[{
       RowBox[{"ImportString", "[", 
        RowBox[{"strippedQuestion", ",", " ", "\"\<MathML\>\""}], "]"}], " ", 
       "//", "RawBoxes"}]}], ";", " ", "\[IndentingNewLine]", " ", 
     RowBox[{"Append", "[", 
      RowBox[{"dataarray", ",", " ", "iS"}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7712387867010036`*^9, 3.7712388409796124`*^9}, {
  3.7713238410054216`*^9, 3.771323877530431*^9}, {3.7713240218104286`*^9, 
  3.7713240244493046`*^9}, {3.771324059714985*^9, 3.7713240915278735`*^9}, {
  3.7713241576472826`*^9, 3.771324185723219*^9}, {3.771324253192051*^9, 
  3.7713242609812126`*^9}, {3.7713242926597095`*^9, 3.7713242947501965`*^9}, {
  3.771324562719307*^9, 3.7713245902837057`*^9}, {3.7713246299600267`*^9, 
  3.771324636399604*^9}, {3.771340655579898*^9, 3.7713406586721134`*^9}, {
  3.7713462726215763`*^9, 3.771346352383828*^9}, {3.771346433079231*^9, 
  3.7713464332472515`*^9}, {3.7713465172028217`*^9, 3.7713465690705833`*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"87f57da9-00aa-4b46-ab12-6608300fc354"],

Cell[BoxData[
 RowBox[{
  RowBox[{"urls", "=", 
   RowBox[{"{", 
    RowBox[{
    "polydefinturl", ",", " ", "polydiffurl", ",", " ", "polyinturl", ",", 
     " ", "trigdefinturl", ",", " ", "trigdiffurl", ",", " ", "triginturl", 
     ",", " ", "expodefinturl", ",", " ", "expodiffurl", ",", " ", 
     "expointurl"}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.77123886244076*^9, 3.7712389039876523`*^9}, 
   3.771323949742208*^9},
 CellLabel->
  "In[116]:=",ExpressionUUID->"855d2f73-4d92-458c-92f8-4997982eeb95"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pdefint", "=", 
  RowBox[{"{", "\"\<integral of x^6 dx from 0 to 1\>\"", "}"}]}]], "Input",
 CellChangeTimes->{{3.771238920772838*^9, 3.771238974896619*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"c5d465ea-1c08-42a8-9ef9-344addb687c8"],

Cell[BoxData[
 RowBox[{"{", "\<\"integral of x^6 dx from 0 to 1\"\>", "}"}]], "Output",
 CellChangeTimes->{3.7714077804727583`*^9},
 CellLabel->
  "Out[117]=",ExpressionUUID->"26a1108c-aec8-4052-a1f4-54a489e40d07"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pint", "=", 
  RowBox[{"{", "\"\<integral of x^3 dx\>\"", "}"}]}]], "Input",
 CellChangeTimes->{{3.771238936982003*^9, 3.771238979260905*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"fbec490a-a8cf-4334-a943-dcc80a67bcec"],

Cell[BoxData[
 RowBox[{"{", "\<\"integral of x^3 dx\"\>", "}"}]], "Output",
 CellChangeTimes->{3.7714077805087585`*^9},
 CellLabel->
  "Out[118]=",ExpressionUUID->"1be33f40-f0ae-46bd-aa3c-ec5454975d5d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"tint", "=", 
   RowBox[{"{", "\"\<integral of cos(x) dx\>\"", "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"tdefint", "=", 
  RowBox[{
  "{", "\"\<integral of tan(x) dx from 0 to \[Pi]/4\>\"", "}"}]}]}], "Input",
 CellChangeTimes->{{3.7712389870494747`*^9, 3.771239047741536*^9}},
 CellLabel->
  "In[119]:=",ExpressionUUID->"53522faf-b64c-4e4b-98e4-8562af9b3595"],

Cell[BoxData[
 RowBox[{"{", "\<\"integral of tan(x) dx from 0 to \[Pi]/4\"\>", 
  "}"}]], "Output",
 CellChangeTimes->{3.771407780544761*^9},
 CellLabel->
  "Out[120]=",ExpressionUUID->"15a530b2-1aaf-455b-a918-6f54ca06bad8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tdiff", "=", 
  RowBox[{"{", "\"\<Derivative of 1+sec(x)\>\"", "}"}]}]], "Input",
 CellChangeTimes->{{3.771239053694174*^9, 3.7712390858044004`*^9}},
 CellLabel->
  "In[121]:=",ExpressionUUID->"cb59bb07-5383-42bf-81be-5f35fcdab709"],

Cell[BoxData[
 RowBox[{"{", "\<\"Derivative of 1+sec(x)\"\>", "}"}]], "Output",
 CellChangeTimes->{3.7714077805807652`*^9},
 CellLabel->
  "Out[121]=",ExpressionUUID->"ea3b66bf-8d65-428b-a370-494c2e125efc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"expodefint", "=", 
   RowBox[{"{", "\"\<Integral of ln(x) from 1 to e\>\"", "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"expodiff", "=", 
  RowBox[{
  "{", "\"\<Derivative of \!\(\*SuperscriptBox[\(e\), \(3 \
\*SuperscriptBox[\(x\), \(2\)]\)]\)\>\"", "}"}]}]}], "Input",
 CellChangeTimes->{{3.7712390904847517`*^9, 3.7712391509510117`*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"0355aab1-cd18-479e-ba9f-08006c50833e"],

Cell[BoxData[
 RowBox[{"{", "\<\"Derivative of \\!\\(\\*SuperscriptBox[\\(e\\), \\(3 \
\\*SuperscriptBox[\\(x\\), \\(2\\)]\\)]\\)\"\>", "}"}]], "Output",
 CellChangeTimes->{3.771407780624768*^9},
 CellLabel->
  "Out[123]=",ExpressionUUID->"d401f0a0-e92a-4537-ab30-25277a8fdb91"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expoint", "=", 
  RowBox[{"{", "\"\<Integral of ln(1-x)/x dx\>\"", "}"}]}]], "Input",
 CellChangeTimes->{{3.771239154995311*^9, 3.7712391824772387`*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"d08078e9-646b-410d-b3da-7b07d3631460"],

Cell[BoxData[
 RowBox[{"{", "\<\"Integral of ln(1-x)/x dx\"\>", "}"}]], "Output",
 CellChangeTimes->{3.771407780664771*^9},
 CellLabel->
  "Out[124]=",ExpressionUUID->"a424d34d-69fe-43ac-b971-0633d6f799c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"arrays", "=", 
  RowBox[{"{", 
   RowBox[{
   "pdefint", ",", " ", "pDiffStorage", ",", " ", "pint", ",", " ", "tdefint",
     ",", " ", "tdiff", ",", " ", "tint", ",", " ", "expodefint", ",", " ", 
    "expodiff", ",", " ", "expoint"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.771239190008418*^9, 3.771239264929635*^9}},
 CellLabel->
  "In[125]:=",ExpressionUUID->"42c8cf32-1946-44b8-9562-13038f11fb94"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "\<\"integral of x^6 dx from 0 to 1\"\>", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "\<\"integral of x^3 dx\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"integral of tan(x) dx from 0 to \[Pi]/4\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"Derivative of 1+sec(x)\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"integral of cos(x) dx\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"Integral of ln(x) from 1 to e\"\>", "}"}], ",", 
   RowBox[{
   "{", "\<\"Derivative of \\!\\(\\*SuperscriptBox[\\(e\\), \\(3 \
\\*SuperscriptBox[\\(x\\), \\(2\\)]\\)]\\)\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"Integral of ln(1-x)/x dx\"\>", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.771407780708791*^9},
 CellLabel->
  "Out[125]=",ExpressionUUID->"88409f04-04e6-41cf-8e81-d6f6917bd240"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"arrays", "[", 
    RowBox[{"[", "2", "]"}], "]"}], "=", 
   RowBox[{"getcalcPs", "[", 
    RowBox[{
     RowBox[{"urls", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
     ",", " ", 
     RowBox[{
     "arrays", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7712392766864295`*^9, 3.7712394164874935`*^9}, {
   3.771243280668398*^9, 3.7712433195398664`*^9}, {3.771243378474556*^9, 
   3.771243381457677*^9}, {3.771243572090003*^9, 3.7712436107423344`*^9}, {
   3.771323976371134*^9, 3.7713239941517715`*^9}, {3.77132412292959*^9, 
   3.7713241250761147`*^9}, {3.7713242760389147`*^9, 3.771324278193434*^9}, {
   3.771340683921874*^9, 3.7713406864540544`*^9}, 3.7713463338625298`*^9, {
   3.7713464526129932`*^9, 3.771346460481491*^9}, {3.771346578099216*^9, 
   3.7713466209861546`*^9}, {3.7713466756642265`*^9, 3.7713466864449787`*^9}, 
   3.7713534192736344`*^9, {3.771353450199747*^9, 3.771353454352031*^9}, {
   3.77140771499571*^9, 3.7714077193519974`*^9}, {3.771424641326947*^9, 
   3.7714246457470894`*^9}},
 CellLabel->
  "In[362]:=",ExpressionUUID->"0ab75f01-46a1-4e5f-adf2-7d5307d5762b"],

Cell[BoxData[
 TemplateBox[{
  "FetchURL","httperr",
   "\"The request to URL \
\\!\\(\\*RowBox[{\\\"\\\\\\\"https://math.ly/api/v1/calculus/polynomial-\
differentiation.json\\\\\\\"\\\"}]\\) was not successful. The server returned \
the HTTP status code \\!\\(\\*RowBox[{\\\"\\\\\\\"429\\\\\\\"\\\"}]\\).\"",2,
   362,53,15902530251911880643,"Local","Utilities`URLTools`FetchURL"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{{3.7714246480197062`*^9, 3.771424649579814*^9}},
 CellLabel->
  "During evaluation of \
In[362]:=",ExpressionUUID->"0e930282-5620-46f6-9003-841f1137c1ae"],

Cell[BoxData[
 TemplateBox[{
  "Part","partd",
   "\"Part specification \\!\\(\\*RowBox[{\\\"$Failed\\\", \\\"\
\[LeftDoubleBracket]\\\", \\\"2\\\", \\\"\[RightDoubleBracket]\\\"}]\\) is \
longer than depth of object.\"",2,362,54,15902530251911880643,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.7714246480197062`*^9, 3.77142464958982*^9}},
 CellLabel->
  "During evaluation of \
In[362]:=",ExpressionUUID->"975efcb5-dbc9-4603-b290-54fed87fea73"],

Cell[BoxData[
 TemplateBox[{
  "ReplaceAll","reps",
   "\"\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"$Failed\\\", \\\"\
\[LeftDoubleBracket]\\\", \\\"2\\\", \\\"\[RightDoubleBracket]\\\"}], \\\"}\\\
\"}]\\) is neither a list of replacement rules nor a valid dispatch table, \
and so cannot be used for replacing.\"",2,362,55,15902530251911880643,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.7714246480197062`*^9, 3.771424649603831*^9}},
 CellLabel->
  "During evaluation of \
In[362]:=",ExpressionUUID->"235b13af-abc7-4d89-b097-168deb885147"],

Cell[BoxData[
 TemplateBox[{
  "StringJoin","string",
   "\"String expected at position \\!\\(\\*RowBox[{\\\"2\\\"}]\\) in \
\\!\\(\\*RowBox[{\\\"\\\\\\\"<math>\\\\\\\"\\\", \\\"<>\\\", \
RowBox[{\\\"(\\\", RowBox[{\\\"\\\\\\\"question\\\\\\\"\\\", \\\"/.\\\", \\\"\
\[VeryThinSpace]\\\", RowBox[{\\\"$Failed\\\", \\\"\[LeftDoubleBracket]\\\", \
\\\"2\\\", \\\"\[RightDoubleBracket]\\\"}]}], \\\")\\\"}], \\\"<>\\\", \\\"\\\
\\\\\"</math>\\\\\\\"\\\"}]\\).\"",2,362,56,15902530251911880643,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.7714246480197062`*^9, 3.771424649615839*^9}},
 CellLabel->
  "During evaluation of \
In[362]:=",ExpressionUUID->"d2cb5674-a30b-4b78-8aba-adbd8a5b03a0"],

Cell[BoxData[
 TemplateBox[{
  "ImportString","string",
   "\"First argument \\!\\(\\*RowBox[{\\\"\\\\\\\"<math>\\\\\\\"\\\", \
\\\"<>\\\", RowBox[{\\\"(\\\", RowBox[{\\\"\\\\\\\"question\\\\\\\"\\\", \
\\\"/.\\\", \\\"\[VeryThinSpace]\\\", RowBox[{\\\"$Failed\\\", \\\"\
\[LeftDoubleBracket]\\\", \\\"2\\\", \\\"\[RightDoubleBracket]\\\"}]}], \\\")\
\\\"}], \\\"<>\\\", \\\"\\\\\\\"</math>\\\\\\\"\\\"}]\\) is not a string.\"",
   2,362,57,15902530251911880643,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.7714246480197062`*^9, 3.7714246496288667`*^9}},
 CellLabel->
  "During evaluation of \
In[362]:=",ExpressionUUID->"86ce5098-4c0c-412b-84ac-b0a374e5059a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"arrays", "[", 
    RowBox[{"[", "1", "]"}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"-", "1"}], "]"}], "]"}], "//", "InputForm"}]], "Input",
 CellChangeTimes->{{3.771239364927622*^9, 3.771239366876547*^9}, {
  3.771243590686597*^9, 3.7712436033828382`*^9}, {3.7713463724892244`*^9, 
  3.7713463764335003`*^9}, {3.7713466311588645`*^9, 3.7713466333150187`*^9}, {
  3.7714079136310825`*^9, 3.771407914043096*^9}, {3.771416430671318*^9, 
  3.7714165068655033`*^9}},
 CellLabel->
  "In[332]:=",ExpressionUUID->"6140b4bf-cb5c-4e9a-960e-e3b85328145c"],

Cell["\<\
RawBoxes[ImportString[StringJoin[\"<math>\", \"question\" /. $Failed[[2]], \
\"</math>\"], \"MathML\"]]\
\>", "Output",
 CellChangeTimes->{
  3.7714077830478125`*^9, 3.77140791470714*^9, {3.771416424209711*^9, 
   3.7714165081594405`*^9}},
 CellLabel->
  "Out[332]//InputForm=",ExpressionUUID->"9d12a311-4a62-40d5-80da-\
fe0651fc8cad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"arrays", "[", 
   RowBox[{"[", "2", "]"}], "]"}], "/.", 
  RowBox[{
   RowBox[{"RawBoxes", "[", "$Failed", "]"}], "\[Rule]", " ", 
   "Nothing"}]}]], "Input",
 CellChangeTimes->{{3.771416518498773*^9, 3.771416601572257*^9}, {
  3.771421674174217*^9, 3.771421693223977*^9}, {3.771424654087017*^9, 
  3.7714246543602133`*^9}},
 CellLabel->
  "In[363]:=",ExpressionUUID->"95b96204-eca8-4b83-b10f-34c442d68937"],

Cell[BoxData[
 RowBox[{"{", 
  ImportString[
   StringJoin["<math>", 
    ReplaceAll["question", 
     Part[$Failed, 2]], "</math>"], "MathML"], "}"}]], "Output",
 CellChangeTimes->{{3.771416532595808*^9, 3.77141660222472*^9}, 
   3.7714216938023987`*^9, {3.77142463688681*^9, 3.771424656550768*^9}},
 CellLabel->
  "Out[363]=",ExpressionUUID->"cb91a053-ad2a-454b-84e6-c2b1a9daae55"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DumpSave", "[", 
  RowBox[{"\"\<final_progect.mx\>\"", ",", " ", "questionClassifier"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.771353313618944*^9, 3.7713533966804457`*^9}},
 CellLabel->
  "In[131]:=",ExpressionUUID->"dd10fb84-5fff-4fba-9083-85431c8f6cfd"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   RowBox[{
    TagBox["ClassifierFunction",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
     TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEBitmaps", "SquarePlusIconMedium"]], 
               ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
               Evaluator -> Automatic, Method -> "Preemptive"], 
              Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 3.5 CurrentValue["FontCapHeight"]/
                 AbsoluteCurrentValue[Magnification]}]], 
             GraphicsBox[{{
                PointSize[0.13], 
                GrayLevel[0.45], 
                
                PointBox[{{0.9821769431797024, -0.440194219686987}, {
                 1.1339776261519132`, 0.8056918676854272}, {
                 0.5279892326667741, 0.6574306661126254}, {
                 0.022147046479890797`, 1.4937877187998898`}}], 
                GrayLevel[0.7], 
                
                PointBox[{{-0.9815166384819979, 
                 0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                GrayLevel[0.55], 
                AbsoluteThickness[1.5], 
                LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
              Axes -> {False, False}, AxesLabel -> {None, None}, 
               AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                 AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
               Frame -> {{True, True}, {True, True}}, 
               FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
               Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
               GridLines -> {None, None}, 
               LabelStyle -> {FontFamily -> "Arial"}, 
               Method -> {"ScalingFunctions" -> None}, 
               PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
               True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
               Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
              ImageSize -> 
              Dynamic[{
                Automatic, 3.5 CurrentValue["FontCapHeight"]/
                 AbsoluteCurrentValue[Magnification]}], Frame -> True, 
              FrameTicks -> None, FrameStyle -> Directive[
                Opacity[0.5], 
                Thickness[Tiny], 
                RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
              GrayLevel[0.94]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Nominal\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   
                   TemplateBox[{
                    ",", "\",\"", "\"algebra 1\"", "\"algebra 2\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEBitmaps", "SquareMinusIconMedium"]], 
               ButtonFunction :> (Typeset`open$$ = False), Appearance -> None,
                Evaluator -> Automatic, Method -> "Preemptive"], 
              Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 3.5 CurrentValue["FontCapHeight"]/
                 AbsoluteCurrentValue[Magnification]}]], 
             GraphicsBox[{{
                PointSize[0.13], 
                GrayLevel[0.45], 
                
                PointBox[{{0.9821769431797024, -0.440194219686987}, {
                 1.1339776261519132`, 0.8056918676854272}, {
                 0.5279892326667741, 0.6574306661126254}, {
                 0.022147046479890797`, 1.4937877187998898`}}], 
                GrayLevel[0.7], 
                
                PointBox[{{-0.9815166384819979, 
                 0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                GrayLevel[0.55], 
                AbsoluteThickness[1.5], 
                LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
              Axes -> {False, False}, AxesLabel -> {None, None}, 
               AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                 AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
               Frame -> {{True, True}, {True, True}}, 
               FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
               Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
               GridLines -> {None, None}, 
               LabelStyle -> {FontFamily -> "Arial"}, 
               Method -> {"ScalingFunctions" -> None}, 
               PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
               True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
               Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
              ImageSize -> 
              Dynamic[{
                Automatic, 3.5 CurrentValue["FontCapHeight"]/
                 AbsoluteCurrentValue[Magnification]}], Frame -> True, 
              FrameTicks -> None, FrameStyle -> Directive[
                Opacity[0.5], 
                Thickness[Tiny], 
                RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
              GrayLevel[0.94]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Nominal\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   
                   TemplateBox[{
                    ",", "\",\"", "\"algebra 1\"", "\"algebra 2\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox[
                  "\"Number of training examples: \"", 
                   "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                  TagBox["1204", "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   ClassifierFunction[
    Association[
    "ExampleNumber" -> 1204, "ClassNumber" -> 2, "Input" -> 
     Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
         Association[
         "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
          "Output" -> 
          Association[
           "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
            Association["Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor["WrapMLDataset", 
                Association[
                "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
          "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
          "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
         Association[
         "Input" -> Association[
           "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
          Association[
           "f1" -> Association["Weight" -> 1, "Type" -> "NumericalVector"]], 
          "Processors" -> {
            MachineLearning`MLProcessor["ToVector", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
              Association[
               "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
              "Output" -> 
              Association[
               "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]],
               "Version" -> {12., 0}, "ID" -> 1537627216228573037]], 
            MachineLearning`MLProcessor["ImputeMissing", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
              Association[
               "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]],
               "VectorLength" -> 1, "Output" -> 
              Association[
               "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]],
               "Type" -> "NominalVector", "Version" -> {12., 0}, "ID" -> 
              4026204838636604962]], 
            MachineLearning`MLProcessor["EmbedNominalVector", 
             Association[
             "Invertibility" -> "Impossible", "Missing" -> "Allowed", "Input" -> 
              Association[
               "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]],
               "Index" -> {
                Association[
                "\n" -> 1, " \n" -> 2, "0 + 0 \n" -> 3, "0 + 10 \n" -> 4, 
                 "0 + 15 \n" -> 5, "0 + 2 \n" -> 6, "0 + 46 \n" -> 7, 
                 "0 + 8 \n" -> 8, "0 + 86 \n" -> 9, "0 + 95 \n" -> 10, 
                 "0 + 98 \n" -> 11, "1 + 0 \n" -> 12, "10" -> 13, "10 + 0 \n" -> 
                 14, "10 + 1 \n" -> 15, "10 + 10 \n" -> 16, "10 + 29 \n" -> 
                 17, "10 + 33 \n" -> 18, "    10 + 3x = 10  \n" -> 19, 
                 "10 + 49 \n" -> 20, "    10 + 5x = 10  \n" -> 21, 
                 "    10 + 5x = 60  \n" -> 22, "10 + 60 \n" -> 23, 
                 "10 + 69 \n" -> 24, "10 + 7 \n" -> 25, "10 + 75 \n" -> 26, 
                 "10 + 78 \n" -> 27, "10 + 8 \n" -> 28, "10 + 83 \n" -> 29, 
                 "10% of 11" -> 30, "    - 10 + x = 1  \n" -> 31, 
                 "    10 + x = 1  \n" -> 32, "1 + 1 \n" -> 33, "11" -> 34, 
                 "11+12" -> 35, "1113 + 3615 \n" -> 36, "11 + 14 \n" -> 37, 
                 "1+12" -> 38, "1 + 14 \n" -> 39, "1148 + 4232 \n" -> 40, 
                 "116" -> 41, "1 + 17 \n" -> 42, "117" -> 43, "118" -> 44, 
                 "119" -> 45, "    11 = x + 10  \n" -> 46, "1 + 2 \n" -> 47, 
                 "12" -> 48, "120" -> 49, "121" -> 50, "122" -> 51, "123" -> 
                 52, "12 + 8 \n" -> 53, "    12 = x + 7  \n" -> 54, "13" -> 
                 55, "1313 + 3009 \n" -> 56, "1329 + 9063 \n" -> 57, 
                 "1383 + 3834 \n" -> 58, "    13 = x + 1  \n" -> 59, 
                 "1 + 4 \n" -> 60, "14" -> 61, "1400 + 7429 \n" -> 62, 
                 "14 + 4 \n" -> 63, "1+5" -> 64, "15" -> 65, "15+12" -> 66, 
                 "1521 + 2554 \n" -> 67, "1531 + 4977 \n" -> 68, "15 + 6 \n" -> 
                 69, "1570 + 5887 \n" -> 70, "1570 + 8699 \n" -> 71, 
                 "1583 + 6324 \n" -> 72, "    15 = x + 4  \n" -> 73, "16" -> 
                 74, "1616 + 5751 \n" -> 75, "1630 + 8860 \n" -> 76, 
                 "1632 + 9300 \n" -> 77, "16 + 6 \n" -> 78, "1664 + 8135 \n" -> 
                 79, "16 + 70 \n" -> 80, "1 + 69 \n" -> 81, "1692 + 5818 \n" -> 
                 82, "1721 + 5812 \n" -> 83, "1723 + 5702 \n" -> 84, 
                 "1726 + 9260 \n" -> 85, "1 + 73 \n" -> 86, "1 + 75 \n" -> 87,
                  "1750 + 5035 \n" -> 88, "1816 + 6956 \n" -> 89, "186" -> 90,
                  "18 + 64 " -> 91, "187" -> 92, "188" -> 93, "1 + 89 \n" -> 
                 94, "189" -> 95, "    18 = x + 8  \n" -> 96, "1 + 9 \n" -> 
                 97, "190" -> 98, "191" -> 99, "192" -> 100, "1930 + 4841 \n" -> 
                 101, "1967 + 3600 \n" -> 102, "1985 + 4928 \n" -> 103, 
                 "    -1 + x = -1  \n" -> 104, "2 + 0 \n" -> 105, 
                 "2005 + 8361 \n" -> 106, "200% of 3" -> 107, "20 + 3 \n" -> 
                 108, "2087 + 5640 \n" -> 109, "20% of 33" -> 110, "2 + 1 \n" -> 
                 111, "2 + 14 \n" -> 112, "2143 + 8202 \n" -> 113, "2 + 2 \n" -> 
                 114, "22 + 10 \n" -> 115, "2219 + 2574 \n" -> 116, 
                 "2 + 25 \n" -> 117, "2259 + 6033 \n" -> 118, 
                 "2267 + 6108 \n" -> 119, "2278 + 6186 \n" -> 120, 
                 "    2 - 2x = - 22  \n" -> 121, "2 + 3 \n" -> 122, "2+3" -> 
                 123, "23 + 5 \n" -> 124, "2 + 39 \n" -> 125, "239" -> 126, 
                 "2390 + 5199 \n" -> 127, "2/3 x+3 =15" -> 128, "240" -> 129, 
                 "241" -> 130, "242" -> 131, "2420 + 4220 \n" -> 132, "243" -> 
                 133, "2433 + 5845 \n" -> 134, "244" -> 135, "245" -> 136, 
                 "246" -> 137, "25 + 2 \n" -> 138, "2551 + 8585 \n" -> 139, 
                 "25 + 6 \n" -> 140, "2 + 57 \n" -> 141, "2587 + 4970 \n" -> 
                 142, "2590 + 3048 \n" -> 143, "2 + 6 \n" -> 144, 
                 "2648 + 2854 \n" -> 145, "2653 + 5175 \n" -> 146, 
                 "2 + 68 \n" -> 147, "2697 + 5880 \n" -> 148, 
                 "2729 + 6856 \n" -> 149, "2 + 73 \n" -> 150, 
                 "2751 + 4607 \n" -> 151, "2757 + 2994 \n" -> 152, 
                 "27 + 6 \n" -> 153, "2815 + 5126 \n" -> 154, 
                 "2829 + 1933 \n" -> 155, "28 + 35 \n" -> 156, "2 + 85 \n" -> 
                 157, "28 + 5 \n" -> 158, "2 + 9 \n" -> 159, "293" -> 160, 
                 "294" -> 161, "2940 + 6608 \n" -> 162, "2943 + 8463 \n" -> 
                 163, "295" -> 164, "296" -> 165, "2968 + 7604 \n" -> 166, 
                 "297" -> 167, "298" -> 168, "299" -> 169, "    2x = 2  \n" -> 
                 170, "    2 = x - 3  \n" -> 171, "    2x + 5 = - 7  \n" -> 
                 172, "    2x - 7 = 13  \n" -> 173, "    2x + 8 = 10  \n" -> 
                 174, "    - 2x + 8 = 32  \n" -> 175, "300" -> 176, 
                 "30 + 1 \n" -> 177, "3018 + 2248 \n" -> 178, 
                 "3021 + 8010 \n" -> 179, "30+30" -> 180, "30+40" -> 181, 
                 "3096 + 2460 \n" -> 182, "3 + 10 \n" -> 183, 
                 "3109 + 7046 \n" -> 184, "3 + 11 \n" -> 185, "3 + 13 \n" -> 
                 186, "3147 + 6538 \n" -> 187, "3160 + 1245 \n" -> 188, 
                 "3 + 24 \n" -> 189, "32 + 6 \n" -> 190, "3277 + 7411 \n" -> 
                 191, "3 + 28 \n" -> 192, "33 + 1 \n" -> 193, "33 + 4 \n" -> 
                 194, "3 + 37 \n" -> 195, "3 + 38 \n" -> 196, 
                 "    3 - 3x = - 30  \n" -> 197, "3 + 4 \n" -> 198, "34+1" -> 
                 199, "3434 + 9380 \n" -> 200, "    3 + 4x = - 45  \n" -> 201,
                  "3523 + 8800 \n" -> 202, "3 + 55 \n" -> 203, "35 + 6 \n" -> 
                 204, "35 + 7 \n" -> 205, "362" -> 206, "363" -> 207, "364" -> 
                 208, "365" -> 209, "366" -> 210, "3661 + 5756 \n" -> 211, 
                 "367" -> 212, "368" -> 213, "369" -> 214, "3 + 7 \n" -> 215, 
                 "3 + 73 \n" -> 216, "3740 + 4179 \n" -> 217, 
                 "3782 + 1330 \n" -> 218, "3825 + 6015 \n" -> 219, 
                 "3850 + 4435 \n" -> 220, "3880 + 6919 \n" -> 221, 
                 "3 + 90 \n" -> 222, "39 + 10 \n" -> 223, "3928 + 9719 \n" -> 
                 224, "3979 + 4765 \n" -> 225, "39 + 8 \n" -> 226, 
                 "-3(\!\(\*SuperscriptBox[\(x\), \(2\)]\)-2x+7)" -> 227, 
                 "    - 3 = x + 2  \n" -> 228, "    3 = x + 3  \n" -> 229, 
                 "    - 3 = x - 4  \n" -> 230, "    3x - 6 = - 6  \n" -> 231, 
                 "    3x + 7 = 25  \n" -> 232, "4 + 0 \n" -> 233, 
                 "4027 + 2502 \n" -> 234, "4064 + 9078 \n" -> 235, 
                 "4096 + 5082 \n" -> 236, "4 + 10 \n" -> 237, 
                 "4116 + 6636 \n" -> 238, "41 + 2 \n" -> 239, "41+2" -> 240, 
                 "4154 + 9932 \n" -> 241, "41 + 6 \n" -> 242, "416" -> 243, 
                 "417" -> 244, "418" -> 245, "4189 + 5839 \n" -> 246, 
                 "41 + 9 \n" -> 247, "419" -> 248, "420" -> 249, "421" -> 250,
                  "422" -> 251, "423" -> 252, "4261 + 8473 \n" -> 253, 
                 "4270 + 9940 \n" -> 254, "4272 + 1001 \n" -> 255, 
                 "4292 + 9179 \n" -> 256, "43 + 4 \n" -> 257, "44 + 1 \n" -> 
                 258, "4419 + 1814 \n" -> 259, "4420 + 6691 \n" -> 260, 
                 "4447 + 4604 \n" -> 261, "44 + 5 \n" -> 262, "44 + 85 \n" -> 
                 263, "4 + 49 \n" -> 264, "4 + 5 \n" -> 265, "45 + 0 \n" -> 
                 266, "4 + 55 \n" -> 267, "45 + 8 \n" -> 268, "4 + 60 \n" -> 
                 269, "4609 + 2756 \n" -> 270, "46 + 2 \n" -> 271, 
                 "4662 + 2032 \n" -> 272, "46 + 8 \n" -> 273, 
                 "    4 + 6x = 16  \n" -> 274, "470" -> 275, "471" -> 276, 
                 "472" -> 277, "473" -> 278, "4731 + 1603 \n" -> 279, 
                 "4731 + 9595 \n" -> 280, "4 + 74 \n" -> 281, "474" -> 282, 
                 "4741 + 6938 \n" -> 283, "47 + 5 \n" -> 284, "475" -> 285, 
                 "4 + 76 \n" -> 286, "47 + 6 \n" -> 287, "476" -> 288, 
                 "4764 + 7711 \n" -> 289, "4781 + 7748 \n" -> 290, 
                 "4810 + 7408 \n" -> 291, "48 + 2 \n" -> 292, "4 + 83 \n" -> 
                 293, "4832 + 1852 \n" -> 294, "4 + 86 \n" -> 295, 
                 "4880 + 1099 \n" -> 296, "4896 + 8505 \n" -> 297, "4 + 9 \n" -> 
                 298, "4 + 90 \n" -> 299, "4910 + 8680 \n" -> 300, 
                 "4918 + 3236 \n" -> 301, "    4x = - 44  \n" -> 302, 
                 "    4x + 7 = 15  \n" -> 303, "    4x - 8 = 8  \n" -> 304, 
                 "    4x - 9 = 19  \n" -> 305, "    - 4x + 9 = - 27  \n" -> 
                 306, "5 + 0 \n" -> 307, "5035 + 9586 \n" -> 308, 
                 "5048 + 8140 \n" -> 309, "50 + 5 \n" -> 310, 
                 "5074 + 7065 \n" -> 311, "50 + 9 \n" -> 312, "50 + 93 \n" -> 
                 313, "5 + 1 \n" -> 314, "51 + 0 \n" -> 315, "5 + 2 \n" -> 
                 316, "5219 + 1965 \n" -> 317, "5278 + 2794 \n" -> 318, 
                 "5282 + 9116 \n" -> 319, "5290 + 8994 \n" -> 320, "5(2x+4)" -> 
                 321, "5361 + 5519 \n" -> 322, "5 + 37 \n" -> 323, "537" -> 
                 324, "538" -> 325, "539" -> 326, "5396 + 5061 \n" -> 327, 
                 "5 + 4 \n" -> 328, "540" -> 329, "541" -> 330, "542" -> 331, 
                 "543" -> 332, "5465 + 8277 \n" -> 333, "5465 + 9956 \n" -> 
                 334, "55 + 10 \n" -> 335, "5519 + 6804 \n" -> 336, 
                 "55 + 4 \n" -> 337, "5571 + 3857 \n" -> 338, 
                 "5571 + 5676 \n" -> 339, "55 + 9 \n" -> 340, 
                 "5610 + 6137 \n" -> 341, "5626 + 9732 \n" -> 342, 
                 "5642 + 6535 \n" -> 343, "5 + 69 \n" -> 344, 
                 "5712 + 2107 \n" -> 345, "5745 + 7730 \n" -> 346, 
                 "5750 + 9568 \n" -> 347, "57 + 7 \n" -> 348, 
                 "    - 5 + 7x = 79  \n" -> 349, "5 + 82 \n" -> 350, 
                 "5840 + 1828 \n" -> 351, "5 + 86 \n" -> 352, "587" -> 353, 
                 "5 + 88 \n" -> 354, "588" -> 355, "589" -> 356, 
                 "5893 + 2493 \n" -> 357, "58 + 95 \n" -> 358, 
                 "5898 + 8735 \n" -> 359, "59 + 0 \n" -> 360, "590" -> 361, 
                 "59 + 1 \n" -> 362, "591" -> 363, "59 + 10 \n" -> 364, "592" -> 
                 365, "593" -> 366, "5930 + 4357 \n" -> 367, "5980 + 1855 \n" -> 
                 368, "5% of 112" -> 369, 
                 "-(5\!\(\*SuperscriptBox[\(x\), \(4\)]\)-8)" -> 370, 
                 "    - 5x = - 10  \n" -> 371, "    5 + x = 12  \n" -> 372, 
                 "    - 5x - 2 = - 27  \n" -> 373, "    5x + 5 = 10  \n" -> 
                 374, "    - 5x + 5 = 25  \n" -> 375, "    5x + 7 = - 33  \n" -> 
                 376, "    - 5x + 7 + 6x = 18  \n" -> 377, 
                 "    - 5x + 8 = 28  \n" -> 378, "    5x + 9 = -1  \n" -> 379,
                  "    5x - 9 = - 19  \n" -> 380, "6 + 0 \n" -> 381, 
                 "6 + 13 \n" -> 382, "6 + 16 \n" -> 383, "6174 + 2651 \n" -> 
                 384, "6178 + 2038 \n" -> 385, "6 + 2 \n" -> 386, 
                 "6213 + 8955 \n" -> 387, "6221 + 2277 \n" -> 388, "63" -> 
                 389, "63 + 0 \n" -> 390, "63 + 10 \n" -> 391, "6 + 32 \n" -> 
                 392, "6 + 33 \n" -> 393, "63 + 5 \n" -> 394, 
                 "6379 + 2448 \n" -> 395, "6 + 4 \n" -> 396, "64" -> 397, 
                 "6 + 5 \n" -> 398, "65" -> 399, "6529 + 4391 \n" -> 400, 
                 "6534 + 8733 \n" -> 401, "66" -> 402, "6618 + 9094 \n" -> 
                 403, "66 + 2 \n" -> 404, "6639 + 6370 \n" -> 405, 
                 "6669 + 6330 \n" -> 406, "6671 + 7814 \n" -> 407, 
                 "6682 + 8481 \n" -> 408, "6 + 7 \n" -> 409, "67" -> 410, 
                 "6703 + 2453 \n" -> 411, "6710 + 5531 \n" -> 412, 
                 "6719 + 9083 \n" -> 413, "67 + 3 \n" -> 414, 
                 "6753 + 2906 \n" -> 415, "6775 + 7738 \n" -> 416, "68" -> 
                 417, "68 + 4 \n" -> 418, "6842 + 8050 \n" -> 419, "69" -> 
                 420, "6963 + 4488 \n" -> 421, "6980 + 6177 \n" -> 422, 
                 "6987 + 5576 \n" -> 423, "6997 + 8056 \n" -> 424, 
                 "    6x + 1 = 61  \n" -> 425, "    6x - 3 = - 75  \n" -> 426,
                  "    6x = - 48  \n" -> 427, "    6x - 5 = 67  \n" -> 428, 
                 "    6x + 7 = 25  \n" -> 429, "    - 6 + x + x = 14  \n" -> 
                 430, "70 + 10 \n" -> 431, "70 + 17 \n" -> 432, "70 + 2 \n" -> 
                 433, "70 + 4 \n" -> 434, "7067 + 9862 \n" -> 435, "7 + 1 \n" -> 
                 436, "7102 + 2281 \n" -> 437, "7 + 11 \n" -> 438, 
                 "7131 + 1009 \n" -> 439, "7136 + 8596 \n" -> 440, 
                 "7143 + 8177 \n" -> 441, "7 + 15 \n" -> 442, "71 + 6 \n" -> 
                 443, "7 + 21 \n" -> 444, "72 + 10 \n" -> 445, 
                 "7250 + 7530 \n" -> 446, "7272 + 6191 \n" -> 447, 
                 "7280 + 3811 \n" -> 448, "73 + 2 \n" -> 449, 
                 "7333 + 2722 \n" -> 450, "7338 + 3228 \n" -> 451, 
                 "7379 + 6677 \n" -> 452, "7 + 38 \n" -> 453, 
                 "7430 + 5558 \n" -> 454, "7438 + 3315 \n" -> 455, 
                 "7459 + 4738 \n" -> 456, "7498 + 1176 \n" -> 457, 
                 "7524 + 7480 \n" -> 458, "7542 + 3349 \n" -> 459, 
                 "7 + 56 \n" -> 460, "7614 + 5986 \n" -> 461, "76 + 3 \n" -> 
                 462, "7635 + 7934 \n" -> 463, "7665 + 3538 \n" -> 464, 
                 "7748 + 4445 \n" -> 465, "77 + 70 \n" -> 466, "7 + 79 \n" -> 
                 467, "7796 + 7881 \n" -> 468, "    7 - 7x = 63  \n" -> 469, 
                 "78 + 10 \n" -> 470, "78 + 6 \n" -> 471, "7 + 90 \n" -> 472, 
                 "7900 + 6469 \n" -> 473, "7946 + 9908 \n" -> 474, 
                 "7948 + 9978 \n" -> 475, "7949 + 9040 \n" -> 476, 
                 "7982 + 5589 \n" -> 477, "7988 + 5800 \n" -> 478, 
                 "    7x = 0  \n" -> 479, "    7 + x = 13  \n" -> 480, 
                 "    - 7 + x = 2  \n" -> 481, "    - 7x - 5 = - 26  \n" -> 
                 482, "    7x + 6 = - 78  \n" -> 483, "8 + 0 \n" -> 484, 
                 "8011 + 9651 \n" -> 485, "8059 + 1271 \n" -> 486, 
                 "8074 + 7521 \n" -> 487, "8088 + 3140 \n" -> 488, 
                 "8088 + 7921 \n" -> 489, "8 + 10 \n" -> 490, "8 + 11 \n" -> 
                 491, "8118 + 4430 \n" -> 492, "8119 + 9714 \n" -> 493, 
                 "8158 + 7658 \n" -> 494, "8168 + 4402 \n" -> 495, 
                 "8192 + 7500 \n" -> 496, "82 + 10 \n" -> 497, 
                 "    8 + 2x = 14  \n" -> 498, "8325 + 1106 \n" -> 499, 
                 "8327 + 6129 \n" -> 500, "83 + 72 \n" -> 501, 
                 "8378 + 2232 \n" -> 502, "8 + 4 \n" -> 503, "8 + 44 \n" -> 
                 504, "8 + 47 \n" -> 505, "84 + 7 \n" -> 506, 
                 "8544 + 3707 \n" -> 507, "8589 + 7764 \n" -> 508, 
                 "    - 8 - 5x = 17  \n" -> 509, "    8 + 5x = 48  \n" -> 510,
                  "8 + 6 \n" -> 511, "8719 + 6369 \n" -> 512, 
                 "8759 + 8868 \n" -> 513, "8 + 76 \n" -> 514, 
                 "8784 + 3944 \n" -> 515, "    - 8 - 7x = 62  \n" -> 516, 
                 "8826 + 6933 \n" -> 517, "8880 + 2001 \n" -> 518, 
                 "8932 + 7141 \n" -> 519, "8 + 95 \n" -> 520, "8 + 98 \n" -> 
                 521, "8x-2=22" -> 522, "9" -> 523, "9 + 0 \n" -> 524, 
                 "90+200" -> 525, "9043 + 3293 \n" -> 526, "90 + 8 \n" -> 527,
                  "90 + 9 \n" -> 528, "9 + 1 \n" -> 529, "9 + 10 \n" -> 530, 
                 "9 + 11 \n" -> 531, "9 + 12 \n" -> 532, "9260 + 1150 \n" -> 
                 533, "9 + 29 \n" -> 534, "9300 + 2212 \n" -> 535, 
                 "9320 + 6116 \n" -> 536, "9346 + 8468 \n" -> 537, 
                 "9361 + 9434 \n" -> 538, "9 + 39 \n" -> 539, 
                 "    9 - 3x = - 21  \n" -> 540, "    9 + 3x + 7x = 39  \n" -> 
                 541, "94 + 2 \n" -> 542, "9422 + 5414 \n" -> 543, 
                 "94 + 5 \n" -> 544, "94 + 6 \n" -> 545, "9474 + 9705 \n" -> 
                 546, "9 + 5 \n" -> 547, "9503 + 3152 \n" -> 548, 
                 "9514 + 3323 \n" -> 549, "9525 + 2244 \n" -> 550, 
                 "9532 + 5499 \n" -> 551, "9577 + 7198 \n" -> 552, 
                 "9 + 58 \n" -> 553, "9 + 6 \n" -> 554, "96 + 0 \n" -> 555, 
                 "9600 + 7472 \n" -> 556, "9618 + 8587 \n" -> 557, 
                 "96 + 2 \n" -> 558, "96 + 43 \n" -> 559, "96 + 7 \n" -> 560, 
                 "9681 + 2776 \n" -> 561, "9 + 7 \n" -> 562, "9827 + 8472 \n" -> 
                 563, "9857 + 3068 \n" -> 564, "9 + 88 \n" -> 565, 
                 "9927 + 9121 \n" -> 566, "9964 + 6451 \n" -> 567, 
                 "    - 9 + x = - 5  \n" -> 568, "    - 9 + x = - 7  \n" -> 
                 569, "Add 1/2 and 1/3" -> 570, 
                 "A salesman is paid a monthly salary of $2,300 plus 7% \
commission on his monthly sales.\nDetermine the amount of sales required for \
his total monthly income to be $3,000." -> 571, 
                 "A salesman tells you that the $140 earrings are already \
marked 20% off. What\nwas the original price?" -> 572, 
                 "A $750 watch is on sale for 15% off. Find the sale price." -> 
                 573, "Combine like terms of 3a-6a+10a-a" -> 574, 
                 "Combine like terms of 3n-5\!\(\*SuperscriptBox[\(n\), \(\(2\
\)\(\\ \)\)]\)+6n-10+2\!\(\*SuperscriptBox[\(n\), \(2\)]\)" -> 575, 
                 "Combine the like terms of 5x-10y+6z-3x" -> 576, "cos(45)" -> 
                 577, "cos(\[Pi]/13)" -> 578, 
                 "Evaluate 2\!\(\*SuperscriptBox[\(x\), \(2\)]\)-9 for x=-3" -> 
                 579, "Evaluate a-\!\(\*SuperscriptBox[\(b\), \(2\)]\) when \
a=4 and b=2" -> 580, 
                 "Evaluate \!\(\*SuperscriptBox[\(a\), \(2\)]\)+b when a=7 \
and b=1" -> 581, 
                 "Evaluate \!\(\*SuperscriptBox[\(a\), \
\(2\)]\)-\!\(\*SuperscriptBox[\(b\), \(2\)]\) when a=5 and b=3" -> 582, 
                 "Expand (a+b\!\(\*SuperscriptBox[\()\), \(3\)]\)" -> 583, 
                 "express 12 1/3 as an improper fraction" -> 584, 
                 "express 3 2/7 as an improper fraction" -> 585, 
                 "Express 42/5 as a mixed number" -> 586, 
                 "Express 53/9 as a mixed number" -> 587, 
                 "Find a perpedicular line of y=3x+2 with y intercept of the \
origin" -> 588, "Find the equation of best fit for the below listed data" -> 
                 589, "Graph the inequality y<3x+4" -> 590, 
                 "Graph the parabola give by \!\(\*SuperscriptBox[\(x\), \
\(2\)]\)+3x+2. Find the zeros, vertex and intercept" -> 591, 
                 "How many miutes are in a day?" -> 592, 
                 "Identify the property used in the equations below as \
distributive, inverse or associative" -> 593, 
                 "Is x=-8 a solution to 1/2x+6>3?" -> 594, 
                 "Multiply 24/3 and 27/8" -> 595, "Multiply 8 and 3/24" -> 
                 596, "Plot 1.25, 2/3 and 2 on a number line" -> 597, 
                 "Simplify 10-(7+1)" -> 598, "Simplify 10-7+1" -> 599, 
                 "Simplify (15-3)/(1+5)" -> 600, 
                 "Simplify 24/(4-2\!\(\*SuperscriptBox[\()\), \(3\)]\)" -> 
                 601, "Simplify (2-5\!\(\*SuperscriptBox[\()\), \(2\)]\)" -> 
                 602, "Simplify 2-\!\(\*SuperscriptBox[\(5\), \(2\)]\)" -> 
                 603, "Simplify 4+5(1+12/6\!\(\*SuperscriptBox[\()\), \
\(2\)]\)" -> 604, "sin(121)" -> 605, "sin(40)" -> 606, "sin(\[Pi]/3)" -> 607, 
                 "sin(\[Pi]/5)" -> 608, "Solve 3|x-5|=12" -> 609, 
                 "Solve 3(x-5)+4=10" -> 610, "Solve 4x-9=11" -> 611, 
                 "Solve 8(x-5)+4=10" -> 612, "Solve 9(x-3)+4=10" -> 613, 
                 "Solve and graph the solution to 2x-3<7" -> 614, 
                 "Solve and graph the solution to |3x-1|\[GreaterEqual]10" -> 
                 615, "Solve (\!\(\*SuperscriptBox[\(x\), \(2\)]\)-5)=20" -> 
                 616, "Solve (x-1/2)=(2x+3)" -> 617, "tan(63)" -> 618, 
                 "Tommy\[CloseCurlyQuote]s grandma gave him a $50 gift card \
to Toys R Us for his birthday.\nSales tax is currently 9%. Determine the \
price of the most expensive toy Tommy can buy with\nthe $50 gift card." -> 
                 619, "Use the law of sines to find the missing side of this \
triangle" -> 620, 
                 "What are the discontiuities in the function \
y=(x+2)/(x+3x+2). Which are fundamental and which are removable?" -> 621, 
                 "What are the domain and range of \
\!\(\*SuperscriptBox[\(e\), \(x\)]\) and ln(x)" -> 622, 
                 "What are the domain and range of the trigonometric \
functions?" -> 623, "What is |1|" -> 624, "What is 10% of 100" -> 625, 
                 "What is 1+1" -> 626, "What is 1+15+21" -> 627, 
                 "What is  1/2 + 1/3" -> 628, 
                 "What is 12 1/3 as an improper fraction" -> 629, 
                 "What is 20+22" -> 630, "What is 2+2" -> 631, "What is 2+3" -> 
                 632, "What is  24/3 * 27/8" -> 633, "What is |-30|" -> 634, 
                 "What is 3/18 in simplest form" -> 635, "What is 3-(-2)?" -> 
                 636, "What is 33+5+8" -> 637, "What is -3+4" -> 638, 
                 "What is 42/54 in simplest form" -> 639, 
                 "What is 42/5 as a mixed number" -> 640, "What is 45+300+4" -> 
                 641, "What is 4% of 16?" -> 642, 
                 "What is 53/9 as a mixed number" -> 643, 
                 "What is 5% of 100?" -> 644, "What is  8 * 3/24" -> 645, 
                 "What is (a+b\!\(\*SuperscriptBox[\()\), \(n\)]\) (Hint: \
What theorem is this?)" -> 646, "What is ln(1)?" -> 647, "What is sin(60)" -> 
                 648, "What is tan(30)" -> 649, 
                 "What is the absolute value of -1?" -> 650, 
                 "What is the largest value for the missing side of this \
triangle" -> 651, 
                 "What is the most specific subset of the real numbers that \
-7 is a part of?" -> 652, "What is the next term in the series " -> 653, 
                 "What is the sum from 1 to 5 of a=10n+3" -> 654, 
                 "what is the sum of the geometric series from 1 to infinity \
of 9(1/10\!\(\*SuperscriptBox[\()\), \(n\)]\)?" -> 655, 
                 "Wrie the standard form of y=3/2 x+2" -> 656, 
                 "Write 30 degrees in radians" -> 657, 
                 "write 3/18 in simplest form" -> 658, 
                 "What is 3 2/7 as an improper fraction" 
                  "write 42/54 in simplest form" -> 659, 
                 
                 "Write slope intercept form for a slope of 2 and y-intercept \
of 12" -> 660, "Write \[Pi]/4 in degrees" -> 661, "    x + 10 = 12  \n" -> 
                 662, "    x - 1 = - 10  \n" -> 663, "    x / - 2 = 1  \n" -> 
                 664, "-x-2=12" -> 665, "    x - 2 = 3  \n" -> 666, 
                 "    x + 2 = 3  \n" -> 667, "    x - 2 = - 8  \n" -> 668, 
                 "    x + 2 = - 8  \n" -> 669, "    x + 2 = 8  \n" -> 670, 
                 "    x / 3 = 3  \n" -> 671, "    x - 4 = 0  \n" -> 672, 
                 "    x + 4 = 16  \n" -> 673, "    x + 4 = - 4  \n" -> 674, 
                 "    x + 4 = - 6  \n" -> 675, "    x / 4 = 7  \n" -> 676, 
                 "    x + 5 = -1  \n" -> 677, "    x / - 5 = - 3  \n" -> 678, 
                 "    x - 5 = 7  \n" -> 679, "    x / 6 = 5  \n" -> 680, 
                 "    x + 6 = 6  \n" -> 681, "    x / 6 = 6  \n" -> 682, 
                 "    x + 6 = 8  \n" -> 683, "    x + 7 = 13  \n" -> 684, 
                 "    x + 7 = 18  \n" -> 685, "    x / 7 = 2  \n" -> 686, 
                 "    x + 8 = 12  \n" -> 687, "    x + 8 = 14  \n" -> 688, 
                 "    x + 8 = 3  \n" -> 689, "    x + 9 = 13  \n" -> 690, 
                 "    x + 9 = 2  \n" -> 691]}, "Output" -> 
              Association[
               "f1" -> Association[
                 "Weight" -> 1, "Type" -> "NumericalVector"]], 
              "EmbeddingVectors" -> CompressedData["
1:eJyUvXVUFe0X9z02KnYnI4rdiT12YRdYjN2KHSiOomKAIgqKoI4oNoKKKAaO
gd0dqGNgi931/O794Y93vc9fz73Wvc46eM6Za65r53d/954SA8Z2GZxOUZQ0
//s/Nq2iZFX+r/+M/8f3//+//3//XW2hXjvyv1ezeZb4xv971bKm2frfqzk0
V5S8j0p58t+/a4579/z3ai+fcPy/V3Xp0QPyOb3BYXkf6Hz9v/eGg7Ve3jfs
dlTex7U7It+L6nTzv/dW11wP5fVwyRf/vaqJdy/K7wR2l+spvsU2/vd5/dqr
43L934NP/feqd3JMlHUuTZDfMbqEy+9oP5slyfcbnI+XdT6uf1Wuf88hVj5f
Mvzxf69K7YKyLnN+tP3fq6X47ZN1NTt3Wq73zfmu/Pv5JZH/vRrpnYPkunum
nJffLbFL1mMU3L9HXitP5HejkmbL9z13y30q7i6m/M7IPtHy/QW+++W9eeCg
vN7afUbWHTaf6+Y6dEL+XrvEGbnuSt8Q2ZcL6iPZj6/vuY/cF+T39dLHnsj+
eRd5/N+rPW+D7IOR4dJteV9u/Aa57rx2CfL5Dxvusv8nH8p9B24/KZ+7vPqc
/I5ThueyXwuv8v1+Z5Pl87GTb8vfH4bK+ViBlebK/e25Jeet1z8ov6uv6sX1
TyXKOpWsviIHWsvocbKOvb+fynWH/JDfM5t5yfnomdLL/qu3/nE/a+vJvlg5
qx2TfWjV/ZR8/vrhTfL9iC4in9YwP1vO2ytQ5ELdfUjuS5l2RuTW8PkjcqLN
d9otf789/6z8TrDLTfn7UZdpcn9NNLlfNa4l5/qrk+y/0u7HVVm/R+uDsv9e
58NkvV+Hy/r0801j5PuT+hyWdbRxk3PSphy9JOtWfy6T9V5fuUs+v3rwfvnc
iY+yX0bAa7lv8+uzO3K9YrWRa//LIifWK/bVzKvNk/XNyZIovzPc5alcJ+R1
kuxbn2umvDffPpL1bZ16Wa4zpIiszyp4SM5Zb+8n8mgcLityb4QlbJfv3V9w
SPYzl4ecl53+zR35fLwq+m0VLXJM/t5u3AL53crtZX+06ynn5Pqh/2Tderbv
6Nuz0L3yuXn55si+jfeRfdPuRcs5WOOj5LyUVTss2e+KJ/bK96d8kHUrOyck
I6+ePvJ7NZbzu72n75DfSXfzkOxX2OGTsv8vGogcGN4NVsjvT18i+6JYuUVe
jIPTL8rfr126IvfZP17kUCuZT/ROKzJE9s3eYGJf/McFyfWPddks/+7gK/ZL
3dlF7JHRp1ys/I5btSOyL38eWnJOHaceld/pvUXOWT3mKvtohKdHP875eslr
9Qj0Kc1l1jWyRpxcd4wp56LNbhYs+1eoIusaVPy6/L3oRPmevujNPXktOlfs
n3a4Ef9eKmi3XDcw6Jm8rp8i52C4pn8g6+vWUuTNcr65T9a9eL3IvVkip+iX
2nxPgnwvu9c1Wc+95jHyPu0KuY6SVF3uV+v78Zb8bqvOZ+X91nXP5XcOpcj3
tfJFxI7Z15uckM+ZbdbK9++OEHnUvvwVe2l6bJJ9szP2Ev+hPxksemAu7Cf2
ShtTUH7H+uwWJ/te2nWXfH6lIu/Nem0C5Hv7z4t8mMP9RX6sU5miZX8GrZ8v
1w0YGiavZZMfyDobmmKPTK+L2+V7c+/ckM9v2SZybNRuJvtsOC4TeTECw0W+
FOevsh7t+Wyx+9rIX8j97C/y3lo4Q37HnhYp52mX7yf3p7dkH81+J6fL72X4
u1r2W/mFnD3PJnKgbtKRz0JvxI7ZIRPl/KzETRfk+wHTxW6pDufF3iiBR8RO
GM36iJ1UDeO0XHfVjwOyzsj12MkaF0SPtX0vfeX6V6ugT9pIsefG3HiRe2Nd
/HH2bc9W+d107cTuGYveyr5qS17KPqhZx1yW71cpK+uzX/mK3VTOfZLPqWeu
y/0obu1i0ZfZIi/muvGso9xbsfN2z5wr5Pfv7Rc5MbsXRP57F50tv+P/VfyL
UnOJ/L7qOTNc7ifPSJFba3PVS/L3GXnkPuzNXs/k8y0fiX6ovzKIX1MOeMl1
ja6DsRMpl8Rf6hNCDDn/LlFi/7Rhq9HHWS1EzoxjQfflc8d/se6DFW7J3ys8
FXuu3PoSIec0IQe/m+OC6JFSK17snertL/qv/cbOq682iF3SYzfdk/UaP5bL
91cdFHlRIu6JPGtqHuzBh0ZR8nvzV8l52z8cguX6czKIPdL6/xP/pK6ImS+/
44Z82GN7yX7pr9eI3TY6+eDXb9a4Ie8LD5Lz1g7UQG+WtP0g9/1+k+yL9nmL
2BG9yHCRX3Vt9nC57v41xA/9St+X92cPct4pAyQuVC4Ol/3Rfcq/ldf9Z4kP
9D3416XN5XyVmzdY59xK2InnzcRuWiVOYGe2PJPragemcx/qHYlLlbBYievM
RpdFz1Qzq1zf3rNW7svyfCdxnZU1P7/v1VriVK16iMif5XdR7I+y7L34b2Xs
TOTuoo/4A6VhT/GTht58h1x3Tkmxk8q7c2I3tPRNkKPYBLkPPWazvKr19iE3
13OLHzbMDtiTW1VEH1WXrWeRP0fs7ZvNF+R6QWVlv8wBe0bJegt98ZR1Lpsi
/tWecor7WF41Wb7nMlfsg9I2QPZDr7XpnVy3tLP8Xc3zHfu9w5DrW4tfih03
ihwWe2urE7ArpzrLfuuDF+E35lcX+2QNrMn64jJJHKB2D+P7Dx/I54xDAcRH
EysQv9dfLX7QWFFI5MVOp0o8pfq9E70zFh+7Iu8r3l4nr/ULiV1WnSuL/TCT
8qLvhyZI3K6Nzyj7r325J3qkLcwqcZQemF78mRlVFjv7NZk8ZXf2KXJO9TuK
PtpVgsVuK8fyy30Yhb5I/K5kHHZXvld2psTd9tCjEnfYh4jz1K8ush5tZ9bL
6H203L9+Yjl2dmhliaPVrg3Pyzr+ZJH71x+PIa95lUnkUP96YZq8ft4o52W/
rop/ynFV7ssaXAD73nOmyKVx6ckGWd/Gz3JdveFIzm1ZH9l380ZBia/sDzOR
nx2jsDftX8j3lV43RC71wefl+oZXyDb5+8k40R8jzzjRL93ZEPuojC8qv2s7
FRE7pPk3Ebtl+VQWO6/7nBC9VjsOFrm0iheV81OeXI+Qf48YLedvl3EXf6N5
fxU/Y0V4yHmbVXZgV6dfk/3W17aXdeszF8t9GYOOybnqH8eHynq7thL7ZDot
Ezuk3P0i+2vP70+8OuAV/qjoP+LjHVWID5VhrGNyd5FndfM44v4AVa5vNL4m
+ZGxrJDEJ3rVriK/5p3GEjcot/PIdfW/BnHIwkeyT8rUunIdW3MWeVKXtRW5
s27NnSHXs67byMVEsbtG3zI75fopDlvk+4vPy+9pGbOL3bDe/5D4Tat+Rn5H
cU4Uf2D9y40d+d4Qv94qC3FC7tH48ZSXkmeaJ7qtlOtWSiv+zN68S+yV8mer
3KfyvcYrWcf5r+i36SH5gdpgCn7r0gKJ9219raxXv1VC7Il10Vgj621XR+JC
ZcQN4qnGdcXvaTXGil6rxdpKnK19/yL+Snd5it96PRi7/v2E6JHidEa+rw/5
JuvXY06S/1SPlzjO7BEr+ZjVOKvon3ptjNhF5dU4id/1IvHcj99H+b5ZKRfy
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
AryvyK3U3Z82x78c+i3yYyzqAx49Nob85/wU5LzdbvTjeBfqf4Pbw3cPph6v
TLtG/BbzlXjcdQ/9Pmss8ut0SeT5Q1zoq4/cK88B0vaspx/qbXf04hF9DPZv
5hMopVPnT3UIoz4WmA+emHMz5rwnzQKXrKyjJzcT4U1feM36p9Ugn80YKnGh
cbQB+5DE8yK0TM/hg875Ah72VE+dN7KHOUiNK8F3GeROnD9xBvzIHCfJN777
U5dpVpt6p/dvwensnqupd95mjrnqkvqcRt8S8EaXfwLnzlybPnk35gMYGXek
9v3nAl917UYfUt1k+PPJz+FtVJwFb/XYAfLX8s2Q5yHH4FW1LcTnzo0C9w98
nDpP+iV1i9js8Iae2jynwymQOZfVvKg3bFokOLW2/RJxQcoc5rHMCsae5+sD
PyGHM/tRYQj18ti1Im9W6Er4E3Fv4IU61DfkuitP0jfRuBb8kg034RvE1Pwg
6119jL7qx+Oo67xugN1t/YO6+frWzJPONYnnrrlOBveu8xx+8JUK1ONqZaF/
YVZT5PNFOniX447wPJCcV8nvniWBExYbglyGzcavlZ5CHtg8dR5p+s/MEZ66
QOJdM3Q2uPX5UOq5P8qBN7y0sFc+z2ROkzWgNn2MFs9HNFv0lnqquWMWevvq
BTyJESPFDymFPsG79T6Hn1r2Q+o8ejpX+N0FzhD3ZK1OX2P3L/Cw+r7Hb7k0
EDzaapvK616cRuan6m9WkEdOzYddORgqvAFtZj14fo7HqJfvnIm+PvswSfbx
6V5w0x4NBV+0T3/Dvx39RT/84ffwaQJOg481SJT9V2feETnRZ9GvbvpfB5c8
Ap/F+t0afPBwOfR82wrirMDe8BFfl6JvYkUQfLqPzegP8xxIfaN8EeZDfZlH
/lp6H/hS1rzg7KHNxQ8p7Q+QP/zsJXbVKFGJ5x58jGdeT/6P8Fd/2NTjV68g
b1w6in6Z5f48f+hbLYlflZYXmOc9vRV5zNq/8OsG/KFPcV1a6h9pE6i7tjwq
cq8O5TkoZnsH/v4LPpXul4i/+DfoIp+fI3i86rGTuHozfHD9CM+ttGuDdxvT
KpB/H10Mbn25DfzaeufJR/xGghcceCH22PhQmj7J9ffgO7vD2zeqZAAPGXqK
53k8nyxxsGEcJN7LNQaeVD544uapfuQ52jPmPzScwvOI3JkLYx1Mpv6dawV6
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
               "], "Version" -> {12., 0}, "ID" -> 8874117158160028988]]}, 
          "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], 
     "Output" -> Association[
      "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
         Association[
         "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
          "Output" -> 
          Association[
           "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
            Association["Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor["WrapMLDataset", 
                Association[
                "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
          "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
          "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
         Association[
         "Input" -> Association[
           "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
          Association[
           "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
          "Processors" -> {
            MachineLearning`MLProcessor["ToVector", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
              Association[
               "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
              "Output" -> 
              Association[
               "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]],
               "Version" -> {12., 0}, "ID" -> 9350965027122040]], 
            MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
              Association[
               "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]],
               "Index" -> {
                Association["algebra 1" -> 1, "algebra 2" -> 2]}, 
              "MissingCode" -> 0, "Version" -> {12., 0}, "ID" -> 
              4646141061865841929, "Output" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NominalVector", "Weight" -> 1]]]], 
            MachineLearning`MLProcessor["FromVector", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]],
               "Output" -> 
              Association[
               "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
              "Version" -> {12., 0}, "ID" -> 5413477685440795795]], 
            MachineLearning`MLProcessor["FirstValues", 
             Association[
             "Info" -> Association[
               "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
              "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
          "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
       "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
       Association[
        "algebra 1" -> 0.9601990049751244, "algebra 2" -> 
         0.03980099502487562]], "Prior" -> Automatic, "Utility" -> 
     SparseArray[
      Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
     "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
     "Quality", "BatchProcessing" -> Automatic, "Model" -> 
     Association["Method" -> "NeuralNetwork", "Network" -> NetChain[
         Association[
         "Type" -> "Chain", "Nodes" -> 
          Association[
           "1" -> Association[
             "Type" -> "Linear", "Arrays" -> 
              Association["Weights" -> CompressedData["
1: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
UnRUs8N/AWB+Pz0=
                 "], "Biases" -> 
                RawArray[
                  "Real32",{-0.014219971373677254`, -0.008390722796320915, \
-0.01925794780254364, -0.01775827445089817, 0.012931115925312042`, 
                  0.024045327678322792`, 
                  0.0033668482210487127`, -0.01450364664196968, \
-0.016741931438446045`, 0.01665191352367401, -0.02091415412724018, 
                  0.021659841760993004`, -0.00026187030016444623`, \
-0.016922548413276672`, 0.011069797910749912`, 0.0037715111393481493`, 
                  0.008574344217777252, 
                  0.00955519825220108, -0.012632432393729687`, \
-0.0002680719189811498, -0.01619068719446659, 
                  0.012651240453124046`, -0.005069066770374775, \
-0.019227072596549988`, -0.018176063895225525`, 0.017087170854210854`, 
                  0.013170750811696053`, -0.016980180516839027`, \
-0.015785202383995056`, 0.01265804748982191, 
                  0.005608792882412672, -0.013070055283606052`, \
-0.0027584703639149666`, -0.017754778265953064`, 
                  0.01696954108774662, -0.016421472653746605`, \
-0.006315331440418959, -0.006881357170641422, 
                  0.010776691138744354`, -0.019758734852075577`, \
-0.00206612516194582, -0.013365511782467365`, 
                  0.02168169431388378, -0.01915561780333519, \
-0.015327349305152893`, -0.01677614636719227, -0.02654552459716797, 
                  0.011467947624623775`, 0.021266786381602287`, 
                  0.007068729493767023}]], "Parameters" -> 
              Association[
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                11, "$InputDimensions" -> {11}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "2" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[2], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                "$Dimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "3" -> 
            Association[
             "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
              "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "4" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association["Weights" -> CompressedData["
1:eJwtl2lUjo/Tx0uoKJRSaadIKaW9+5pBi6ylEpWlsiR7iMJPkrRIG5W1siRL
2YrQfc1UCCFk3yMSpSIRZXn8z3lezJwzZ97NmfnM92s4Z7l3SDcZGZlVCv+S
d3DEmJUrg9f69PxfMT94ifXIJf9rjvz/mP78Nuk+1OZ5+nrovNCVSl5qsUdp
NMMuT1H3Wy6Ea4YKx95rUpONMaSEpKHaoSi6dd4FWxUlGLmvQOSWFMHzZj50
OftTdHQmZG6Mo0SnKpC9NYdP2ctipJk8Ou3rw9Yd03BCr5U0YWalpGD6eKyL
nkBK9q1UfGAsDbPP5O9laviqayKb/NYS2xr7U8HXbRL92eqUZVkKGR45ThVb
8+lSpC52ZJhAfVQzTLy1Eo5GXQbnA8ZoucUR755eAj/H+HChqw+UH0+AwvSL
tE53j1OIiz2vX/tU7Ph2je/m23Lf/lL6mDvMyap1GU9elScuVEoUi1vXCzG2
f+jTbDfs1PoMfHO2VKu8N1/z0wXTUTPo4YAkWDKugiwvqIPM72jst/s4Dxg/
kXdr34BW/a3SgP5DQGOsEUcZmfF/c8uFfgv3QPbWObTsrT7vUYhD+1hPSG7X
Y78j38T8OY506GIVKK+ZQoNXvoJGxTRO/BbLPwZ7Qt2TLSgjnMNdj+ZzlEGq
WC17jOWzw2lSzly0T87loGWLYVDwH/I/Okvyw2Inr3oyisqMdHFC1BOYOUWG
Cy8sw7aKiRSyyQCLeu+g/iMjOPBvhrjXrDvpbEqgQ/uUuLlpPUZI1KjRdDYX
NW0m0aVdIpUZD3NNmkQtnzpIKd1Kv9Y2sEtDCk2Mlec7Vqq8QG8Lt56dLri8
dIHZ/cuozGs/TBsupbzERXRa6ReZFLaS+oT+KJg1g4f+Egx9eUWQk++C0ikK
vNlxHF7MPSkIY3yxNtoAV610QpuYRdimaQPBm6ZDz4oxWNwexKdlCtDykyqN
UDwk3m6xkKhr1paWTNvDRRU1tCSzQkxNahN+O16iu3YH0MB2ErmodON5z3P4
uqoruVW7s4G1Dg+tjAKZvwStO21w6WFLWPb4AsQlRKOa1Q56U3yODD8sw+qy
GchLm0XvVS6YHbaFN2k6QbR0GW7Q+kNRtyygsu437FYpJw/zrw7T3g5i6+Am
uj/Mh+c5u0Bi7nLu1uOueNpZA+d2bxS9mwvB0HGsoGL5Hh5Yq1Ga8kdBpWaD
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
                 "], "Biases" -> 
                RawArray["Real32",{-0.004677269607782364, 0.0182024072855711, 
                  0.014909295365214348`, -0.01904447190463543, \
-0.017199372872710228`, -0.017936332151293755`, 
                  0.01034516654908657, -0.02483738213777542, 
                  0.005593493580818176, 
                  0.014321517199277878`, -0.016901928931474686`, \
-0.018371177837252617`, -0.017420750111341476`, -0.011217344552278519`, \
-0.013560398481786251`, -0.014345601201057434`, 0.02046070247888565, 
                  0.0009755283244885504, -0.012391741387546062`, \
-0.008676379919052124, -0.011529273353517056`, -0.019419144839048386`, 
                  0.009033767506480217, -0.007057793904095888, \
-0.0036800072994083166`, -0.014375338330864906`, -0.005155949387699366, 
                  0.015301935374736786`, -0.018655121326446533`, \
-0.012813462875783443`, 
                  0.017316056415438652`, -0.021588478237390518`, \
-0.01298624649643898, 0.011465963907539845`, 0.013914467766880989`, 
                  0.025555064901709557`, -0.006218734197318554, \
-0.024299561977386475`, -0.02068089321255684, 0.0037291394546628, 
                  0.01055687852203846, 0.019132068380713463`, 
                  0.018618609756231308`, 
                  0.009547569788992405, -0.01481543481349945, 
                  0.028295345604419708`, -0.014645951800048351`, \
-0.01899939961731434, 0.01585252583026886, -0.01641693338751793}]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "5" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[2], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                "$Dimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "6" -> 
            Association[
             "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
              "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "7" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association["Weights" -> CompressedData["
1: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

                 "], "Biases" -> 
                RawArray["Real32",{0.0044943057000637054`, 0.0254659503698349,
                   0.02373005449771881, 
                  0.02349044196307659, -0.020812401548027992`, 
                  0.015173508785665035`, 
                  0.016261763870716095`, -0.028129946440458298`, \
-0.011557629331946373`, 0.017643840983510017`, 0.014887656085193157`, 
                  0.0024811909534037113`, -0.00741411279886961, 
                  0.001075347769074142, 0.016083749011158943`, 
                  0.004919718019664288, -0.019205346703529358`, 
                  0.02740822173655033, -0.025037134066224098`, \
-0.008567326702177525, 0.018536409363150597`, 
                  0.021259982138872147`, -0.02083679847419262, \
-0.011453867889940739`, -0.00455976277589798, -0.015075378119945526`, \
-0.0077283247373998165`, 
                  0.029880361631512642`, -0.01266927644610405, \
-0.01996348612010479, 0.009226345457136631, 
                  0.019962919875979424`, -0.0166824609041214, \
-0.020138787105679512`, 0.02157563529908657, -0.019636375829577446`, 
                  0.0012388636823743582`, -0.02141542360186577, \
-0.0022245205473154783`, 0.004987578839063644, 
                  0.016963280737400055`, -0.016119299456477165`, 
                  0.019688673317432404`, 0.024327270686626434`, 
                  0.016114206984639168`, 
                  0.017664402723312378`, -0.01083811093121767, 
                  0.01625884883105755, 0.01923867128789425, 
                  0.002737176138907671}]], "Parameters" -> 
              Association[
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "8" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[2], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                "$Dimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "9" -> 
            Association[
             "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
              "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "10" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association["Weights" -> CompressedData["
1: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

                 "], "Biases" -> 
                RawArray["Real32",{0.012672399170696735`, 
                  0.0167919360101223, -0.01949238032102585, 
                  0.0036298197228461504`, 0.01567179709672928, 
                  0.018000908195972443`, 0.0070649501867592335`, 
                  0.018062185496091843`, -0.023623932152986526`, 
                  0.012500317767262459`, 0.001136362669058144, 
                  0.023395346477627754`, 
                  
                  0.02344183437526226, -0.017543718218803406`, \
-0.018840497359633446`, -0.0136978505179286, -0.015657292678952217`, 
                  0.019043488427996635`, -0.014189793728291988`, \
-0.022055864334106445`, -0.015924643725156784`, -0.011688475497066975`, \
-0.022916549816727638`, 0.007737933192402124, 
                  0.008809502236545086, -0.0032047193963080645`, 
                  0.019691133871674538`, -0.015042400918900967`, 
                  0.023572629317641258`, -0.019663777202367783`, \
-0.0017446670681238174`, 0.018938321620225906`, 
                  0.01871323212981224, -0.0007426048978231847, \
-0.017355771735310555`, 0.017233937978744507`, 
                  0.013564465567469597`, -0.022274645045399666`, 
                  0.018837913870811462`, 0.01728791743516922, 
                  0.017257245257496834`, 
                  0.014226733706891537`, -0.02332366816699505, \
-0.024497507140040398`, 0.017533062025904655`, 0.02080821432173252, 
                  0.015779143199324608`, -0.02165430225431919, \
-0.018120814114809036`, 0.012667982839047909`}]], "Parameters" -> 
              Association[
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "11" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[2], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                "$Dimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "12" -> 
            Association[
             "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
              "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "13" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association["Weights" -> CompressedData["
1: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
                 "], "Biases" -> 
                RawArray["Real32",{
                  0.018763260915875435`, -0.02048816904425621, 
                  0.018465949222445488`, -0.01980866864323616, 
                  0.017937298864126205`, -0.030852776020765305`, 
                  0.015847785398364067`, -0.006064843386411667, 
                  0.01806885004043579, -0.026434898376464844`, 
                  0.018733004108071327`, 0.014287051744759083`, 
                  0.015511523000895977`, 0.019917767494916916`, 
                  0.022512171417474747`, 0.02289334498345852, 
                  0.020351560786366463`, -0.013651360757648945`, \
-0.025057746097445488`, 0.023236948996782303`, -0.01780305802822113, 
                  0.00890724640339613, -0.016178632155060768`, 
                  0.025338131934404373`, 
                  0.018892081454396248`, -0.02339313179254532, 
                  0.022230073809623718`, -0.019924484193325043`, \
-0.022207388654351234`, -0.01890530250966549, -0.01931050419807434, 
                  0.007724237162619829, 0.018929246813058853`, 
                  0.026929572224617004`, 0.01661665365099907, 
                  0.025968460366129875`, 0.016180962324142456`, 
                  0.015058803372085094`, 
                  0.01576840877532959, -0.0216046255081892, 
                  0.023729726672172546`, 
                  0.02567608840763569, -0.0156379546970129, 
                  0.01262296549975872, -0.017962351441383362`, 
                  0.019535675644874573`, 
                  0.015411603264510632`, -0.012145803309977055`, \
-0.018913524225354195`, 0.026993798092007637`}]], "Parameters" -> 
              Association[
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "14" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[2], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                "$Dimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "15" -> 
            Association[
             "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
              "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "16" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association["Weights" -> CompressedData["
1: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
XadYxxUwRDcTJ7xWhQkmn+h5UCEPXpcDm+7MwPTVcbAzLpmstPexatV7GHqN
hX6aFvhmtA48X2eDHrNMsVTRQbiXlk5VA+agqXkuvQk5JwRd/Sgq/PhCl27Y
ofux8QgW5+BX8RlyDlyET5uqBGlJFB3/K092icZYka0P9TPXouRuHtT4OeAM
a01M+aFM3cbZXJUylmZlDKPL09oEBRjO6um7YHx6vOCsVg8BT4P4bUWOmDy1
Wtws3wxLTM5z+rcvtORCBaXctsGXwaPYYKku3yl1FxJNP4kmlWquzYGb+Pne
OL506B2ZTRMgbnsi25hNoOG71TD+7x7Jqcu9aPq/drG4PIJrwJBlzDW5oaqG
bFSVcNvt/3gmXhMj54bTm6VXoaVtOzy/YgR5qvvAJ1+L/w2qp4jrM4UFBn5O
ESmx2HfbAD7TcR06n+WLvu4WpFHkAD8Kh9DvfEWMGOBPFxsqKbVnEFFUIFkc
lGWZVTfEg0VGiGq36I1Rf57fsIJe/jPEw2fGwaTXl8FwQyaPqaqGmClDUc75
EO03KhYi3yYKWZ7a2P+kJqeu/AhyP3eKqkei6GrjYuav18Sfdca8fk82DCt0
pqnfI8XUJdu5cnYujApTgpHtU2hHT1MalTwIxywpFnwfbBevq1rj4yhj1pmC
1PbQFUzMrol3Pa9T+92eZHJQkQ/7biLTFh2ete0fzXUU0L86B8okbZBbdIEi
22P5ydNcvmWSRnqZR0lh+T+InP+QNMuS6eYdOT404yidfNcN3mX+vCVNnjS6
f8EA1RhKbGpAczlDkGRHid5Xl+Gabg1MLTvOc2IHcf/uLNbP7CM+yu6J/t1u
otFWP85KA34y8q7LtzG7ST++mgJsd3DNq1b4rlFNE2wicKFiJFaV6KFcVSy1
Fjly9JND4nElKV69zgn3NZXQucfHhI0v5bgzOQo+Hbgn5gerYJjdY/p5IRRm
Gv6FGhVbDnqaITmX54inJLFwbNMjuLPImP3bqyFeVkV0K9ghxGxVwL/Jszl+
Vxjs00jGm+uGsZZbs9BHV4Z/r7GnT+69UXZlL3SOiOXbgacp7V6AJHRqvfB1
XwWVXvwtPAn1pL0R+vxu5ye4dGs7f9ZscFF312enc7s55qABm8yajkXVKZDV
ZxrM/xgk0Y9nsaBYC0xbT/KDUleUXllD1w6WQg9BE7aU6NCpr9NgvFcbGXjY
4AWZTGpOeCnsuReNL0/eAePtMXhwdCWMqBoP0zvP0+6u1ei6pFK4uSlIUH5p
hiYH78B5O2+4X1smHO+rjw/9PFHtzmZS+G5PvWZnMw8+TnNjE2DNu2WceHkH
dlo7CYsWHYEr4SoY+uQXTfP+Q4pjCmGl1TBe1GZO/vFq7BC8luZW7Odrp9oo
zOEwOfm44ahtsRQT4oNJneqUMqg3qneZ8Z+Jdnzld5u4Z0sM3ehvyraWe+Bq
7EWabN9GHT6uPOqeO27r1QXDPOZzQ8ozyd26EHZx7k/2sQ2UMyQe2u70hPaH
UWKKxX5x3MZICHt7GeR61dCz3e2kN1CE84UVkKxtxGtnXIRsKUXK/eAn0Tkq
Cg7uXrwyxod/tUzhu9OmiLMlipCVshEFVkHZ7uvi0r1zxJ/zNPCV0UoYePih
sGzkJFSTUePTzv04deMhrHMYhu1SUmAZGwL/BxLMEb4=
                 "], "Biases" -> 
                RawArray["Real32",{
                  0.029126860201358795`, -0.01872669905424118, 
                  0.01908004842698574, -0.02106461301445961, \
-0.02178063802421093, 0.019857561215758324`, 0.015257746912539005`, 
                  0.003886705730110407, 0.019821327179670334`, 
                  0.028560202568769455`, -0.012105193920433521`, \
-0.02155754528939724, 0.018479811027646065`, -0.008085298351943493, 
                  0.016863711178302765`, 
                  0.021621622145175934`, -0.01841966062784195, \
-0.019767219200730324`, -0.021811284124851227`, 0.017250696197152138`, 
                  0.005966793745756149, 0.008290030062198639, 
                  0.01890457049012184, -0.018673766404390335`, 
                  0.019505588337779045`, -0.0020668436773121357`, \
-0.018132563680410385`, -0.012350698001682758`, 0.01881508342921734, 
                  0.018738824874162674`, -0.021611757576465607`, \
-0.01982264406979084, -0.02783443033695221, -0.028704822063446045`, \
-0.020844483748078346`, 
                  0.026097895577549934`, -0.014355425722897053`, \
-0.025643330067396164`, 0.020431874319911003`, 0.023363925516605377`, 
                  0.019481074064970016`, -0.021461226046085358`, \
-0.0201251357793808, 0.022336333990097046`, 
                  0.019901761785149574`, -0.023781051859259605`, 
                  0.020437126979231834`, 0.007906614802777767, 
                  0.018578561022877693`, -0.035126909613609314`}]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "17" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[2], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                "$Dimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "18" -> 
            Association[
             "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
              "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "19" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association["Weights" -> CompressedData["
1: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
                 "], "Biases" -> 
                RawArray["Real32",{
                  0.017296630889177322`, -0.025197045877575874`, 
                  0.02503150701522827, -0.019182054325938225`, 
                  0.01637253910303116, 0.02008182741701603, 
                  0.021009372547268867`, -0.021706249564886093`, \
-0.021764975041151047`, 0.006988979410380125, -0.024806160479784012`, 
                  0.02037597820162773, 
                  0.02051401324570179, -0.019635656848549843`, 
                  0.017919287085533142`, 0.018883660435676575`, 
                  0.02360399253666401, 0.017532970756292343`, 
                  0.01893436722457409, -0.024700284004211426`, 
                  0.02095041051506996, 
                  0.0041910321451723576`, -0.013082007877528667`, \
-0.019278747960925102`, 0.009068408980965614, 0.019329536706209183`, 
                  0.021095793694257736`, 
                  0.019642939791083336`, -0.025174427777528763`, 
                  0.021182693541049957`, 
                  0.01996673084795475, -0.01882988214492798, \
-0.02219504676759243, -0.018508581444621086`, -0.017520125955343246`, \
-0.02443285845220089, 
                  0.008877057582139969, -0.02151372842490673, \
-0.013689596205949783`, -0.019931694492697716`, -0.02112925983965397, \
-0.02056940272450447, -0.022378239780664444`, -0.019776269793510437`, \
-0.025638025254011154`, 0.01637476123869419, 
                  0.01982070505619049, -0.020080335438251495`, \
-0.020545590668916702`, 0.010311230085790157`}]], "Parameters" -> 
              Association[
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "20" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[2], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                "$Dimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "21" -> 
            Association[
             "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
              Association[
               "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout"], 
              "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "22" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association["Weights" -> CompressedData["
1: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

                 "], "Biases" -> 
                RawArray[
                  "Real32",{-0.020680958405137062`, -0.020530492067337036`, \
-0.020448407158255577`, 0.02043999172747135, -0.02025863155722618, 
                  0.02286321297287941, 
                  0.021439624950289726`, -0.021957680583000183`, \
-0.021703917533159256`, -0.020671812817454338`, -0.021410947665572166`, \
-0.020374231040477753`, -0.02083176001906395, 0.0211435966193676, 
                  0.02094275876879692, 
                  0.02090648002922535, -0.02097974717617035, 
                  0.021988520398736, -0.021974213421344757`, 
                  0.02112419717013836, 0.02317427098751068, 
                  0.02150958962738514, -0.021038386970758438`, \
-0.01988491788506508, -0.020012909546494484`, 0.020081786438822746`, 
                  0.01814720407128334, -0.021635951474308968`, \
-0.023062365129590034`, 0.0197750236839056, -0.024108033627271652`, 
                  0.020492417737841606`, 
                  0.02099958248436451, -0.021102525293827057`, \
-0.024037912487983704`, -0.020142478868365288`, 
                  0.02036750689148903, -0.0229486133903265, \
-0.021309131756424904`, 0.020189855247735977`, -0.021408628672361374`, 
                  0.016822533681988716`, 
                  0.021212583407759666`, -0.021997256204485893`, \
-0.020864341408014297`, 0.019587311893701553`, -0.022022703662514687`, 
                  0.02082967758178711, 
                  0.020000703632831573`, -0.02124970778822899}]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "23" -> 
            Association[
             "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
              Association["Function" -> NeuralNetworks`ValidatedParameter[
                  NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                   NeuralNetworks`Private`ScalarSymbol[2], 
                   Association[
                   NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                "$Dimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "24" -> 
            Association[
             "Type" -> "Linear", "Arrays" -> 
              Association["Weights" -> CompressedData["
1:eJwBvgFB/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
AgAAADIAAABazJW9gOOYPaqEKL6gUp29ihalvqaz2b0MXls+/g6dvTLBEz4x
n3K+mPAdvmGspr43MCm+PHdOPoDjPT0m/Bs+jB+dvkuypz6IZZO+DulMvU8Z
vb3Bj7o9g6tkvV3Pcr7xbMy8Fqs/vvZ4lb04yPm8X9AgvX2Paz4ql8q9W4lu
PRQ4ez4lc948/OydvkJerTycBY0+93kmPT3hQD7nGyM+UKJsviItkL20IZ4+
wXaYvi2ka74nGEI+0gCvvddAnz5U8389tiUWvhFThz4Kd1Y+afm2PQ33hL6d
tu29HbYhvgkGlb5GcUs+E0JUPr+YgrzwubC8ibeTO7CwiT0tu4y8r1Bivisn
kb4IJgU9ubvwPTZ9KL7l0XS+mozsvZwrC75wb4E+u846vi8E7j1HGIO+Ryag
vVlwpT75yRK8maaUvGuhob0VeJm+62knvjRtij7sEJG+nzJnPrnRTb02ZdQ9
6YKcPh5Aer6X1eU9U4yFvZwLoD3jqu29dDK6vTKodT0uh50+kVeSvTrYSL51
qws+bv7NRA==
                 "], "Biases" -> 
                RawArray["Real32",{
                  0.020896997302770615`, -0.020896995440125465`}]], 
              "Parameters" -> 
              Association[
               "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
                50, "$InputDimensions" -> {50}], "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]],
               "Outputs" -> 
              Association[
               "Output" -> 
                NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "15", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "16", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "17", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "18", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "19", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "20", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "21", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "23", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "22", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "24", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "23", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "24", "Outputs", "Output"]}, 
          "Inputs" -> 
          Association[
           "Input" -> NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
          "Outputs" -> 
          Association[
           "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
         Association["Version" -> "12.0.10", "Unstable" -> False]], 
       "Training" -> 
       Association[
        "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
         TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
         "TotalTrainingTime" -> 0.6309646856322195, "MeanInputsPerSecond" -> 
         16229.117465963463`], "InputType" -> "NumericalVector", "Processor" -> 
       MachineLearning`MLProcessor["Sequence", 
         Association[
         "Input" -> Association[
           "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
          "Output" -> 
          Association[
           "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
          "Processors" -> {
            MachineLearning`MLProcessor["Standardize", 
             Association[
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]], 
              "Mean" -> {0.028612078907386, -0.037663669434233285`, 
               0.11812144334514217`, 0.16675370720289667`, 
               0.24134863941771068`, 0.07398214393914918, 
               0.019591640793431297`, -0.008548603241697445, 
               0.053821906974201715`, 
               0.08444435906764197, -0.06202280872843538}, 
              "StandardDeviation" -> {0.26209968487792235`, 
               0.24153980478299075`, 0.28885750014885697`, 0.328885801894885, 
               0.4673814222365112, 0.26010690725500724`, 0.24280485814746022`,
                0.23888662897734442`, 0.24292139294259735`, 
               0.24928328799884103`, 0.2468752774208303}, "Output" -> 
              Association[
               "f1" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1]], 
              "Version" -> {12., 0}, "ID" -> 1054146331557663832]], 
            MachineLearning`MLProcessor["FirstValues", 
             Association[
             "Info" -> Association[
               "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> "f1", 
              "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
          "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
       "FeatureNumber" -> 11, "PostProcessor" -> 
       MachineLearning`MLProcessor["Identity"], "Options" -> 
       Association[
        "NetworkType" -> 
         Association["Value" -> "FullyConnected", "Options" -> Association[]],
          "NetworkDepth" -> 
         Association["Value" -> 8, "Options" -> Association[]], 
         "NumberOfParameters" -> 
         Association["Value" -> 18150, "Options" -> Association[]], 
         "ActivationFunction" -> 
         Association["Value" -> "SELU", "Options" -> Association[]], 
         "L2Regularization" -> 
         Association["Value" -> None, "Options" -> Association[]], "Dropout" -> 
         Association["Value" -> 0.01, "Options" -> Association[]], 
         "NetInitializationMethod" -> 
         Association["Value" -> Automatic, "Options" -> Association[]], 
         "OptimizationMethod" -> 
         Association[
          "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> 
           Association[]], MaxTrainingRounds -> 
         Association["Value" -> 10, "Options" -> Association[]], 
         ValidationSet -> 
         Association["Value" -> Automatic, "Options" -> Association[]], 
         "EarlyStopping" -> 
         Association["Value" -> False, "Options" -> Association[]], 
         TrainingProgressReporting -> 
         Association["Value" -> None, "Options" -> Association[]], 
         "NetTrainOptions" -> 
         Association[
          "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
           "Options" -> Association[]], "LossFunction" -> 
         Association["Value" -> Automatic, "Options" -> Association[]], 
         "ValidationSetRatio" -> 
         Association[
          "Value" -> 0.15033222591362128`, "Options" -> Association[]]]], 
     "TrainingInformation" -> 
     Association[
      "PanelCell" -> CellObject[27425], "TrainingFunction" -> Classify, 
       "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
       "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
       5.1283545`8.161523031861748, "LossName" -> "MeanCrossEntropy", 
       "BestModelInformation" -> Dataset[
         Association[
         "MeanCrossEntropy" -> 
          Around[0.1262442450282116, 0.04836819419323194], "Accuracy" -> 
          Around[0.9675011347985654, 0.01818462024220615], "EvaluationTime" -> 
          0.0002376019615287575, "TestSize" -> 241, "ModelMemory" -> 196400, 
          "ModelUtility" -> 3.298181316091816, "TrainingSize" -> 963, 
          "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 785968, 
          "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
            Around[0.1262442450282116, 0.034201478107782096`]}, 
          "AccuracyHistory" -> {
            Around[0.9675011347985654, 0.012858468286566126`]}, 
          "Configuration" -> {
           "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
            8, "NumberOfParameters" -> 18150, "ActivationFunction" -> "SELU", 
            "L2Regularization" -> None, "Dropout" -> 0.01, 
            "NetInitializationMethod" -> Automatic, 
            "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
            MaxTrainingRounds -> 10, ValidationSet -> Automatic, 
            "EarlyStopping" -> False, TrainingProgressReporting -> None, 
            "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
          "FinalTrainingSize" -> 1204], 
         TypeSystem`Struct[{
          "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
           "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
           "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
           "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
          TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Tuple[{
             TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
           TypeSystem`Atom[Integer]}], 
         Association["ID" -> 16505733188705]], "Configurations" -> Dataset[
         Association[
         Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 8], 
              "NumberOfParameters" -> Association["Value" -> 18150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> None], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
              Association["Value" -> Automatic], "EarlyStopping" -> 
              Association["Value" -> False], TrainingProgressReporting -> 
              Association["Value" -> None], "NetTrainOptions" -> 
              Association["Value" -> Automatic], "LossFunction" -> 
              Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.2972982316285973, 0.042355116767231096`], "Accuracy" -> 
               Around[0.9096721874274586, 0.012179950895005072`], 
               "EvaluationTime" -> 0.00005358012459431202, "TestSize" -> 1194,
                "ModelMemory" -> 170896, "ModelUtility" -> 1.676627757162993, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.6309573444801932, 
               "TrainingMemory" -> 2356768, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.2972982316285973, 0.029949590284057147`]}, 
               "AccuracyHistory" -> {
                 Around[0.9096721874274586, 0.008612525872377244]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.32955769786521644`, 0.050850558309700235`], 
               "Accuracy" -> Around[0.9098908477703732, 0.01231970359881095], 
               "EvaluationTime" -> 0.0000488147467786613, "TestSize" -> 1164, 
               "ModelMemory" -> 170896, "ModelUtility" -> 1.465999786002261, 
               "TrainingSize" -> 40, "TrainingTime" -> 0.31622776601683794`, 
               "TrainingMemory" -> 477352, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.32955769786521644`, 0.035956774607910975`]}, 
               "AccuracyHistory" -> {
                 Around[0.9098908477703732, 0.008711345956927536]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.18608547183177598`, 0.02232263240447896], "Accuracy" -> 
               Around[0.9444441914215189, 0.010898903646935965`], 
               "EvaluationTime" -> 0.00006380911080551212, "TestSize" -> 1004,
                "ModelMemory" -> 170896, "ModelUtility" -> 
               2.6224600076312523`, "TrainingSize" -> 200, "TrainingTime" -> 
               1., "TrainingMemory" -> 635992, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.18608547183177598`, 0.015784484747141638`]}, 
               "AccuracyHistory" -> {
                 Around[0.9444441914215189, 0.007706688676247213]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.1516843572813437, 0.048276604855579136`], "Accuracy" -> 
               Around[0.9587017648170406, 0.019492219137500096`], 
               "EvaluationTime" -> 0.00019137050000062923`, "TestSize" -> 241,
                "ModelMemory" -> 170896, "ModelUtility" -> 2.9552652264269, 
               "TrainingSize" -> 963, "TrainingTime" -> 3.981071705534973, 
               "TrainingMemory" -> 753384, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.1516843572813437, 0.03413671466604341]}, 
               "AccuracyHistory" -> {
                 Around[0.9587017648170406, 0.013783080332500513`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00019137050000062923`, "MeanCrossEntropy" -> 
              Around[0.1516843572813437, 0.048276604855579136`], 
              "ModelMemory" -> 170896, "TrainingMemory" -> 753384, 
              "TrainingTime" -> 5.608330484110627], "Index" -> 1], 
          Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 2], 
              "NumberOfParameters" -> Association["Value" -> 3150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> 0.01], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
              Association["Value" -> Automatic], "EarlyStopping" -> 
              Association["Value" -> False], TrainingProgressReporting -> 
              Association["Value" -> None], "NetTrainOptions" -> 
              Association["Value" -> Automatic], "LossFunction" -> 
              Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.34203039427180004`, 0.050367922391680295`], 
               "Accuracy" -> Around[0.9082341119338734, 0.0120681057073581], 
               "EvaluationTime" -> 0.00002780612074512992, "TestSize" -> 1194,
                "ModelMemory" -> 66448, "ModelUtility" -> 1.3944605469502647`,
                "TrainingSize" -> 10, "TrainingTime" -> 0.15848931924611134`, 
               "TrainingMemory" -> 237136, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.34203039427180004`, 0.035615499477434885`]}, 
               "AccuracyHistory" -> {
                 Around[0.9082341119338734, 0.008533439381748989]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.3482327752214321, 0.0366812609609199], "Accuracy" -> 
               Around[0.8756394643530573, 0.01403105673654073], 
               "EvaluationTime" -> 0.00003511202413505656, "TestSize" -> 1164,
                "ModelMemory" -> 66448, "ModelUtility" -> 1.37487479128386, 
               "TrainingSize" -> 40, "TrainingTime" -> 0.15848931924611134`, 
               "TrainingMemory" -> 239200, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.3482327752214321, 0.025937568367939836`]}, 
               "AccuracyHistory" -> {
                 Around[0.8756394643530573, 0.009921455365621138]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.20817396486940898`, 0.025349629315852718`], 
               "Accuracy" -> 
               Around[0.9357993423454368, 0.011584129626100004`], 
               "EvaluationTime" -> 0.00003704332103236729, "TestSize" -> 1004,
                "ModelMemory" -> 66448, "ModelUtility" -> 2.3974405148625486`,
                "TrainingSize" -> 200, "TrainingTime" -> 0.5011872336272722, 
               "TrainingMemory" -> 291640, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.20817396486940898`, 0.017924894789804757`]}, 
               "AccuracyHistory" -> {
                 Around[0.9357993423454368, 0.008191216612759298]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.16393993375138782`, 0.0570775109792664], "Accuracy" -> 
               Around[0.9618727620165243, 0.01890249635531241], 
               "EvaluationTime" -> 0.00008655935377960106, "TestSize" -> 241, 
               "ModelMemory" -> 66448, "ModelUtility" -> 2.788683587185264, 
               "TrainingSize" -> 963, "TrainingTime" -> 1.9952623149688797`, 
               "TrainingMemory" -> 554536, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.16393993375138782`, 0.04035989506668889]}, 
               "AccuracyHistory" -> {
                 Around[0.9618727620165243, 0.013366083354195403`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00008655935377960106, "MeanCrossEntropy" -> 
              Around[0.16393993375138782`, 0.0570775109792664], "ModelMemory" -> 
              66448, "TrainingMemory" -> 554536, "TrainingTime" -> 
              2.6530851938281788`], "Index" -> 2], 
          Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 2], 
              "NumberOfParameters" -> Association["Value" -> 3150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> None], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 1000], 
              ValidationSet -> Association["Value" -> Automatic], 
              "EarlyStopping" -> Association["Value" -> False], 
              TrainingProgressReporting -> Association["Value" -> None], 
              "NetTrainOptions" -> Association["Value" -> Automatic], 
              "LossFunction" -> Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.5352864318396858, 0.09083309975473798], "Accuracy" -> 
               Around[0.9120272631172549, 0.011779968342329809`], 
               "EvaluationTime" -> 0.000027958585430474564`, "TestSize" -> 
               1194, "ModelMemory" -> 62352, "ModelUtility" -> 
               0.48996069690463395`, "TrainingSize" -> 10, "TrainingTime" -> 
               1., "TrainingMemory" -> 222688, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.5352864318396858, 0.06422870079276935]}, 
               "AccuracyHistory" -> {
                 Around[0.9120272631172549, 0.00832969549702426]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.6605478739253331, 0.08705725507713104], "Accuracy" -> 
               Around[0.8698556793836825, 0.014142961346108159`], 
               "EvaluationTime" -> 0.00003431904531202071, "TestSize" -> 1164,
                "ModelMemory" -> 62352, "ModelUtility" -> 0.0841399595643243, 
               "TrainingSize" -> 40, "TrainingTime" -> 1., "TrainingMemory" -> 
               228384, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.6605478739253331, 0.061558775416526344`]}, 
               "AccuracyHistory" -> {
                 Around[0.8698556793836825, 0.010000583873892301`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00003431904531202071, "MeanCrossEntropy" -> 
              Around[0.6605478739253331, 0.08705725507713104], "ModelMemory" -> 
              62352, "TrainingMemory" -> 228384, "TrainingTime" -> 
              13.040000000000001`], "Index" -> 3], 
          Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 4], 
              "NumberOfParameters" -> Association["Value" -> 8150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> None], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 10], ValidationSet -> 
              Association["Value" -> Automatic], "EarlyStopping" -> 
              Association["Value" -> False], TrainingProgressReporting -> 
              Association["Value" -> None], "NetTrainOptions" -> 
              Association["Value" -> Automatic], "LossFunction" -> 
              Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.4589506901166671, 0.027291747763020638`], "Accuracy" -> 
               Around[0.8037157065520296, 0.016430390167311897`], 
               "EvaluationTime" -> 0.00003695986088766776, "TestSize" -> 1194,
                "ModelMemory" -> 95328, "ModelUtility" -> 0.8407754361567714, 
               "TrainingSize" -> 10, "TrainingTime" -> 0.12589254117941673`, 
               "TrainingMemory" -> 303288, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.4589506901166671, 0.01929817991366468]}, 
               "AccuracyHistory" -> {
                 Around[0.8037157065520296, 0.011618040304847014`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.3745076658373685, 0.015358671947670086`], "Accuracy" -> 
               Around[0.8638401012354882, 0.014453357895895835`], 
               "EvaluationTime" -> 0.00003847118997296744, "TestSize" -> 1164,
                "ModelMemory" -> 95328, "ModelUtility" -> 1.2547451078461933`,
                "TrainingSize" -> 40, "TrainingTime" -> 0.12589254117941673`, 
               "TrainingMemory" -> 308840, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.3745076658373685, 0.010860221084217116`]}, 
               "AccuracyHistory" -> {
                 Around[0.8638401012354882, 0.010220067379104074`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.23383662411950284`, 0.023409316949674408`], 
               "Accuracy" -> 
               Around[0.9269670010104156, 0.012169035270696411`], 
               "EvaluationTime" -> 0.000050074320013998985`, "TestSize" -> 
               1004, "ModelMemory" -> 95328, "ModelUtility" -> 
               2.1734132066676852`, "TrainingSize" -> 200, "TrainingTime" -> 
               0.15848931924611134`, "TrainingMemory" -> 344976, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.23383662411950284`, 0.016552886758059958`]}, 
               "AccuracyHistory" -> {
                 Around[0.9269670010104156, 0.008604807360407706]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.1444922949998901, 0.04207583760290429], "Accuracy" -> 
               Around[0.9618727620165243, 0.01890249635531241], 
               "EvaluationTime" -> 0.00010897177010162124`, "TestSize" -> 241,
                "ModelMemory" -> 95328, "ModelUtility" -> 3.0626409573696893`,
                "TrainingSize" -> 963, "TrainingTime" -> 0.31622776601683794`,
                "TrainingMemory" -> 524576, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.1444922949998901, 0.029752110093117547`]}, 
               "AccuracyHistory" -> {
                 Around[0.9618727620165243, 0.013366083354195403`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00010897177010162124`, "MeanCrossEntropy" -> 
              Around[0.1444922949998901, 0.04207583760290429], "ModelMemory" -> 
              95328, "TrainingMemory" -> 524576, "TrainingTime" -> 
              0.5212593431360864], "Index" -> 4], 
          Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 4], 
              "NumberOfParameters" -> Association["Value" -> 8150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> 0.01], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 30], ValidationSet -> 
              Association["Value" -> Automatic], "EarlyStopping" -> 
              Association["Value" -> False], TrainingProgressReporting -> 
              Association["Value" -> None], "NetTrainOptions" -> 
              Association["Value" -> Automatic], "LossFunction" -> 
              Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.24336419981388743`, 0.03023826022996178], "Accuracy" -> 
               Around[0.9086678584932287, 0.012209899387134179`], 
               "EvaluationTime" -> 0.00003695986088766776, "TestSize" -> 1194,
                "ModelMemory" -> 104056, "ModelUtility" -> 
               2.0840937265945314`, "TrainingSize" -> 10, "TrainingTime" -> 
               0.15848931924611134`, "TrainingMemory" -> 335744, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.24336419981388743`, 0.021381678859889466`]}, 
               "AccuracyHistory" -> {
                 Around[0.9086678584932287, 0.008633702654248048]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.2686107237776057, 0.028158834711217905`], "Accuracy" -> 
               Around[0.8912764410606714, 0.014318008633564215`], 
               "EvaluationTime" -> 0.00003845590980819735, "TestSize" -> 1000,
                "ModelMemory" -> 104056, "ModelUtility" -> 
               1.8942793970516645`, "TrainingSize" -> 40, "TrainingTime" -> 
               0.15848931924611134`, "TrainingMemory" -> 341504, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.2686107237776057, 0.019911302974613316`]}, 
               "AccuracyHistory" -> {
                 Around[0.8912764410606714, 0.010124360997880789`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.21735145945338524`, 0.02705865526629138], "Accuracy" -> 
               Around[0.9362658966016556, 0.011530679564473682`], 
               "EvaluationTime" -> 0.00004080457792799495, "TestSize" -> 1004,
                "ModelMemory" -> 104056, "ModelUtility" -> 2.310086267489546, 
               "TrainingSize" -> 200, "TrainingTime" -> 0.31622776601683794`, 
               "TrainingMemory" -> 377512, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.21735145945338524`, 0.01913335862858372]}, 
               "AccuracyHistory" -> {
                 Around[0.9362658966016556, 0.008153421711728486]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.13924405733018155`, 0.04988749347692917], "Accuracy" -> 
               Around[0.9618727620165243, 0.01890249635531241], 
               "EvaluationTime" -> 0.0001035871181990104, "TestSize" -> 241, 
               "ModelMemory" -> 104056, "ModelUtility" -> 3.111440457749185, 
               "TrainingSize" -> 963, "TrainingTime" -> 1., "TrainingMemory" -> 
               629128, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.13924405733018155`, 0.035275784933936266`]}, 
               "AccuracyHistory" -> {
                 Around[0.9618727620165243, 0.013366083354195403`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.0001035871181990104, "MeanCrossEntropy" -> 
              Around[0.13924405733018155`, 0.04988749347692917], 
              "ModelMemory" -> 104056, "TrainingMemory" -> 629128, 
              "TrainingTime" -> 1.4087489246459037`], "Index" -> 5], 
          Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 8], 
              "NumberOfParameters" -> Association["Value" -> 18150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> 0.01], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 10], ValidationSet -> 
              Association["Value" -> Automatic], "EarlyStopping" -> 
              Association["Value" -> False], TrainingProgressReporting -> 
              Association["Value" -> None], "NetTrainOptions" -> 
              Association["Value" -> Automatic], "LossFunction" -> 
              Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.3675290740997242, 0.02124318109424432], "Accuracy" -> 
               Around[0.8017791475905568, 0.016501706050455003`], 
               "EvaluationTime" -> 0.000046498813059500966`, "TestSize" -> 
               1194, "ModelMemory" -> 196400, "ModelUtility" -> 
               1.2856910782380848`, "TrainingSize" -> 10, "TrainingTime" -> 
               0.19952623149688792`, "TrainingMemory" -> 554664, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.3675290740997242, 0.015021197405714021`]}, 
               "AccuracyHistory" -> {
                 Around[0.8017791475905568, 0.011668468249423811`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.24067699783131705`, 0.01962054505473038], "Accuracy" -> 
               Around[0.8999695925593484, 0.012870406410342617`], 
               "EvaluationTime" -> 0.000048255991427579856`, "TestSize" -> 
               1164, "ModelMemory" -> 196400, "ModelUtility" -> 
               2.123025825292703, "TrainingSize" -> 40, "TrainingTime" -> 
               0.19952623149688792`, "TrainingMemory" -> 560216, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.24067699783131705`, 0.013873820458776031`]}, 
               "AccuracyHistory" -> {
                 Around[0.8999695925593484, 0.009100751649380075]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.19380464144445964`, 0.03827247786963545], "Accuracy" -> 
               Around[0.952330341212412, 0.010270588208262524`], 
               "EvaluationTime" -> 0.00005586777857382548, "TestSize" -> 1004,
                "ModelMemory" -> 196400, "ModelUtility" -> 2.511110180653808, 
               "TrainingSize" -> 200, "TrainingTime" -> 0.31622776601683794`, 
               "TrainingMemory" -> 596224, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.19380464144445964`, 0.027062728634431297`]}, 
               "AccuracyHistory" -> {
                 Around[0.952330341212412, 0.007262402568837023]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.1262442450282116, 0.04836819419323194], "Accuracy" -> 
               Around[0.9675011347985654, 0.01818462024220615], 
               "EvaluationTime" -> 0.0002376019615287575, "TestSize" -> 241, 
               "ModelMemory" -> 196400, "ModelUtility" -> 3.298181316091816, 
               "TrainingSize" -> 963, "TrainingTime" -> 0.6309573444801932, 
               "TrainingMemory" -> 785968, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.1262442450282116, 0.034201478107782096`]}, 
               "AccuracyHistory" -> {
                 Around[0.9675011347985654, 0.012858468286566126`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.0002376019615287575, "MeanCrossEntropy" -> 
              Around[0.1262442450282116, 0.04836819419323194], "ModelMemory" -> 
              196400, "TrainingMemory" -> 785968, "TrainingTime" -> 
              0.9883867120307952], "Index" -> 6], 
          Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 8], 
              "NumberOfParameters" -> Association["Value" -> 18150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> None], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 1000], 
              ValidationSet -> Association["Value" -> Automatic], 
              "EarlyStopping" -> Association["Value" -> False], 
              TrainingProgressReporting -> Association["Value" -> None], 
              "NetTrainOptions" -> Association["Value" -> Automatic], 
              "LossFunction" -> Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.3545302870606928, 0.05645850652876433], "Accuracy" -> 
               Around[0.9114710638574073, 0.012079315322534366`], 
               "EvaluationTime" -> 0.000051719860345939955`, "TestSize" -> 
               1194, "ModelMemory" -> 170896, "ModelUtility" -> 
               1.3179955676474637`, "TrainingSize" -> 10, "TrainingTime" -> 
               1.5848931924611136`, "TrainingMemory" -> 471608, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.3545302870606928, 0.03992219282215422]}, 
               "AccuracyHistory" -> {
                 Around[0.9114710638574073, 0.008541365776654618]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.5279179517615998, 0.07943182515558952], "Accuracy" -> 
               Around[0.8953933277401639, 0.013094786513483827`], 
               "EvaluationTime" -> 0.000051049768182987075`, "TestSize" -> 
               1164, "ModelMemory" -> 170896, "ModelUtility" -> 
               0.5251103165881499, "TrainingSize" -> 40, "TrainingTime" -> 
               1.5848931924611136`, "TrainingMemory" -> 477224, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.5279179517615998, 0.056166782209541535`]}, 
               "AccuracyHistory" -> {
                 Around[0.8953933277401639, 0.009259412341874561]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.19359576138072215`, 0.023791737869754144`], 
               "Accuracy" -> 
               Around[0.9403881617145154, 0.010853288545754167`], 
               "EvaluationTime" -> 0.00005770154387100172, "TestSize" -> 1004,
                "ModelMemory" -> 170896, "ModelUtility" -> 2.542181525821517, 
               "TrainingSize" -> 200, "TrainingTime" -> 7.943282347242816, 
               "TrainingMemory" -> 672008, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.19359576138072215`, 0.016823299183915938`]}, 
               "AccuracyHistory" -> {
                 Around[0.9403881617145154, 0.007674433928877054]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00005770154387100172, "MeanCrossEntropy" -> 
              Around[0.19359576138072215`, 0.023791737869754144`], 
              "ModelMemory" -> 170896, "TrainingMemory" -> 672008, 
              "TrainingTime" -> 49.403452922862876`], "Index" -> 7], 
          Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 2], 
              "NumberOfParameters" -> Association["Value" -> 3150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> None], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
              Association["Value" -> Automatic], "EarlyStopping" -> 
              Association["Value" -> False], TrainingProgressReporting -> 
              Association["Value" -> None], "NetTrainOptions" -> 
              Association["Value" -> Automatic], "LossFunction" -> 
              Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.39673309255873684`, 0.04220856448355949], "Accuracy" -> 
               Around[0.8646104113498946, 0.014384937660756672`], 
               "EvaluationTime" -> 0.00003151863482519127, "TestSize" -> 1164,
                "ModelMemory" -> 62352, "ModelUtility" -> 1.113677364431521, 
               "TrainingSize" -> 40, "TrainingTime" -> 0.15848931924611134`, 
               "TrainingMemory" -> 228240, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.39673309255873684`, 0.02984596217047458]}, 
               "AccuracyHistory" -> {
                 Around[0.8646104113498946, 0.010171686966866794`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.2142743802249852, 0.02633056431212375], "Accuracy" -> 
               Around[0.9341994355144627, 0.011425329815783484`], 
               "EvaluationTime" -> 0.00003094525013969571, "TestSize" -> 1004,
                "ModelMemory" -> 62352, "ModelUtility" -> 2.3392411612756634`,
                "TrainingSize" -> 200, "TrainingTime" -> 0.3981071705534972, 
               "TrainingMemory" -> 367824, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.2142743802249852, 0.018618520577571206`]}, 
               "AccuracyHistory" -> {
                 Around[0.9341994355144627, 0.00807892819003335]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.16053683529895368`, 0.053288780553961725`], 
               "Accuracy" -> Around[0.9618727620165243, 0.01890249635531241], 
               "EvaluationTime" -> 0.00008228217273919545, "TestSize" -> 241, 
               "ModelMemory" -> 62352, "ModelUtility" -> 2.8367127565056207`, 
               "TrainingSize" -> 963, "TrainingTime" -> 1.5848931924611136`, 
               "TrainingMemory" -> 410592, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.16053683529895368`, 0.03768085809086816]}, 
               "AccuracyHistory" -> {
                 Around[0.9618727620165243, 0.013366083354195403`]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.00008228217273919545, "MeanCrossEntropy" -> 
              Around[0.16053683529895368`, 0.053288780553961725`], 
              "ModelMemory" -> 62352, "TrainingMemory" -> 410592, 
              "TrainingTime" -> 2.14001725665336], "Index" -> 8], 
          Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 2], 
              "NumberOfParameters" -> Association["Value" -> 3150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> None], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 10], ValidationSet -> 
              Association["Value" -> Automatic], "EarlyStopping" -> 
              Association["Value" -> False], TrainingProgressReporting -> 
              Association["Value" -> None], "NetTrainOptions" -> 
              Association["Value" -> Automatic], "LossFunction" -> 
              Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.6704046259462205, 0.027535828579700567`], "Accuracy" -> 
               Around[0.6864079144599124, 0.019300442039214532`], 
               "EvaluationTime" -> 0.00003081520351473887, "TestSize" -> 1164,
                "ModelMemory" -> 62352, "ModelUtility" -> 0.09018938627999751,
                "TrainingSize" -> 40, "TrainingTime" -> 0.07943282347242814, 
               "TrainingMemory" -> 228304, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.6704046259462205, 0.019470771114296608`]}, 
               "AccuracyHistory" -> {
                 Around[0.6864079144599124, 0.013647473445826511`]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.3462836255886271, 0.01513315466666841], "Accuracy" -> 
               Around[0.8999326783861983, 0.013662577314143423`], 
               "EvaluationTime" -> 0.000045826476049472674`, "TestSize" -> 
               1004, "ModelMemory" -> 62352, "ModelUtility" -> 
               1.41039350600031, "TrainingSize" -> 200, "TrainingTime" -> 
               0.12589254117941673`, "TrainingMemory" -> 270976, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.3462836255886271, 0.01070075628554608]}, 
               "AccuracyHistory" -> {
                 Around[0.8999326783861983, 0.009660901067316301]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.000045826476049472674`, "MeanCrossEntropy" -> 
              Around[0.3462836255886271, 0.01513315466666841], "ModelMemory" -> 
              62352, "TrainingMemory" -> 270976, "TrainingTime" -> 
              0.8373059213725169], "Index" -> 9], 
          Association[
           "Value" -> "NeuralNetwork", "Options" -> 
            Association[
             "NetworkType" -> Association["Value" -> "FullyConnected"], 
              "NetworkDepth" -> Association["Value" -> 4], 
              "NumberOfParameters" -> Association["Value" -> 8150], 
              "ActivationFunction" -> Association["Value" -> "SELU"], 
              "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
              Association["Value" -> None], "NetInitializationMethod" -> 
              Association["Value" -> Automatic], "OptimizationMethod" -> 
              Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
              MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
              Association["Value" -> Automatic], "EarlyStopping" -> 
              Association["Value" -> False], TrainingProgressReporting -> 
              Association["Value" -> None], "NetTrainOptions" -> 
              Association["Value" -> Automatic], "LossFunction" -> 
              Association["Value" -> Automatic]]] -> 
          Association["Experiments" -> {
              Association[
              "MeanCrossEntropy" -> 
               Around[0.3479904820653324, 0.04649308166291719], "Accuracy" -> 
               Around[0.8967133610757196, 0.013036044634608371`], 
               "EvaluationTime" -> 0.00004649584961623782, "TestSize" -> 1164,
                "ModelMemory" -> 95328, "ModelUtility" -> 1.3652163494144007`,
                "TrainingSize" -> 40, "TrainingTime" -> 0.31622776601683794`, 
               "TrainingMemory" -> 308904, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.3479904820653324, 0.03287557332210867]}, 
               "AccuracyHistory" -> {
                 Around[0.8967133610757196, 0.009217875560982088]}], 
              Association[
              "MeanCrossEntropy" -> 
               Around[0.2590086922700906, 0.038725523217087165`], "Accuracy" -> 
               Around[0.9315233686955358, 0.011856788268770742`], 
               "EvaluationTime" -> 0.000051537651960239414`, "TestSize" -> 
               1004, "ModelMemory" -> 95328, "ModelUtility" -> 
               1.9496546032622497`, "TrainingSize" -> 200, "TrainingTime" -> 
               0.6309573444801932, "TrainingMemory" -> 466168, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.2590086922700906, 0.027383080071799418`]}, 
               "AccuracyHistory" -> {
                 Around[0.9315233686955358, 0.008384015387940896]}]}, 
            "PredictedPerformances" -> 
            Association[
             "EvaluationTime" -> 0.000051537651960239414`, "MeanCrossEntropy" -> 
              Around[0.2590086922700906, 0.038725523217087165`], 
              "ModelMemory" -> 95328, "TrainingMemory" -> 466168, 
              "TrainingTime" -> 4.114590979787601], "Index" -> 10]], 
         TypeSystem`Assoc[
          TypeSystem`Struct[{"Value", "Options"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["NeuralNetwork"]], 
            TypeSystem`Assoc[TypeSystem`AnyType, 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
          
          TypeSystem`Struct[{
           "Experiments", "PredictedPerformances", "Index"}, {
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
               "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory",
                "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, 1], 
               TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
             TypeSystem`AnyLength], 
            
            TypeSystem`Struct[{
             "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
              "TrainingMemory", "TrainingTime"}, {
              TypeSystem`Atom[Real], TypeSystem`AnyType, 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real]}], 
            TypeSystem`Atom[Integer]}], 10], 
         Association["ID" -> 16501438221409]], "MaxTrainingSize" -> 1204, 
       "PreprocessorEvaluationTime" -> 4.6752423564858`3.*^-6, 
       "PreprocessorMemory" -> 147208, "InputDimension" -> 11, 
       "OutputDimension" -> 1, 
       "BaselineLogProbability" -> -0.1673111827253364, "VariableBudget" -> 
       True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
       "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
       "LastReportingTime" -> 3.7713933763564681`17.32907682314892*^9, 
       "RoundPartitioning" -> Dataset[{
          Association[
          "TrainingSizes" -> 10, "TimeBudgets" -> 3.1405597883393983`, 
           "ElapsedTimes" -> 4.5683169, "ExperimentCounts" -> 7], 
          Association[
          "TrainingSizes" -> 40, "TimeBudgets" -> 4.486513983341997, 
           "ElapsedTimes" -> 5.3003707, "ExperimentCounts" -> 10], 
          Association[
          "TrainingSizes" -> 200, "TimeBudgets" -> 6.409305690488567, 
           "ElapsedTimes" -> 12.697123699999999`, "ExperimentCounts" -> 9], 
          Association[
          "TrainingSizes" -> 963, "TimeBudgets" -> 9.156150986412245, 
           "ElapsedTimes" -> 10.4300514, "ExperimentCounts" -> 6]}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
            "ExperimentCounts"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 4], 
         Association[
         "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
            Dataset`DatasetHandle[16510028156001]], "ID" -> 16514323123297]]],
      "Log" -> Association["Example" -> MachineLearning`MLDataset[
         Association[
         "f1" -> Association[
           "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"0 + 98 \n"}, 
            "ID" -> 7700397199614135015]], 
         Association[
         "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0,
           "RawExample" -> False]], "TrainingTime" -> 35.16241590889479, 
       "MaxTrainingMemory" -> 23828048, "DataMemory" -> 61392, 
       "FunctionMemory" -> 586584, "LanguageVersion" -> {12., 0}, "Date" -> 
       DateObject[{2019, 7, 6, 9, 16, 17.3485381`8.991837826999385}, 
         "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
       "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
       "Evaluations" -> {}]]],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",
 CellChangeTimes->{3.771407783227825*^9},
 CellLabel->
  "Out[131]=",ExpressionUUID->"77531a54-6546-4191-bd16-6f9fe76c5d3b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Need", " ", "to", " ", "create", " ", "the", " ", "Gui", " ", "using", " ",
    "Dynmaic", " ", "Module"}], "*)"}]], "Input",
 CellChangeTimes->{{3.7713536464785004`*^9, 3.771353664571615*^9}},
 CellLabel->
  "In[132]:=",ExpressionUUID->"504bd9cc-d90b-476c-be9f-d82b78e41ae7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DumpSave", "[", 
  RowBox[{"\"\<final_progect.mx\>\"", ",", " ", "arrays"}], "]"}]], "Input",
 CellChangeTimes->{{3.7713616243121543`*^9, 3.7713616393978906`*^9}, {
  3.7713616722922544`*^9, 3.7713616744753747`*^9}},
 CellLabel->
  "In[133]:=",ExpressionUUID->"a0308418-3e41-4b79-b3be-d01011649c9a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"-", 
      FractionBox["2000", "3"]}], "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "\<\"integral of x^3 dx\"\>", "}"}], ",", 
    RowBox[{"{", "\<\"integral of tan(x) dx from 0 to \[Pi]/4\"\>", "}"}], 
    ",", 
    RowBox[{"{", "\<\"Derivative of 1+sec(x)\"\>", "}"}], ",", 
    RowBox[{"{", "\<\"integral of cos(x) dx\"\>", "}"}], ",", 
    RowBox[{"{", "\<\"Integral of ln(x) from 1 to e\"\>", "}"}], ",", 
    RowBox[{
    "{", "\<\"Derivative of \\!\\(\\*SuperscriptBox[\\(e\\), \\(3 \
\\*SuperscriptBox[\\(x\\), \\(2\\)]\\)]\\)\"\>", "}"}], ",", 
    RowBox[{"{", "\<\"Integral of ln(1-x)/x dx\"\>", "}"}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7714077833078327`*^9},
 CellLabel->
  "Out[133]=",ExpressionUUID->"eadd6488-4368-407b-adeb-a8b45b0bccd4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra2Qs", "\[LeftDoubleBracket]", 
   RowBox[{"120", ";;", "130"}], "\[RightDoubleBracket]"}], "//", 
  "InputForm"}]], "Input",
 CellChangeTimes->{{3.77140794464546*^9, 3.7714079578276772`*^9}, {
  3.7714091443685756`*^9, 3.771409220976266*^9}, {3.771409791809289*^9, 
  3.771409793773464*^9}},
 CellLabel->
  "In[206]:=",ExpressionUUID->"c152a1f2-bf7c-435c-8fac-a14c7491d047"],

Cell["\<\
{\" \\r\", \" \\r\", \" \\r\", \" \\r\", \" \\r\", \" \\r\", \" \\r\", \" \\r\
\", \" \\r\", 
 \"    - 5 + 5x = 3x -    /   \\r\", \"77\"}\
\>", "Output",
 CellChangeTimes->{
  3.7714079583436947`*^9, 3.7714091230470867`*^9, {3.7714091700045404`*^9, 
   3.771409221820342*^9}, 3.7714097943854933`*^9, 3.7714099026922617`*^9},
 CellLabel->
  "Out[206]//InputForm=",ExpressionUUID->"cf357641-0adb-4f7d-b564-\
983b4ecb0a61"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra2Qs", "=", 
   RowBox[{"algebra2Qs", "/.", 
    RowBox[{
     RowBox[{"WhitespaceCharacter", ".."}], "\[Rule]", "Nothing"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.77140981597823*^9, 3.771409876978485*^9}},
 CellLabel->
  "In[204]:=",ExpressionUUID->"1efddd34-8aca-4eb7-83c5-9214d7e9b2d9"],

Cell[BoxData[
 RowBox[{"Dimensions", "[", "algebra2Qs", "]"}]], "Input",
 CellChangeTimes->{{3.771409858725211*^9, 3.771409886163163*^9}},
 CellLabel->
  "In[205]:=",ExpressionUUID->"1116899d-8fc6-4a3e-ab24-2005f84130e2"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"callAPI", "[", "\[IndentingNewLine]", "\t", 
    RowBox[{
    "problemType_String", ",", " ", "\[IndentingNewLine]", "\t", 
     "howmany_Integer", ",", " ", "\[IndentingNewLine]", "\t", 
     RowBox[{"difficulty_", " ", ":", " ", 
      RowBox[{"(", 
       RowBox[{
       "\"\<Beginner\>\"", " ", "|", " ", "\"\<Intermediate\>\"", " ", "|", 
        " ", "\"\<Advanced\>\""}], ")"}]}], ",", "\[IndentingNewLine]", "\t", 
     RowBox[{"showAnswers_", " ", ":", " ", 
      RowBox[{"(", 
       RowBox[{"True", " ", "|", " ", "False"}], ")"}]}]}], " ", "]"}], " ", ":=",
    " ", "\[IndentingNewLine]", 
   RowBox[{"URLExecute", "[", "\[IndentingNewLine]", 
    RowBox[{
    "\"\<https://www.wolframcloud.com/objects/erinc/WPGform\>\"", ",", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"\"\<ProblemType\>\"", " ", "\[Rule]", " ", "problemType"}], 
       ",", " ", "\[IndentingNewLine]", "\t", 
       RowBox[{"\"\<HowMany\>\"", " ", "\[Rule]", " ", "howmany"}], ",", 
       "\[IndentingNewLine]", "\t", 
       RowBox[{"\"\<Difficulty\>\"", " ", "\[Rule]", "  ", "difficulty"}], 
       ",", " ", "\[IndentingNewLine]", "\t", 
       RowBox[{"\"\<SimpleOrFull\>\"", " ", "\[Rule]", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"TrueQ", "[", "showAnswers", "]"}], ",", " ", 
          "\"\<Full\>\"", ",", " ", "\"\<Simple\>\""}], "]"}]}], ",", " ", 
       "\[IndentingNewLine]", "\t", 
       RowBox[{"\"\<_key\>\"", " ", "\[Rule]", " ", "\"\<WSC2019\>\""}]}], 
      " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"necessary", " ", "permission", " ", "key"}], " ", "-", " ", 
        RowBox[{"DO", " ", "NOT", " ", "SHARE"}]}], " ", "*)"}], " ", 
      "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}]}]], \
"Input",
 CellChangeTimes->{{3.7714107918700476`*^9, 3.7714108092832623`*^9}, 
   3.7714109118466578`*^9, {3.771411027682988*^9, 3.7714110381397114`*^9}},
 CellLabel->
  "In[289]:=",ExpressionUUID->"7c7431ae-110e-42b8-bb56-b54ba12e1049"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"questionClassifier", "[", 
  RowBox[{"callAPI", "[", 
   RowBox[{
   "\"\<IntegerAddition\>\"", ",", " ", "1", ",", " ", "\"\<Advanced\>\"", 
    ",", " ", "False"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7714110458842516`*^9, 3.77141110989114*^9}, {
  3.771428209703794*^9, 3.7714282311370287`*^9}, {3.771429002195444*^9, 
  3.7714290156219864`*^9}},
 CellLabel->
  "In[704]:=",ExpressionUUID->"1f66a9a9-94bf-4e4c-9195-abd0380ffb92"],

Cell[BoxData[
 RowBox[{"{", "\<\"calc\"\>", "}"}]], "Output",
 CellChangeTimes->{3.771429016971946*^9},
 CellLabel->
  "Out[704]=",ExpressionUUID->"c1998aa1-1e22-4057-8106-03acd484f259"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"calcQs", "=", 
   RowBox[{"Flatten", "[", "calcQs", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7714256793003793`*^9, 3.7714256913789573`*^9}},
 CellLabel->
  "In[732]:=",ExpressionUUID->"7ff06b76-9954-4495-99fa-fb2cb993737c"],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7714110410599174`*^9, 3.771411041063916*^9}, {
   3.7714249605062957`*^9, 3.7714249914366302`*^9}, {3.771425024068718*^9, 
   3.7714252819487343`*^9}, 
   3.771425322528574*^9},ExpressionUUID->"17a92354-4aef-4606-8032-\
e8e9e6238fd8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Evaluate f(x)=3-5x-2\\!\\(\\*SuperscriptBox[\\(x\\), \
\\(2\\)]\\) for the below values: f(0), f(x+h), f(6-t)\"\>", 
   ",", "\<\"Compute  the difrence quotient for the given function\"\>", 
   ",", "\<\"Find the domain of (\\!\\(\\*SuperscriptBox[\\(w\\), \
\\(3\\)]\\)-3w+1)/(12 w-7)\"\>", 
   ",", "\<\"Find the inverse of f (x) = 6x +15\"\>", 
   ",", "\<\"Find inverse of W (x) =  (9 \
\[Minus]11x\\!\\(\\*SuperscriptBox[\\()\\), \\(1/5\\)]\\)\"\>", 
   ",", "\<\"Find the exact value of cos(5 \[Pi]/6) without using a \
calculator\"\>", 
   ",", "\<\"Find the exact value of sin(-4 \[Pi]/3) without using a \
calculator\"\>", ",", "\<\"Solve  4sin (3t ) = 2\"\>", 
   ",", "\<\"Solve 4sin (3t ) = 2 in [0, 4\[Pi]/3], 2cos(x/3) \
+\\!\\(\\*SuperscriptBox[\\(2\\), \\(0.5\\)]\\) = 0 in [\[Minus]7\[Pi] \
,7\[Pi] }\"\>", ",", "\<\"Solve 4y sec(7 y) = \[Minus]21y\"\>", 
   ",", "\<\"Solve 3\[Minus]14sin (12t + 7) =13\"\>", 
   ",", "\<\"Solve 3sec(4 \[Minus] 9z) \[Minus] 24 = 0\"\>", 
   ",", "\<\"Sketch the graph of f(x)=\\!\\(\\*SuperscriptBox[\\(3\\), \\(1 + \
2  x\\)]\\)\"\>", 
   ",", "\<\"Sketch the graph of h(x)=8+3\\!\\(\\*SuperscriptBox[\\(e\\), \
\\(2  t - 4\\)]\\)\"\>", 
   ",", "\<\"Determine ln(\\!\\(\\*SuperscriptBox[\\(e\\), \\(4\\)]\\))\"\>", 
   ",", "\<\"Combine 2 \\!\\(\\*SubscriptBox[\\(log\\), \\(4\\)]\\)x +5 \
\\!\\(\\*SubscriptBox[\\(log\\), \\(4\\)]\\)y - 1/2 \
\\!\\(\\*SubscriptBox[\\(log\\), \\(4\\)]\\)x\"\>", 
   ",", "\<\"For the function W(x)=ln(1+\\!\\(\\*SuperscriptBox[\\(x\\), \\(4\
\\)]\\)) and the point x=1, find the secants at point Q and the tangenet line\
\"\>", ",", "\<\"For the function f(x)=(8-\\!\\(\\*SuperscriptBox[\\(x\\), \
\\(2\\)]\\))/(\\!\\(\\*SuperscriptBox[\\(x\\), \\(2\\)]\\)-4), find the \
values at the below listed points and th limit as x aproaches 2\"\>", ",", 
   "Null", ",", "\<\"For the function f(y)= sin(y)/y find the value at the \
below listed points and the limit as y approaches 0\"\>", 
   ",", "\<\"Find \[Integral]6\\!\\(\\*SuperscriptBox[\\(x\\), \\(5\\)]\\) \
\[Minus]18\\!\\(\\*SuperscriptBox[\\(x\\), \\(2\\)]\\) + 7 dx\"\>", 
   ",", "\<\"Find \[Integral]6\\!\\(\\*SuperscriptBox[\\(x\\), \\(5\\)]\\) dx \
\[Minus]18x + 7\"\>", 
   ",", "\<\"Evaluate \[Integral]z^6 + 4z^4 \[Minus] z^2 dz\"\>", 
   ",", "\<\"Determine f (x) given that f'(x) = 6x^8 \[Minus] 20x^4 + x^2 + 9\
\"\>", ",", "\<\"Find \[Integral] 2cos (w) \[Minus] sec(w) tan (w)dw\"\>", 
   ",", "\<\"Find \[Integral]12 + csc(\[Theta] ) [sin (\[Theta] ) + csc(\
\[Theta] )] d\[Theta]\"\>", 
   ",", "\<\"What is \[Integral]6\\!\\(\\*SuperscriptBox[\\(x\\), \\(5\\)]\\) \
\[Minus]18\\!\\(\\*SuperscriptBox[\\(x\\), \\(2\\)]\\) + 7 dx\"\>", 
   ",", "\<\"Find \[Integral]6\\!\\(\\*SuperscriptBox[\\(x\\), \\(5\\)]\\) dx \
\[Minus]18x + 7\"\>", ",", "\<\"What is the integral of sin(2x)?\"\>", 
   ",", "\<\"Find the area under the curve of |x| from -1 to 1\"\>", 
   ",", "\<\"What is the area under the curve \
\\!\\(\\*SuperscriptBox[\\(sin\\), \\(2\\)]\\)x from 0 to \[Pi]/2\"\>", 
   ",", "\<\"Find the integral\"\>", 
   ",", "\<\"What is the integral of x dx\"\>", 
   ",", "\<\"Derivative of f(x)=\\!\\(\\*SuperscriptBox[\\(x\\), \
\\(2\\)]\\)\"\>", ",", "\<\"Integral of x dx\"\>", 
   ",", "\<\"Integral of \\!\\(\\*SuperscriptBox[\\(e\\), \\(y\\)]\\) dy\"\>",
    ",", "\<\"Derivative of \\!\\(\\*SuperscriptBox[\\(x\\), \\(3\\)]\\)\"\>",
    ",", "\<\"Derivative of x\"\>", 
   ",", "\<\"Derivative of f(x)=20 ln(x)\"\>", 
   ",", "\<\"Derivative of x/(x+1\\!\\(\\*SuperscriptBox[\\()\\), \\(2\\)]\\)\
\"\>", ",", "\<\"Derivative of \\!\\(\\*SuperscriptBox[\\(x\\), \\(n\\)]\\)\"\
\>", ",", "\<\"Derivative with respect to x\"\>", 
   ",", "\<\"Derivative of \\!\\(\\*SuperscriptBox[\\(x\\), \\(3\\)]\\)\"\>", 
   ",", "\<\"For the function f(x)=(8-\\!\\(\\*SuperscriptBox[\\(x\\), \
\\(2\\)]\\))/(\\!\\(\\*SuperscriptBox[\\(x\\), \\(2\\)]\\)-4), use \
L'Hoptial's rule to find the limit as x aproaches 2\"\>", 
   ",", "\<\"For the function (2-(\\!\\(\\*SuperscriptBox[\\(t\\), \
\\(2\\)]\\)+3\\!\\(\\*SuperscriptBox[\\()\\), \\(1/2\\)]\\))/(t+1), \
L'Hoptial's rule to find the limit as x approaches -1\"\>", 
   ",", "\<\"Use the definition of the derivative to find the derivative of \
f(x)=6\"\>", 
   ",", "\<\"Use the definition of the derivative to find the derivative of V \
(t ) = 3\[Minus]14t\"\>", 
   ",", "\<\"Use the definition of the derivative to find the derivative of \
z(n)= (n+1)/(n+4)\"\>", 
   ",", "\<\"Use the chain rule to find the derivative of \
Q(t)=(3\\!\\(\\*SuperscriptBox[\\(t\\), \\(3\\)]\\)-4\\!\\(\\*SuperscriptBox[\
\\()\\), \\(1/2\\)]\\)\"\>", 
   ",", "\<\"Use the quotient rule to find the derivative of z(n)= (z+1\\!\\(\
\\*SuperscriptBox[\\()\\), \\(1/2\\)]\\)/(z+4)\"\>", 
   ",", "\<\"Find the deriviative of f (x) = 2cos(x) \[Minus] 6sec(x) + \
3\"\>", ",", "\<\"Find the deriviative of g (z) =10 tan (z) \[Minus] 2cot (z)\
\"\>", ",", "\<\"Find the deriviative of  tan (w)sec(w)\"\>", 
   ",", "\<\"Find the deriviative of R(t)=(t+ tan(t))/(1+csc(t))\"\>", 
   ",", "\<\"Find the derivative of f(x)=2\\!\\(\\*SuperscriptBox[\\(e\\), \
\\(x\\)]\\)-\\!\\(\\*SuperscriptBox[\\(8\\), \\(x\\)]\\)\"\>", 
   ",", "\<\"Find the derivative of g(t)=4 \\!\\(\\*SubscriptBox[\\(log\\), \
\\(3\\)]\\)(t)-ln(t)\"\>", 
   ",", "\<\"Find the derivative of 2 cos(x)+arccos(x)\"\>", 
   ",", "\<\"Find the derivative of \\!\\(\\*SuperscriptBox[\\(x\\), \\(2\\)]\
\\)/\\!\\(\\*SuperscriptBox[\\(y\\), \\(3\\)]\\)=1\"\>", 
   ",", "\<\"Find extrema of f(x)=12+6\\!\\(\\*SuperscriptBox[\\(x\\), \
\\(2\\)]\\)-\\!\\(\\*SuperscriptBox[\\(x\\), \\(3\\)]\\)\"\>", 
   ",", "\<\"Find extrema of g(w)=tan (w)sec(w)\"\>", 
   ",", "\<\"find the taylor expanision of g(w)=tan (w)sec(w) at \
w=\[Pi]/4\"\>", 
   ",", "\<\"Find the MacLauren Expanision of z(n)= \
(z+1\\!\\(\\*SuperscriptBox[\\()\\), \\(1/2\\)]\\)/(z+4)\"\>", 
   ",", "\<\"Find the Derivative\"\>", ",", "\<\"What is the Deriviative\"\>",
    ",", "\<\"Evaluate the derivative\"\>", 
   ",", "\<\"Integral of ln(x) dx\"\>", 
   ",", "\<\"Integral of f(x)=x ln(x) from 0 to 10\"\>", 
   ",", "\<\"Integral of tan(x)\"\>", 
   ",", "\<\"Integral of (1+x\\!\\(\\*SuperscriptBox[\\()\\), \\(1/2\\)]\\)\"\
\>", ",", 
   TemplateBox[{"\"Find the integral of \"",RowBox[{
       TagBox["Plus", HoldForm], "[", 
       RowBox[{
         RowBox[{"-", "3"}], ",", 
         RowBox[{
           TagBox["Times", HoldForm], "[", 
           RowBox[{"5", ",", "t"}], "]"}], ",", 
         RowBox[{
           TagBox["Times", HoldForm], "[", 
           RowBox[{"2", ",", 
             RowBox[{
               TagBox["Power", HoldForm], "[", 
               RowBox[{"t", ",", "5"}], "]"}]}], "]"}]}], "]"}],
     "\" with respect to \"","t","\".\""},
    "RowDefault"], ",", 
   TemplateBox[{"\"Find the integral of \"",RowBox[{
       TagBox["Plus", HoldForm], "[", 
       RowBox[{"1", ",", 
         RowBox[{
           TagBox["Times", HoldForm], "[", 
           RowBox[{"2", ",", "t"}], "]"}], ",", 
         RowBox[{
           TagBox["Times", HoldForm], "[", 
           RowBox[{"2", ",", 
             RowBox[{
               TagBox["Power", HoldForm], "[", 
               RowBox[{"t", ",", "2"}], "]"}]}], "]"}]}], "]"}],
     "\" with respect to \"","t","\".\""},
    "RowDefault"], ",", 
   TemplateBox[{"\"Find the integral of \"",RowBox[{
       TagBox["Plus", HoldForm], "[", 
       RowBox[{
         RowBox[{
           TagBox["Times", HoldForm], "[", 
           RowBox[{"3", ",", "x"}], "]"}], ",", 
         RowBox[{
           TagBox["Times", HoldForm], "[", 
           RowBox[{"2", ",", 
             RowBox[{
               TagBox["Power", HoldForm], "[", 
               RowBox[{"x", ",", "2"}], "]"}]}], "]"}], ",", 
         RowBox[{
           TagBox["Times", HoldForm], "[", 
           RowBox[{
             RowBox[{"-", "1"}], ",", 
             RowBox[{
               TagBox["Power", HoldForm], "[", 
               RowBox[{"x", ",", "6"}], "]"}]}], "]"}]}], "]"}],
     "\" with respect to \"","x","\".\""},
    "RowDefault"], ",", 
   TemplateBox[{"\"What is \"",RowBox[{
       TagBox["Integrate", HoldForm], "[", 
       RowBox[{
         RowBox[{
           TagBox["Plus", HoldForm], "[", 
           RowBox[{"2", ",", 
             RowBox[{
               TagBox["Power", HoldForm], "[", 
               RowBox[{"x", ",", "2"}], "]"}]}], "]"}], ",", "x"}], "]"}],
     "\"?\""},
    "RowDefault"]}], "}"}]], "Output",
 CellChangeTimes->{{3.7714249725558677`*^9, 3.7714249920120554`*^9}, {
   3.7714250406615114`*^9, 3.771425244923436*^9}, 3.7714253124994454`*^9},
 CellLabel->
  "Out[394]=",ExpressionUUID->"ae10aa7e-159a-4b60-9d50-702025ed3325"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"calcQs", "=", 
   RowBox[{"callAPI", "[", 
    RowBox[{
    "\"\<CalculusSummary\>\"", ",", " ", "2000", ",", " ", "\"\<Beginner\>\"",
      ",", " ", "False"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.77141111890777*^9, 3.771411230243497*^9}, {
   3.7714247138132477`*^9, 3.771424746048686*^9}, {3.771424794234933*^9, 
   3.771424912095244*^9}, {3.771424945011282*^9, 3.771424947220871*^9}, 
   3.7714253519553366`*^9, 3.771425392718534*^9, {3.771425425643009*^9, 
   3.7714254685095615`*^9}, {3.771425605179101*^9, 3.7714256138032155`*^9}, {
   3.771425657677994*^9, 3.7714256664812503`*^9}, {3.771426300614221*^9, 
   3.771426323551214*^9}, {3.7714263889356856`*^9, 3.7714264202942295`*^9}, {
   3.7714282462357583`*^9, 3.771428310088002*^9}, {3.7714284031656094`*^9, 
   3.771428403795043*^9}, {3.771428459749776*^9, 3.771428469461689*^9}, {
   3.7714290345064077`*^9, 3.771429096727632*^9}},
 CellLabel->
  "In[731]:=",ExpressionUUID->"9e358958-2066-4c09-b911-0db3a4cff49b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1Questions", "=", 
   RowBox[{"Flatten", "[", "algebra1Questions", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7714112332757053`*^9, 3.771411254477025*^9}, 
   3.7714114513156786`*^9},
 CellLabel->
  "In[604]:=",ExpressionUUID->"0f4d8182-7287-4694-b4bc-38892ec81f4a"]
},
WindowSize->{1536, 781},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 1641, 26, 55, "Input",ExpressionUUID->"2333ef13-77fd-4cdf-b6bd-0173171dc2ca"],
Cell[CellGroupData[{
Cell[2224, 50, 971, 19, 67, "Input",ExpressionUUID->"2d263997-c8cc-4cfe-a7ea-3727e1faf43b"],
Cell[3198, 71, 816, 15, 71, "Output",ExpressionUUID->"5a51fcff-2435-4c7b-956b-4f6b96456cac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4051, 91, 1830, 42, 148, "Input",ExpressionUUID->"6c60326b-e42a-4217-9c4b-5a627cce92a1"],
Cell[5884, 135, 488, 9, 32, "Output",ExpressionUUID->"a73ad4f1-965a-451f-8b72-535a32dddef2"],
Cell[6375, 146, 502, 10, 36, "Output",ExpressionUUID->"a4ec7dd7-fa0a-4ab7-b4e6-0422c865bd43"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6914, 161, 600, 11, 48, "Input",ExpressionUUID->"13a45433-da7c-48b3-b716-61b7e0f7a0b0"],
Cell[7517, 174, 502, 10, 52, "Output",ExpressionUUID->"abe71e69-95f5-41d1-8dff-ca16f0b41750"]
}, Open  ]],
Cell[8034, 187, 562, 12, 32, "Input",ExpressionUUID->"a7ae84c8-e77e-4163-a09b-03f6288de0b4"],
Cell[8599, 201, 508, 11, 32, "Input",ExpressionUUID->"965f7365-78f2-4e84-8c81-fb88f95c8219"],
Cell[9110, 214, 381, 9, 28, "Input",ExpressionUUID->"e9cacc85-48d6-4d31-ab94-5d755d539cc0"],
Cell[9494, 225, 589, 12, 32, "Input",ExpressionUUID->"7421c56f-d5af-4df6-8034-ece5d5384058"],
Cell[10086, 239, 1630, 26, 124, "Input",ExpressionUUID->"e86a1b17-fc00-41b9-8941-ba78eb4e043a"],
Cell[11719, 267, 646, 13, 28, "Input",ExpressionUUID->"5d0e39cd-11b1-4595-aeb9-0fdbd16ece9d"],
Cell[CellGroupData[{
Cell[12390, 284, 322, 6, 28, "Input",ExpressionUUID->"a315aa41-887f-4376-b5a7-9f6614771663"],
Cell[12715, 292, 439, 11, 21, "Message",ExpressionUUID->"81478dec-76c8-415e-8a00-e01f4bb8dc0c"],
Cell[13157, 305, 259, 4, 32, "Output",ExpressionUUID->"641b6a9f-9191-45f2-bf1e-eb0a3e7a6de7"]
}, Open  ]],
Cell[13431, 312, 3530, 57, 474, "Input",ExpressionUUID->"82a03de3-0e12-4c59-bb42-528749c4d97e"],
Cell[16964, 371, 2616, 45, 381, "Input",ExpressionUUID->"a376c96d-0f17-43df-a243-6359725f0331"],
Cell[19583, 418, 3380, 57, 419, "Input",ExpressionUUID->"222a3863-676a-4a91-8ed5-bf086815e19f"],
Cell[22966, 477, 2705, 44, 142, "Input",ExpressionUUID->"82bd9a2c-9f48-402b-90c8-7cb9d90eee9e"],
Cell[25674, 523, 447, 10, 28, "Input",ExpressionUUID->"9c835307-f52b-4c42-8b0e-c58da6c73503"],
Cell[26124, 535, 224, 3, 28, "Input",ExpressionUUID->"d1ec6521-5d52-4665-927a-fa1d165f502a"],
Cell[CellGroupData[{
Cell[26373, 542, 181, 2, 28, "Input",ExpressionUUID->"92ef74ea-3f9f-40e0-96ef-8699243bb53a"],
Cell[26557, 546, 161, 2, 32, "Output",ExpressionUUID->"a949bb7a-a4bf-4517-95ee-fff31b4a867d"]
}, Open  ]],
Cell[26733, 551, 1589, 32, 48, "Input",ExpressionUUID->"75320f2e-dcf8-44e4-a6d6-2ae166718cea"],
Cell[CellGroupData[{
Cell[28347, 587, 214, 4, 28, "Input",ExpressionUUID->"b66b3ba1-ab74-45a5-8467-dbae2cc45c3d"],
Cell[28564, 593, 180, 4, 32, "Output",ExpressionUUID->"1bda458b-b2f2-4d0c-80c7-0a6ba55f0ae6"]
}, Open  ]],
Cell[28759, 600, 308, 7, 28, "Input",ExpressionUUID->"4d882cf2-cadf-422e-aa45-f2e75454a042"],
Cell[29070, 609, 852, 19, 28, "Input",ExpressionUUID->"c682d2c2-cecf-4416-9beb-d00d0da3e4f3"],
Cell[29925, 630, 173, 2, 28, "Input",ExpressionUUID->"568cbba2-205d-43c3-b6bd-e23a73e39cba"],
Cell[30101, 634, 772, 18, 28, "Input",ExpressionUUID->"b11e39b9-7017-44bc-a385-0b07d552a794"],
Cell[30876, 654, 459, 9, 28, "Input",ExpressionUUID->"f2914d32-3898-4e48-bf07-c89efc28a175"],
Cell[31338, 665, 286, 7, 28, "Input",ExpressionUUID->"45bf30fe-2ff2-417c-b0d5-9bcaed87df8f"],
Cell[31627, 674, 284, 6, 28, "Input",ExpressionUUID->"cf4f547c-9e66-4b6e-b324-93cb9ff9ea9f"],
Cell[31914, 682, 720, 17, 28, "Input",ExpressionUUID->"102780d6-70d9-4d69-b9aa-dab665404545"],
Cell[32637, 701, 283, 6, 28, "Input",ExpressionUUID->"796a2e9c-8057-4199-a61d-18737ea5c77f"],
Cell[CellGroupData[{
Cell[32945, 711, 414, 9, 28, "Input",ExpressionUUID->"5e97059b-605d-41af-bf6a-9add47d91f50"],
Cell[33362, 722, 225, 5, 32, "Output",ExpressionUUID->"4248e821-a147-4083-895e-cb19278b6fa8"]
}, Open  ]],
Cell[33602, 730, 175, 2, 28, "Input",ExpressionUUID->"a34bd91b-332e-47df-9227-c111d8b411a5"],
Cell[CellGroupData[{
Cell[33802, 736, 334, 6, 28, "Input",ExpressionUUID->"3622a052-38d9-47fa-b1f3-baec31be1a1e"],
Cell[34139, 744, 223, 3, 32, "Output",ExpressionUUID->"40804649-e1d7-4cf7-ad23-48c9fd54c124"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34399, 752, 811, 15, 48, "Input",ExpressionUUID->"caaa5ecf-7ab4-401d-a3be-1c829e3f17a2"],
Cell[35213, 769, 340, 5, 32, "Output",ExpressionUUID->"1879eb5e-eecd-4bf1-af82-b0af6380d325"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35590, 779, 3181, 49, 48, "Input",ExpressionUUID->"4a6c27e2-f698-4942-9e0f-b4b815b04b6b"],
Cell[38774, 830, 11343, 223, 90, "Output",ExpressionUUID->"39b52277-7308-4ace-b265-a1786e1f1fcc"]
}, Open  ]],
Cell[50132, 1056, 2901, 73, 181, "Input",ExpressionUUID->"5652c7f2-04fa-4c09-af67-9f4f252f0675"],
Cell[CellGroupData[{
Cell[53058, 1133, 910, 22, 28, "Input",ExpressionUUID->"1571ed99-a23c-4960-8b79-e86ea7951882"],
Cell[53971, 1157, 7307, 160, 168, "Output",ExpressionUUID->"f62ea7a7-2d26-43a4-a439-d2973b18ff6b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[61315, 1322, 1333, 32, 48, "Input",ExpressionUUID->"a58ec1c8-41a6-4b44-8b8b-48c35008ce34"],
Cell[62651, 1356, 29666, 523, 166, "Output",ExpressionUUID->"55ab6427-523f-4bc2-9f65-8152fd3dba54"]
}, Open  ]],
Cell[CellGroupData[{
Cell[92354, 1884, 2000, 46, 67, "Input",ExpressionUUID->"5f8ee03a-5a6c-4fc8-b268-7b1aba34af42"],
Cell[94357, 1932, 72137, 1222, 166, "Output",ExpressionUUID->"476ae1f1-9faa-4efb-be40-462ff18e8d7f"],
Cell[166497, 3156, 775, 12, 89, "Output",ExpressionUUID->"40cf7626-16de-431c-9935-f601e62d4179"]
}, Open  ]],
Cell[167287, 3171, 5458, 164, 295, "Input",ExpressionUUID->"c7c8062e-a44d-44d6-9860-e4bb30b9612d"],
Cell[172748, 3337, 173, 2, 28, "Input",ExpressionUUID->"075af11f-332b-44ef-b6ed-18482c0a4326"],
Cell[CellGroupData[{
Cell[172946, 3343, 2406, 48, 262, "Input",ExpressionUUID->"1927aef9-607f-4a49-a59a-07062997209f"],
Cell[175355, 3393, 653, 10, 32, "Output",ExpressionUUID->"e62b6c20-ede8-4daa-95ff-9bed7854437c"],
Cell[176011, 3405, 651, 10, 32, "Output",ExpressionUUID->"d8017133-d40a-441a-b354-936c9c40e336"],
Cell[176665, 3417, 651, 10, 32, "Output",ExpressionUUID->"c74d11c6-9aed-43f6-b68e-951f7060c2dc"],
Cell[177319, 3429, 651, 10, 32, "Output",ExpressionUUID->"f6616d49-abd6-4bba-875e-ef8e64091d02"],
Cell[177973, 3441, 653, 10, 32, "Output",ExpressionUUID->"843bb940-fc52-4601-9559-0bd9e5e1fb80"],
Cell[178629, 3453, 653, 10, 32, "Output",ExpressionUUID->"4570f153-f3e6-40de-ac67-5b7d12361f57"],
Cell[179285, 3465, 653, 10, 65, "Output",ExpressionUUID->"1b05d7c1-3a60-4c4d-97ee-5583072ba564"]
}, Open  ]],
Cell[CellGroupData[{
Cell[179975, 3480, 397, 7, 28, "Input",ExpressionUUID->"9a0f02f8-0dcb-4fa0-a434-3dab92e35e3d"],
Cell[180375, 3489, 192, 3, 32, "Output",ExpressionUUID->"aae49e1d-624f-407d-a604-4648101ea6a5"]
}, Open  ]],
Cell[180582, 3495, 526, 12, 48, "Input",ExpressionUUID->"410c0451-9b50-4726-838d-507ca1520553"],
Cell[181111, 3509, 886, 18, 48, "Input",ExpressionUUID->"25eb0e56-d2cb-4e3c-833f-4d9862c278b6"],
Cell[182000, 3529, 1354, 25, 67, "Input",ExpressionUUID->"66e41b82-96ad-4d5a-885b-44a2b04ac964"],
Cell[183357, 3556, 226, 3, 28, "Input",ExpressionUUID->"266398ea-08f6-44ac-9796-54783f49bc3b"],
Cell[183586, 3561, 3216, 74, 200, "Input",ExpressionUUID->"2c8ae09e-5141-49f8-bc2c-efd2a2324a89"],
Cell[186805, 3637, 487, 10, 28, "Input",ExpressionUUID->"7cf76789-eb97-4c2e-91e6-102698972f28"],
Cell[187295, 3649, 327, 6, 28, "Input",ExpressionUUID->"322b59e5-9d1b-4e2d-aeb2-b791e94df4bc"],
Cell[187625, 3657, 177, 3, 28, "Input",ExpressionUUID->"957a51f1-e3b5-4fcc-a441-b5abb27dc864"],
Cell[187805, 3662, 346, 9, 28, "Input",ExpressionUUID->"d707c0a0-6561-43e9-9fd0-a43a755a3534"],
Cell[188154, 3673, 435, 10, 28, "Input",ExpressionUUID->"e080f098-be02-4782-988d-080fb60799bf"],
Cell[188592, 3685, 407, 6, 28, "Input",ExpressionUUID->"00aac20e-7712-4382-bdcd-1a0f47667dfa"],
Cell[CellGroupData[{
Cell[189024, 3695, 379, 7, 28, "Input",ExpressionUUID->"1d39c30e-2952-4c75-b7a7-9b9256359d5d"],
Cell[189406, 3704, 172, 4, 32, "Output",ExpressionUUID->"b16912a7-6bd9-43bb-a49d-5511231b6070"]
}, Open  ]],
Cell[CellGroupData[{
Cell[189615, 3713, 190, 3, 28, "Input",ExpressionUUID->"8a2df4ce-9c44-47a1-bde1-ff1c4d183497"],
Cell[189808, 3718, 227, 4, 32, "Output",ExpressionUUID->"8f2b40e5-5806-465b-9e7a-d7300441eeee"]
}, Open  ]],
Cell[CellGroupData[{
Cell[190072, 3727, 288, 6, 28, "Input",ExpressionUUID->"c65c0dd0-81b7-4955-8c52-e9b2bed36fa7"],
Cell[190363, 3735, 230, 4, 32, "Output",ExpressionUUID->"1542070a-e517-4611-a234-849b11418754"]
}, Open  ]],
Cell[CellGroupData[{
Cell[190630, 3744, 284, 6, 28, "Input",ExpressionUUID->"9bdfa35f-8e9a-4070-8882-15d68d851348"],
Cell[190917, 3752, 224, 4, 32, "Output",ExpressionUUID->"6b6e4ed5-53b9-4b6b-a4fb-968e16e8883c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[191178, 3761, 282, 6, 28, "Input",ExpressionUUID->"3917c014-4521-4d91-8543-b5d914f1cc18"],
Cell[191463, 3769, 223, 4, 32, "Output",ExpressionUUID->"cf65e442-89fa-406f-9041-f2d17d792c9d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[191723, 3778, 333, 7, 28, "Input",ExpressionUUID->"467d54c9-fca1-43d0-97cf-f2d46c7284b1"],
Cell[192059, 3787, 225, 4, 32, "Output",ExpressionUUID->"bee93cc0-1c3f-40f1-b350-34c12374ace2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[192321, 3796, 392, 8, 28, "Input",ExpressionUUID->"f8bb0306-7bc5-4dc8-9d8e-1e8f7ab2e834"],
Cell[192716, 3806, 232, 4, 32, "Output",ExpressionUUID->"c8eedc54-4381-4b1a-b93b-60e7e4880d18"]
}, Open  ]],
Cell[CellGroupData[{
Cell[192985, 3815, 471, 10, 48, "Input",ExpressionUUID->"5e485a53-0caa-4994-a3a3-d3d69cde3b52"],
Cell[193459, 3827, 222, 4, 32, "Output",ExpressionUUID->"0b612e65-5748-4321-8c95-046de8da445b"],
Cell[193684, 3833, 229, 4, 32, "Output",ExpressionUUID->"a00a3cf8-dfec-4d03-be68-f6c0042c65b2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[193950, 3842, 252, 4, 28, "Input",ExpressionUUID->"cfb0e200-36f9-494c-88e2-8eba067033a5"],
Cell[194205, 3848, 227, 4, 32, "Output",ExpressionUUID->"2100db1b-2484-4291-a3e1-fb570003fb94"]
}, Open  ]],
Cell[CellGroupData[{
Cell[194469, 3857, 345, 7, 28, "Input",ExpressionUUID->"9db4f7e5-a195-45b4-868f-2359598971c3"],
Cell[194817, 3866, 230, 4, 32, "Output",ExpressionUUID->"4220632d-b7c2-4123-a22c-a72ea1ab4542"]
}, Open  ]],
Cell[195062, 3873, 1802, 37, 86, "Input",ExpressionUUID->"87f57da9-00aa-4b46-ab12-6608300fc354"],
Cell[196867, 3912, 521, 12, 28, "Input",ExpressionUUID->"855d2f73-4d92-458c-92f8-4997982eeb95"],
Cell[CellGroupData[{
Cell[197413, 3928, 264, 5, 28, "Input",ExpressionUUID->"c5d465ea-1c08-42a8-9ef9-344addb687c8"],
Cell[197680, 3935, 214, 4, 32, "Output",ExpressionUUID->"26a1108c-aec8-4052-a1f4-54a489e40d07"]
}, Open  ]],
Cell[CellGroupData[{
Cell[197931, 3944, 249, 5, 28, "Input",ExpressionUUID->"fbec490a-a8cf-4334-a943-dcc80a67bcec"],
Cell[198183, 3951, 202, 4, 32, "Output",ExpressionUUID->"1be33f40-f0ae-46bd-aa3c-ec5454975d5d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[198422, 3960, 406, 10, 48, "Input",ExpressionUUID->"53522faf-b64c-4e4b-98e4-8562af9b3595"],
Cell[198831, 3972, 224, 5, 32, "Output",ExpressionUUID->"15a530b2-1aaf-455b-a918-6f54ca06bad8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[199092, 3982, 256, 5, 28, "Input",ExpressionUUID->"cb59bb07-5383-42bf-81be-5f35fcdab709"],
Cell[199351, 3989, 206, 4, 32, "Output",ExpressionUUID->"ea3b66bf-8d65-428b-a370-494c2e125efc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[199594, 3998, 467, 11, 59, "Input",ExpressionUUID->"0355aab1-cd18-479e-ba9f-08006c50833e"],
Cell[200064, 4011, 278, 5, 44, "Output",ExpressionUUID->"d401f0a0-e92a-4537-ab30-25277a8fdb91"]
}, Open  ]],
Cell[CellGroupData[{
Cell[200379, 4021, 260, 5, 28, "Input",ExpressionUUID->"d08078e9-646b-410d-b3da-7b07d3631460"],
Cell[200642, 4028, 206, 4, 32, "Output",ExpressionUUID->"a424d34d-69fe-43ac-b971-0633d6f799c5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[200885, 4037, 429, 9, 28, "Input",ExpressionUUID->"42c8cf32-1946-44b8-9562-13038f11fb94"],
Cell[201317, 4048, 818, 16, 73, "Output",ExpressionUUID->"88409f04-04e6-41cf-8e81-d6f6917bd240"]
}, Open  ]],
Cell[CellGroupData[{
Cell[202172, 4069, 1219, 24, 28, "Input",ExpressionUUID->"0ab75f01-46a1-4e5f-adf2-7d5307d5762b"],
Cell[203394, 4095, 598, 12, 21, "Message",ExpressionUUID->"0e930282-5620-46f6-9003-841f1137c1ae"],
Cell[203995, 4109, 474, 10, 21, "Message",ExpressionUUID->"975efcb5-dbc9-4603-b290-54fed87fea73"],
Cell[204472, 4121, 567, 11, 23, "Message",ExpressionUUID->"235b13af-abc7-4d89-b097-168deb885147"],
Cell[205042, 4134, 714, 13, 23, "Message",ExpressionUUID->"d2cb5674-a30b-4b78-8aba-adbd8a5b03a0"],
Cell[205759, 4149, 688, 13, 23, "Message",ExpressionUUID->"86ce5098-4c0c-412b-84ac-b0a374e5059a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[206484, 4167, 594, 13, 28, "Input",ExpressionUUID->"6140b4bf-cb5c-4e9a-960e-e3b85328145c"],
Cell[207081, 4182, 345, 9, 46, "Output",ExpressionUUID->"9d12a311-4a62-40d5-80da-fe0651fc8cad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[207463, 4196, 442, 11, 28, "Input",ExpressionUUID->"95b96204-eca8-4b83-b10f-34c442d68937"],
Cell[207908, 4209, 383, 9, 36, "Output",ExpressionUUID->"cb91a053-ad2a-454b-84e6-c2b1a9daae55"]
}, Open  ]],
Cell[CellGroupData[{
Cell[208328, 4223, 283, 6, 28, "Input",ExpressionUUID->"dd10fb84-5fff-4fba-9083-85431c8f6cfd"],
Cell[208614, 4231, 258927, 4338, 71, "Output",ExpressionUUID->"77531a54-6546-4191-bd16-6f9fe76c5d3b"]
}, Open  ]],
Cell[467556, 8572, 320, 7, 28, "Input",ExpressionUUID->"504bd9cc-d90b-476c-be9f-d82b78e41ae7"],
Cell[CellGroupData[{
Cell[467901, 8583, 323, 6, 28, "Input",ExpressionUUID->"a0308418-3e41-4b79-b3be-d01011649c9a"],
Cell[468227, 8591, 874, 21, 81, "Output",ExpressionUUID->"eadd6488-4368-407b-adeb-a8b45b0bccd4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[469138, 8617, 416, 9, 28, "Input",ExpressionUUID->"c152a1f2-bf7c-435c-8fac-a14c7491d047"],
Cell[469557, 8628, 431, 10, 62, "Output",ExpressionUUID->"cf357641-0adb-4f7d-b564-983b4ecb0a61"]
}, Open  ]],
Cell[470003, 8641, 338, 9, 28, "Input",ExpressionUUID->"1efddd34-8aca-4eb7-83c5-9214d7e9b2d9"],
Cell[470344, 8652, 221, 4, 28, "Input",ExpressionUUID->"1116899d-8fc6-4a3e-ab24-2005f84130e2"],
Cell[470568, 8658, 2145, 45, 316, InheritFromParent,ExpressionUUID->"7c7431ae-110e-42b8-bb56-b54ba12e1049"],
Cell[CellGroupData[{
Cell[472738, 8707, 466, 10, 28, "Input",ExpressionUUID->"1f66a9a9-94bf-4e4c-9195-abd0380ffb92"],
Cell[473207, 8719, 186, 4, 32, "Output",ExpressionUUID->"c1998aa1-1e22-4057-8106-03acd484f259"]
}, Open  ]],
Cell[473408, 8726, 265, 6, 85, "Input",ExpressionUUID->"7ff06b76-9954-4495-99fa-fb2cb993737c"],
Cell[CellGroupData[{
Cell[473698, 8736, 283, 5, 28, InheritFromParent,ExpressionUUID->"17a92354-4aef-4606-8032-e8e9e6238fd8"],
Cell[473984, 8743, 8762, 168, 398, "Output",ExpressionUUID->"ae10aa7e-159a-4b60-9d50-702025ed3325"]
}, Open  ]],
Cell[482761, 8914, 1022, 18, 28, "Input",ExpressionUUID->"9e358958-2066-4c09-b911-0db3a4cff49b"],
Cell[483786, 8934, 313, 7, 28, "Input",ExpressionUUID->"0f4d8182-7287-4694-b4bc-38892ec81f4a"]
}
]
*)

