(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    657256,      11191]
NotebookOptionsPosition[    644971,      11008]
NotebookOutlinePosition[    645312,      11023]
CellTagsIndexPosition[    645269,      11020]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"Pattern", "[", 
  RowBox[{"addition", ",", " ", 
   RowBox[{"{", 
    RowBox[{"_", ",", "\"\<+\>\"", ",", "_"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7709911793368444`*^9, 3.7709912668424406`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"d8080331-3884-41e3-a9b8-483a4eefee11"],

Cell[BoxData[
 RowBox[{"addition", ":", 
  RowBox[{"{", 
   RowBox[{"_", ",", "\<\"+\"\>", ",", "_"}], "}"}]}]], "Output",
 CellChangeTimes->{3.7711724966015005`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"3bc7ee26-a31b-49f8-bd85-19e7417d15ad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"additionRules", "=", 
  RowBox[{"{", 
   RowBox[{"__", ",", " ", "\"\<+\>\"", ",", "__"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.770992790473785*^9, 3.770992825719166*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"379c9f38-0152-4658-9aaa-fb297370a64c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"__", ",", "\<\"+\"\>", ",", "__"}], "}"}]], "Output",
 CellChangeTimes->{3.7711724966975865`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"9f6ed4b5-e4ab-445e-bca6-65d97647e906"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatchQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", " ", "\"\<+\>\"", ",", " ", "2"}], "}"}], ",", " ", 
   "additionRules"}], "]"}]], "Input",
 CellChangeTimes->{{3.7709928308898954`*^9, 3.7709928767796574`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"57844fb0-228a-49b0-b92d-dc2d3e5913f9"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.7711724967466216`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"2c1ea545-e1b5-4cfe-9fec-4775a0e3882f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"commutativeGraph", "=", 
  RowBox[{
   RowBox[{"[", 
    RowBox[{"x", ",", " ", 
     RowBox[{"RelationGraph", "[", 
      RowBox[{"commutativeAddition", ",", " ", 
       RowBox[{"{", 
        RowBox[{"x", ",", "x"}], "}"}]}], "]"}]}], "]"}], "[", 
   RowBox[{"Range", "[", "100", "]"}], "]"}], 
  RowBox[{"(*", 
   RowBox[{
   "Want", " ", "to", " ", "be", " ", "able", " ", "to", " ", "define", " ", 
    "this", " ", "functionally"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.770992911428092*^9, 3.7709929368562984`*^9}, {
   3.770993022136916*^9, 3.7709931072953763`*^9}, {3.770993199099123*^9, 
   3.770993221490551*^9}, 3.7709932810526342`*^9, {3.770993329082049*^9, 
   3.7709933603328967`*^9}, {3.77099346402757*^9, 3.7709935632084007`*^9}, {
   3.770993762999999*^9, 3.7709937807946587`*^9}, {3.7709938147903724`*^9, 
   3.770993821237516*^9}, {3.770993858783887*^9, 3.770993947894869*^9}, {
   3.7709940389405856`*^9, 3.7709941562013664`*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[4]:=",ExpressionUUID->"ca103606-2001-4c22-95d6-7f6812162636"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"commutativeGraph", " "}]], "Input",
 CellChangeTimes->{{3.7709931149551783`*^9, 3.7709931804253874`*^9}, {
   3.7709932975154576`*^9, 3.7709933111748667`*^9}, {3.770993789892692*^9, 
   3.7709937942546215`*^9}, {3.770993828768509*^9, 3.7709938403052235`*^9}, 
   3.770993891951488*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"327492a1-5562-407b-ad9f-9f3d81f65ef7"],

Cell[BoxData["commutativeGraph"], "Output",
 CellChangeTimes->{3.771172496839671*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"632056cf-1944-49b9-a1d6-21d5c6522d93"]
}, Open  ]],

Cell[BoxData[
 FormBox["", TraditionalForm]], "Input",
 CellChangeTimes->{{3.770994177470024*^9, 3.770994177493599*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"c0d88217-4674-41ff-b96b-6296a8aa3712"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatchQ", "[", 
  RowBox[{
   RowBox[{"1", "+", "2"}], ",", 
   RowBox[{"2", "+", "1"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.77099314253762*^9, 3.770993153813862*^9}, {
  3.770993243405223*^9, 3.770993245426115*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"fd86d2db-90e5-48aa-be3e-c2a178ae623f"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.7711724969067187`*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"62e61fde-f3d7-4c16-9285-c6975f7adcc2"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.770993249806549*^9, 3.7709932758694115`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"be88db5b-6c33-4813-b4ef-96e5eba24bbb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"commutativeAddition", "[", 
   RowBox[{"x_", ",", " ", "y_"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x", "+", "y"}], "\[Equal]", 
     RowBox[{"y", "+", "x"}]}], ",", " ", "True", ",", " ", "False"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.770991275618235*^9, 3.770991276866707*^9}, {
   3.770993618465212*^9, 3.7709937519224043`*^9}, 3.7709941870885496`*^9},
 CellLabel->"In[8]:=",ExpressionUUID->"290df51f-42d1-453c-8405-7019b78ac303"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7709927851204185`*^9, 3.770992785752986*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"e39348c0-d198-4de1-bacf-0f006e66bab1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"algebra2PSet", "=", 
  RowBox[{"Import", "[", 
   RowBox[{
   "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\CK-12-Algebra-II-with-Trigonometry-Concepts_b_v78_eiy_s1.\
pdf\>\"", ",", " ", "\"\<Plaintext\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.77099375583887*^9, 3.77099375736931*^9}, {
   3.7709987964463296`*^9, 3.7709988599210796`*^9}, 3.770998903194763*^9, {
   3.7710010287054644`*^9, 3.7710010331796556`*^9}, {3.771001138904239*^9, 
   3.771001178099668*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"d5556197-0257-4b55-ac11-67cf3d84fa35"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         TemplateBox[{"1462420"},
          "OutputSizeLimit`Skeleton"],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          PaneBox[
           TagBox[
            TooltipBox[
             StyleBox[
              StyleBox[
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "FEStrings", "sizeBriefExplanation"], StandardForm],
                ImageSizeCache->{65., {3., 9.}}],
               StripOnInput->False,
               DynamicUpdating->True,
               LineSpacing->{1, 2},
               LineIndent->0,
               LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLText",
              StripOnInput->False],
             StyleBox[
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
                StandardForm]], DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}, StripOnInput -> False]],
            Annotation[#, 
             Style[
              Dynamic[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
              DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}], "Tooltip"]& ],
           Alignment->Center,
           BaselinePosition->Baseline,
           ImageSize->{Automatic, {25, Full}}], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{52., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 10, 15901289433497050326, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{62., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 10, 15901289433497050326, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{44., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 10, 15901289433497050326, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{78., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[15901289433497050326 === $SessionID, 
   Out[10], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.7711725271276474`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"12afd425-abc2-4dbf-8c5d-7e59bff9cfa2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"introAlgebraPSet", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\scc_introductory_algebra_workbook_spring_2013.pdf\>\"", 
     ",", " ", "\"\<Plaintext\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7709989062874613`*^9, 3.7709989626550627`*^9}, {
  3.771001059542406*^9, 3.7710010670087366`*^9}, {3.7710012605077686`*^9, 
  3.771001264116997*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"36d4ada3-9de4-4fe8-9564-16b385821ace"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"calcPSet", "=", 
  RowBox[{"Import", "[", 
   RowBox[{
   "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\CalcI_Complete_Problems.pdf\>\"", ",", " ", 
    "\"\<Plaintext\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7709990423991756`*^9, 3.77099907067227*^9}, {
  3.771001250738564*^9, 3.771001252973305*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"53b94c62-a924-4c28-8c9a-87e4eb51b9a0"],

Cell[BoxData[
 TemplateBox[{
  "Import","general",
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Expected cross reference \
table\\\\\\\"\\\"}]\\)\"",2,12,2,15901289433497050326,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7711725365093136`*^9},
 CellLabel->
  "During evaluation of \
In[12]:=",ExpressionUUID->"d2cb0b8f-4c0b-4011-9944-e18d85faeabf"],

Cell[BoxData[
 TemplateBox[{
  "Import","general",
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Expected cross reference \
table\\\\\\\"\\\"}]\\)\"",2,12,3,15901289433497050326,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7711725365663557`*^9},
 CellLabel->
  "During evaluation of \
In[12]:=",ExpressionUUID->"cba3111f-382a-421c-8fa3-6ed7433811fc"],

Cell[BoxData[
 TemplateBox[{
  "Import","general",
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Could not find document \
trailer\\\\\\\"\\\"}]\\)\"",2,12,4,15901289433497050326,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7711725365763626`*^9},
 CellLabel->
  "During evaluation of \
In[12]:=",ExpressionUUID->"736bd8a1-a3c2-4227-a02f-eb0213a34ea5"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Import\\\", \\\"::\\\", \
\\\"general\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"",2,12,5,15901289433497050326,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7711725365863686`*^9},
 CellLabel->
  "During evaluation of \
In[12]:=",ExpressionUUID->"e8f503b2-e02e-4053-8c98-ee240e4cd600"],

Cell[BoxData["\<\"\"\>"], "Output",
 CellChangeTimes->{3.7711725365973763`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"a4bf6cfe-c38f-4913-bb5d-f596b8454fd6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsPEMDAS", "=", 
   RowBox[{"{", " ", 
    RowBox[{
    "\"\<What is 2+2\>\"", ",", " ", "\"\<2+3\>\"", ",", 
     "\"\<What is 2+3\>\"", ",", " ", "\"\<What is 1+1\>\"", ",", " ", 
     "\"\<What is 20+22\>\"", ",", " ", "\"\<What is 1+15+21\>\"", ",", " ", 
     "\"\<What is 33+5+8\>\"", ",", " ", 
     "\"\<Simplify (2-5\!\(\*SuperscriptBox[\()\), \(2\)]\)\>\"", ",", " ", 
     "\"\<Simplify 2-\!\(\*SuperscriptBox[\(5\), \(2\)]\)\>\"", ",", " ", 
     "\"\<Simplify 10-7+1\>\"", ",", " ", "\"\<Simplify 10-(7+1)\>\"", ",", 
     " ", "\"\<Simplify 24/(4-2\!\(\*SuperscriptBox[\()\), \(3\)]\)\>\"", ",",
      " ", "\"\<Simplify 4+5(1+12/6\!\(\*SuperscriptBox[\()\), \(2\)]\)\>\"", 
     ",", " ", "\"\<Simplify (15-3)/(1+5)\>\"", ",", " ", "\"\<1+12\>\"", ",",
      " ", "\"\<10% of 11\>\"", ",", " ", "\"\<30+40\>\"", ",", " ", 
     "\"\<15+12\>\"", ",", " ", "\"\<20% of 33\>\"", " ", ",", " ", 
     "\"\<11+12\>\"", ",", " ", "\"\<What is 5% of 100?\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7710111217256823`*^9, 3.7710111540272284`*^9}, {
  3.7710111885866814`*^9, 3.7710113104444427`*^9}, {3.771011349072077*^9, 
  3.7710114614252415`*^9}, {3.7710717742904773`*^9, 3.7710717974684796`*^9}, {
  3.7710825794066696`*^9, 3.7710825944885254`*^9}, {3.7710828568271475`*^9, 
  3.7710828576980124`*^9}, {3.77109972947976*^9, 3.77109975449656*^9}, {
  3.7710997929256735`*^9, 3.7710998004862556`*^9}, {3.7711007075997024`*^9, 
  3.771100733777379*^9}, {3.771101333629407*^9, 3.7711013629989295`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"2333ef13-77fd-4cdf-b6bd-0173171dc2ca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a1QsFractions", "=", 
  RowBox[{"{", 
   RowBox[{
   "\"\<express 3 2/7 as an improper fraction\>\"", ",", " ", 
    "\"\<express 12 1/3 as an improper fraction\>\"", ",", " ", 
    "\"\<Express 42/5 as a mixed number\>\"", ",", " ", 
    "\"\<Express 53/9 as a mixed number\>\"", ",", " ", 
    "\"\<write 3/18 in simplest form\>\"", ",", " ", 
    RowBox[{
    "\"\<write 42/54 in simplest form\>\"", " ", 
     "\"\<What is 3 2/7 as an improper fraction\>\""}], ",", 
    "\"\<What is 12 1/3 as an improper fraction\>\"", ",", 
    "\"\<What is 42/5 as a mixed number\>\"", ",", 
    "\"\<What is 53/9 as a mixed number\>\"", ",", 
    "\"\<What is 3/18 in simplest form\>\"", ",", 
    "\"\<What is 42/54 in simplest form\>\""}], "}"}]}]], "Input",
 CellChangeTimes->{{3.7710119043974237`*^9, 3.771012096049966*^9}, {
  3.771071582527122*^9, 3.77107158335518*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"2d263997-c8cc-4cfe-a7ea-3727e1faf43b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"express 3 2/7 as an improper fraction\"\>", 
   ",", "\<\"express 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"Express 42/5 as a mixed number\"\>", 
   ",", "\<\"Express 53/9 as a mixed number\"\>", 
   ",", "\<\"write 3/18 in simplest form\"\>", ",", 
   RowBox[{"\<\"What is 3 2/7 as an improper fraction\"\>", 
    " ", "\<\"write 42/54 in simplest form\"\>"}], 
   ",", "\<\"What is 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"What is 42/5 as a mixed number\"\>", 
   ",", "\<\"What is 53/9 as a mixed number\"\>", 
   ",", "\<\"What is 3/18 in simplest form\"\>", 
   ",", "\<\"What is 42/54 in simplest form\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7711725366524153`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"c2730d4c-4d88-4d01-80fb-81e89ac90c59"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"{", 
  RowBox[{
  "\"\<express 3 2/7 as an improper fraction\>\"", ",", 
   "\"\<express 12 1/3 as an improper fraction\>\"", ",", 
   "\"\<Express 42/5 as a mixed number\>\"", ",", 
   "\"\<Express 53/9 as a mixed number\>\"", ",", 
   "\"\<write 3/18 in simplest form\>\"", ",", 
   "\"\<write 42/54 in simplest form\>\""}], "}"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"a1QsOppFrac", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Multiply 24/3 and 27/8\>\"", ",", " ", "\"\<Multiply 8 and 3/24\>\"",
      ",", " ", "\"\<Add 1/2 and 1/3\>\"", ",", " ", 
     "\"\<What is  24/3 * 27/8\>\"", ",", " ", "\"\<What is  8 * 3/24\>\"", 
     ",", " ", "\"\<What is  1/2 + 1/3\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"a1QsAbsoluteVal", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<What is the absolute value of -1?\>\"", ",", " ", 
     "\"\<What is |1|\>\"", ",", " ", "\"\<What is |-30|\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"a1QsNegatice", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<What is 3-(-2)?\>\"", ",", " ", "\"\<What is -3+4\>\""}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"a1QsIntovars", "=", 
  RowBox[{"{", 
   RowBox[{
   "\"\<Evaluate \!\(\*SuperscriptBox[\(a\), \
\(2\)]\)-\!\(\*SuperscriptBox[\(b\), \(2\)]\) when a=5 and b=3\>\"", ",", 
    " ", "\"\<Evaluate a-\!\(\*SuperscriptBox[\(b\), \(2\)]\) when a=4 and \
b=2\>\"", ",", " ", 
    "\"\<Evaluate \!\(\*SuperscriptBox[\(a\), \(2\)]\)+b when a=7 and \
b=1\>\""}], "}"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7710183957665844`*^9, 3.771018693615785*^9}, {
  3.7710715604288125`*^9, 3.7710715669824667`*^9}, {3.771071599899954*^9, 
  3.771071624993181*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"6c60326b-e42a-4217-9c4b-5a627cce92a1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"express 3 2/7 as an improper fraction\"\>", 
   ",", "\<\"express 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"Express 42/5 as a mixed number\"\>", 
   ",", "\<\"Express 53/9 as a mixed number\"\>", 
   ",", "\<\"write 3/18 in simplest form\"\>", 
   ",", "\<\"write 42/54 in simplest form\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.771172536698452*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"45600464-29e2-49eb-9c3f-ae968d89a006"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Evaluate \\!\\(\\*SuperscriptBox[\\(a\\), \
\\(2\\)]\\)-\\!\\(\\*SuperscriptBox[\\(b\\), \\(2\\)]\\) when a=5 and \
b=3\"\>", 
   ",", "\<\"Evaluate a-\\!\\(\\*SuperscriptBox[\\(b\\), \\(2\\)]\\) when a=4 \
and b=2\"\>", 
   ",", "\<\"Evaluate \\!\\(\\*SuperscriptBox[\\(a\\), \\(2\\)]\\)+b when a=7 \
and b=1\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.771172536705453*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"c7dd9e60-b491-4564-a212-5dbdff81e72b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "\"\<express 3 2/7 as an improper fraction\>\"", ",", 
   "\"\<express 12 1/3 as an improper fraction\>\"", ",", 
   "\"\<Express 42/5 as a mixed number\>\"", ",", 
   "\"\<Express 53/9 as a mixed number\>\"", ",", 
   "\"\<write 3/18 in simplest form\>\"", ",", 
   "\"\<write 42/54 in simplest form\>\"", ","}], " ", "}"}]], "Input",
 CellChangeTimes->{{3.771071389445044*^9, 3.7710714057846594`*^9}, {
   3.771071505249978*^9, 3.7710715347214036`*^9}, 3.7710715778464785`*^9},
 CellLabel->"In[20]:=",ExpressionUUID->"13a45433-da7c-48b3-b716-61b7e0f7a0b0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"express 3 2/7 as an improper fraction\"\>", 
   ",", "\<\"express 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"Express 42/5 as a mixed number\"\>", 
   ",", "\<\"Express 53/9 as a mixed number\"\>", 
   ",", "\<\"write 3/18 in simplest form\"\>", 
   ",", "\<\"write 42/54 in simplest form\"\>", ",", "Null"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.77117253674348*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"158a550f-7fa0-473e-a851-f67f8091e15a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsCombineLikeTerms", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Combine like terms of 3a-6a+10a-a\>\"", ",", " ", 
     "\"\<Combine the like terms of 5x-10y+6z-3x\>\"", ",", " ", 
     "\"\<Combine like terms of 3n-5\!\(\*SuperscriptBox[\(n\), \(\(2\)\(\\\ \
\)\)]\)+6n-10+2\!\(\*SuperscriptBox[\(n\), \(2\)]\)\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7710187153865156`*^9, 3.7710188213954906`*^9}, 
   3.771101374565879*^9},
 CellLabel->"In[21]:=",ExpressionUUID->"a7ae84c8-e77e-4163-a09b-03f6288de0b4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsDistrbutive", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<5(2x+4)\>\"", ",", " ", 
     "\"\<-3(\!\(\*SuperscriptBox[\(x\), \(2\)]\)-2x+7)\>\"", ",", " ", 
     "\"\<-(5\!\(\*SuperscriptBox[\(x\), \(4\)]\)-8)\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7710188742668247`*^9, 3.7710188984740705`*^9}, {
   3.771019155256483*^9, 3.7710192378708935`*^9}, 3.771101371539567*^9},
 CellLabel->"In[22]:=",ExpressionUUID->"965f7365-78f2-4e84-8c81-fb88f95c8219"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsSolving", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<8x-2=22\>\"", ",", " ", "\"\<-x-2=12\>\"", ",", " ", 
     "\"\<2/3 x+3 =15\>\""}], "}"}]}], " ", ";"}]], "Input",
 CellChangeTimes->{{3.7710193041936626`*^9, 3.771019361406973*^9}, 
   3.771101382125491*^9},
 CellLabel->"In[23]:=",ExpressionUUID->"e9cacc85-48d6-4d31-ab94-5d755d539cc0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsPolynomials", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Factor 3\!\(\*SuperscriptBox[\(x\), \(2\)]\)+4x+1\>\"", ",", " ", 
     "\"\<Factor \!\(\*SuperscriptBox[\(n\), \(2\)]\)+5n+6\>\"", ",", " ", 
     "\"\<Factor \!\(\*SuperscriptBox[\(a\), \(2\)]\)+3a+2\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771019367476872*^9, 3.7710193984622173`*^9}, {
  3.7710194762827587`*^9, 3.7710195744093504`*^9}, {3.7711013112902584`*^9, 
  3.7711013126543474`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"7421c56f-d5af-4df6-8034-ece5d5384058"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1QsPercent", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<A $750 watch is on sale for 15% off. Find the sale price.\>\"", ",", 
     " ", "\"\<A salesman tells you that the $140 earrings are already marked \
20% off. What\nwas the original price?\>\"", ",", " ", 
     "\"\<Tommy\[CloseCurlyQuote]s grandma gave him a $50 gift card to Toys R \
Us for his birthday.\nSales tax is currently 9%. Determine the price of the \
most expensive toy Tommy can buy with\nthe $50 gift card.\>\"", ",", " ", 
     "\"\<A salesman is paid a monthly salary of $2,300 plus 7% commission on \
his monthly sales.\nDetermine the amount of sales required for his total \
monthly income to be $3,000.\>\"", ",", " ", "\[IndentingNewLine]", 
     "\"\<What is 10% of 100\>\"", ",", " ", "\"\<What is 4% of 16?\>\"", ",",
      " ", "\"\<200% of 3\>\"", ",", " ", "\"\<What is 45+300+4\>\"", ",", 
     " ", "\"\<30+30\>\"", ",", " ", "\"\<90+200\>\"", ",", " ", 
     "\"\<1+5\>\"", ",", " ", "\"\<34+1\>\"", ",", " ", "\"\<10% of 11\>\"", 
     ",", " ", "\"\<5% of 112\>\"", ",", " ", "\"\<41+2\>\""}], " ", "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.77101961019419*^9, 3.7710196924983225`*^9}, {
   3.77107136787315*^9, 3.7710713732095246`*^9}, {3.7710825303308954`*^9, 
   3.771082555173584*^9}, 3.7711013068393455`*^9, {3.771103600684926*^9, 
   3.771103646960228*^9}, {3.7711039584884386`*^9, 3.771103975026537*^9}, {
   3.7711041538209133`*^9, 3.7711041766438804`*^9}, {3.7711049603491745`*^9, 
   3.771104971313301*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"e86a1b17-fc00-41b9-8941-ba78eb4e043a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1Questions", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"{", 
     RowBox[{
     "a1QsAbsoluteVal", ",", " ", "a1QsCombineLikeTerms", ",", " ", 
      "a1QsDistrbutive", ",", " ", "a1QsFractions", ",", " ", "a1QsIntovars", 
      ",", " ", "a1QsPEMDAS", ",", " ", "a1QsSolving", ",", " ", 
      "a1QsOppFrac", ",", " ", "a1QsPercent", ",", " ", "a1QsNegatice"}], 
     "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7710197639313936`*^9, 3.77101991115589*^9}, {
  3.7711012946740265`*^9, 3.7711012982787495`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"5d0e39cd-11b1-4595-aeb9-0fdbd16ece9d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"algebra2PSetList", "[", 
  RowBox[{"[", 
   RowBox[{"8503", ";;", "8510"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7710581376943464`*^9, 3.7710581674301476`*^9}, {
  3.7710581977897487`*^9, 3.77105819797186*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"a315aa41-887f-4376-b5a7-9f6614771663"],

Cell[BoxData[
 TemplateBox[{
  "Part","take",
   "\"Cannot take positions \\!\\(\\*RowBox[{\\\"8503\\\"}]\\) through \\!\\(\
\\*RowBox[{\\\"8510\\\"}]\\) in \
\\!\\(\\*RowBox[{\\\"algebra2PSetList\\\"}]\\).\"",2,27,6,
   15901289433497050326,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7711725368425503`*^9},
 CellLabel->
  "During evaluation of \
In[27]:=",ExpressionUUID->"da70dba7-0432-4e73-bf4d-c5084a7d5655"],

Cell[BoxData[
 RowBox[{"algebra2PSetList", "\[LeftDoubleBracket]", 
  RowBox[{"8503", ";;", "8510"}], "\[RightDoubleBracket]"}]], "Output",
 CellChangeTimes->{3.7711725368605833`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"d9791ba2-bf32-40f9-8148-e02ac6303a86"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra2Qs", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<What is the most specific subset of the real numbers that -7 is a \
part of?\>\"", ",", " ", "\"\<Plot 1.25, 2/3 and 2 on a number line\>\"", ",",
      " ", "\"\<Identify the property used in the equations below as \
distributive, inverse or associative\>\"", ",", " ", 
     "\"\<Evaluate 2\!\(\*SuperscriptBox[\(x\), \(2\)]\)-9 for x=-3\>\"", ",",
      "  ", "\"\<Expand (a+b\!\(\*SuperscriptBox[\()\), \(3\)]\)\>\"", ",", 
     " ", "\"\<What is (a+b\!\(\*SuperscriptBox[\()\), \(n\)]\) (Hint: What \
theorem is this?)\>\"", ",", " ", "\"\<Solve 4x-9=11\>\"", ",", " ", 
     "\"\<Solve 3(x-5)+4=10\>\"", ",", " ", "\"\<Solve 3(x-5)+4=10\>\"", ",", 
     " ", "\"\<Solve 9(x-3)+4=10\>\"", ",", " ", 
     "\"\<Solve (x-1/2)=(2x+3)\>\"", ",", "\"\<Solve 3|x-5|=12\>\"", ",", 
     "\"\<Solve 8(x-5)+4=10\>\"", ",", 
     "\"\<Solve (\!\(\*SuperscriptBox[\(x\), \(2\)]\)-5)=20\>\"", ",", "  ", 
     "\"\<Use the law of sines to find the missing side of this triangle\>\"",
      ",", " ", 
     "\"\<What is the largest value for the missing side of this \
triangle\>\"", ",", " ", "\"\<What is sin(60)\>\"", ",", " ", 
     "\"\<What is tan(30)\>\"", ",", " ", 
     "\"\<Write 30 degrees in radians\>\"", ",", " ", 
     "\"\<Write \[Pi]/4 in degrees\>\"", ",", " ", 
     "\"\<Is x=-8 a solution to 1/2x+6>3?\>\"", ",", "  ", 
     "\"\<Solve and graph the solution to 2x-3<7\>\"", ",", " ", 
     "\"\<Solve and graph the solution to |3x-1|\[GreaterEqual]10\>\"", ",", 
     "  ", "\"\<How many miutes are in a day?\>\"", ",", " ", 
     "\"\<Wrie the standard form of y=3/2 x+2\>\"", ",", " ", 
     "\"\<Write slope intercept form for a slope of 2 and y-intercept of 12\>\
\"", ",", " ", 
     "\"\<Find a perpedicular line of y=3x+2 with y intercept of the origin\>\
\"", ",", 
     "\"\<What are the domain and range of the trigonometric functions?\>\"", 
     " ", ",", " ", "\"\<Graph the inequality y<3x+4\>\"", ",", " ", 
     "\"\<Find the equation of best fit for the below listed data\>\"", ",", 
     " ", "\"\<Graph the parabola give by \!\(\*SuperscriptBox[\(x\), \
\(2\)]\)+3x+2. Find the zeros, vertex and intercept\>\"", ",", " ", 
     "\"\<What is the sum from 1 to 5 of a=10n+3\>\"", ",", " ", 
     "\"\<What is the next term in the series \>\"", ",", " ", 
     "\"\<what is the sum of the geometric series from 1 to infinity of \
9(1/10\!\(\*SuperscriptBox[\()\), \(n\)]\)?\>\"", ",", " ", 
     "\"\<What are the discontiuities in the function y=(x+2)/(x+3x+2). Which \
are fundamental and which are removable?\>\"", ",", " ", 
     "\"\<What is ln(1)?\>\"", ",", " ", 
     "\"\<What are the domain and range of \!\(\*SuperscriptBox[\(e\), \(x\)]\
\) and ln(x)\>\"", ",", " ", "\"\<sin(40)\>\"", ",", " ", "\"\<cos(45)\>\"", 
     ",", " ", "\"\<tan(63)\>\"", ",", " ", "\"\<sin(121)\>\"", ",", " ", 
     "\"\<sin(\[Pi]/3)\>\"", ",", " ", "\"\<sin(\[Pi]/5)\>\"", ",", " ", 
     "\"\<cos(\[Pi]/13)\>\""}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7710582068470354`*^9, 3.771058864236945*^9}, {
   3.77105889644958*^9, 3.771059060194398*^9}, {3.771059094253581*^9, 
   3.7710591689725113`*^9}, {3.771059213441484*^9, 3.771059436664031*^9}, {
   3.771083696942418*^9, 3.7710837178362527`*^9}, 3.7711012136346254`*^9, {
   3.771103066357688*^9, 3.771103174458703*^9}, {3.7711034741487684`*^9, 
   3.771103548963587*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"82a03de3-0e12-4c59-bb42-528749c4d97e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"calcQspcalc", "=", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Evaluate f(x)=3-5x-2\!\(\*SuperscriptBox[\(x\), \(2\)]\) for the \
below values: f(0), f(x+h), f(6-t)\>\"", ",", " ", 
      "\"\<Compute  the difrence quotient for the given function\>\"", ",", 
      "  ", "\"\<Find the domain of (\!\(\*SuperscriptBox[\(w\), \
\(3\)]\)-3w+1)/(12 w-7)\>\"", ",", 
      "\"\<Find the inverse of f (x) = 6x +15\>\"", ",", " ", 
      "\"\<Find inverse of W (x) =  (9 \[Minus]11x\!\(\*SuperscriptBox[\()\), \
\(1/5\)]\)\>\"", ",", " ", 
      "\"\<Find the exact value of cos(5 \[Pi]/6) without using a \
calculator\>\"", ",", " ", 
      "\"\<Find the exact value of sin(-4 \[Pi]/3) without using a calculator\
\>\"", ",", " ", "\"\<Solve  4sin (3t ) = 2\>\"", ",", " ", 
      "\"\<Solve 4sin (3t ) = 2 in [0, 4\[Pi]/3], 2cos(x/3) \
+\!\(\*SuperscriptBox[\(2\), \(0.5\)]\) = 0 in [\[Minus]7\[Pi] ,7\[Pi] }\>\"",
       ",", " ", "\"\<Solve 4y sec(7 y) = \[Minus]21y\>\"", ",", " ", 
      "\"\<Solve 3\[Minus]14sin (12t + 7) =13\>\"", ",", " ", 
      "\"\<Solve 3sec(4 \[Minus] 9z) \[Minus] 24 = 0\>\"", ",", " ", 
      "\"\<Sketch the graph of f(x)=\!\(\*SuperscriptBox[\(3\), \(1 + 2  x\)]\
\)\>\"", ",", " ", 
      "\"\<Sketch the graph of h(x)=8+3\!\(\*SuperscriptBox[\(e\), \(2  t - 4\
\)]\)\>\"", ",", "  ", 
      "\"\<Determine ln(\!\(\*SuperscriptBox[\(e\), \(4\)]\))\>\"", ",", " ", 
      "\"\<Combine 2 \!\(\*SubscriptBox[\(log\), \(4\)]\)x +5 \
\!\(\*SubscriptBox[\(log\), \(4\)]\)y - 1/2 \!\(\*SubscriptBox[\(log\), \
\(4\)]\)x\>\"", " ", ",", " ", 
      "\"\<For the function W(x)=ln(1+\!\(\*SuperscriptBox[\(x\), \(4\)]\)) \
and the point x=1, find the secants at point Q and the tangenet line\>\"", 
      ",", " ", 
      "\"\<For the function f(x)=(8-\!\(\*SuperscriptBox[\(x\), \(2\)]\))/(\!\
\(\*SuperscriptBox[\(x\), \(2\)]\)-4), find the values at the below listed \
points and th limit as x aproaches 2\>\"", ",", "  ", ",", " ", 
      "\"\<For the function f(y)= sin(y)/y find the value at the below listed \
points and the limit as y approaches 0\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7710601633187313`*^9, 3.7710602840576377`*^9}, {
   3.7710603739809523`*^9, 3.7710610326160107`*^9}, {3.7710611060732737`*^9, 
   3.771061255410469*^9}, {3.7710613977488184`*^9, 3.771061607861419*^9}, {
   3.7710707202458553`*^9, 3.7710707343529253`*^9}, {3.771083528708667*^9, 
   3.7710835661734114`*^9}, 3.7711012380737867`*^9},
 CellLabel->"In[29]:=",ExpressionUUID->"a376c96d-0f17-43df-a243-6359725f0331"],

Cell[BoxData[
 RowBox[{
  RowBox[{"calcQsderivs", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<For the function f(x)=(8-\!\(\*SuperscriptBox[\(x\), \(2\)]\))/(\!\(\
\*SuperscriptBox[\(x\), \(2\)]\)-4), use L'Hoptial's rule to find the limit \
as x aproaches 2\>\"", ",", "  ", 
     "\"\<For the function (2-(\!\(\*SuperscriptBox[\(t\), \
\(2\)]\)+3\!\(\*SuperscriptBox[\()\), \(1/2\)]\))/(t+1), L'Hoptial's rule to \
find the limit as x approaches -1\>\"", ",", " ", 
     "\"\<Use the definition of the derivative to find the derivative of \
f(x)=6\>\"", ",", " ", 
     "\"\<Use the definition of the derivative to find the derivative of V (t \
) = 3\[Minus]14t\>\"", ",", " ", "\[IndentingNewLine]", " ", 
     "\"\<Use the definition of the derivative to find the derivative of \
z(n)= (n+1)/(n+4)\>\"", ",", "\[IndentingNewLine]", 
     "\"\<Use the chain rule to find the derivative of \
Q(t)=(3\!\(\*SuperscriptBox[\(t\), \(3\)]\)-4\!\(\*SuperscriptBox[\()\), \
\(1/2\)]\)\>\"", ",", " ", 
     "\"\<Use the quotient rule to find the derivative of z(n)= \
(z+1\!\(\*SuperscriptBox[\()\), \(1/2\)]\)/(z+4)\>\"", ",", " ", 
     "\[IndentingNewLine]", 
     "\"\<Find the deriviative of f (x) = 2cos(x) \[Minus] 6sec(x) + 3\>\"", 
     ",", " ", 
     "\"\<Find the deriviative of g (z) =10 tan (z) \[Minus] 2cot (z)\>\"", 
     ",", " ", "\"\<Find the deriviative of  tan (w)sec(w)\>\"", ",", " ", 
     "\"\<Find the deriviative of R(t)=(t+ tan(t))/(1+csc(t))\>\"", ",", " ", 
     "\"\<Find the derivative of f(x)=2\!\(\*SuperscriptBox[\(e\), \
\(x\)]\)-\!\(\*SuperscriptBox[\(8\), \(x\)]\)\>\"", ",", " ", 
     "\"\<Find the derivative of g(t)=4 \!\(\*SubscriptBox[\(log\), \
\(3\)]\)(t)-ln(t)\>\"", ",", " ", 
     "\"\<Find the derivative of 2 cos(x)+arccos(x)\>\"", " ", ",", " ", 
     "\"\<Find the derivative of \!\(\*SuperscriptBox[\(x\), \
\(2\)]\)/\!\(\*SuperscriptBox[\(y\), \(3\)]\)=1\>\"", ",", " ", 
     "\"\<Find extrema of f(x)=12+6\!\(\*SuperscriptBox[\(x\), \
\(2\)]\)-\!\(\*SuperscriptBox[\(x\), \(3\)]\)\>\"", ",", " ", 
     "\"\<Find extrema of g(w)=tan (w)sec(w)\>\"", ",", " ", 
     "\"\<find the taylor expanision of g(w)=tan (w)sec(w) at w=\[Pi]/4\>\"", 
     ",", " ", 
     "\"\<Find the MacLauren Expanision of z(n)= (z+1\!\(\*SuperscriptBox[\()\
\), \(1/2\)]\)/(z+4)\>\"", ",", " ", "\"\<Find the Derivative\>\"", ",", " ", 
     "\"\<What is the Deriviative\>\"", ",", " ", 
     "\"\<Evaluate the derivative\>\"", ",", " ", 
     "\"\<Integral of ln(x) dx\>\"", ",", " ", 
     "\"\<Integral of f(x)=x ln(x) from 0 to 10\>\"", ",", " ", 
     "\"\<Integral of tan(x)\>\"", ",", " ", 
     "\"\<Integral of (1+x\!\(\*SuperscriptBox[\()\), \(1/2\)]\)\>\""}], 
    "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7710613709186153`*^9, 3.771061384907164*^9}, {
   3.7710616124774094`*^9, 3.7710616655644417`*^9}, {3.7710617100829606`*^9, 
   3.7710618108407326`*^9}, {3.771061850599373*^9, 3.7710619681588216`*^9}, {
   3.771062006314955*^9, 3.7710621511121435`*^9}, {3.771062535101706*^9, 
   3.7710626530990715`*^9}, {3.771062685514902*^9, 3.771062905169672*^9}, {
   3.771083128947034*^9, 3.7710831451490726`*^9}, 3.7710834388275137`*^9, {
   3.771083811256686*^9, 3.7710838448272*^9}, 3.771101228641127*^9, {
   3.771103378443286*^9, 3.771103451873962*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"222a3863-676a-4a91-8ed5-bf086815e19f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"calcQsIntegral", "=", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Find \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) \
\[Minus]18\!\(\*SuperscriptBox[\(x\), \(2\)]\) + 7 dx\>\"", ",", " ", 
      "\"\<Find \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) dx \
\[Minus]18x + 7\>\"", ",", " ", 
      "\"\<Evaluate \[Integral]z^6 + 4z^4 \[Minus] z^2 dz\>\"", " ", ",", 
      "\"\<Determine f (x) given that f'(x) = 6x^8 \[Minus] 20x^4 + x^2 + 9\>\
\"", ",", " ", "\"\<Find \[Integral] 2cos (w) \[Minus] sec(w) tan (w)dw\>\"", 
      ",", " ", 
      "\"\<Find \[Integral]12 + csc(\[Theta] ) [sin (\[Theta] ) + \
csc(\[Theta] )] d\[Theta]\>\"", ",", "\[IndentingNewLine]", 
      "\"\<What is \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) \
\[Minus]18\!\(\*SuperscriptBox[\(x\), \(2\)]\) + 7 dx\>\"", ",", " ", 
      "\"\<Find \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) dx \
\[Minus]18x + 7\>\"", ",", "\[IndentingNewLine]", 
      "\"\<What is the integral of sin(2x)?\>\"", ",", " ", 
      "\"\<Find the area under the curve of |x| from -1 to 1\>\"", ",", " ", 
      "\"\<What is the area under the curve \!\(\*SuperscriptBox[\(sin\), \(2\
\)]\)x from 0 to \[Pi]/2\>\"", ",", " ", "\"\<Find the integral\>\"", ",", 
      " ", "\"\<What is the integral of x dx\>\"", ",", " ", 
      "\"\<Derivative of f(x)=\!\(\*SuperscriptBox[\(x\), \(2\)]\)\>\"", ",", 
      " ", "\"\<Integral of x dx\>\"", ",", " ", 
      "\"\<Integral of \!\(\*SuperscriptBox[\(e\), \(y\)]\) dy\>\"", ",", 
      " ", "\"\<Derivative of \!\(\*SuperscriptBox[\(x\), \(3\)]\)\>\"", ",", 
      " ", "\"\<Derivative of x\>\"", ",", " ", 
      "\"\<Derivative of f(x)=20 ln(x)\>\"", ",", " ", 
      "\"\<Derivative of x/(x+1\!\(\*SuperscriptBox[\()\), \(2\)]\)\>\"", ",",
       " ", "\"\<Derivative of \!\(\*SuperscriptBox[\(x\), \(n\)]\)\>\"", ",",
       " ", "\"\<Derivative with respect to x\>\"", ",", " ", 
      "\"\<Derivative of \!\(\*SuperscriptBox[\(x\), \(3\)]\)\>\""}], "}"}]}],
    ";"}], " "}]], "Input",
 CellChangeTimes->{{3.7710629557064366`*^9, 3.771063175011337*^9}, {
  3.7710705208432536`*^9, 3.7710706472117586`*^9}, {3.771083157663864*^9, 
  3.7710831939580765`*^9}, {3.771083409161805*^9, 3.7710834215095205`*^9}, {
  3.7710838521801443`*^9, 3.771083899380905*^9}, {3.77108395416064*^9, 
  3.7710839612743645`*^9}, {3.7710840024611387`*^9, 3.7710840037268524`*^9}, {
  3.7710893022644253`*^9, 3.7710893039790277`*^9}, {3.771100980753831*^9, 
  3.771101027715567*^9}, {3.7711029731478615`*^9, 3.771103032713256*^9}, {
  3.771104068418116*^9, 3.7711041148737974`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"82bd9a2c-9f48-402b-90c8-7cb9d90eee9e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"calcQs", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"{", 
     RowBox[{
     "calcQspcalc", ",", " ", "calcQsIntegral", ",", " ", "calcQsderivs"}], 
     "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771063178168848*^9, 3.771063202032632*^9}, {
   3.7710832208648396`*^9, 3.7710832477843122`*^9}, 3.7711030484073133`*^9},
 CellLabel->"In[32]:=",ExpressionUUID->"9c835307-f52b-4c42-8b0e-c58da6c73503"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7710883122777357`*^9, 3.7710883204823074`*^9}, {
  3.771088420900962*^9, 3.771088426201332*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"d1ec6521-5d52-4665-927a-fa1d165f502a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"wpgRadicals", "=", 
  RowBox[{"StringSplit", "[", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\WolframProblemGenerator-RadicalSummaryQuizKey.pdf\>\"", 
     ",", " ", "\"\<Plaintext\>\""}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771111588474285*^9, 3.7711116748720884`*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"aff1fa3c-eaf9-4363-9bcf-c308940a4237"],

Cell[BoxData[
 TemplateBox[{
  "Import","general",
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Could not find the start of the cross \
reference table\\\\\\\"\\\"}]\\)\"",2,34,7,15901289433497050326,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771172537026681*^9},
 CellLabel->
  "During evaluation of \
In[34]:=",ExpressionUUID->"df434b43-5369-460d-9584-2e06b59de882"],

Cell[BoxData[
 TemplateBox[{
  "Import","general",
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Expected cross reference \
table\\\\\\\"\\\"}]\\)\"",2,34,8,15901289433497050326,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7711725370797195`*^9},
 CellLabel->
  "During evaluation of \
In[34]:=",ExpressionUUID->"95aad122-8555-4e9a-89d5-ef8db1e000c6"],

Cell[BoxData[
 TemplateBox[{
  "Import","general",
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Could not find the start of the cross \
reference table\\\\\\\"\\\"}]\\)\"",2,34,9,15901289433497050326,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771172537089727*^9},
 CellLabel->
  "During evaluation of \
In[34]:=",ExpressionUUID->"fecc00b5-ab0a-4149-91c5-1cefcb95e3df"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Import\\\", \\\"::\\\", \
\\\"general\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"",2,34,10,15901289433497050326,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7711725371027346`*^9},
 CellLabel->
  "During evaluation of \
In[34]:=",ExpressionUUID->"8db3b701-7278-41a7-944e-b14dfe7307f5"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.771172537111741*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"a6891448-8dcd-4d15-9a97-78e2d78f6c99"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["wpgRadicals"], "Input",
 CellChangeTimes->{{3.77111168491525*^9, 3.771111689080016*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"92ef74ea-3f9f-40e0-96ef-8699243bb53a"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.771172537149769*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"cfea49ad-eac0-4c68-87b4-87c387c9c4d1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"algebra2set", "=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{
      "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\algebra_2_set.pdf\>\"", ",", " ", "\"\<Plaintext\>\""}], 
      "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<.)\>\"", ",", " ", "\"\<\\n\>\""}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"algebra2set", "[", 
  RowBox[{"[", 
   RowBox[{"2", ";;", "20", ";;", "7"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.7711120076672792`*^9, 3.7711120625554457`*^9}, {
   3.7711121558516006`*^9, 3.771112156475644*^9}, {3.7711123345075665`*^9, 
   3.7711123519011602`*^9}, {3.7711124575278187`*^9, 
   3.7711125792356033`*^9}, {3.7711129500643063`*^9, 
   3.7711129744580154`*^9}, {3.7711135154660063`*^9, 3.771113528502914*^9}, {
   3.7711135747654824`*^9, 3.7711136239169626`*^9}, {3.7711136598725877`*^9, 
   3.7711136673051133`*^9}, {3.7711138005283823`*^9, 3.771113882444995*^9}, {
   3.771113923861324*^9, 3.7711139967667465`*^9}, 3.7711140366803074`*^9, {
   3.771115247995644*^9, 3.771115290794779*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"75320f2e-dcf8-44e4-a6d6-2ae166718cea"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"    9 + 3x + 7x = 39  \\r\"\>", 
   ",", "\<\"    - 6 + x + x = 14  \\r\"\>", 
   ",", "\<\"    - 5x + 7 + 6x = 18  \\r\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7711725375370455`*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"6d388369-7338-49ec-9ad2-dbd9c9293050"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"algebra2Qs", ",", " ", 
    RowBox[{"algebra2set", "\[LeftDoubleBracket]", 
     RowBox[{"2", ";;", 
      RowBox[{"-", "1"}], ";;", "7"}], "\[RightDoubleBracket]"}]}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7711153238971057`*^9, 3.7711153701043634`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"4d882cf2-cadf-422e-aa45-f2e75454a042"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra2Qs", "=", 
   RowBox[{"Flatten", "[", "algebra2Qs", "]"}]}], ";", " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Algebra", " ", "2", " ", "eats", " ", "eaverything", " ", "now"}], ",", 
    " ", 
    RowBox[{"but", " ", "this", " ", "is", " ", "good"}], ",", " ", 
    RowBox[{
    "can", " ", "do", " ", "for", " ", "the", " ", "rest", " ", "of", " ", 
     "the", " ", "types"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.771112075136426*^9, 3.771112125458478*^9}, {
   3.7711123851826544`*^9, 3.7711124082559347`*^9}, {3.7711140417686634`*^9, 
   3.7711140462529755`*^9}, 3.7711140840312815`*^9, {3.7711141663660173`*^9, 
   3.7711141784225335`*^9}, {3.7711142415860786`*^9, 3.7711142709325714`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"c682d2c2-cecf-4416-9beb-d00d0da3e4f3"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7711121110671053`*^9, 3.771112115205637*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"568cbba2-205d-43c3-b6bd-e23a73e39cba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1set", ":=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{
      "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\algebra_1_set.pdf\>\"", ",", " ", "\"\<Plaintext\>\""}], 
      "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<.)\>\"", ",", "  ", "\"\<\\n\>\""}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771114780231673*^9, 3.771114802941305*^9}, {
  3.7711149655562925`*^9, 3.771115000928453*^9}, {3.7711150811480117`*^9, 
  3.771115086204361*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"b11e39b9-7017-44bc-a385-0b07d552a794"],

Cell[BoxData[
 RowBox[{
  RowBox[{"settoappend", "=", 
   RowBox[{"algebra1set", "\[LeftDoubleBracket]", 
    RowBox[{"2", ";;", 
     RowBox[{"-", "1"}], ";;", "7"}], "\[RightDoubleBracket]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7711148118338814`*^9, 3.771114908463847*^9}, {
  3.7711150974731426`*^9, 3.7711151965200577`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"f2914d32-3898-4e48-bf07-c89efc28a175"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"algebra1Questions", ",", " ", "settoappend"}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771115205960713*^9, 3.771115225430067*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"45bf30fe-2ff2-417c-b0d5-9bcaed87df8f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1Questions", "=", 
   RowBox[{"Flatten", "[", "algebra1Questions", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7711152299584055`*^9, 3.77111523891906*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"cf4f547c-9e66-4b6e-b324-93cb9ff9ea9f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"algebra1Questions", ",", " ", 
    RowBox[{"StringSplit", "[", 
     RowBox[{
      RowBox[{"Import", "[", 
       RowBox[{
       "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\Addition Question Generator.pdf\>\"", ",", " ", 
        "\"\<Plaintext\>\""}], "]"}], ",", " ", "\"\<\\n\>\""}], "]"}]}], 
   "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.771149045287571*^9, 3.771149110757823*^9}, {
  3.771151025984123*^9, 3.7711510342007504`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"102780d6-70d9-4d69-b9aa-dab665404545"],

Cell[BoxData[
 RowBox[{
  RowBox[{"algebra1Questions", "=", 
   RowBox[{"Flatten", "[", "algebra1Questions", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771149127407035*^9, 3.771149145932294*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"796a2e9c-8057-4199-a61d-18737ea5c77f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"algebra1Questions", "=", 
  RowBox[{"Select", "[", 
   RowBox[{"algebra1Questions", ",", " ", 
    RowBox[{
     RowBox[{"UnsameQ", "[", 
      RowBox[{"#", ",", 
       RowBox[{"{", "}"}]}], "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771149200951104*^9, 3.771149240069831*^9}, 
   3.771173306999384*^9},
 CellLabel->
  "In[135]:=",ExpressionUUID->"5e97059b-605d-41af-bf6a-9add47d91f50"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"What is the absolute value of -1?\"\>", 
   ",", "\<\"What is |1|\"\>", ",", "\<\"What is |-30|\"\>", 
   ",", "\<\"Combine like terms of 3a-6a+10a-a\"\>", 
   ",", "\<\"Combine the like terms of 5x-10y+6z-3x\"\>", 
   ",", "\<\"Combine like terms of 3n-5\\!\\(\\*SuperscriptBox[\\(n\\), \
\\(\\(2\\)\\(\\\\ \\)\\)]\\)+6n-10+2\\!\\(\\*SuperscriptBox[\\(n\\), \\(2\\)]\
\\)\"\>", ",", "\<\"5(2x+4)\"\>", 
   ",", "\<\"-3(\\!\\(\\*SuperscriptBox[\\(x\\), \\(2\\)]\\)-2x+7)\"\>", 
   ",", "\<\"-(5\\!\\(\\*SuperscriptBox[\\(x\\), \\(4\\)]\\)-8)\"\>", 
   ",", "\<\"express 3 2/7 as an improper fraction\"\>", 
   ",", "\<\"express 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"Express 42/5 as a mixed number\"\>", 
   ",", "\<\"Express 53/9 as a mixed number\"\>", 
   ",", "\<\"write 3/18 in simplest form\"\>", ",", 
   RowBox[{"\<\"What is 3 2/7 as an improper fraction\"\>", 
    " ", "\<\"write 42/54 in simplest form\"\>"}], 
   ",", "\<\"What is 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"What is 42/5 as a mixed number\"\>", 
   ",", "\<\"What is 53/9 as a mixed number\"\>", 
   ",", "\<\"What is 3/18 in simplest form\"\>", 
   ",", "\<\"What is 42/54 in simplest form\"\>", 
   ",", "\<\"Evaluate \\!\\(\\*SuperscriptBox[\\(a\\), \
\\(2\\)]\\)-\\!\\(\\*SuperscriptBox[\\(b\\), \\(2\\)]\\) when a=5 and \
b=3\"\>", 
   ",", "\<\"Evaluate a-\\!\\(\\*SuperscriptBox[\\(b\\), \\(2\\)]\\) when a=4 \
and b=2\"\>", 
   ",", "\<\"Evaluate \\!\\(\\*SuperscriptBox[\\(a\\), \\(2\\)]\\)+b when a=7 \
and b=1\"\>", ",", "\<\"What is 2+2\"\>", ",", "\<\"2+3\"\>", 
   ",", "\<\"What is 2+3\"\>", ",", "\<\"What is 1+1\"\>", 
   ",", "\<\"What is 20+22\"\>", ",", "\<\"What is 1+15+21\"\>", 
   ",", "\<\"What is 33+5+8\"\>", 
   ",", "\<\"Simplify (2-5\\!\\(\\*SuperscriptBox[\\()\\), \\(2\\)]\\)\"\>", 
   ",", "\<\"Simplify 2-\\!\\(\\*SuperscriptBox[\\(5\\), \\(2\\)]\\)\"\>", 
   ",", "\<\"Simplify 10-7+1\"\>", ",", "\<\"Simplify 10-(7+1)\"\>", 
   ",", "\<\"Simplify 24/(4-2\\!\\(\\*SuperscriptBox[\\()\\), \
\\(3\\)]\\)\"\>", 
   ",", "\<\"Simplify 4+5(1+12/6\\!\\(\\*SuperscriptBox[\\()\\), \
\\(2\\)]\\)\"\>", ",", "\<\"Simplify (15-3)/(1+5)\"\>", ",", "\<\"1+12\"\>", 
   ",", "\<\"10% of 11\"\>", ",", "\<\"30+40\"\>", ",", "\<\"15+12\"\>", 
   ",", "\<\"20% of 33\"\>", ",", "\<\"11+12\"\>", 
   ",", "\<\"What is 5% of 100?\"\>", ",", "\<\"8x-2=22\"\>", 
   ",", "\<\"-x-2=12\"\>", ",", "\<\"2/3 x+3 =15\"\>", 
   ",", "\<\"Multiply 24/3 and 27/8\"\>", ",", "\<\"Multiply 8 and 3/24\"\>", 
   ",", "\<\"Add 1/2 and 1/3\"\>", ",", "\<\"What is  24/3 * 27/8\"\>", 
   ",", "\<\"What is  8 * 3/24\"\>", ",", "\<\"What is  1/2 + 1/3\"\>", 
   ",", "\<\"A $750 watch is on sale for 15% off. Find the sale price.\"\>", 
   ",", "\<\"A salesman tells you that the $140 earrings are already marked \
20% off. What\\nwas the original price?\"\>", 
   ",", "\<\"Tommy\[CloseCurlyQuote]s grandma gave him a $50 gift card to \
Toys R Us for his birthday.\\nSales tax is currently 9%. Determine the price \
of the most expensive toy Tommy can buy with\\nthe $50 gift card.\"\>", 
   ",", "\<\"A salesman is paid a monthly salary of $2,300 plus 7% commission \
on his monthly sales.\\nDetermine the amount of sales required for his total \
monthly income to be $3,000.\"\>", ",", "\<\"What is 10% of 100\"\>", 
   ",", "\<\"What is 4% of 16?\"\>", ",", "\<\"200% of 3\"\>", 
   ",", "\<\"What is 45+300+4\"\>", ",", "\<\"30+30\"\>", 
   ",", "\<\"90+200\"\>", ",", "\<\"1+5\"\>", ",", "\<\"34+1\"\>", 
   ",", "\<\"10% of 11\"\>", ",", "\<\"5% of 112\"\>", ",", "\<\"41+2\"\>", 
   ",", "\<\"What is 3-(-2)?\"\>", ",", "\<\"What is -3+4\"\>", 
   ",", "\<\"    x / - 5 = - 3  \\r\"\>", ",", "\<\"    x / 6 = 5  \\r\"\>", 
   ",", "\<\"    x + 4 = 16  \\r\"\>", ",", "\<\"    x + 6 = 8  \\r\"\>", 
   ",", "\<\"    x + 9 = 13  \\r\"\>", ",", "\<\"    2 = x - 3  \\r\"\>", 
   ",", "\<\"    x - 1 = - 10  \\r\"\>", ",", "\<\"    x + 4 = - 4  \\r\"\>", 
   ",", "\<\"9\"\>", ",", "\<\"10\"\>", ",", "\<\"11\"\>", ",", "\<\"12\"\>", 
   ",", "\<\"13\"\>", ",", "\<\"14\"\>", ",", "\<\"15\"\>", ",", "\<\"16\"\>",
    ",", "\<\"\\r\"\>", ",", "\<\"    - 7 + x = 2  \\r\"\>", 
   ",", "\<\"    x / 3 = 3  \\r\"\>", ",", "\<\"    13 = x + 1  \\r\"\>", 
   ",", "\<\"    x + 8 = 12  \\r\"\>", ",", "\<\"    x + 6 = 6  \\r\"\>", 
   ",", "\<\"    4x = - 44  \\r\"\>", ",", "\<\"    x / 4 = 7  \\r\"\>", 
   ",", "\<\"    x + 8 = 3  \\r\"\>", ",", "\<\"63\"\>", ",", "\<\"64\"\>", 
   ",", "\<\"65\"\>", ",", "\<\"66\"\>", ",", "\<\"67\"\>", ",", "\<\"68\"\>",
    ",", "\<\"69\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"    x + 4 = - 6  \\r\"\>", ",", "\<\"    - 9 + x = - 5  \\r\"\>",
    ",", "\<\"    6x = - 48  \\r\"\>", ",", "\<\"    15 = x + 4  \\r\"\>", 
   ",", "\<\"    11 = x + 10  \\r\"\>", ",", "\<\"    x - 2 = - 8  \\r\"\>", 
   ",", "\<\"    10 + x = 1  \\r\"\>", ",", "\<\"116\"\>", ",", "\<\"117\"\>",
    ",", "\<\"118\"\>", ",", "\<\"119\"\>", ",", "\<\"120\"\>", 
   ",", "\<\"121\"\>", ",", "\<\"122\"\>", ",", "\<\"123\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"    7x = 0  \\r\"\>", 
   ",", "\<\"    7 + x = 13  \\r\"\>", ",", "\<\"    - 3 = x + 2  \\r\"\>", 
   ",", "\<\"    x / 6 = 6  \\r\"\>", ",", "\<\"    x / - 2 = 1  \\r\"\>", 
   ",", "\<\"    x + 2 = 3  \\r\"\>", ",", "\<\"    x / 7 = 2  \\r\"\>", 
   ",", "\<\"    3 = x + 3  \\r\"\>", ",", "\<\"    x + 2 = - 8  \\r\"\>", 
   ",", "\<\"    x + 5 = -1  \\r\"\>", ",", "\<\"    x + 7 = 13  \\r\"\>", 
   ",", "\<\"    -1 + x = -1  \\r\"\>", ",", "\<\"    12 = x + 7  \\r\"\>", 
   ",", "\<\"    x + 8 = 14  \\r\"\>", ",", "\<\"186\"\>", ",", "\<\"187\"\>",
    ",", "\<\"188\"\>", ",", "\<\"189\"\>", ",", "\<\"190\"\>", 
   ",", "\<\"191\"\>", ",", "\<\"192\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"    x + 2 = 8  \\r\"\>", ",", "\<\"    x + 7 = 18  \\r\"\>", 
   ",", "\<\"    x + 9 = 2  \\r\"\>", ",", "\<\"    - 5x = - 10  \\r\"\>", 
   ",", "\<\"    x - 4 = 0  \\r\"\>", ",", "\<\"    x - 2 = 3  \\r\"\>", 
   ",", "\<\"    - 9 + x = - 7  \\r\"\>", ",", "\<\"239\"\>", 
   ",", "\<\"240\"\>", ",", "\<\"241\"\>", ",", "\<\"242\"\>", 
   ",", "\<\"243\"\>", ",", "\<\"244\"\>", ",", "\<\"245\"\>", 
   ",", "\<\"246\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"    x + 10 = 12  \\r\"\>", ",", "\<\"    7 + x = 13  \\r\"\>", 
   ",", "\<\"    2x = 2  \\r\"\>", ",", "\<\"    - 3 = x - 4  \\r\"\>", 
   ",", "\<\"    - 10 + x = 1  \\r\"\>", ",", "\<\"    18 = x + 8  \\r\"\>", 
   ",", "\<\"    5 + x = 12  \\r\"\>", ",", "\<\"    x - 5 = 7  \\r\"\>", 
   ",", "\<\"293\"\>", ",", "\<\"294\"\>", ",", "\<\"295\"\>", 
   ",", "\<\"296\"\>", ",", "\<\"297\"\>", ",", "\<\"298\"\>", 
   ",", "\<\"299\"\>", ",", "\<\"300\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"    4x - 8 = 8  \\r\"\>", ",", "\<\"    5x + 5 = 10  \\r\"\>", 
   ",", "\<\"    - 4x + 9 = - 27  \\r\"\>", 
   ",", "\<\"    10 + 5x = 10  \\r\"\>", 
   ",", "\<\"    6x - 3 = - 75  \\r\"\>", ",", "\<\"    8 + 2x = 14  \\r\"\>",
    ",", "\<\"    4x + 7 = 15  \\r\"\>", ",", "\<\"362\"\>", 
   ",", "\<\"363\"\>", ",", "\<\"364\"\>", ",", "\<\"365\"\>", 
   ",", "\<\"366\"\>", ",", "\<\"367\"\>", ",", "\<\"368\"\>", 
   ",", "\<\"369\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"    10 + 5x = 60  \\r\"\>", 
   ",", "\<\"    - 5x - 2 = - 27  \\r\"\>", 
   ",", "\<\"    6x - 5 = 67  \\r\"\>", 
   ",", "\<\"    - 7x - 5 = - 26  \\r\"\>", 
   ",", "\<\"    7 - 7x = 63  \\r\"\>", ",", "\<\"    7x + 6 = - 78  \\r\"\>",
    ",", "\<\"    - 8 - 7x = 62  \\r\"\>", 
   ",", "\<\"    5x + 9 = -1  \\r\"\>", ",", "\<\"416\"\>", 
   ",", "\<\"417\"\>", ",", "\<\"418\"\>", ",", "\<\"419\"\>", 
   ",", "\<\"420\"\>", ",", "\<\"421\"\>", ",", "\<\"422\"\>", 
   ",", "\<\"423\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"    5x - 9 = - 19  \\r\"\>", 
   ",", "\<\"    5x + 7 = - 33  \\r\"\>", ",", "\<\"    6x + 7 = 25  \\r\"\>",
    ",", "\<\"    3x - 6 = - 6  \\r\"\>", ",", "\<\"    4 + 6x = 16  \\r\"\>",
    ",", "\<\"    - 5 + 7x = 79  \\r\"\>", 
   ",", "\<\"    - 5x + 8 = 28  \\r\"\>", ",", "\<\"    2x - 7 = 13  \\r\"\>",
    ",", "\<\"470\"\>", ",", "\<\"471\"\>", ",", "\<\"472\"\>", 
   ",", "\<\"473\"\>", ",", "\<\"474\"\>", ",", "\<\"475\"\>", 
   ",", "\<\"476\"\>", ",", "\<\"\\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"    2x + 8 = 10  \\r\"\>", 
   ",", "\<\"    3 - 3x = - 30  \\r\"\>", 
   ",", "\<\"    - 8 - 5x = 17  \\r\"\>", 
   ",", "\<\"    2x + 5 = - 7  \\r\"\>", 
   ",", "\<\"    3 + 4x = - 45  \\r\"\>", ",", "\<\"    3x + 7 = 25  \\r\"\>",
    ",", "\<\"    - 5x + 5 = 25  \\r\"\>", ",", "\<\"537\"\>", 
   ",", "\<\"538\"\>", ",", "\<\"539\"\>", ",", "\<\"540\"\>", 
   ",", "\<\"541\"\>", ",", "\<\"542\"\>", ",", "\<\"543\"\>", 
   ",", "\<\"    9 - 3x = - 21  \\r\"\>", ",", "\<\"    4x - 9 = 19  \\r\"\>",
    ",", "\<\"    6x + 1 = 61  \\r\"\>", 
   ",", "\<\"    - 2x + 8 = 32  \\r\"\>", 
   ",", "\<\"    10 + 3x = 10  \\r\"\>", 
   ",", "\<\"    2 - 2x = - 22  \\r\"\>", ",", "\<\"    8 + 5x = 48  \\r\"\>",
    ",", "\<\"587\"\>", ",", "\<\"588\"\>", ",", "\<\"589\"\>", 
   ",", "\<\"590\"\>", ",", "\<\"591\"\>", ",", "\<\"592\"\>", 
   ",", "\<\"593\"\>", ",", "\<\"4272 + 1001 \\r\"\>", 
   ",", "\<\"1570 + 5887 \\r\"\>", ",", "\<\"8378 + 2232 \\r\"\>", 
   ",", "\<\"6719 + 9083 \\r\"\>", ",", "\<\"7796 + 7881 \\r\"\>", 
   ",", "\<\"7333 + 2722 \\r\"\>", ",", "\<\"6529 + 4391 \\r\"\>", 
   ",", "\<\"1521 + 2554 \\r\"\>", ",", "\<\"8168 + 4402 \\r\"\>", 
   ",", "\<\"5750 + 9568 \\r\"\>", ",", "\<\"9525 + 2244 \\r\"\>", 
   ",", "\<\"3160 + 1245 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"9577 + 7198 \\r\"\>", ",", "\<\"9600 + 7472 \\r\"\>", 
   ",", "\<\"4781 + 7748 \\r\"\>", ",", "\<\"2005 + 8361 \\r\"\>", 
   ",", "\<\"2143 + 8202 \\r\"\>", ",", "\<\"1723 + 5702 \\r\"\>", 
   ",", "\<\"2729 + 6856 \\r\"\>", ",", "\<\"8118 + 4430 \\r\"\>", 
   ",", "\<\"7438 + 3315 \\r\"\>", ",", "\<\"1632 + 9300 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"5074 + 7065 \\r\"\>", 
   ",", "\<\"7949 + 9040 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"9361 + 9434 \\r\"\>", ",", "\<\"2590 + 3048 \\r\"\>", 
   ",", "\<\"5035 + 9586 \\r\"\>", ",", "\<\"2587 + 4970 \\r\"\>", 
   ",", "\<\"1726 + 9260 \\r\"\>", ",", "\<\"9503 + 3152 \\r\"\>", 
   ",", "\<\"3434 + 9380 \\r\"\>", ",", "\<\"9857 + 3068 \\r\"\>", 
   ",", "\<\"4027 + 2502 \\r\"\>", ",", "\<\"1329 + 9063 \\r\"\>", 
   ",", "\<\"7272 + 6191 \\r\"\>", ",", "\<\"8074 + 7521 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"1113 + 3615 \\r\"\>", 
   ",", "\<\"6987 + 5576 \\r\"\>", ",", "\<\"5571 + 3857 \\r\"\>", 
   ",", "\<\"2940 + 6608 \\r\"\>", ",", "\<\"2267 + 6108 \\r\"\>", 
   ",", "\<\"7900 + 6469 \\r\"\>", ",", "\<\"2219 + 2574 \\r\"\>", 
   ",", "\<\"2433 + 5845 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"7946 + 9908 \\r\"\>", ",", "\<\"8088 + 7921 \\r\"\>", 
   ",", "\<\"3661 + 5756 \\r\"\>", ",", "\<\"6213 + 8955 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"5610 + 6137 \\r\"\>", 
   ",", "\<\"9618 + 8587 \\r\"\>", ",", "\<\"3523 + 8800 \\r\"\>", 
   ",", "\<\"2420 + 4220 \\r\"\>", ",", "\<\"8880 + 2001 \\r\"\>", 
   ",", "\<\"6379 + 2448 \\r\"\>", ",", "\<\"1816 + 6956 \\r\"\>", 
   ",", "\<\"6178 + 2038 \\r\"\>", ",", "\<\"2648 + 2854 \\r\"\>", 
   ",", "\<\"4832 + 1852 \\r\"\>", ",", "\<\"7143 + 8177 \\r\"\>", 
   ",", "\<\"7524 + 7480 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"4662 + 2032 \\r\"\>", ",", "\<\"9927 + 9121 \\r\"\>", 
   ",", "\<\"6639 + 6370 \\r\"\>", ",", "\<\"8327 + 6129 \\r\"\>", 
   ",", "\<\"2757 + 2994 \\r\"\>", ",", "\<\"3782 + 1330 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"6618 + 9094 \\r\"\>", 
   ",", "\<\"2259 + 6033 \\r\"\>", ",", "\<\"3018 + 2248 \\r\"\>", 
   ",", "\<\"9532 + 5499 \\r\"\>", ",", "\<\"9320 + 6116 \\r\"\>", 
   ",", "\<\"7748 + 4445 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"9422 + 5414 \\r\"\>", ",", "\<\"9827 + 8472 \\r\"\>", 
   ",", "\<\"8158 + 7658 \\r\"\>", ",", "\<\"1721 + 5812 \\r\"\>", 
   ",", "\<\"3850 + 4435 \\r\"\>", ",", "\<\"7280 + 3811 \\r\"\>", 
   ",", "\<\"3109 + 7046 \\r\"\>", ",", "\<\"7067 + 9862 \\r\"\>", 
   ",", "\<\"4116 + 6636 \\r\"\>", ",", "\<\"7250 + 7530 \\r\"\>", 
   ",", "\<\"4154 + 9932 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"3928 + 9719 \\r\"\>", ",", "\<\"7948 + 9978 \\r\"\>", 
   ",", "\<\"4741 + 6938 \\r\"\>", ",", "\<\"4609 + 2756 \\r\"\>", 
   ",", "\<\"7498 + 1176 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"2968 + 7604 \\r\"\>", ",", "\<\"3979 + 4765 \\r\"\>", 
   ",", "\<\"5465 + 9956 \\r\"\>", ",", "\<\"2551 + 8585 \\r\"\>", 
   ",", "\<\"8088 + 3140 \\r\"\>", ",", "\<\"5282 + 9116 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"8119 + 9714 \\r\"\>", 
   ",", "\<\"1664 + 8135 \\r\"\>", ",", "\<\"2751 + 4607 \\r\"\>", 
   ",", "\<\"3880 + 6919 \\r\"\>", ",", "\<\"2829 + 1933 \\r\"\>", 
   ",", "\<\"7988 + 5800 \\r\"\>", ",", "\<\"9964 + 6451 \\r\"\>", 
   ",", "\<\"8932 + 7141 \\r\"\>", ",", "\<\"8544 + 3707 \\r\"\>", 
   ",", "\<\"4910 + 8680 \\r\"\>", ",", "\<\"4064 + 9078 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"3147 + 6538 \\r\"\>", 
   ",", "\<\"6703 + 2453 \\r\"\>", ",", "\<\"1313 + 3009 \\r\"\>", 
   ",", "\<\"5840 + 1828 \\r\"\>", ",", "\<\"8011 + 9651 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"5361 + 5519 \\r\"\>", 
   ",", "\<\"6669 + 6330 \\r\"\>", ",", "\<\"4419 + 1814 \\r\"\>", 
   ",", "\<\"8784 + 3944 \\r\"\>", ",", "\<\"4292 + 9179 \\r\"\>", 
   ",", "\<\"9474 + 9705 \\r\"\>", ",", "\<\"6963 + 4488 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"6174 + 2651 \\r\"\>", 
   ",", "\<\"2390 + 5199 \\r\"\>", ",", "\<\"5396 + 5061 \\r\"\>", 
   ",", "\<\"4261 + 8473 \\r\"\>", ",", "\<\"9681 + 2776 \\r\"\>", 
   ",", "\<\"4880 + 1099 \\r\"\>", ",", "\<\"9514 + 3323 \\r\"\>", 
   ",", "\<\"4447 + 4604 \\r\"\>", ",", "\<\"8826 + 6933 \\r\"\>", 
   ",", "\<\"8059 + 1271 \\r\"\>", ",", "\<\"7635 + 7934 \\r\"\>", 
   ",", "\<\"1692 + 5818 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"6842 + 8050 \\r\"\>", ",", "\<\"6710 + 5531 \\r\"\>", 
   ",", "\<\"6682 + 8481 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"5893 + 2493 \\r\"\>", ",", "\<\"7102 + 2281 \\r\"\>", 
   ",", "\<\"1383 + 3834 \\r\"\>", ",", "\<\"7379 + 6677 \\r\"\>", 
   ",", "\<\"5626 + 9732 \\r\"\>", ",", "\<\"5642 + 6535 \\r\"\>", 
   ",", "\<\"1985 + 4928 \\r\"\>", ",", "\<\"1400 + 7429 \\r\"\>", 
   ",", "\<\"7665 + 3538 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"3021 + 8010 \\r\"\>", ",", "\<\"6980 + 6177 \\r\"\>", 
   ",", "\<\"4918 + 3236 \\r\"\>", ",", "\<\"5290 + 8994 \\r\"\>", 
   ",", "\<\"5980 + 1855 \\r\"\>", ",", "\<\"8719 + 6369 \\r\"\>", 
   ",", "\<\"1750 + 5035 \\r\"\>", ",", "\<\"7338 + 3228 \\r\"\>", 
   ",", "\<\"1570 + 8699 \\r\"\>", ",", "\<\"7542 + 3349 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"6221 + 2277 \\r\"\>", 
   ",", "\<\"8325 + 1106 \\r\"\>", ",", "\<\"9346 + 8468 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"3825 + 6015 \\r\"\>", 
   ",", "\<\"5219 + 1965 \\r\"\>", ",", "\<\"4731 + 1603 \\r\"\>", 
   ",", "\<\"5571 + 5676 \\r\"\>", ",", "\<\"6997 + 8056 \\r\"\>", 
   ",", "\<\"5465 + 8277 \\r\"\>", ",", "\<\"4189 + 5839 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"5048 + 8140 \\r\"\>", 
   ",", "\<\"1531 + 4977 \\r\"\>", ",", "\<\"1148 + 4232 \\r\"\>", 
   ",", "\<\"2087 + 5640 \\r\"\>", ",", "\<\"5712 + 2107 \\r\"\>", 
   ",", "\<\"1967 + 3600 \\r\"\>", ",", "\<\"6753 + 2906 \\r\"\>", 
   ",", "\<\"7131 + 1009 \\r\"\>", ",", "\<\"6534 + 8733 \\r\"\>", 
   ",", "\<\"7614 + 5986 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"4270 + 9940 \\r\"\>", ",", "\<\"4810 + 7408 \\r\"\>", 
   ",", "\<\"6775 + 7738 \\r\"\>", ",", "\<\"5278 + 2794 \\r\"\>", 
   ",", "\<\"7136 + 8596 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"4420 + 6691 \\r\"\>", ",", "\<\"5745 + 7730 \\r\"\>", 
   ",", "\<\"2943 + 8463 \\r\"\>", ",", "\<\"2697 + 5880 \\r\"\>", 
   ",", "\<\"4764 + 7711 \\r\"\>", ",", "\<\"4896 + 8505 \\r\"\>", 
   ",", "\<\"9300 + 2212 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"8759 + 8868 \\r\"\>", ",", "\<\"5898 + 8735 \\r\"\>", 
   ",", "\<\"6671 + 7814 \\r\"\>", ",", "\<\"8589 + 7764 \\r\"\>", 
   ",", "\<\"5930 + 4357 \\r\"\>", ",", "\<\"2278 + 6186 \\r\"\>", 
   ",", "\<\"3096 + 2460 \\r\"\>", ",", "\<\"9260 + 1150 \\r\"\>", 
   ",", "\<\"7982 + 5589 \\r\"\>", ",", "\<\"3277 + 7411 \\r\"\>", 
   ",", "\<\"3740 + 4179 \\r\"\>", ",", "\<\"2653 + 5175 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"1616 + 5751 \\r\"\>", 
   ",", "\<\"5519 + 6804 \\r\"\>", ",", "\<\"1583 + 6324 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"8192 + 7500 \\r\"\>", 
   ",", "\<\"9043 + 3293 \\r\"\>", ",", "\<\"7430 + 5558 \\r\"\>", 
   ",", "\<\"1630 + 8860 \\r\"\>", ",", "\<\"7459 + 4738 \\r\"\>", 
   ",", "\<\"4096 + 5082 \\r\"\>", ",", "\<\"1930 + 4841 \\r\"\>", 
   ",", "\<\"2815 + 5126 \\r\"\>", ",", "\<\"4731 + 9595 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"0 + 2 \\r\"\>", ",", "\<\"4 + 10 \\r\"\>", 
   ",", "\<\"6 + 2 \\r\"\>", ",", "\<\"2 + 1 \\r\"\>", 
   ",", "\<\"9 + 0 \\r\"\>", ",", "\<\"2 + 9 \\r\"\>", 
   ",", "\<\"9 + 7 \\r\"\>", ",", "\<\"2 + 2 \\r\"\>", 
   ",", "\<\"8 + 10 \\r\"\>", ",", "\<\"8 + 4 \\r\"\>", 
   ",", "\<\"9 + 6 \\r\"\>", ",", "\<\"1 + 0 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"4 + 0 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"0 + 8 \\r\"\>", 
   ",", "\<\"4 + 0 \\r\"\>", ",", "\<\"14 + 4 \\r\"\>", 
   ",", "\<\"10 + 33 \\r\"\>", ",", "\<\"94 + 2 \\r\"\>", 
   ",", "\<\"39 + 10 \\r\"\>", ",", "\<\"3 + 73 \\r\"\>", 
   ",", "\<\"45 + 0 \\r\"\>", ",", "\<\"44 + 5 \\r\"\>", 
   ",", "\<\"4 + 55 \\r\"\>", ",", "\<\"70 + 4 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"10 + 8 \\r\"\>", ",", "\<\"4 + 0 \\r\"\>", 
   ",", "\<\"10 + 0 \\r\"\>", ",", "\<\"5 + 4 \\r\"\>", 
   ",", "\<\"8 + 6 \\r\"\>", ",", "\<\"90 + 8 \\r\"\>", 
   ",", "\<\"44 + 1 \\r\"\>", ",", "\<\"66 + 2 \\r\"\>", 
   ",", "\<\"8 + 44 \\r\"\>", ",", "\<\"68 + 4 \\r\"\>", 
   ",", "\<\"3 + 24 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"47 + 5 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"6 + 4 \\r\"\>", ",", "\<\"3 + 4 \\r\"\>", 
   ",", "\<\"10 + 7 \\r\"\>", ",", "\<\"9 + 10 \\r\"\>", 
   ",", "\<\"2 + 3 \\r\"\>", ",", "\<\"6 + 7 \\r\"\>", 
   ",", "\<\"10 + 10 \\r\"\>", ",", "\<\"5 + 1 \\r\"\>", 
   ",", "\<\"0 + 0 \\r\"\>", ",", "\<\"20 + 3 \\r\"\>", 
   ",", "\<\"28 + 5 \\r\"\>", ",", "\<\"48 + 2 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"10 + 29 \\r\"\>", ",", "\<\"70 + 10 \\r\"\>", 
   ",", "\<\"63 + 0 \\r\"\>", ",", "\<\"4 + 49 \\r\"\>", 
   ",", "\<\"78 + 10 \\r\"\>", ",", "\<\"4 + 76 \\r\"\>", 
   ",", "\<\"50 + 5 \\r\"\>", ",", "\<\"96 + 7 \\r\"\>", 
   ",", "\<\"3 + 90 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"5 + 88 \\r\"\>", 
   ",", "\<\"59 + 10 \\r\"\>", ",", "\<\"41 + 2 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"16 + 6 \\r\"\>", ",", "\<\"2 + 73 \\r\"\>", 
   ",", "\<\"6 + 13 \\r\"\>", ",", "\<\"41 + 9 \\r\"\>", 
   ",", "\<\"2 + 14 \\r\"\>", ",", "\<\"15 + 6 \\r\"\>", 
   ",", "\<\"35 + 7 \\r\"\>", ",", "\<\"1 + 69 \\r\"\>", 
   ",", "\<\"4 + 83 \\r\"\>", ",", "\<\"7 + 90 \\r\"\>", 
   ",", "\<\"4 + 74 \\r\"\>", ",", "\<\"2 + 39 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"2 + 2 \\r\"\>", ",", "\<\"9 + 7 \\r\"\>", 
   ",", "\<\"9 + 11 \\r\"\>", ",", "\<\"3 + 11 \\r\"\>", 
   ",", "\<\"9 + 12 \\r\"\>", ",", "\<\"0 + 86 \\r\"\>", 
   ",", "\<\"22 + 10 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"33 + 4 \\r\"\>", 
   ",", "\<\"9 + 39 \\r\"\>", ",", "\<\"72 + 10 \\r\"\>", 
   ",", "\<\"0 + 95 \\r\"\>", ",", "\<\"6 + 16 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"8 + 0 \\r\"\>", ",", "\<\"4 + 9 \\r\"\>", 
   ",", "\<\"7 + 1 \\r\"\>", ",", "\<\"3 + 10 \\r\"\>", 
   ",", "\<\"0 + 10 \\r\"\>", ",", "\<\"10 + 29 \\r\"\>", 
   ",", "\<\"10 + 78 \\r\"\>", ",", "\<\"3 + 13 \\r\"\>", 
   ",", "\<\"35 + 6 \\r\"\>", ",", "\<\"10 + 1 \\r\"\>", 
   ",", "\<\"96 + 0 \\r\"\>", ",", "\<\"3 + 38 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"1 + 1 \\r\"\>", ",", "\<\"5 + 37 \\r\"\>", 
   ",", "\<\"10 + 69 \\r\"\>", ",", "\<\"47 + 6 \\r\"\>", 
   ",", "\<\"94 + 5 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"10 + 83 \\r\"\>", 
   ",", "\<\"6 + 32 \\r\"\>", ",", "\<\"30 + 1 \\r\"\>", 
   ",", "\<\"44 + 5 \\r\"\>", ",", "\<\"7 + 15 \\r\"\>", 
   ",", "\<\"4 + 60 \\r\"\>", ",", "\<\"1 + 14 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"5 + 69 \\r\"\>", ",", "\<\"25 + 6 \\r\"\>", 
   ",", "\<\"46 + 8 \\r\"\>", ",", "\<\"27 + 6 \\r\"\>", 
   ",", "\<\"78 + 6 \\r\"\>", ",", "\<\"51 + 0 \\r\"\>", 
   ",", "\<\"0 + 15 \\r\"\>", ",", "\<\"7 + 79 \\r\"\>", 
   ",", "\<\"84 + 7 \\r\"\>", ",", "\<\"8 + 47 \\r\"\>", 
   ",", "\<\"46 + 2 \\r\"\>", ",", "\<\"73 + 2 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"96 + 2 \\r\"\>", ",", "\<\"33 + 1 \\r\"\>", 
   ",", "\<\"59 + 1 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"41 + 6 \\r\"\>", 
   ",", "\<\"3 + 28 \\r\"\>", ",", "\<\"57 + 7 \\r\"\>", 
   ",", "\<\"7 + 38 \\r\"\>", ",", "\<\"45 + 8 \\r\"\>", 
   ",", "\<\"1 + 75 \\r\"\>", ",", "\<\"10 + 49 \\r\"\>", 
   ",", "\<\"8 + 95 \\r\"\>", ",", "\<\"2 + 57 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"7 + 21 \\r\"\>", ",", "\<\"63 + 5 \\r\"\>", 
   ",", "\<\"5 + 82 \\r\"\>", ",", "\<\"90 + 9 \\r\"\>", 
   ",", "\<\"55 + 4 \\r\"\>", ",", "\<\"23 + 5 \\r\"\>", 
   ",", "\<\"5 + 86 \\r\"\>", ",", "\<\"4 + 90 \\r\"\>", 
   ",", "\<\"94 + 6 \\r\"\>", ",", "\<\"0 + 98 \\r\"\>", 
   ",", "\<\"7 + 56 \\r\"\>", ",", "\<\"55 + 10 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"1 + 0 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"5 + 0 \\r\"\>", 
   ",", "\<\"10 + 1 \\r\"\>", ",", "\<\"43 + 4 \\r\"\>", 
   ",", "\<\"7 + 11 \\r\"\>", ",", "\<\"8 + 98 \\r\"\>", 
   ",", "\<\"8 + 10 \\r\"\>", ",", "\<\"55 + 9 \\r\"\>", 
   ",", "\<\"8 + 11 \\r\"\>", ",", "\<\"25 + 2 \\r\"\>", 
   ",", "\<\"50 + 9 \\r\"\>", ",", "\<\"10 + 60 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"1 + 4 \\r\"\>", ",", "\<\"3 + 7 \\r\"\>", 
   ",", "\<\"8 + 6 \\r\"\>", ",", "\<\"6 + 5 \\r\"\>", 
   ",", "\<\"2 + 0 \\r\"\>", ",", "\<\"9 + 7 \\r\"\>", 
   ",", "\<\"9 + 5 \\r\"\>", ",", "\<\"10 + 7 \\r\"\>", 
   ",", "\<\"9 + 1 \\r\"\>", ",", "\<\"1 + 9 \\r\"\>", 
   ",", "\<\"4 + 5 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"5 + 2 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"0 + 10 \\r\"\>", ",", "\<\"6 + 0 \\r\"\>", 
   ",", "\<\"10 + 0 \\r\"\>", ",", "\<\"2 + 6 \\r\"\>", 
   ",", "\<\"1 + 73 \\r\"\>", ",", "\<\"70 + 2 \\r\"\>", 
   ",", "\<\"12 + 8 \\r\"\>", ",", "\<\"1 + 17 \\r\"\>", 
   ",", "\<\"32 + 6 \\r\"\>", ",", "\<\"9 + 88 \\r\"\>", 
   ",", "\<\"25 + 2 \\r\"\>", ",", "\<\"6 + 33 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"82 + 10 \\r\"\>", ",", "\<\"9 + 58 \\r\"\>", 
   ",", "\<\"2 + 25 \\r\"\>", ",", "\<\"39 + 8 \\r\"\>", 
   ",", "\<\"3 + 37 \\r\"\>", ",", "\<\"59 + 0 \\r\"\>", 
   ",", "\<\"9 + 29 \\r\"\>", ",", "\<\"1 + 17 \\r\"\>", 
   ",", "\<\"0 + 98 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"76 + 3 \\r\"\>", 
   ",", "\<\"4 + 86 \\r\"\>", ",", "\<\"2 + 68 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"7 + 1 \\r\"\>", ",", "\<\"1 + 2 \\r\"\>", 
   ",", "\<\"10 + 69 \\r\"\>", ",", "\<\"67 + 3 \\r\"\>", 
   ",", "\<\"63 + 10 \\r\"\>", ",", "\<\"90 + 9 \\r\"\>", 
   ",", "\<\"1 + 89 \\r\"\>", ",", "\<\"8 + 76 \\r\"\>", 
   ",", "\<\"71 + 6 \\r\"\>", ",", "\<\"3 + 55 \\r\"\>", 
   ",", "\<\"10 + 75 \\r\"\>", ",", "\<\"58 + 95 \\r\"\>", ",", "\<\"\\r\"\>",
    ",", "\<\"0 + 46 \\r\"\>", ",", "\<\"2 + 85 \\r\"\>", 
   ",", "\<\"70 + 17 \\r\"\>", ",", "\<\"77 + 70 \\r\"\>", 
   ",", "\<\"11 + 14 \\r\"\>", ",", "\<\"16 + 70 \\r\"\>", 
   ",", "\<\"28 + 35 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"96 + 43 \\r\"\>",
    ",", "\<\"50 + 93 \\r\"\>", ",", "\<\"83 + 72 \\r\"\>", 
   ",", "\<\"44 + 85 \\r\"\>", ",", "\<\"18 + 64 \"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7711733077739334`*^9},
 CellLabel->
  "Out[135]=",ExpressionUUID->"7499b6af-5d93-4b2b-8fe4-ba8f7c81fcb7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"algebra1Questions", "=", 
  RowBox[{"Select", "[", 
   RowBox[{"algebra1Questions", ",", " ", 
    RowBox[{
     RowBox[{"UnsameQ", "[", 
      RowBox[{"#", ",", " ", 
       RowBox[{
       "algebra2Qs", "\[LeftDoubleBracket]", "120", 
        "\[RightDoubleBracket]"}]}], "]"}], "&"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"algebra2Qs", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"algebra2Qs", ",", " ", 
     RowBox[{
      RowBox[{"UnsameQ", "[", 
       RowBox[{"#", ",", 
        RowBox[{
        "#", "\[LeftDoubleBracket]", "120", "\[RightDoubleBracket]"}]}], 
       "]"}], "&"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.771149249498541*^9, 3.771149264137679*^9}, {
   3.771172336498789*^9, 3.771172372568425*^9}, {3.771172421430153*^9, 
   3.7711724744308352`*^9}, 3.771173333128971*^9},
 CellLabel->
  "In[136]:=",ExpressionUUID->"0324a2ab-7c9c-448e-bfd9-2ebe1e8fb046"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"What is the absolute value of -1?\"\>", 
   ",", "\<\"What is |1|\"\>", ",", "\<\"What is |-30|\"\>", 
   ",", "\<\"Combine like terms of 3a-6a+10a-a\"\>", 
   ",", "\<\"Combine the like terms of 5x-10y+6z-3x\"\>", 
   ",", "\<\"Combine like terms of 3n-5\\!\\(\\*SuperscriptBox[\\(n\\), \
\\(\\(2\\)\\(\\\\ \\)\\)]\\)+6n-10+2\\!\\(\\*SuperscriptBox[\\(n\\), \\(2\\)]\
\\)\"\>", ",", "\<\"5(2x+4)\"\>", 
   ",", "\<\"-3(\\!\\(\\*SuperscriptBox[\\(x\\), \\(2\\)]\\)-2x+7)\"\>", 
   ",", "\<\"-(5\\!\\(\\*SuperscriptBox[\\(x\\), \\(4\\)]\\)-8)\"\>", 
   ",", "\<\"express 3 2/7 as an improper fraction\"\>", 
   ",", "\<\"express 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"Express 42/5 as a mixed number\"\>", 
   ",", "\<\"Express 53/9 as a mixed number\"\>", 
   ",", "\<\"write 3/18 in simplest form\"\>", ",", 
   RowBox[{"\<\"What is 3 2/7 as an improper fraction\"\>", 
    " ", "\<\"write 42/54 in simplest form\"\>"}], 
   ",", "\<\"What is 12 1/3 as an improper fraction\"\>", 
   ",", "\<\"What is 42/5 as a mixed number\"\>", 
   ",", "\<\"What is 53/9 as a mixed number\"\>", 
   ",", "\<\"What is 3/18 in simplest form\"\>", 
   ",", "\<\"What is 42/54 in simplest form\"\>", 
   ",", "\<\"Evaluate \\!\\(\\*SuperscriptBox[\\(a\\), \
\\(2\\)]\\)-\\!\\(\\*SuperscriptBox[\\(b\\), \\(2\\)]\\) when a=5 and \
b=3\"\>", 
   ",", "\<\"Evaluate a-\\!\\(\\*SuperscriptBox[\\(b\\), \\(2\\)]\\) when a=4 \
and b=2\"\>", 
   ",", "\<\"Evaluate \\!\\(\\*SuperscriptBox[\\(a\\), \\(2\\)]\\)+b when a=7 \
and b=1\"\>", ",", "\<\"What is 2+2\"\>", ",", "\<\"2+3\"\>", 
   ",", "\<\"What is 2+3\"\>", ",", "\<\"What is 1+1\"\>", 
   ",", "\<\"What is 20+22\"\>", ",", "\<\"What is 1+15+21\"\>", 
   ",", "\<\"What is 33+5+8\"\>", 
   ",", "\<\"Simplify (2-5\\!\\(\\*SuperscriptBox[\\()\\), \\(2\\)]\\)\"\>", 
   ",", "\<\"Simplify 2-\\!\\(\\*SuperscriptBox[\\(5\\), \\(2\\)]\\)\"\>", 
   ",", "\<\"Simplify 10-7+1\"\>", ",", "\<\"Simplify 10-(7+1)\"\>", 
   ",", "\<\"Simplify 24/(4-2\\!\\(\\*SuperscriptBox[\\()\\), \
\\(3\\)]\\)\"\>", 
   ",", "\<\"Simplify 4+5(1+12/6\\!\\(\\*SuperscriptBox[\\()\\), \
\\(2\\)]\\)\"\>", ",", "\<\"Simplify (15-3)/(1+5)\"\>", ",", "\<\"1+12\"\>", 
   ",", "\<\"10% of 11\"\>", ",", "\<\"30+40\"\>", ",", "\<\"15+12\"\>", 
   ",", "\<\"20% of 33\"\>", ",", "\<\"11+12\"\>", 
   ",", "\<\"What is 5% of 100?\"\>", ",", "\<\"8x-2=22\"\>", 
   ",", "\<\"-x-2=12\"\>", ",", "\<\"2/3 x+3 =15\"\>", 
   ",", "\<\"Multiply 24/3 and 27/8\"\>", ",", "\<\"Multiply 8 and 3/24\"\>", 
   ",", "\<\"Add 1/2 and 1/3\"\>", ",", "\<\"What is  24/3 * 27/8\"\>", 
   ",", "\<\"What is  8 * 3/24\"\>", ",", "\<\"What is  1/2 + 1/3\"\>", 
   ",", "\<\"A $750 watch is on sale for 15% off. Find the sale price.\"\>", 
   ",", "\<\"A salesman tells you that the $140 earrings are already marked \
20% off. What\\nwas the original price?\"\>", 
   ",", "\<\"Tommy\[CloseCurlyQuote]s grandma gave him a $50 gift card to \
Toys R Us for his birthday.\\nSales tax is currently 9%. Determine the price \
of the most expensive toy Tommy can buy with\\nthe $50 gift card.\"\>", 
   ",", "\<\"A salesman is paid a monthly salary of $2,300 plus 7% commission \
on his monthly sales.\\nDetermine the amount of sales required for his total \
monthly income to be $3,000.\"\>", ",", "\<\"What is 10% of 100\"\>", 
   ",", "\<\"What is 4% of 16?\"\>", ",", "\<\"200% of 3\"\>", 
   ",", "\<\"What is 45+300+4\"\>", ",", "\<\"30+30\"\>", 
   ",", "\<\"90+200\"\>", ",", "\<\"1+5\"\>", ",", "\<\"34+1\"\>", 
   ",", "\<\"10% of 11\"\>", ",", "\<\"5% of 112\"\>", ",", "\<\"41+2\"\>", 
   ",", "\<\"What is 3-(-2)?\"\>", ",", "\<\"What is -3+4\"\>", 
   ",", "\<\"    x / - 5 = - 3  \\r\"\>", ",", "\<\"    x / 6 = 5  \\r\"\>", 
   ",", "\<\"    x + 4 = 16  \\r\"\>", ",", "\<\"    x + 6 = 8  \\r\"\>", 
   ",", "\<\"    x + 9 = 13  \\r\"\>", ",", "\<\"    2 = x - 3  \\r\"\>", 
   ",", "\<\"    x - 1 = - 10  \\r\"\>", ",", "\<\"    x + 4 = - 4  \\r\"\>", 
   ",", "\<\"9\"\>", ",", "\<\"10\"\>", ",", "\<\"11\"\>", ",", "\<\"12\"\>", 
   ",", "\<\"13\"\>", ",", "\<\"14\"\>", ",", "\<\"15\"\>", ",", "\<\"16\"\>",
    ",", "\<\"\\r\"\>", ",", "\<\"    - 7 + x = 2  \\r\"\>", 
   ",", "\<\"    x / 3 = 3  \\r\"\>", ",", "\<\"    13 = x + 1  \\r\"\>", 
   ",", "\<\"    x + 8 = 12  \\r\"\>", ",", "\<\"    x + 6 = 6  \\r\"\>", 
   ",", "\<\"    4x = - 44  \\r\"\>", ",", "\<\"    x / 4 = 7  \\r\"\>", 
   ",", "\<\"    x + 8 = 3  \\r\"\>", ",", "\<\"63\"\>", ",", "\<\"64\"\>", 
   ",", "\<\"65\"\>", ",", "\<\"66\"\>", ",", "\<\"67\"\>", ",", "\<\"68\"\>",
    ",", "\<\"69\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"    x + 4 = - 6  \\r\"\>", ",", "\<\"    - 9 + x = - 5  \\r\"\>",
    ",", "\<\"    6x = - 48  \\r\"\>", ",", "\<\"    15 = x + 4  \\r\"\>", 
   ",", "\<\"    11 = x + 10  \\r\"\>", ",", "\<\"    x - 2 = - 8  \\r\"\>", 
   ",", "\<\"    10 + x = 1  \\r\"\>", ",", "\<\"116\"\>", ",", "\<\"117\"\>",
    ",", "\<\"118\"\>", ",", "\<\"119\"\>", ",", "\<\"120\"\>", 
   ",", "\<\"121\"\>", ",", "\<\"122\"\>", ",", "\<\"123\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"    7x = 0  \\r\"\>", 
   ",", "\<\"    7 + x = 13  \\r\"\>", ",", "\<\"    - 3 = x + 2  \\r\"\>", 
   ",", "\<\"    x / 6 = 6  \\r\"\>", ",", "\<\"    x / - 2 = 1  \\r\"\>", 
   ",", "\<\"    x + 2 = 3  \\r\"\>", ",", "\<\"    x / 7 = 2  \\r\"\>", 
   ",", "\<\"    3 = x + 3  \\r\"\>", ",", "\<\"    x + 2 = - 8  \\r\"\>", 
   ",", "\<\"    x + 5 = -1  \\r\"\>", ",", "\<\"    x + 7 = 13  \\r\"\>", 
   ",", "\<\"    -1 + x = -1  \\r\"\>", ",", "\<\"    12 = x + 7  \\r\"\>", 
   ",", "\<\"    x + 8 = 14  \\r\"\>", ",", "\<\"186\"\>", ",", "\<\"187\"\>",
    ",", "\<\"188\"\>", ",", "\<\"189\"\>", ",", "\<\"190\"\>", 
   ",", "\<\"191\"\>", ",", "\<\"192\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"    x + 2 = 8  \\r\"\>", ",", "\<\"    x + 7 = 18  \\r\"\>", 
   ",", "\<\"    x + 9 = 2  \\r\"\>", ",", "\<\"    - 5x = - 10  \\r\"\>", 
   ",", "\<\"    x - 4 = 0  \\r\"\>", ",", "\<\"    x - 2 = 3  \\r\"\>", 
   ",", "\<\"    - 9 + x = - 7  \\r\"\>", ",", "\<\"239\"\>", 
   ",", "\<\"240\"\>", ",", "\<\"241\"\>", ",", "\<\"242\"\>", 
   ",", "\<\"243\"\>", ",", "\<\"244\"\>", ",", "\<\"245\"\>", 
   ",", "\<\"246\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"    x + 10 = 12  \\r\"\>", ",", "\<\"    7 + x = 13  \\r\"\>", 
   ",", "\<\"    2x = 2  \\r\"\>", ",", "\<\"    - 3 = x - 4  \\r\"\>", 
   ",", "\<\"    - 10 + x = 1  \\r\"\>", ",", "\<\"    18 = x + 8  \\r\"\>", 
   ",", "\<\"    5 + x = 12  \\r\"\>", ",", "\<\"    x - 5 = 7  \\r\"\>", 
   ",", "\<\"293\"\>", ",", "\<\"294\"\>", ",", "\<\"295\"\>", 
   ",", "\<\"296\"\>", ",", "\<\"297\"\>", ",", "\<\"298\"\>", 
   ",", "\<\"299\"\>", ",", "\<\"300\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"    4x - 8 = 8  \\r\"\>", ",", "\<\"    5x + 5 = 10  \\r\"\>", 
   ",", "\<\"    - 4x + 9 = - 27  \\r\"\>", 
   ",", "\<\"    10 + 5x = 10  \\r\"\>", 
   ",", "\<\"    6x - 3 = - 75  \\r\"\>", ",", "\<\"    8 + 2x = 14  \\r\"\>",
    ",", "\<\"    4x + 7 = 15  \\r\"\>", ",", "\<\"362\"\>", 
   ",", "\<\"363\"\>", ",", "\<\"364\"\>", ",", "\<\"365\"\>", 
   ",", "\<\"366\"\>", ",", "\<\"367\"\>", ",", "\<\"368\"\>", 
   ",", "\<\"369\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"    10 + 5x = 60  \\r\"\>", 
   ",", "\<\"    - 5x - 2 = - 27  \\r\"\>", 
   ",", "\<\"    6x - 5 = 67  \\r\"\>", 
   ",", "\<\"    - 7x - 5 = - 26  \\r\"\>", 
   ",", "\<\"    7 - 7x = 63  \\r\"\>", ",", "\<\"    7x + 6 = - 78  \\r\"\>",
    ",", "\<\"    - 8 - 7x = 62  \\r\"\>", 
   ",", "\<\"    5x + 9 = -1  \\r\"\>", ",", "\<\"416\"\>", 
   ",", "\<\"417\"\>", ",", "\<\"418\"\>", ",", "\<\"419\"\>", 
   ",", "\<\"420\"\>", ",", "\<\"421\"\>", ",", "\<\"422\"\>", 
   ",", "\<\"423\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"    5x - 9 = - 19  \\r\"\>", 
   ",", "\<\"    5x + 7 = - 33  \\r\"\>", ",", "\<\"    6x + 7 = 25  \\r\"\>",
    ",", "\<\"    3x - 6 = - 6  \\r\"\>", ",", "\<\"    4 + 6x = 16  \\r\"\>",
    ",", "\<\"    - 5 + 7x = 79  \\r\"\>", 
   ",", "\<\"    - 5x + 8 = 28  \\r\"\>", ",", "\<\"    2x - 7 = 13  \\r\"\>",
    ",", "\<\"470\"\>", ",", "\<\"471\"\>", ",", "\<\"472\"\>", 
   ",", "\<\"473\"\>", ",", "\<\"474\"\>", ",", "\<\"475\"\>", 
   ",", "\<\"476\"\>", ",", "\<\"\\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"    2x + 8 = 10  \\r\"\>", 
   ",", "\<\"    3 - 3x = - 30  \\r\"\>", 
   ",", "\<\"    - 8 - 5x = 17  \\r\"\>", 
   ",", "\<\"    2x + 5 = - 7  \\r\"\>", 
   ",", "\<\"    3 + 4x = - 45  \\r\"\>", ",", "\<\"    3x + 7 = 25  \\r\"\>",
    ",", "\<\"    - 5x + 5 = 25  \\r\"\>", ",", "\<\"537\"\>", 
   ",", "\<\"538\"\>", ",", "\<\"539\"\>", ",", "\<\"540\"\>", 
   ",", "\<\"541\"\>", ",", "\<\"542\"\>", ",", "\<\"543\"\>", 
   ",", "\<\"    9 - 3x = - 21  \\r\"\>", ",", "\<\"    4x - 9 = 19  \\r\"\>",
    ",", "\<\"    6x + 1 = 61  \\r\"\>", 
   ",", "\<\"    - 2x + 8 = 32  \\r\"\>", 
   ",", "\<\"    10 + 3x = 10  \\r\"\>", 
   ",", "\<\"    2 - 2x = - 22  \\r\"\>", ",", "\<\"    8 + 5x = 48  \\r\"\>",
    ",", "\<\"587\"\>", ",", "\<\"588\"\>", ",", "\<\"589\"\>", 
   ",", "\<\"590\"\>", ",", "\<\"591\"\>", ",", "\<\"592\"\>", 
   ",", "\<\"593\"\>", ",", "\<\"4272 + 1001 \\r\"\>", 
   ",", "\<\"1570 + 5887 \\r\"\>", ",", "\<\"8378 + 2232 \\r\"\>", 
   ",", "\<\"6719 + 9083 \\r\"\>", ",", "\<\"7796 + 7881 \\r\"\>", 
   ",", "\<\"7333 + 2722 \\r\"\>", ",", "\<\"6529 + 4391 \\r\"\>", 
   ",", "\<\"1521 + 2554 \\r\"\>", ",", "\<\"8168 + 4402 \\r\"\>", 
   ",", "\<\"5750 + 9568 \\r\"\>", ",", "\<\"9525 + 2244 \\r\"\>", 
   ",", "\<\"3160 + 1245 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"9577 + 7198 \\r\"\>", ",", "\<\"9600 + 7472 \\r\"\>", 
   ",", "\<\"4781 + 7748 \\r\"\>", ",", "\<\"2005 + 8361 \\r\"\>", 
   ",", "\<\"2143 + 8202 \\r\"\>", ",", "\<\"1723 + 5702 \\r\"\>", 
   ",", "\<\"2729 + 6856 \\r\"\>", ",", "\<\"8118 + 4430 \\r\"\>", 
   ",", "\<\"7438 + 3315 \\r\"\>", ",", "\<\"1632 + 9300 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"5074 + 7065 \\r\"\>", 
   ",", "\<\"7949 + 9040 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"9361 + 9434 \\r\"\>", ",", "\<\"2590 + 3048 \\r\"\>", 
   ",", "\<\"5035 + 9586 \\r\"\>", ",", "\<\"2587 + 4970 \\r\"\>", 
   ",", "\<\"1726 + 9260 \\r\"\>", ",", "\<\"9503 + 3152 \\r\"\>", 
   ",", "\<\"3434 + 9380 \\r\"\>", ",", "\<\"9857 + 3068 \\r\"\>", 
   ",", "\<\"4027 + 2502 \\r\"\>", ",", "\<\"1329 + 9063 \\r\"\>", 
   ",", "\<\"7272 + 6191 \\r\"\>", ",", "\<\"8074 + 7521 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"1113 + 3615 \\r\"\>", 
   ",", "\<\"6987 + 5576 \\r\"\>", ",", "\<\"5571 + 3857 \\r\"\>", 
   ",", "\<\"2940 + 6608 \\r\"\>", ",", "\<\"2267 + 6108 \\r\"\>", 
   ",", "\<\"7900 + 6469 \\r\"\>", ",", "\<\"2219 + 2574 \\r\"\>", 
   ",", "\<\"2433 + 5845 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"7946 + 9908 \\r\"\>", ",", "\<\"8088 + 7921 \\r\"\>", 
   ",", "\<\"3661 + 5756 \\r\"\>", ",", "\<\"6213 + 8955 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"5610 + 6137 \\r\"\>", 
   ",", "\<\"9618 + 8587 \\r\"\>", ",", "\<\"3523 + 8800 \\r\"\>", 
   ",", "\<\"2420 + 4220 \\r\"\>", ",", "\<\"8880 + 2001 \\r\"\>", 
   ",", "\<\"6379 + 2448 \\r\"\>", ",", "\<\"1816 + 6956 \\r\"\>", 
   ",", "\<\"6178 + 2038 \\r\"\>", ",", "\<\"2648 + 2854 \\r\"\>", 
   ",", "\<\"4832 + 1852 \\r\"\>", ",", "\<\"7143 + 8177 \\r\"\>", 
   ",", "\<\"7524 + 7480 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"4662 + 2032 \\r\"\>", ",", "\<\"9927 + 9121 \\r\"\>", 
   ",", "\<\"6639 + 6370 \\r\"\>", ",", "\<\"8327 + 6129 \\r\"\>", 
   ",", "\<\"2757 + 2994 \\r\"\>", ",", "\<\"3782 + 1330 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"6618 + 9094 \\r\"\>", 
   ",", "\<\"2259 + 6033 \\r\"\>", ",", "\<\"3018 + 2248 \\r\"\>", 
   ",", "\<\"9532 + 5499 \\r\"\>", ",", "\<\"9320 + 6116 \\r\"\>", 
   ",", "\<\"7748 + 4445 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"9422 + 5414 \\r\"\>", ",", "\<\"9827 + 8472 \\r\"\>", 
   ",", "\<\"8158 + 7658 \\r\"\>", ",", "\<\"1721 + 5812 \\r\"\>", 
   ",", "\<\"3850 + 4435 \\r\"\>", ",", "\<\"7280 + 3811 \\r\"\>", 
   ",", "\<\"3109 + 7046 \\r\"\>", ",", "\<\"7067 + 9862 \\r\"\>", 
   ",", "\<\"4116 + 6636 \\r\"\>", ",", "\<\"7250 + 7530 \\r\"\>", 
   ",", "\<\"4154 + 9932 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"3928 + 9719 \\r\"\>", ",", "\<\"7948 + 9978 \\r\"\>", 
   ",", "\<\"4741 + 6938 \\r\"\>", ",", "\<\"4609 + 2756 \\r\"\>", 
   ",", "\<\"7498 + 1176 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"2968 + 7604 \\r\"\>", ",", "\<\"3979 + 4765 \\r\"\>", 
   ",", "\<\"5465 + 9956 \\r\"\>", ",", "\<\"2551 + 8585 \\r\"\>", 
   ",", "\<\"8088 + 3140 \\r\"\>", ",", "\<\"5282 + 9116 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"8119 + 9714 \\r\"\>", 
   ",", "\<\"1664 + 8135 \\r\"\>", ",", "\<\"2751 + 4607 \\r\"\>", 
   ",", "\<\"3880 + 6919 \\r\"\>", ",", "\<\"2829 + 1933 \\r\"\>", 
   ",", "\<\"7988 + 5800 \\r\"\>", ",", "\<\"9964 + 6451 \\r\"\>", 
   ",", "\<\"8932 + 7141 \\r\"\>", ",", "\<\"8544 + 3707 \\r\"\>", 
   ",", "\<\"4910 + 8680 \\r\"\>", ",", "\<\"4064 + 9078 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"3147 + 6538 \\r\"\>", 
   ",", "\<\"6703 + 2453 \\r\"\>", ",", "\<\"1313 + 3009 \\r\"\>", 
   ",", "\<\"5840 + 1828 \\r\"\>", ",", "\<\"8011 + 9651 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"5361 + 5519 \\r\"\>", 
   ",", "\<\"6669 + 6330 \\r\"\>", ",", "\<\"4419 + 1814 \\r\"\>", 
   ",", "\<\"8784 + 3944 \\r\"\>", ",", "\<\"4292 + 9179 \\r\"\>", 
   ",", "\<\"9474 + 9705 \\r\"\>", ",", "\<\"6963 + 4488 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"6174 + 2651 \\r\"\>", 
   ",", "\<\"2390 + 5199 \\r\"\>", ",", "\<\"5396 + 5061 \\r\"\>", 
   ",", "\<\"4261 + 8473 \\r\"\>", ",", "\<\"9681 + 2776 \\r\"\>", 
   ",", "\<\"4880 + 1099 \\r\"\>", ",", "\<\"9514 + 3323 \\r\"\>", 
   ",", "\<\"4447 + 4604 \\r\"\>", ",", "\<\"8826 + 6933 \\r\"\>", 
   ",", "\<\"8059 + 1271 \\r\"\>", ",", "\<\"7635 + 7934 \\r\"\>", 
   ",", "\<\"1692 + 5818 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"6842 + 8050 \\r\"\>", ",", "\<\"6710 + 5531 \\r\"\>", 
   ",", "\<\"6682 + 8481 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"5893 + 2493 \\r\"\>", ",", "\<\"7102 + 2281 \\r\"\>", 
   ",", "\<\"1383 + 3834 \\r\"\>", ",", "\<\"7379 + 6677 \\r\"\>", 
   ",", "\<\"5626 + 9732 \\r\"\>", ",", "\<\"5642 + 6535 \\r\"\>", 
   ",", "\<\"1985 + 4928 \\r\"\>", ",", "\<\"1400 + 7429 \\r\"\>", 
   ",", "\<\"7665 + 3538 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"3021 + 8010 \\r\"\>", ",", "\<\"6980 + 6177 \\r\"\>", 
   ",", "\<\"4918 + 3236 \\r\"\>", ",", "\<\"5290 + 8994 \\r\"\>", 
   ",", "\<\"5980 + 1855 \\r\"\>", ",", "\<\"8719 + 6369 \\r\"\>", 
   ",", "\<\"1750 + 5035 \\r\"\>", ",", "\<\"7338 + 3228 \\r\"\>", 
   ",", "\<\"1570 + 8699 \\r\"\>", ",", "\<\"7542 + 3349 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"6221 + 2277 \\r\"\>", 
   ",", "\<\"8325 + 1106 \\r\"\>", ",", "\<\"9346 + 8468 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"3825 + 6015 \\r\"\>", 
   ",", "\<\"5219 + 1965 \\r\"\>", ",", "\<\"4731 + 1603 \\r\"\>", 
   ",", "\<\"5571 + 5676 \\r\"\>", ",", "\<\"6997 + 8056 \\r\"\>", 
   ",", "\<\"5465 + 8277 \\r\"\>", ",", "\<\"4189 + 5839 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"5048 + 8140 \\r\"\>", 
   ",", "\<\"1531 + 4977 \\r\"\>", ",", "\<\"1148 + 4232 \\r\"\>", 
   ",", "\<\"2087 + 5640 \\r\"\>", ",", "\<\"5712 + 2107 \\r\"\>", 
   ",", "\<\"1967 + 3600 \\r\"\>", ",", "\<\"6753 + 2906 \\r\"\>", 
   ",", "\<\"7131 + 1009 \\r\"\>", ",", "\<\"6534 + 8733 \\r\"\>", 
   ",", "\<\"7614 + 5986 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"4270 + 9940 \\r\"\>", ",", "\<\"4810 + 7408 \\r\"\>", 
   ",", "\<\"6775 + 7738 \\r\"\>", ",", "\<\"5278 + 2794 \\r\"\>", 
   ",", "\<\"7136 + 8596 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"4420 + 6691 \\r\"\>", ",", "\<\"5745 + 7730 \\r\"\>", 
   ",", "\<\"2943 + 8463 \\r\"\>", ",", "\<\"2697 + 5880 \\r\"\>", 
   ",", "\<\"4764 + 7711 \\r\"\>", ",", "\<\"4896 + 8505 \\r\"\>", 
   ",", "\<\"9300 + 2212 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"8759 + 8868 \\r\"\>", ",", "\<\"5898 + 8735 \\r\"\>", 
   ",", "\<\"6671 + 7814 \\r\"\>", ",", "\<\"8589 + 7764 \\r\"\>", 
   ",", "\<\"5930 + 4357 \\r\"\>", ",", "\<\"2278 + 6186 \\r\"\>", 
   ",", "\<\"3096 + 2460 \\r\"\>", ",", "\<\"9260 + 1150 \\r\"\>", 
   ",", "\<\"7982 + 5589 \\r\"\>", ",", "\<\"3277 + 7411 \\r\"\>", 
   ",", "\<\"3740 + 4179 \\r\"\>", ",", "\<\"2653 + 5175 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"1616 + 5751 \\r\"\>", 
   ",", "\<\"5519 + 6804 \\r\"\>", ",", "\<\"1583 + 6324 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"8192 + 7500 \\r\"\>", 
   ",", "\<\"9043 + 3293 \\r\"\>", ",", "\<\"7430 + 5558 \\r\"\>", 
   ",", "\<\"1630 + 8860 \\r\"\>", ",", "\<\"7459 + 4738 \\r\"\>", 
   ",", "\<\"4096 + 5082 \\r\"\>", ",", "\<\"1930 + 4841 \\r\"\>", 
   ",", "\<\"2815 + 5126 \\r\"\>", ",", "\<\"4731 + 9595 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"0 + 2 \\r\"\>", ",", "\<\"4 + 10 \\r\"\>", 
   ",", "\<\"6 + 2 \\r\"\>", ",", "\<\"2 + 1 \\r\"\>", 
   ",", "\<\"9 + 0 \\r\"\>", ",", "\<\"2 + 9 \\r\"\>", 
   ",", "\<\"9 + 7 \\r\"\>", ",", "\<\"2 + 2 \\r\"\>", 
   ",", "\<\"8 + 10 \\r\"\>", ",", "\<\"8 + 4 \\r\"\>", 
   ",", "\<\"9 + 6 \\r\"\>", ",", "\<\"1 + 0 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"4 + 0 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"0 + 8 \\r\"\>", 
   ",", "\<\"4 + 0 \\r\"\>", ",", "\<\"14 + 4 \\r\"\>", 
   ",", "\<\"10 + 33 \\r\"\>", ",", "\<\"94 + 2 \\r\"\>", 
   ",", "\<\"39 + 10 \\r\"\>", ",", "\<\"3 + 73 \\r\"\>", 
   ",", "\<\"45 + 0 \\r\"\>", ",", "\<\"44 + 5 \\r\"\>", 
   ",", "\<\"4 + 55 \\r\"\>", ",", "\<\"70 + 4 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"10 + 8 \\r\"\>", ",", "\<\"4 + 0 \\r\"\>", 
   ",", "\<\"10 + 0 \\r\"\>", ",", "\<\"5 + 4 \\r\"\>", 
   ",", "\<\"8 + 6 \\r\"\>", ",", "\<\"90 + 8 \\r\"\>", 
   ",", "\<\"44 + 1 \\r\"\>", ",", "\<\"66 + 2 \\r\"\>", 
   ",", "\<\"8 + 44 \\r\"\>", ",", "\<\"68 + 4 \\r\"\>", 
   ",", "\<\"3 + 24 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"47 + 5 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"6 + 4 \\r\"\>", ",", "\<\"3 + 4 \\r\"\>", 
   ",", "\<\"10 + 7 \\r\"\>", ",", "\<\"9 + 10 \\r\"\>", 
   ",", "\<\"2 + 3 \\r\"\>", ",", "\<\"6 + 7 \\r\"\>", 
   ",", "\<\"10 + 10 \\r\"\>", ",", "\<\"5 + 1 \\r\"\>", 
   ",", "\<\"0 + 0 \\r\"\>", ",", "\<\"20 + 3 \\r\"\>", 
   ",", "\<\"28 + 5 \\r\"\>", ",", "\<\"48 + 2 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"10 + 29 \\r\"\>", ",", "\<\"70 + 10 \\r\"\>", 
   ",", "\<\"63 + 0 \\r\"\>", ",", "\<\"4 + 49 \\r\"\>", 
   ",", "\<\"78 + 10 \\r\"\>", ",", "\<\"4 + 76 \\r\"\>", 
   ",", "\<\"50 + 5 \\r\"\>", ",", "\<\"96 + 7 \\r\"\>", 
   ",", "\<\"3 + 90 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"5 + 88 \\r\"\>", 
   ",", "\<\"59 + 10 \\r\"\>", ",", "\<\"41 + 2 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"16 + 6 \\r\"\>", ",", "\<\"2 + 73 \\r\"\>", 
   ",", "\<\"6 + 13 \\r\"\>", ",", "\<\"41 + 9 \\r\"\>", 
   ",", "\<\"2 + 14 \\r\"\>", ",", "\<\"15 + 6 \\r\"\>", 
   ",", "\<\"35 + 7 \\r\"\>", ",", "\<\"1 + 69 \\r\"\>", 
   ",", "\<\"4 + 83 \\r\"\>", ",", "\<\"7 + 90 \\r\"\>", 
   ",", "\<\"4 + 74 \\r\"\>", ",", "\<\"2 + 39 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"2 + 2 \\r\"\>", ",", "\<\"9 + 7 \\r\"\>", 
   ",", "\<\"9 + 11 \\r\"\>", ",", "\<\"3 + 11 \\r\"\>", 
   ",", "\<\"9 + 12 \\r\"\>", ",", "\<\"0 + 86 \\r\"\>", 
   ",", "\<\"22 + 10 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"33 + 4 \\r\"\>", 
   ",", "\<\"9 + 39 \\r\"\>", ",", "\<\"72 + 10 \\r\"\>", 
   ",", "\<\"0 + 95 \\r\"\>", ",", "\<\"6 + 16 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"8 + 0 \\r\"\>", ",", "\<\"4 + 9 \\r\"\>", 
   ",", "\<\"7 + 1 \\r\"\>", ",", "\<\"3 + 10 \\r\"\>", 
   ",", "\<\"0 + 10 \\r\"\>", ",", "\<\"10 + 29 \\r\"\>", 
   ",", "\<\"10 + 78 \\r\"\>", ",", "\<\"3 + 13 \\r\"\>", 
   ",", "\<\"35 + 6 \\r\"\>", ",", "\<\"10 + 1 \\r\"\>", 
   ",", "\<\"96 + 0 \\r\"\>", ",", "\<\"3 + 38 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"1 + 1 \\r\"\>", ",", "\<\"5 + 37 \\r\"\>", 
   ",", "\<\"10 + 69 \\r\"\>", ",", "\<\"47 + 6 \\r\"\>", 
   ",", "\<\"94 + 5 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"10 + 83 \\r\"\>", 
   ",", "\<\"6 + 32 \\r\"\>", ",", "\<\"30 + 1 \\r\"\>", 
   ",", "\<\"44 + 5 \\r\"\>", ",", "\<\"7 + 15 \\r\"\>", 
   ",", "\<\"4 + 60 \\r\"\>", ",", "\<\"1 + 14 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"5 + 69 \\r\"\>", ",", "\<\"25 + 6 \\r\"\>", 
   ",", "\<\"46 + 8 \\r\"\>", ",", "\<\"27 + 6 \\r\"\>", 
   ",", "\<\"78 + 6 \\r\"\>", ",", "\<\"51 + 0 \\r\"\>", 
   ",", "\<\"0 + 15 \\r\"\>", ",", "\<\"7 + 79 \\r\"\>", 
   ",", "\<\"84 + 7 \\r\"\>", ",", "\<\"8 + 47 \\r\"\>", 
   ",", "\<\"46 + 2 \\r\"\>", ",", "\<\"73 + 2 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"96 + 2 \\r\"\>", ",", "\<\"33 + 1 \\r\"\>", 
   ",", "\<\"59 + 1 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"41 + 6 \\r\"\>", 
   ",", "\<\"3 + 28 \\r\"\>", ",", "\<\"57 + 7 \\r\"\>", 
   ",", "\<\"7 + 38 \\r\"\>", ",", "\<\"45 + 8 \\r\"\>", 
   ",", "\<\"1 + 75 \\r\"\>", ",", "\<\"10 + 49 \\r\"\>", 
   ",", "\<\"8 + 95 \\r\"\>", ",", "\<\"2 + 57 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"7 + 21 \\r\"\>", ",", "\<\"63 + 5 \\r\"\>", 
   ",", "\<\"5 + 82 \\r\"\>", ",", "\<\"90 + 9 \\r\"\>", 
   ",", "\<\"55 + 4 \\r\"\>", ",", "\<\"23 + 5 \\r\"\>", 
   ",", "\<\"5 + 86 \\r\"\>", ",", "\<\"4 + 90 \\r\"\>", 
   ",", "\<\"94 + 6 \\r\"\>", ",", "\<\"0 + 98 \\r\"\>", 
   ",", "\<\"7 + 56 \\r\"\>", ",", "\<\"55 + 10 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"1 + 0 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"5 + 0 \\r\"\>", 
   ",", "\<\"10 + 1 \\r\"\>", ",", "\<\"43 + 4 \\r\"\>", 
   ",", "\<\"7 + 11 \\r\"\>", ",", "\<\"8 + 98 \\r\"\>", 
   ",", "\<\"8 + 10 \\r\"\>", ",", "\<\"55 + 9 \\r\"\>", 
   ",", "\<\"8 + 11 \\r\"\>", ",", "\<\"25 + 2 \\r\"\>", 
   ",", "\<\"50 + 9 \\r\"\>", ",", "\<\"10 + 60 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"1 + 4 \\r\"\>", ",", "\<\"3 + 7 \\r\"\>", 
   ",", "\<\"8 + 6 \\r\"\>", ",", "\<\"6 + 5 \\r\"\>", 
   ",", "\<\"2 + 0 \\r\"\>", ",", "\<\"9 + 7 \\r\"\>", 
   ",", "\<\"9 + 5 \\r\"\>", ",", "\<\"10 + 7 \\r\"\>", 
   ",", "\<\"9 + 1 \\r\"\>", ",", "\<\"1 + 9 \\r\"\>", 
   ",", "\<\"4 + 5 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"5 + 2 \\r\"\>", 
   ",", "\<\"\\r\"\>", ",", "\<\"0 + 10 \\r\"\>", ",", "\<\"6 + 0 \\r\"\>", 
   ",", "\<\"10 + 0 \\r\"\>", ",", "\<\"2 + 6 \\r\"\>", 
   ",", "\<\"1 + 73 \\r\"\>", ",", "\<\"70 + 2 \\r\"\>", 
   ",", "\<\"12 + 8 \\r\"\>", ",", "\<\"1 + 17 \\r\"\>", 
   ",", "\<\"32 + 6 \\r\"\>", ",", "\<\"9 + 88 \\r\"\>", 
   ",", "\<\"25 + 2 \\r\"\>", ",", "\<\"6 + 33 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"82 + 10 \\r\"\>", ",", "\<\"9 + 58 \\r\"\>", 
   ",", "\<\"2 + 25 \\r\"\>", ",", "\<\"39 + 8 \\r\"\>", 
   ",", "\<\"3 + 37 \\r\"\>", ",", "\<\"59 + 0 \\r\"\>", 
   ",", "\<\"9 + 29 \\r\"\>", ",", "\<\"1 + 17 \\r\"\>", 
   ",", "\<\"0 + 98 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"76 + 3 \\r\"\>", 
   ",", "\<\"4 + 86 \\r\"\>", ",", "\<\"2 + 68 \\r\"\>", ",", "\<\"\\r\"\>", 
   ",", "\<\"7 + 1 \\r\"\>", ",", "\<\"1 + 2 \\r\"\>", 
   ",", "\<\"10 + 69 \\r\"\>", ",", "\<\"67 + 3 \\r\"\>", 
   ",", "\<\"63 + 10 \\r\"\>", ",", "\<\"90 + 9 \\r\"\>", 
   ",", "\<\"1 + 89 \\r\"\>", ",", "\<\"8 + 76 \\r\"\>", 
   ",", "\<\"71 + 6 \\r\"\>", ",", "\<\"3 + 55 \\r\"\>", 
   ",", "\<\"10 + 75 \\r\"\>", ",", "\<\"58 + 95 \\r\"\>", ",", "\<\"\\r\"\>",
    ",", "\<\"0 + 46 \\r\"\>", ",", "\<\"2 + 85 \\r\"\>", 
   ",", "\<\"70 + 17 \\r\"\>", ",", "\<\"77 + 70 \\r\"\>", 
   ",", "\<\"11 + 14 \\r\"\>", ",", "\<\"16 + 70 \\r\"\>", 
   ",", "\<\"28 + 35 \\r\"\>", ",", "\<\"\\r\"\>", ",", "\<\"96 + 43 \\r\"\>",
    ",", "\<\"50 + 93 \\r\"\>", ",", "\<\"83 + 72 \\r\"\>", 
   ",", "\<\"44 + 85 \\r\"\>", ",", "\<\"18 + 64 \"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.771173334578003*^9},
 CellLabel->
  "Out[136]=",ExpressionUUID->"ab3ed865-3587-4079-8f57-a833307d7b82"],

Cell[BoxData[
 TemplateBox[{
  "Part","partd",
   "\"Part specification \\!\\(\\*RowBox[{\\\"\\\\\\\"What is the most \
specific subset of the real numbers that -7 is a part of?\\\\\\\"\\\", \\\"\
\[LeftDoubleBracket]\\\", \\\"120\\\", \\\"\[RightDoubleBracket]\\\"}]\\) is \
longer than depth of object.\"",2,137,32,15901289433497050326,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7711725379433346`*^9, 3.7711733346250176`*^9},
 CellLabel->
  "During evaluation of \
In[136]:=",ExpressionUUID->"5c2458cc-bd61-436f-a7b3-3898945985ba"],

Cell[BoxData[
 TemplateBox[{
  "Part","partd",
   "\"Part specification \\!\\(\\*RowBox[{\\\"\\\\\\\"Plot 1.25, 2/3 and 2 on \
a number line\\\\\\\"\\\", \\\"\[LeftDoubleBracket]\\\", \\\"120\\\", \\\"\
\[RightDoubleBracket]\\\"}]\\) is longer than depth of object.\"",2,137,33,
   15901289433497050326,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7711725379433346`*^9, 3.7711733346450453`*^9},
 CellLabel->
  "During evaluation of \
In[136]:=",ExpressionUUID->"11d1c4e4-d5a6-4900-b1d3-86b52a916086"],

Cell[BoxData[
 TemplateBox[{
  "Part","partd",
   "\"Part specification \\!\\(\\*RowBox[{\\\"\\\\\\\"Identify the property \
used in the equations below as distributive, inverse or associative\\\\\\\"\\\
\", \\\"\[LeftDoubleBracket]\\\", \\\"120\\\", \
\\\"\[RightDoubleBracket]\\\"}]\\) is longer than depth of object.\"",2,137,
   34,15901289433497050326,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7711725379433346`*^9, 3.771173334655052*^9},
 CellLabel->
  "During evaluation of \
In[136]:=",ExpressionUUID->"b1c0afea-c5f7-4ce6-b884-c587fda24339"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Part\\\", \\\"::\\\", \
\\\"partd\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"",2,137,35,15901289433497050326,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7711725379433346`*^9, 3.77117333466506*^9},
 CellLabel->
  "During evaluation of \
In[136]:=",ExpressionUUID->"d7024e13-7000-44a9-bc19-7b16ef88a9f6"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7711723935283384`*^9, 3.7711724196759048`*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"a34bd91b-332e-47df-9227-c111d8b411a5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"polydiffurl", "=", 
  "\"\<https://math.ly/api/v1/calculus/polynomial-differentiation.json\>\""}]]\
, "Input",
 CellChangeTimes->{{3.7711514475428724`*^9, 3.7711514768209143`*^9}, {
  3.7711518244068594`*^9, 3.771151863997607*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"3622a052-38d9-47fa-b1f3-baec31be1a1e"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/polynomial-differentiation.\
json\"\>"], "Output",
 CellChangeTimes->{3.771172538039401*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"7e36afba-ce71-4c90-8f17-c2272968b760"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"s", "=", 
   RowBox[{
    RowBox[{"Import", "[", 
     RowBox[{"polydiffurl", ",", " ", "\"\<Data\>\""}], " ", "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{"s", "=", 
  RowBox[{"\"\<question\>\"", "/.", "s"}]}]}], "Input",
 CellChangeTimes->{{3.7711514831933584`*^9, 3.7711515672774487`*^9}, {
   3.7711517082965136`*^9, 3.771151743302946*^9}, {3.7711518471804204`*^9, 
   3.7711518890793953`*^9}, {3.7711520237376146`*^9, 3.771152169092266*^9}, {
   3.7711528706872387`*^9, 3.77115295321529*^9}, {3.771153038758667*^9, 
   3.771153051718769*^9}, 3.771153756577385*^9, {3.771157365990517*^9, 
   3.7711573666509705`*^9}, 3.7711575213869724`*^9},
 CellLabel->"In[52]:=",ExpressionUUID->"caaa5ecf-7ab4-401d-a3be-1c829e3f17a2"],

Cell[BoxData["\<\"<mfrac><mo>&DifferentialD;</mo><mrow><mo>&DifferentialD;</\
mo><mi>x</mi></mrow></mfrac><msup><mrow><mo> ( </mo><mo> - \
</mo><msup><mi>x</mi><mn>2</mn></msup><mo> - </mo><mn>8</mn><mi>x</mi><mo> - \
</mo><mn>4</mn><mo> )</mrow> </mo><mn>3</mn></msup>\"\>"], "Output",
 CellChangeTimes->{3.771172538585808*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"4671ebd4-f158-44b3-bbe0-bae7b6111264"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Clear", "[", "questionClassifier", "]"}], "\[IndentingNewLine]", 
 RowBox[{"questionClassifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<algebra 1\>\"", "\[Rule]", "algebra1Questions"}], ",", " ", 
      RowBox[{"\"\<algebra 2\>\"", "\[Rule]", "algebra2Qs"}]}], 
     RowBox[{"(*", 
      RowBox[{",", " ", 
       RowBox[{"\"\<calc\>\"", "\[Rule]", "calcQs"}]}], "*)"}], "|>"}], " ", 
    ",", " ", 
    RowBox[{"Method", "\[Rule]", "\"\<NeuralNetwork\>\""}], ",", " ", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.771063215443462*^9, 3.7710633502457542`*^9}, 
   3.771071823090603*^9, 3.7710828946484957`*^9, {3.771083581540978*^9, 
   3.7710835945884523`*^9}, {3.771084258837575*^9, 3.771084260138427*^9}, {
   3.771089106079487*^9, 3.771089118126458*^9}, {3.771089317703972*^9, 
   3.7710893251804914`*^9}, {3.771089589321455*^9, 3.7710895907860775`*^9}, {
   3.771101595283745*^9, 3.7711015962158113`*^9}, {3.771101911187518*^9, 
   3.771101914767723*^9}, {3.771101993407687*^9, 3.771101997373905*^9}, {
   3.7711020881095395`*^9, 3.771102097689073*^9}, {3.7711022108895693`*^9, 
   3.771102212561736*^9}, {3.771102244507637*^9, 3.7711022454461393`*^9}, {
   3.7711023227187014`*^9, 3.7711023237187867`*^9}, {3.7711024319268856`*^9, 
   3.7711024687285357`*^9}, {3.7711026925353866`*^9, 
   3.7711027066808434`*^9}, {3.7711027405195894`*^9, 
   3.7711027412324157`*^9}, {3.7711028088330135`*^9, 
   3.7711028648262777`*^9}, {3.7711029558182993`*^9, 3.77110295696642*^9}, {
   3.7711032411393385`*^9, 3.7711032422553596`*^9}, {3.7711032955593557`*^9, 
   3.7711032996276913`*^9}, {3.771103336061694*^9, 3.771103338980618*^9}, {
   3.771103370475107*^9, 3.7711033714511166`*^9}, {3.771103765164311*^9, 
   3.771103786799837*^9}, {3.7711038503910933`*^9, 3.771103876489087*^9}, {
   3.7711039191807985`*^9, 3.7711039200623417`*^9}, {3.7711042220788345`*^9, 
   3.7711042229363375`*^9}, {3.7711048598276873`*^9, 3.771104865050381*^9}, {
   3.7711051200758305`*^9, 3.7711051210515237`*^9}, {3.7711052010468435`*^9, 
   3.7711052118901978`*^9}, {3.7711052803879633`*^9, 
   3.7711053140416017`*^9}, {3.7711053727435007`*^9, 
   3.7711053821161613`*^9}, {3.771105449918454*^9, 3.7711054605800343`*^9}, {
   3.771105546996733*^9, 3.7711055473579893`*^9}, {3.7711058366348667`*^9, 
   3.771105838832412*^9}, {3.7711059259343805`*^9, 3.771105934874683*^9}, {
   3.771115446077047*^9, 3.7711154471611223`*^9}, {3.7711502712421603`*^9, 
   3.7711502722062826`*^9}, {3.771158783329757*^9, 3.771158784547639*^9}, {
   3.771172246946286*^9, 3.771172250715967*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"4a6c27e2-f698-4942-9e0f-b4b815b04b6b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Nominal\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"algebra 1\"", "\"algebra 2\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Nominal\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"algebra 1\"", "\"algebra 2\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["2288", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 2288, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association[
          "f1" -> Association["Weight" -> 1, "Type" -> "NumericalVector"]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 1537627216228573037]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "VectorLength" -> 1, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Type" -> "NominalVector", "Version" -> {12., 0}, "ID" -> 
             4026204838636604962]], 
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[
               "\n" -> 1, " \n" -> 2, "0 + 0 \n" -> 3, "0 + 10 \n" -> 4, 
                "0 + 15 \n" -> 5, "0 + 2 \n" -> 6, "0 + 46 \n" -> 7, 
                "0 + 8 \n" -> 8, "0 + 86 \n" -> 9, "0 + 95 \n" -> 10, 
                "0 + 98 \n" -> 11, "-1\n" -> 12, "1\n" -> 13, "1 + 0 \n" -> 
                14, "10" -> 15, "10\n" -> 16, "10 + 0 \n" -> 17, "1005" -> 18,
                 "10 + 1 \n" -> 19, "101" -> 20, "10 + 10 \n" -> 21, "1010" -> 
                22, "1014" -> 23, "1020" -> 24, "1026" -> 25, "10 + 29 \n" -> 
                26, "1030" -> 27, "10 + 33 \n" -> 28, "1035" -> 29, 
                "    10 + 3x = 10  \n" -> 30, "1041" -> 31, "1046" -> 32, 
                "10 + 49 \n" -> 33, "1056" -> 34, "    10 + 5x = 10  \n" -> 
                35, "    10 + 5x = 60  \n" -> 36, "10 + 60 \n" -> 37, "1060" -> 
                38, "1067" -> 39, "10 + 69 \n" -> 40, "10 + 7 \n" -> 41, 
                "10 + 75 \n" -> 42, "10 + 78 \n" -> 43, "1079" -> 44, 
                "10 + 8 \n" -> 45, "10 + 83 \n" -> 46, "1084" -> 47, "1089" -> 
                48, "1094" -> 49, "1098" -> 50, "10% of 11" -> 51, 
                "    - 10 + x = 1  \n" -> 52, "    10 + x = 1  \n" -> 53, 
                "    - 10x  +  / x + 11 = 0  \n" -> 54, "1 + 1 \n" -> 55, 
                "11" -> 56, "11\n" -> 57, "110" -> 58, "1104" -> 59, "11+12" -> 
                60, "1113 + 3615 \n" -> 61, "11 + 14 \n" -> 62, "1119" -> 63, 
                "1+12" -> 64, "1124" -> 65, "1128" -> 66, "1134" -> 67, 
                "1 + 14 \n" -> 68, "1140" -> 69, "1148 + 4232 \n" -> 70, 
                "1153" -> 71, "116" -> 72, "1166" -> 73, "1 + 17 \n" -> 74, 
                "117" -> 75, "1170" -> 76, "1175" -> 77, "118" -> 78, "1181" -> 
                79, "1186" -> 80, "119" -> 81, "1191" -> 82, 
                "    11 = x + 10  \n" -> 83, "    11x  + 4x + 11 = 0  \n" -> 
                84, "1 + 2 \n" -> 85, "12" -> 86, "120" -> 87, "1202" -> 88, 
                "1207" -> 89, "121" -> 90, "1       2             -11\n" -> 
                91, "1212" -> 92, "122" -> 93, "1                     -23\n" -> 
                94, "123" -> 95, "1             -271\n" -> 96, "12 + 8 \n" -> 
                97, "    - 12x  + 10x -  /  = 0  \n" -> 98, 
                "    12x  - 11x - 15 = 0  \n" -> 99, 
                "    12x  - 46x - 8 = 0  \n" -> 100, "    12 = x + 7  \n" -> 
                101, "-13\n" -> 102, "13" -> 103, "13\n" -> 104, 
                "1313 + 3009 \n" -> 105, "1329 + 9063 \n" -> 106, 
                "1             -33\n" -> 107, "137" -> 108, "138" -> 109, 
                "-1               381\n" -> 110, "1383 + 3834 \n" -> 111, 
                "    13 = x + 1  \n" -> 112, "1 + 4 \n" -> 113, "14" -> 114, 
                "1400 + 7429 \n" -> 115, "14 + 4 \n" -> 116, "1      442\n" -> 
                117, "147" -> 118, "1+5" -> 119, "15" -> 120, "15+12" -> 121, 
                "1521 + 2554 \n" -> 122, "1531 + 4977 \n" -> 123, "15 + 6 \n" -> 
                124, "1570 + 5887 \n" -> 125, "1570 + 8699 \n" -> 126, 
                "1             -575\n" -> 127, "158" -> 128, "1583 + 6324 \n" -> 
                129, "    15 = x + 4  \n" -> 130, "16" -> 131, 
                "1616 + 5751 \n" -> 132, "1630 + 8860 \n" -> 133, 
                "1632 + 9300 \n" -> 134, "165\n" -> 135, "16 + 6 \n" -> 136, 
                "1664 + 8135 \n" -> 137, "16 + 70 \n" -> 138, "1 + 69 \n" -> 
                139, "1692 + 5818 \n" -> 140, "1721 + 5812 \n" -> 141, 
                "1723 + 5702 \n" -> 142, "1726 + 9260 \n" -> 143, "-173\n" -> 
                144, "1 + 73 \n" -> 145, "1 + 75 \n" -> 146, "175" -> 147, 
                "1750 + 5035 \n" -> 148, "1                         -8\n" -> 
                149, "1816 + 6956 \n" -> 150, "184" -> 151, "185\n" -> 152, 
                "186" -> 153, "18 + 64 " -> 154, "187" -> 155, "188" -> 156, 
                "1 + 89 \n" -> 157, "189" -> 158, "    18 = x + 8  \n" -> 159,
                 "1 + 9 \n" -> 160, "190" -> 161, "191" -> 162, "192" -> 163, 
                "1930 + 4841 \n" -> 164, "1967 + 3600 \n" -> 165, 
                "197     3\n" -> 166, "1985 + 4928 \n" -> 167, 
                "    -1 + x = -1  \n" -> 168, "2\n" -> 169, "2 + 0 \n" -> 170,
                 "200" -> 171, "2005 + 8361 \n" -> 172, "200% of 3" -> 173, 
                "20 + 3 \n" -> 174, "2087 + 5640 \n" -> 175, "20% of 33" -> 
                176, "2         1\n" -> 177, "2   1\n" -> 178, "2 + 1 \n" -> 
                179, "210" -> 180, "2   122\n" -> 181, "2  13       4\n" -> 
                182, "-2      14\n" -> 183, "2 + 14 \n" -> 184, 
                "2143 + 8202 \n" -> 185, "215" -> 186, "2      18\n" -> 187, 
                "2              2\n" -> 188, "2 + 2 \n" -> 189, "22 + 10 \n" -> 
                190, "2219 + 2574 \n" -> 191, "2             23\n" -> 192, 
                "224" -> 193, "224\n" -> 194, "2 + 25 \n" -> 195, 
                "2259 + 6033 \n" -> 196, "2                      -26\n" -> 
                197, "2267 + 6108 \n" -> 198, "2278 + 6186 \n" -> 199, "229" -> 
                200, "    2 - 2x = - 22  \n" -> 201, "2             3\n" -> 
                202, "2 + 3 \n" -> 203, "2+3" -> 204, 
                "-2                            -32\n" -> 205, "-23      3\n" -> 
                206, "234" -> 207, "23 + 5 \n" -> 208, "236\n" -> 209, 
                "2   37      4\n" -> 210, "2 + 39 \n" -> 211, "239" -> 212, 
                "2390 + 5199 \n" -> 213, "2/3 x+3 =15" -> 214, 
                "    2 = 3x + 7x + 2  \n" -> 215, "-24\n" -> 216, "24\n" -> 
                217, "240" -> 218, "241" -> 219, "242" -> 220, 
                "2420 + 4220 \n" -> 221, "243" -> 222, "2433 + 5845 \n" -> 
                223, "244" -> 224, "245" -> 225, "246" -> 226, "248" -> 227, 
                "    2(4x -  / ) =    /   \n" -> 228, 
                "    - 24x  - 20x + 24 = 0  \n" -> 229, 
                "    - 24x  + 58x + 16 = 0  \n" -> 230, "250" -> 231, 
                "25 + 2 \n" -> 232, "2      53\n" -> 233, "2551 + 8585 \n" -> 
                234, "25 + 6 \n" -> 235, "2 + 57 \n" -> 236, "2587 + 4970 \n" -> 
                237, "2590 + 3048 \n" -> 238, "    25x  - 30x - 7 = 0  \n" -> 
                239, "2 + 6 \n" -> 240, "2    61       3\n" -> 241, 
                "2648 + 2854 \n" -> 242, "265" -> 243, "2653 + 5175 \n" -> 
                244, "2 + 68 \n" -> 245, "269" -> 246, "2697 + 5880 \n" -> 
                247, "2   7\n" -> 248, "2729 + 6856 \n" -> 249, "2 + 73 \n" -> 
                250, "2    73        21\n" -> 251, 
                "2                         -74\n" -> 252, "2751 + 4607 \n" -> 
                253, "2757 + 2994 \n" -> 254, "27 + 6 \n" -> 255, "279" -> 
                256, "2815 + 5126 \n" -> 257, "2829 + 1933 \n" -> 258, 
                "28 + 35 \n" -> 259, "28    4\n" -> 260, "2 + 85 \n" -> 261, 
                "28 + 5 \n" -> 262, "    28x  - 56x + 28 = 0  \n" -> 263, 
                "2 + 9 \n" -> 264, "2      91\n" -> 265, "291" -> 266, "293" -> 
                267, "294" -> 268, "2940 + 6608 \n" -> 269, "2943 + 8463 \n" -> 
                270, "295" -> 271, "296" -> 272, "2968 + 7604 \n" -> 273, 
                "297" -> 274, "298" -> 275, "299" -> 276, "    2x = 2  \n" -> 
                277, "       - 2x + 20y = - 20  \n" -> 278, 
                "    2x + 2y =    /  \n" -> 279, "       - 2x + 2y = 16  \n" -> 
                280, "    2x + 2y = 18 \n" -> 281, "    2x - 2y = 2 \n" -> 
                282, "    - 2x - 2y = - 28 \n" -> 283, "    2 = x - 3  \n" -> 
                284, "       - 2x =      /  + 3y  \n" -> 285, 
                "      2x - 3y = 19  \n" -> 286, "    2x + 3y = - 20 \n" -> 
                287, "    2x + 3y = 6 \n" -> 288, "       - 2x - 3y = 7  \n" -> 
                289, "      2x + 4y =    /   \n" -> 290, 
                "      2x + 4y =     /   \n" -> 291, 
                "    2x = - 4y +     /    \n" -> 292, 
                "    2x - 4y =     /  \n" -> 293, "    2x + 4y = 0 \n" -> 294,
                 "       - 2x + 4y = - 18  \n" -> 295, "    2x - 4y = 18 \n" -> 
                296, "      2x - 4y = - 24  \n" -> 297, 
                "    2x + 4y = - 8 \n" -> 298, "    2x + 5 = - 7  \n" -> 299, 
                "    2x - 5 + 7x = 85  \n" -> 300, 
                "       - 2x + 5y = 15  \n" -> 301, "      2x + 5y = 21  \n" -> 
                302, "    2x + 5y = - 22 \n" -> 303, 
                "       - 2x + 5y = 23  \n" -> 304, "    2x + 5y = 28 \n" -> 
                305, "      2x - 5y = 35  \n" -> 306, "    2x + 5y = 70 \n" -> 
                307, "    2x - 7 = 13  \n" -> 308, 
                "    2x - 7 = 4x -    /   \n" -> 309, 
                "    - 2x +  /  = - 7x +    /   \n" -> 310, 
                "    2x + 8 = 10  \n" -> 311, "    - 2x + 8 = 32  \n" -> 312, 
                "    2x  + 9x + 11 = 0  \n" -> 313, 
                "    - 2x  -     / x - 18 = 0  \n" -> 314, 
                "       - 2x - y =     /   \n" -> 315, 
                "    2x +  / y =    /  \n" -> 316, "       - 2x + y = 1  \n" -> 
                317, "    2x + y = 12 \n" -> 318, 
                "       - 2x - y = - 13  \n" -> 319, 
                "       - 2x - y = - 17  \n" -> 320, 
                "      2x - y = - 22  \n" -> 321, "    2x - y = - 28 \n" -> 
                322, "    2x - y = - 3 \n" -> 323, "    2x + y = - 6 \n" -> 
                324, "    - 2y + 4x = 20 \n" -> 325, 
                "      2y - x = - 16  \n" -> 326, "-3\n" -> 327, "3\n" -> 328,
                 "300" -> 329, "30 + 1 \n" -> 330, "3018 + 2248 \n" -> 331, 
                "3021 + 8010 \n" -> 332, "303" -> 333, "30+30" -> 334, 
                "30+40" -> 335, "3096 + 2460 \n" -> 336, "3 + 10 \n" -> 337, 
                "310" -> 338, "3109 + 7046 \n" -> 339, "3 + 11 \n" -> 340, 
                "-3             123\n" -> 341, "3 + 13 \n" -> 342, "313" -> 
                343, "3147 + 6538 \n" -> 344, "3160 + 1245 \n" -> 345, 
                "3   2\n" -> 346, "3           21\n" -> 347, 
                "-3   2   287        2\n" -> 348, "3 + 24 \n" -> 349, "325" -> 
                350, "3       2      6\n" -> 351, "32 + 6 \n" -> 352, 
                "3                        -27\n" -> 353, "3277 + 7411 \n" -> 
                354, "3 + 28 \n" -> 355, "3              3\n" -> 356, 
                "3      3\n" -> 357, "33" -> 358, "33 + 1 \n" -> 359, "331" -> 
                360, "3      3             -18\n" -> 361, 
                "3             -33\n" -> 362, "33 + 4 \n" -> 363, "3 + 37 \n" -> 
                364, "3 + 38 \n" -> 365, "338" -> 366, 
                "    3 - 3x = - 30  \n" -> 367, "3 + 4 \n" -> 368, "34+1" -> 
                369, "3434 + 9380 \n" -> 370, "344" -> 371, "347" -> 372, 
                "    3 + 4x = - 45  \n" -> 373, "351" -> 374, 
                "3523 + 8800 \n" -> 375, "3 + 55 \n" -> 376, "35 + 6 \n" -> 
                377, "35 + 7 \n" -> 378, "3      58\n" -> 379, 
                "    - 35x  + 53x - 20 = 0  \n" -> 380, "362" -> 381, 
                "36   2   318\n" -> 382, "3      63\n" -> 383, "363" -> 384, 
                "364" -> 385, "365" -> 386, "366" -> 387, "3661 + 5756 \n" -> 
                388, "367" -> 389, "368" -> 390, "369" -> 391, 
                "    3 - 6x = 7x - 36  \n" -> 392, "-37\n" -> 393, "3 + 7 \n" -> 
                394, "37\n" -> 395, "3 + 73 \n" -> 396, "3740 + 4179 \n" -> 
                397, "375" -> 398, "3782 + 1330 \n" -> 399, "380" -> 400, 
                "3825 + 6015 \n" -> 401, "384" -> 402, "3850 + 4435 \n" -> 
                403, "386" -> 404, "3880 + 6919 \n" -> 405, "3 + 90 \n" -> 
                406, "39 + 10 \n" -> 407, "3928 + 9719 \n" -> 408, 
                "3979 + 4765 \n" -> 409, "39 + 8 \n" -> 410, 
                "-3(\!\(\*SuperscriptBox[\(x\), \(2\)]\)-2x+7)" -> 411, 
                "    3x  - 12x + 13 = 0  \n" -> 412, 
                "       - 3x + 12y = - 9  \n" -> 413, "    - 3 = x + 2  \n" -> 
                414, "    - 3x  - 2x + 4 = 0  \n" -> 415, 
                "    3x + 2y =     /  \n" -> 416, "       - 3x - 2y = 5  \n" -> 
                417, "    3 = x + 3  \n" -> 418, "       - 3x + 3y = 21  \n" -> 
                419, "      3x + 3y = 24  \n" -> 420, 
                "    - 3x = - 3y - 39 \n" -> 421, "    - 3 = x - 4  \n" -> 
                422, "      3x + 4y =     /   \n" -> 423, 
                "    3x + 4y =      /  \n" -> 424, 
                "    3x +  /4y =     /4 \n" -> 425, "    3x + 5y = 15 \n" -> 
                426, "      3x - 5y = - 31  \n" -> 427, "    3x + 5y = 61 \n" -> 
                428, "    3x - 6 = - 6  \n" -> 429, "    3x + 7 = 25  \n" -> 
                430, "    - 3x - y =     /  \n" -> 431, 
                "    3x +  / y =    /  \n" -> 432, 
                "    3x -  / y =     /  \n" -> 433, "    - 3x - y = 1 \n" -> 
                434, "       - 3x - y = 15  \n" -> 435, 
                "      3x -  / y = - 23  \n" -> 436, 
                "       - 3x +  / y = - 24  \n" -> 437, 
                "    - 3x + y = - 31 \n" -> 438, "      3x + y = - 8  \n" -> 
                439, "4\n" -> 440, "4 + 0 \n" -> 441, "4027 + 2502 \n" -> 442,
                 "403" -> 443, "4064 + 9078 \n" -> 444, "4096 + 5082 \n" -> 
                445, "-41\n" -> 446, "41\n" -> 447, "4 + 10 \n" -> 448, 
                "4116 + 6636 \n" -> 449, "41 + 2 \n" -> 450, "41+2" -> 451, 
                "413" -> 452, "4154 + 9932 \n" -> 453, "41 + 6 \n" -> 454, 
                "416" -> 455, "417" -> 456, "418" -> 457, 
                "4             -184\n" -> 458, "4189 + 5839 \n" -> 459, 
                "41 + 9 \n" -> 460, "419" -> 461, "420" -> 462, "421" -> 463, 
                "422" -> 464, "423" -> 465, "4261 + 8473 \n" -> 466, 
                "4270 + 9940 \n" -> 467, "4272 + 1001 \n" -> 468, "428" -> 
                469, "4            29\n" -> 470, "4292 + 9179 \n" -> 471, 
                "431" -> 472, "43 + 4 \n" -> 473, "436" -> 474, 
                "4              4\n" -> 475, "44 + 1 \n" -> 476, 
                "4419 + 1814 \n" -> 477, "4420 + 6691 \n" -> 478, 
                "4            -440\n" -> 479, "4447 + 4604 \n" -> 480, 
                "44 + 5 \n" -> 481, "44 + 85 \n" -> 482, "4 + 49 \n" -> 483, 
                "449" -> 484, "4 + 5 \n" -> 485, "45 + 0 \n" -> 486, "451" -> 
                487, "4 + 55 \n" -> 488, "455" -> 489, "45 + 8 \n" -> 490, 
                "4 + 60 \n" -> 491, "4609 + 2756 \n" -> 492, "46 + 2 \n" -> 
                493, "462" -> 494, "4662 + 2032 \n" -> 495, "46 + 8 \n" -> 
                496, "    4 + 6x = 16  \n" -> 497, "470" -> 498, "471" -> 499,
                 "472" -> 500, "473" -> 501, "4731 + 1603 \n" -> 502, 
                "4731 + 9595 \n" -> 503, "4 + 74 \n" -> 504, "474" -> 505, 
                "4741 + 6938 \n" -> 506, "47 + 5 \n" -> 507, "475" -> 508, 
                "4 + 76 \n" -> 509, "47 + 6 \n" -> 510, "476" -> 511, 
                "4764 + 7711 \n" -> 512, "4781 + 7748 \n" -> 513, "479" -> 
                514, "    4(7x + 4) = 128  \n" -> 515, "4810 + 7408 \n" -> 
                516, "48 + 2 \n" -> 517, "4 + 83 \n" -> 518, "4832 + 1852 \n" -> 
                519, "4 + 86 \n" -> 520, "4880 + 1099 \n" -> 521, 
                "4896 + 8505 \n" -> 522, "4 + 9 \n" -> 523, "4 + 90 \n" -> 
                524, "4910 + 8680 \n" -> 525, "4918 + 3236 \n" -> 526, "493" -> 
                527, "496" -> 528, "      / (4x -  / ) =      /     \n" -> 
                529, "    4x + 10 = 5x + 5  \n" -> 530, 
                "      4x - 10y =  /   \n" -> 531, 
                "    - 4x + 2y =     /  \n" -> 532, "    4x + 2y =     /  \n" -> 
                533, "    4x + 2y = - 16 \n" -> 534, "    4x + 2y = 50 \n" -> 
                535, "      4x - 2y = - 8  \n" -> 536, 
                "      4x - 3y =     /   \n" -> 537, 
                "    4x + 3y =     /  \n" -> 538, "    4x + 3y = - 17 \n" -> 
                539, "      4x + 3y = 43  \n" -> 540, 
                "      4x + 3y = 55  \n" -> 541, "    4x - 3y = - 7 \n" -> 
                542, "    4x = - 44  \n" -> 543, "       - 4x + 4y = 4  \n" -> 
                544, "    4x + 4y = 4 \n" -> 545, "       - 4x + 4y = 68  \n" -> 
                546, "    4x + 7 = 15  \n" -> 547, 
                "    - 4x + 7 = 6x - 83  \n" -> 548, 
                "    4x  - 7x +    /  = 0  \n" -> 549, 
                "    4x  + 7x + 4 = 0  \n" -> 550, "    4x - 8 = 8  \n" -> 
                551, "    4x - 9 = 19  \n" -> 552, "    - 4x + 9 = - 27  \n" -> 
                553, "       - 4x +  / y =    /   \n" -> 554, 
                "       - 4x -  / y =     /   \n" -> 555, 
                "       - 4x +  / y =     /   \n" -> 556, 
                "    - 4x + y = - 10 \n" -> 557, "      4x + y = 20  \n" -> 
                558, "    - 4x - y = - 23 \n" -> 559, 
                "       - 4x +  / y = 4  \n" -> 560, "    4x + y = - 7 \n" -> 
                561, "      4y + x = 22  \n" -> 562, "5\n" -> 563, "5 + 0 \n" -> 
                564, "501" -> 565, "5035 + 9586 \n" -> 566, "5048 + 8140 \n" -> 
                567, "50 + 5 \n" -> 568, "505" -> 569, "5074 + 7065 \n" -> 
                570, "50 + 9 \n" -> 571, "50 + 93 \n" -> 572, "-51\n" -> 573, 
                "5 + 1 \n" -> 574, "5        10\n" -> 575, "51 + 0 \n" -> 576,
                 "5             15\n" -> 577, "516" -> 578, "5 + 2 \n" -> 579,
                 "5219 + 1965 \n" -> 580, "526" -> 581, "5278 + 2794 \n" -> 
                582, "5282 + 9116 \n" -> 583, "5290 + 8994 \n" -> 584, 
                "5(2x+4)" -> 585, "-53\n" -> 586, "5         35\n" -> 587, 
                "5361 + 5519 \n" -> 588, "    - 5(3 + 6x) =     /   \n" -> 
                589, "5 + 37 \n" -> 590, "537" -> 591, "538" -> 592, "539" -> 
                593, "5396 + 5061 \n" -> 594, "    5( /3x + 1) =    /3  \n" -> 
                595, "5 + 4 \n" -> 596, "540" -> 597, "541" -> 598, "542" -> 
                599, "543" -> 600, "544" -> 601, "5465 + 8277 \n" -> 602, 
                "5465 + 9956 \n" -> 603, "547" -> 604, 
                "    - 5( - 4 +  / x) =  /   \n" -> 605, "5              5\n" -> 
                606, "5            5\n" -> 607, "5         5\n" -> 608, 
                "5        5\n" -> 609, "5       5\n" -> 610, "55 + 10 \n" -> 
                611, "5519 + 6804 \n" -> 612, "55 + 4 \n" -> 613, 
                "5571 + 3857 \n" -> 614, "5571 + 5676 \n" -> 615, "55 + 9 \n" -> 
                616, "    - 5 + 5x = 3x -    /   \n" -> 617, "561" -> 618, 
                "5610 + 6137 \n" -> 619, "5626 + 9732 \n" -> 620, 
                "5642 + 6535 \n" -> 621, "5 + 69 \n" -> 622, 
                "    56x  + 23x + 2 = 0  \n" -> 623, "5712 + 2107 \n" -> 624, 
                "572" -> 625, "5745 + 7730 \n" -> 626, "5750 + 9568 \n" -> 
                627, "576" -> 628, "57 + 7 \n" -> 629, 
                "    - 5 + 7x = 79  \n" -> 630, "58\n" -> 631, "580" -> 632, 
                "5 + 82 \n" -> 633, "5840 + 1828 \n" -> 634, "5 + 86 \n" -> 
                635, "587" -> 636, "5 + 88 \n" -> 637, "588" -> 638, "589" -> 
                639, "5893 + 2493 \n" -> 640, "58 + 95 \n" -> 641, 
                "5898 + 8735 \n" -> 642, "59 + 0 \n" -> 643, "590" -> 644, 
                "59 + 1 \n" -> 645, "591" -> 646, "59 + 10 \n" -> 647, "592" -> 
                648, "593" -> 649, "5930 + 4357 \n" -> 650, "595" -> 651, 
                "5980 + 1855 \n" -> 652, "5% of 112" -> 653, 
                "-(5\!\(\*SuperscriptBox[\(x\), \(4\)]\)-8)" -> 654, 
                "    - 5x = - 10  \n" -> 655, "    5x  + 10x + 6 = 0  \n" -> 
                656, "    5 + x = 12  \n" -> 657, "    5x  + 12x + 4 = 0  \n" -> 
                658, "    - 5x  + 13x - 8 = 0  \n" -> 659, 
                "    - 5x - 2 = - 27  \n" -> 660, "    5x + 2y = - 31 \n" -> 
                661, "      5x - 2y = - 47  \n" -> 662, "    5x + 2y = 50 \n" -> 
                663, "       - 5x - 2y = 8  \n" -> 664, 
                "       - 5x + 3y =     /   \n" -> 665, 
                "    - 5x + 3y = 36 \n" -> 666, "    - 5x + 3y = - 8 \n" -> 
                667, "    - 5x + 4 + 2x = 25  \n" -> 668, 
                "      5x + 4y =     /   \n" -> 669, "      5x - 4y = 30  \n" -> 
                670, "       - 5x - 4y = - 39  \n" -> 671, 
                "      5x - 4y = - 39  \n" -> 672, "    - 5x - 4y = - 67 \n" -> 
                673, "      5x - 4y = 68  \n" -> 674, "    5x + 5 = 10  \n" -> 
                675, "    - 5x + 5 = 25  \n" -> 676, "      5x - 5y = 45  \n" -> 
                677, "    5x + 5y = 6 \n" -> 678, "    5x - 5y = - 70 \n" -> 
                679, "    5x + 7 = - 33  \n" -> 680, 
                "    - 5x + 7 + 6x = 18  \n" -> 681, "    - 5x + 8 = 28  \n" -> 
                682, "    5x + 9 = -1  \n" -> 683, "    5x - 9 = - 19  \n" -> 
                684, "    5x +  / y =  /  \n" -> 685, 
                "    5x - y =     /  \n" -> 686, "      5x + y = 11  \n" -> 
                687, "      5x - y = - 17  \n" -> 688, 
                "    5x -  / y = 24 \n" -> 689, "    - 5x + y = 27 \n" -> 690,
                 "      5x + y = 40  \n" -> 691, "      5x +  / y = - 48  \n" -> 
                692, "6 + 0 \n" -> 693, "612" -> 694, "6 + 13 \n" -> 695, 
                "6 + 16 \n" -> 696, "6174 + 2651 \n" -> 697, "6178 + 2038 \n" -> 
                698, "-62\n" -> 699, "6 + 2 \n" -> 700, "6213 + 8955 \n" -> 
                701, "6221 + 2277 \n" -> 702, "623" -> 703, "627" -> 704, 
                "63" -> 705, "63 + 0 \n" -> 706, "63 + 10 \n" -> 707, 
                "6 + 32 \n" -> 708, "632" -> 709, "6 + 33 \n" -> 710, 
                "63 + 5 \n" -> 711, "6379 + 2448 \n" -> 712, "638" -> 713, 
                "6 + 4 \n" -> 714, "64" -> 715, "6 + 5 \n" -> 716, "65" -> 
                717, "6529 + 4391 \n" -> 718, "653" -> 719, "6534 + 8733 \n" -> 
                720, "66" -> 721, "6618 + 9094 \n" -> 722, "66 + 2 \n" -> 723,
                 "663" -> 724, "6639 + 6370 \n" -> 725, "666" -> 726, 
                "6669 + 6330 \n" -> 727, "6671 + 7814 \n" -> 728, 
                "6682 + 8481 \n" -> 729, "6 + 7 \n" -> 730, "67" -> 731, 
                "6703 + 2453 \n" -> 732, "6710 + 5531 \n" -> 733, 
                "6719 + 9083 \n" -> 734, "67 + 3 \n" -> 735, "674" -> 736, 
                "6753 + 2906 \n" -> 737, "6775 + 7738 \n" -> 738, "678" -> 
                739, "    6(  /  + 7x) = - 44  \n" -> 740, "68" -> 741, "680" -> 
                742, "68 + 4 \n" -> 743, "6842 + 8050 \n" -> 744, "686" -> 
                745, "689" -> 746, "    - 6(8 + x) =      /   \n" -> 747, 
                "69" -> 748, "6963 + 4488 \n" -> 749, "6980 + 6177 \n" -> 750,
                 "6987 + 5576 \n" -> 751, "6997 + 8056 \n" -> 752, 
                "    6x  + 12x + 7 = 0  \n" -> 753, "    6x + 1 = 61  \n" -> 
                754, "    6x  + 2x + 8 = 0  \n" -> 755, 
                "    6x - 3 = - 75  \n" -> 756, "      6x + 3y =      /   \n" -> 
                757, "      6x + 3y = 69  \n" -> 758, "    6x = - 48  \n" -> 
                759, "    - 6x  + 4x + 7 = 0  \n" -> 760, 
                "    6x - 5 = 67  \n" -> 761, "    6x + 7 = 25  \n" -> 762, 
                "    - 6 + x + x = 14  \n" -> 763, "7\n" -> 764, "70 + 10 \n" -> 
                765, "70 + 17 \n" -> 766, "70 + 2 \n" -> 767, "70 + 4 \n" -> 
                768, "7067 + 9862 \n" -> 769, "7 + 1 \n" -> 770, 
                "7102 + 2281 \n" -> 771, "7 + 11 \n" -> 772, "712" -> 773, 
                "7131 + 1009 \n" -> 774, "7136 + 8596 \n" -> 775, 
                "7143 + 8177 \n" -> 776, "7 + 15 \n" -> 777, "715" -> 778, 
                "71 + 6 \n" -> 779, "    7(-1x + 4) = 91  \n" -> 780, 
                "7 + 21 \n" -> 781, "72 + 10 \n" -> 782, "7250 + 7530 \n" -> 
                783, "7272 + 6191 \n" -> 784, "7280 + 3811 \n" -> 785, "730" -> 
                786, "73 + 2 \n" -> 787, "7333 + 2722 \n" -> 788, 
                "7338 + 3228 \n" -> 789, "736" -> 790, "7379 + 6677 \n" -> 
                791, "7 + 38 \n" -> 792, "    7(3x + 2) = 266  \n" -> 793, 
                "7430 + 5558 \n" -> 794, "7438 + 3315 \n" -> 795, "744" -> 
                796, "7459 + 4738 \n" -> 797, "748" -> 798, "7498 + 1176 \n" -> 
                799, "752" -> 800, "7524 + 7480 \n" -> 801, "7542 + 3349 \n" -> 
                802, "755" -> 803, "7 + 56 \n" -> 804, "7614 + 5986 \n" -> 
                805, "76 + 3 \n" -> 806, "7635 + 7934 \n" -> 807, "765" -> 
                808, "7665 + 3538 \n" -> 809, "7        7\n" -> 810, "77" -> 
                811, "770" -> 812, "773" -> 813, "7748 + 4445 \n" -> 814, 
                "77 + 70 \n" -> 815, "778" -> 816, "7 + 79 \n" -> 817, 
                "7796 + 7881 \n" -> 818, "    7 - 7x = 63  \n" -> 819, "780" -> 
                820, "78 + 10 \n" -> 821, "    7( - 8 + 4x) = 84  \n" -> 822, 
                "78 + 6 \n" -> 823, "788" -> 824, "79\n" -> 825, "7 + 90 \n" -> 
                826, "7900 + 6469 \n" -> 827, "794" -> 828, "7946 + 9908 \n" -> 
                829, "7948 + 9978 \n" -> 830, "7949 + 9040 \n" -> 831, "797" -> 
                832, "7982 + 5589 \n" -> 833, "7988 + 5800 \n" -> 834, 
                "     / (  /  - 7x) =     /     \n" -> 835, "    7x = 0  \n" -> 
                836, "    7x  - 10x + 1 = 0  \n" -> 837, 
                "    - 7x + 10 = - x + 4  \n" -> 838, 
                "    7x  - 11x + 5 = 0  \n" -> 839, "    7 + x = 13  \n" -> 
                840, "    7x  + 14x + 7 = 0  \n" -> 841, 
                "    - 7 + x = 2  \n" -> 842, "    - 7x - 5 = - 26  \n" -> 
                843, "    7x + 6 = - 78  \n" -> 844, "-80\n" -> 845, 
                "8 + 0 \n" -> 846, "8011 + 9651 \n" -> 847, "8059 + 1271 \n" -> 
                848, "806" -> 849, "8074 + 7521 \n" -> 850, "8088 + 3140 \n" -> 
                851, "8088 + 7921 \n" -> 852, "8 + 10 \n" -> 853, "810" -> 
                854, "8 + 11 \n" -> 855, "8118 + 4430 \n" -> 856, 
                "8119 + 9714 \n" -> 857, "8158 + 7658 \n" -> 858, 
                "8168 + 4402 \n" -> 859, "817" -> 860, "8192 + 7500 \n" -> 
                861, "8   2\n" -> 862, "821" -> 863, "82 + 10 \n" -> 864, 
                "826" -> 865, "    8 + 2x = 14  \n" -> 866, "83\n" -> 867, 
                "8325 + 1106 \n" -> 868, "8327 + 6129 \n" -> 869, "836" -> 
                870, "83 + 72 \n" -> 871, "8378 + 2232 \n" -> 872, "8 + 4 \n" -> 
                873, "841" -> 874, "8 + 44 \n" -> 875, "846" -> 876, 
                "8 + 47 \n" -> 877, "84 + 7 \n" -> 878, "851" -> 879, 
                "8544 + 3707 \n" -> 880, "856" -> 881, "8589 + 7764 \n" -> 
                882, "    - 8 - 5x = 17  \n" -> 883, "    8 + 5x = 48  \n" -> 
                884, "8 + 6 \n" -> 885, "861" -> 886, "8719 + 6369 \n" -> 887,
                 "873" -> 888, "8759 + 8868 \n" -> 889, "8 + 76 \n" -> 890, 
                "8784 + 3944 \n" -> 891, "879" -> 892, 
                "    - 8 - 7x = 62  \n" -> 893, "8826 + 6933 \n" -> 894, 
                "884" -> 895, "8      8    6\n" -> 896, "8880 + 2001 \n" -> 
                897, "89" -> 898, "8932 + 7141 \n" -> 899, "894" -> 900, 
                "8 + 95 \n" -> 901, "8 + 98 \n" -> 902, 
                "    8x  + 10x + 9 = 0  \n" -> 903, 
                "    8x  + 13x + 5 = 0  \n" -> 904, 
                "    - 8x  - 14x + 4 = 0  \n" -> 905, "8x-2=22" -> 906, 
                "    8x  - 3x + 2 = 0  \n" -> 907, "9" -> 908, "9\n" -> 909, 
                "9 + 0 \n" -> 910, "90+200" -> 911, "9043 + 3293 \n" -> 912, 
                "906" -> 913, "90 + 8 \n" -> 914, "90 + 9 \n" -> 915, 
                "9 + 1 \n" -> 916, "9 + 10 \n" -> 917, "9 + 11 \n" -> 918, 
                "911" -> 919, "9 + 12 \n" -> 920, "922" -> 921, 
                "9260 + 1150 \n" -> 922, "9 + 29 \n" -> 923, "-93\n" -> 924, 
                "9             3\n" -> 925, "9300 + 2212 \n" -> 926, "931" -> 
                927, "9320 + 6116 \n" -> 928, "9346 + 8468 \n" -> 929, "936" -> 
                930, "9361 + 9434 \n" -> 931, "9 + 39 \n" -> 932, 
                "    9 - 3x = - 21  \n" -> 933, "    9 + 3x + 7x = 39  \n" -> 
                934, "940" -> 935, "94 + 2 \n" -> 936, "9422 + 5414 \n" -> 
                937, "94 + 5 \n" -> 938, "94 + 6 \n" -> 939, "9474 + 9705 \n" -> 
                940, "949" -> 941, "9 + 5 \n" -> 942, "9503 + 3152 \n" -> 943,
                 "9514 + 3323 \n" -> 944, "9525 + 2244 \n" -> 945, 
                "9532 + 5499 \n" -> 946, "954" -> 947, "9577 + 7198 \n" -> 
                948, "9 + 58 \n" -> 949, "958" -> 950, 
                "    9 - 5x = - 6x - 2  \n" -> 951, "9 + 6 \n" -> 952, 
                "96 + 0 \n" -> 953, "9600 + 7472 \n" -> 954, "9618 + 8587 \n" -> 
                955, "96 + 2 \n" -> 956, "963" -> 957, "96 + 43 \n" -> 958, 
                "96 + 7 \n" -> 959, "968" -> 960, "9681 + 2776 \n" -> 961, 
                "    9 + 6x + 4x = 29  \n" -> 962, "9 + 7 \n" -> 963, "974" -> 
                964, "980" -> 965, "9827 + 8472 \n" -> 966, "984" -> 967, 
                "9857 + 3068 \n" -> 968, "9 + 88 \n" -> 969, 
                "9                    9\n" -> 970, "9927 + 9121 \n" -> 971, 
                "994" -> 972, "9964 + 6451 \n" -> 973, "999" -> 974, 
                "    - 9 + x = - 5  \n" -> 975, "      9x - 5y = 41  \n" -> 
                976, "    - 9 + x = - 7  \n" -> 977, 
                "    9x  - 8x + 11 = 0  \n" -> 978, "Add 1/2 and 1/3" -> 979, 
                "A salesman is paid a monthly salary of $2,300 plus 7% \
commission on his monthly sales.\nDetermine the amount of sales required for \
his total monthly income to be $3,000." -> 980, 
                "A salesman tells you that the $140 earrings are already \
marked 20% off. What\nwas the original price?" -> 981, 
                "A $750 watch is on sale for 15% off. Find the sale price." -> 
                982, "Combine like terms of 3a-6a+10a-a" -> 983, 
                "Combine like terms of 3n-5\!\(\*SuperscriptBox[\(n\), \
\(\(2\)\(\\ \)\)]\)+6n-10+2\!\(\*SuperscriptBox[\(n\), \(2\)]\)" -> 984, 
                "Combine the like terms of 5x-10y+6z-3x" -> 985, "cos(45)" -> 
                986, "cos(\[Pi]/13)" -> 987, 
                "Evaluate 2\!\(\*SuperscriptBox[\(x\), \(2\)]\)-9 for x=-3" -> 
                988, "Evaluate a-\!\(\*SuperscriptBox[\(b\), \(2\)]\) when \
a=4 and b=2" -> 989, 
                "Evaluate \!\(\*SuperscriptBox[\(a\), \(2\)]\)+b when a=7 and \
b=1" -> 990, 
                "Evaluate \!\(\*SuperscriptBox[\(a\), \
\(2\)]\)-\!\(\*SuperscriptBox[\(b\), \(2\)]\) when a=5 and b=3" -> 991, 
                "Expand (a+b\!\(\*SuperscriptBox[\()\), \(3\)]\)" -> 992, 
                "express 12 1/3 as an improper fraction" -> 993, 
                "express 3 2/7 as an improper fraction" -> 994, 
                "Express 42/5 as a mixed number" -> 995, 
                "Express 53/9 as a mixed number" -> 996, 
                "Find a perpedicular line of y=3x+2 with y intercept of the \
origin" -> 997, "Find the equation of best fit for the below listed data" -> 
                998, "Graph the inequality y<3x+4" -> 999, 
                "Graph the parabola give by \!\(\*SuperscriptBox[\(x\), \
\(2\)]\)+3x+2. Find the zeros, vertex and intercept" -> 1000, 
                "How many miutes are in a day?" -> 1001, 
                "Identify the property used in the equations below as \
distributive, inverse or associative" -> 1002, 
                "Is x=-8 a solution to 1/2x+6>3?" -> 1003, 
                "Multiply 24/3 and 27/8" -> 1004, "Multiply 8 and 3/24" -> 
                1005, "Plot 1.25, 2/3 and 2 on a number line" -> 1006, 
                "Simplify 10-(7+1)" -> 1007, "Simplify 10-7+1" -> 1008, 
                "Simplify (15-3)/(1+5)" -> 1009, 
                "Simplify 24/(4-2\!\(\*SuperscriptBox[\()\), \(3\)]\)" -> 
                1010, "Simplify (2-5\!\(\*SuperscriptBox[\()\), \(2\)]\)" -> 
                1011, "Simplify 2-\!\(\*SuperscriptBox[\(5\), \(2\)]\)" -> 
                1012, 
                "Simplify 4+5(1+12/6\!\(\*SuperscriptBox[\()\), \(2\)]\)" -> 
                1013, "sin(121)" -> 1014, "sin(40)" -> 1015, "sin(\[Pi]/3)" -> 
                1016, "sin(\[Pi]/5)" -> 1017, "Solve 3|x-5|=12" -> 1018, 
                "Solve 3(x-5)+4=10" -> 1019, "Solve 4x-9=11" -> 1020, 
                "Solve 8(x-5)+4=10" -> 1021, "Solve 9(x-3)+4=10" -> 1022, 
                "Solve and graph the solution to 2x-3<7" -> 1023, 
                "Solve and graph the solution to |3x-1|\[GreaterEqual]10" -> 
                1024, "Solve (\!\(\*SuperscriptBox[\(x\), \(2\)]\)-5)=20" -> 
                1025, "Solve (x-1/2)=(2x+3)" -> 1026, "tan(63)" -> 1027, 
                "Tommy\[CloseCurlyQuote]s grandma gave him a $50 gift card to \
Toys R Us for his birthday.\nSales tax is currently 9%. Determine the price \
of the most expensive toy Tommy can buy with\nthe $50 gift card." -> 1028, 
                "Use the law of sines to find the missing side of this \
triangle" -> 1029, 
                "What are the discontiuities in the function \
y=(x+2)/(x+3x+2). Which are fundamental and which are removable?" -> 1030, 
                "What are the domain and range of \!\(\*SuperscriptBox[\(e\), \
\(x\)]\) and ln(x)" -> 1031, 
                "What are the domain and range of the trigonometric \
functions?" -> 1032, "What is |1|" -> 1033, "What is 10% of 100" -> 1034, 
                "What is 1+1" -> 1035, "What is 1+15+21" -> 1036, 
                "What is  1/2 + 1/3" -> 1037, 
                "What is 12 1/3 as an improper fraction" -> 1038, 
                "What is 20+22" -> 1039, "What is 2+2" -> 1040, "What is 2+3" -> 
                1041, "What is  24/3 * 27/8" -> 1042, "What is |-30|" -> 1043,
                 "What is 3/18 in simplest form" -> 1044, "What is 3-(-2)?" -> 
                1045, "What is 33+5+8" -> 1046, "What is -3+4" -> 1047, 
                "What is 42/54 in simplest form" -> 1048, 
                "What is 42/5 as a mixed number" -> 1049, "What is 45+300+4" -> 
                1050, "What is 4% of 16?" -> 1051, 
                "What is 53/9 as a mixed number" -> 1052, 
                "What is 5% of 100?" -> 1053, "What is  8 * 3/24" -> 1054, 
                "What is (a+b\!\(\*SuperscriptBox[\()\), \(n\)]\) (Hint: What \
theorem is this?)" -> 1055, "What is ln(1)?" -> 1056, "What is sin(60)" -> 
                1057, "What is tan(30)" -> 1058, 
                "What is the absolute value of -1?" -> 1059, 
                "What is the largest value for the missing side of this \
triangle" -> 1060, 
                "What is the most specific subset of the real numbers that -7 \
is a part of?" -> 1061, "What is the next term in the series " -> 1062, 
                "What is the sum from 1 to 5 of a=10n+3" -> 1063, 
                "what is the sum of the geometric series from 1 to infinity \
of 9(1/10\!\(\*SuperscriptBox[\()\), \(n\)]\)?" -> 1064, 
                "Wrie the standard form of y=3/2 x+2" -> 1065, 
                "Write 30 degrees in radians" -> 1066, 
                "write 3/18 in simplest form" -> 1067, 
                "What is 3 2/7 as an improper fraction" 
                 "write 42/54 in simplest form" -> 1068, 
                "Write slope intercept form for a slope of 2 and y-intercept \
of 12" -> 1069, "Write \[Pi]/4 in degrees" -> 1070, 
                "    x  + 0x - 16 = 0  \n" -> 1071, "    x + 10 = 12  \n" -> 
                1072, "    x  - 10x + 24 = 0  \n" -> 1073, 
                "    x - 1 = - 10  \n" -> 1074, "    x  - 12x + 0 = 0  \n" -> 
                1075, "    x  + 13x + 12 = 0  \n" -> 1076, 
                "    x  - 15x + 50 = 0  \n" -> 1077, 
                "    x  - 19x + 88 = 0  \n" -> 1078, 
                "    x  - 20x + 96 = 0  \n" -> 1079, "    x / - 2 = 1  \n" -> 
                1080, "-x-2=12" -> 1081, "    x - 2 = 3  \n" -> 1082, 
                "    x + 2 = 3  \n" -> 1083, "    x  + 26x + 48 = 0  \n" -> 
                1084, "    x - 2 = - 8  \n" -> 1085, "    x + 2 = - 8  \n" -> 
                1086, "    x + 2 = 8  \n" -> 1087, 
                "       / x + 2y =     /   \n" -> 1088, 
                "      / x + 2y =  /  \n" -> 1089, 
                "     / x - 2y =      /    \n" -> 1090, 
                "    x = - 2y +     /    \n" -> 1091, 
                "      x +  /2y =   /2  \n" -> 1092, 
                "      - x + 2y = 21  \n" -> 1093, "      x + 2y = 21  \n" -> 
                1094, "     / x - 2y = - 28 \n" -> 1095, 
                "      / x + 2y = - 5 \n" -> 1096, "      x - 2y = - 5  \n" -> 
                1097, "    x = 2y + 9 \n" -> 1098, "    x / 3 = 3  \n" -> 
                1099, "    x  + 3x + 0 = 0  \n" -> 1100, 
                "    x  - 3x - 108 = 0  \n" -> 1101, 
                "       / x - 3y =     /   \n" -> 1102, "    x + 3y = 5 \n" -> 
                1103, "    x - 4 = 0  \n" -> 1104, "    x + 4 = 16  \n" -> 
                1105, "    x + 4 = - 4  \n" -> 1106, "    x + 4 = - 6  \n" -> 
                1107, "    x / 4 = 7  \n" -> 1108, "    x  + 4x - 60 = 0  \n" -> 
                1109, "    - x  - 4x + 8 = 0  \n" -> 1110, 
                "      / x + 4y =     /  \n" -> 1111, "    x + 4y = 28 \n" -> 
                1112, "    x + 4y = 49 \n" -> 1113, "       / x + 4y = 8  \n" -> 
                1114, "    x + 5 = -1  \n" -> 1115, "    x / - 5 = - 3  \n" -> 
                1116, "    x - 5 = 7  \n" -> 1117, "    - x = 5y +     /  \n" -> 
                1118, "      x + 5y =     /   \n" -> 1119, 
                "       / x - 5y = - 10  \n" -> 1120, 
                "      - x - 5y = 24  \n" -> 1121, "      - x + 5y = 30  \n" -> 
                1122, "      x - 5y = - 35  \n" -> 1123, 
                "    - x + 5y = 44 \n" -> 1124, "      x + 5y = 51  \n" -> 
                1125, "    - x - 5y = - 57 \n" -> 1126, 
                "      x = - 5y - 8  \n" -> 1127, 
                "    - x - 6 + 2x = - 11  \n" -> 1128, "    x / 6 = 5  \n" -> 
                1129, "    x + 6 = 6  \n" -> 1130, "    x / 6 = 6  \n" -> 
                1131, "    x + 6 = 8  \n" -> 1132, "    x  - 6x + 0 = 0  \n" -> 
                1133, "    x + 7 = 13  \n" -> 1134, "    x + 7 = 18  \n" -> 
                1135, "    x / 7 = 2  \n" -> 1136, "    x + 8 = 12  \n" -> 
                1137, "    x + 8 = 14  \n" -> 1138, "    x + 8 = 3  \n" -> 
                1139, "    - x  + 8x + 9 = 0  \n" -> 1140, 
                "      - x + 8y = 18  \n" -> 1141, "    x + 9 = 13  \n" -> 
                1142, "    x + 9 = 2  \n" -> 1143, 
                "     / x  + 9x + 25 = 0  \n" -> 1144, 
                "    x  +     / x +    /  = 0  \n" -> 1145, 
                "    x  -    / x +    /  = 0  \n" -> 1146, 
                "      / x  -     / x + 2 = 0  \n" -> 1147, 
                "      / x  - x + 36 = 0  \n" -> 1148, 
                "    x  -    / x + 4 = 0  \n" -> 1149, 
                "        / x  -  / x + 8 = 0  \n" -> 1150, 
                "        / x - y =  /     \n" -> 1151, 
                "       / x -  / y =   /   \n" -> 1152, 
                "       / x + y =    /   \n" -> 1153, 
                "       / x - y =     /   \n" -> 1154, 
                "       / x - y =    /     \n" -> 1155, 
                "      / x + y =  /  \n" -> 1156, 
                "     / x +  / y =     /  \n" -> 1157, 
                "     / x - y =   /  \n" -> 1158, "      x =   / y +  /   \n" -> 
                1159, "      x +  / y =     /     \n" -> 1160, 
                "      x = - y +    /   \n" -> 1161, "    - x + y =    /  \n" -> 
                1162, "      x - y =    /   \n" -> 1163, 
                "    x =   / y -  /  \n" -> 1164, "     / x -  / y = - 2 \n" -> 
                1165, "     / x + y = - 2 \n" -> 1166, "      x = y + 4  \n" -> 
                1167, "    x + y = 4 \n" -> 1168, "      x + y = 7  \n" -> 
                1169, "    x -  / y = - 7 \n" -> 1170, "    y = - 2x + 19 \n" -> 
                1171, "      y = - 5x - 18  \n" -> 1172, 
                "    y = - 5x - 9 \n" -> 1173, "      y = - x - 2  \n" -> 
                1174, "    y - x = 2 \n" -> 1175]}, "Output" -> 
             Association[
              "f1" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> CompressedData["
1:eJyMvXVUFm3U9j0GFja2ImOgYoCJrQMWdqDYOrZio9gxBraCgWKgo6JiYCIi
GGMntog9tmJ3y/vc+8fz/fe9673XuhcLvK6Zc85z57GPvadY7+Ht+qVTFCXN
//wfll5Rsir/33/G/+PP/7///m+fUxuUiDv630+jXGL9/z7Td9Rx+f1A66v/
/a7sKHztv9+Nc7d6//dTG7f+yn9/t2Z2uCw/c927Ln+vsuXqfz/1adHyuzqj
2zn5PX2a6P9+2i2qXvzv83a+cUn//dQisp2Q38u4X5frfL+4Qj4f531G7tes
+HlZT7MtG/773ZxXyfrvd33ti2vyve7Dz/z3U93fYavcv3Ks/K4fLyj3Ud60
iJfr+qe9Jb93Uk9x/ZCb8vmEY7FyH3tInKznxZA9ct03S/X//q4UDD//308r
Zw5Lfh6rLc9jZu+/Ra77rt5jud6U1hFy/U/z5D7a77m35fpf1lyUzx/xOyHX
iwqU59T61jsi+7PnpNzXqlRqq3y/4ZlV8jyHGsg6Na8CHeV7t//sless6CDX
sWZ43Ge/a92Rny1fb5d1zG0u+69UXyP3V5wyyn7a//xPy/eqvrskzxfRne+V
ipT7KMrBC3LfM3sPyO/nqu2Rn5cGsd8tal6Q60cvTZTrfc2+WdZ/w5bzUX+k
hMn16tYTOTGtm0tkX90XyD7rDaLk+nqX1bIfdtw7kSszrNA0WZdfxivyc2mJ
fbK+xD3yfFZUjmPyuYLvkJOfg5LkvhdzyL+r/arLc6kjc12Wz8dUeCH3f9hf
5FOZXueJ3L9KktzPqBcucmmWvH5L/t74z3NZ142VfM5zuOyffWrEdvl8g6NH
5folrQfyPAPbyjrN483Oyb9fePdIzvPpkJNy/+E90Bf/LXIfo0EtWZ/ReOQl
uf6FRkfkOe7vk78rX17fkH//9WWSPGfzqSvl+v3z27KfzfV4+d29kZyXka21
6KdVpOxD2fcOW+/J74E5Y+Q55g/eJNcpv28tP/fLOWqHhqGPfXfIdfWoecmy
3oVXd8j33SbIPmt1S9yU69SYLOtSru47KM9zWRH5Uo68l/PX1Racn/saOX+l
Zj3OudoN9KRBGnk+rXGsrFddHiJ6qCUpx+Tvzg9Gy31L3ZRzs4tFy7lri5JE
H63qP+Q62rWjoudq1Oy7sm++h2S/LXWm6J3qocm+6K/fJ8g6ss4TOTWarH0k
601MfCrfD/x7SP5+N81hWfe4l7vlOm/yR8v3NjYT/dXHBIi+m9OWiF4YG6qc
lXXkGyz2yq7rdVful22F2Ak1xknub3rsk30xn1YQubdDH4i822kPIIdOh2Wf
jS2FTst9R8aI/JrNsi6X67zuxPl2nSafU4LTYafq9pPnsavk3i/X8z4l8qkF
13CTz8/1FDnWkqNEPzSPGLEr1o9T8nx62Gf5d/Wjl9gDtf4xkT9z4SuRd6Vm
sVNyv+j2orfW9fsWctBpr/xcuFbsh9H/tzyv/qTUQ+T2odhBZUzpnXJdh2xy
HnbBn/I9c8eb4/JcWvHzfK6pfN5YPVLkwAjLLP7Gnr5HflrDnG/L9z5N5Pu9
24n86evKiV20/84SuTUO9RD5sH92lueyjo64J/vYKp3oqb3XL0TWef6GnIex
u63sixGio/9XPeU6yq1rd+Q+X3+uke+rJ2Ud+iYvkQfz8hO5rhWSInJtL9sr
+6NcyY/+3uzF/pYeIXptNUnZJPdb1lvsu/5jw1n5XMkL8hzW7D9it9VcYdjd
DjNFvg09Cf34GdZQfs+VLHKmlxwbJfeduXa8rOtMnefys36E7Ks+IUjuY7xy
3yff80ov9zEDM4l+mVUSD8t9St+Qz5mfPcRuKSeziHzpzR+LXBofD8r97SF7
8ftxGTnHUlEi9+qsCqLf+q50m+Xfn1QVO6OtXfFY5Ga2Lc9lJAZzTqu9ZX1a
4Bvxa3ZcDpEvY6qXrE8t4H2S7+USPTQWqLLvWr1K7FNhU+TP/rWVv/cK3iX6
MmLDFFnHoDZP5X7nVsjzqGVCRM/V6rfRs/vB+P8c7nJO1sfs+JVj58WOmDGL
sJcd0ks8YuVPEPtqHBwtcm4eLix2Rl/TXPygme8x8trvnNhR9esGkTszQ0ex
W0rgkYPyff89+IHxY0RejH9fZZ+szM+my+dPv5T9Uuf6yH5Y/fLLetXuLe/L
/bxW4S9r72efVG+xu1Zk8S3y/X3J8vn/sZ8SB6jt/slzaBWj8VtVj4h8aw3c
RW7MyXtfyv59MWLk3293PiD/nqmKfN76HfBK/n2ySZwU3viZ7M+ogsvl/Fe9
l8/bkycmyzq9WqP3hQNlv62vU0Vf7bpOxFXVC7KuBkfkfI06B+WnvjThkFy3
UajIh7UtUOyX+clP9Elrm1PsipnhhNhDfdkUnjNjZ9lfLTyj+AXj8BS5r3Hd
AztxbRvxRK6nCfK5ivFr5HuHptmyrumN5byVcr/Ev6uNtordVvLP2Cjrt/fK
53SfvqInZtlb2NtdsyTutcKLs75fY+U5zMHXxX/qP98TR3l0ls8pKT6if/qv
f+zLnMlif81Hd9CnA3/k+uqdi6IXxs5k4qmHYSJnyvMzch+1UVnZZ+PT1Svs
S33O92cviZeU0Irs49weptzH65fYEdvnneir9a3RUbnesArYxxnT5VyMl71l
n8wy2bEDHd1En+2aWfBDG9rHyudGenBuMUtEXtS8lUVu7UILNsrn97SX+6kN
V4o+au6dJc6w57QmHkqZvVL2eckX/Ipehf1d+07idn2zIXZJr1JfzsHOdJB4
vW1h8UvW7Z7Y02Ge4ie0hW+wv52KW+jNJbGL1nH/q6y7qNhvNSFR9FeJOzxK
fm77Qrw94CvPNeMOcdue/ejfvPfo18bxosfGyZmhcr8nPk/kuVr/kn1SqrUX
uVKjI0Wu7F9P5e/2jdMSP6vT/slPTesm69SyhYremzuCiJ9nbxA7ZG+7hZ5n
/LlW7le4O3FY2i/kS/Vdib9a1+T5cpyaI/vwy7wh679yQ+TEKLsT/14zs8Qx
eh3kS3mUg7yixF2xp1qXaLmffeuaxHHGwqLEi8vzS3yqnekp8mY/v71YrjP0
jHxfX52T+L5aRvFLyuQ+2Pf0F2S/1VYtyWtW7ZfzNpqlEflUZgWInzAX7USe
iiwk/3DLjF2tMzCe/XolflVbUFT23y6w5pn8XLwDO37oLvb51lryx2edRa+0
R9n3y+curJF4XPuwX85dC3JknRFunNeXs+RVG/ITH2a9gZ1dcJF4/Pg15PTu
WNlnJe6iyKN1pIfYFz1Lbtkfs8Fd8qPIXsRn6+/hB/qV4vkOOYvcKLVubpP1
bZjB/nSfi56FNYuU3yduIz49lukQ+zOB+LhpZrm/Wnyw6KkemV78pPmtL/47
9Jn4JTUqeZfcp8llsQv6rJ4SZ6jfX66Xc13ZQvZB6RRJnrwrPkrWN+at6Le5
Y73EC2azD7IP5trhYjc0bR/2022ArEc5e3SZXL9dffZ1TxH5aeQMlTjKjjgp
/ska2U3WYR1bK+euFx2+QX4WLif2QXXLIXpn5M3E9ytmlbjF8uhJvrDuhuyf
8vSSXM/u6inrNldnF/k0Ty2R/EJ9WoH8o8e6l/K5UV/IS8rWWCXX67Jb7Kni
kV/sjOZZWPTWzt5Z7IT5qpDou3I0F36tfRnkYmJG5O7IevGPutsjzjntauLn
s1XISxMciD9zRcp69ZcO5CX5J4odU1YW53PV3cgDksuIXphBO0SejDPx4gfs
jjfIM6tfEb+qD7TRmyxn5Dw0cwP4xeLOIt9KUpDIn9F3jaxX7ZmL/YmrtlT2
3TET8teqlzyvueKn6JX+pTJ5VbmBovfmtG/ky8uiZH1W93GyPvu0i8iPHftJ
8BrN103sk1Vcx86dHCL2WmmQjrx1oIM8j708HtznJ+ekzFyK/zpmyn2Mi5/F
LlmV94i9Urv8SY1LH8i/KzszSVyuWT0lHlJddol9VydVI0/JmE7WreeYNFvW
fbCHPJ+Rps02+T3jIvGz2swasj96jXH4x2Zf0OeytbAXV78Gy3pH+UncZE8u
CB7w6f5o+dzgtLIe9W+QyL/VP5s8p3Xprsib0nu6xOuWw0vsYJmtxMtdW/J8
2aqIPdS2jyRvbLSE+GTNMLEDlrVK4h97dQXkfIGD5APmg7XEEVOOSvxqVmlP
HFBqocihUfKurMOeUEnWZ49uL/mI1sFH4gy962Dxj/agBLGftss95DXbd4kH
lJhN+LuodLJf6pPmEgcYa7vjL+LaEQfPK0g87vyYuP5vddFTu31jeV7TexF4
U7wr63pQQ/Ik9dpdeU5zcTXxF6rXUXC4zWPIJ53SgresOAn+4evCOc3cK/Jg
ntgk+mQvNwXXMh5UY1+3LkWvczqLvdLSfEcubuRmv/ZWIa+oN0l+moHdsZN+
DfB/+2LAJ05cRf4zTQNfae4qz2MtvS92W52HH9StL/LT2t6IvOyxv+AnuhkL
/nK8Cf5x/Ej8hXNa8IK/z8AHc6zAz8yfRh6c6z1x2TBHyW+N8oclPzDHGiIn
xuVigo9pD4aK39LPByBHNVzkebQyn8T+WvkcBc8yJkyeI99/136p/PuvGPEj
+rRA1tuxl/gNI6mQ6JM56z32K5sPOMm2BmLflSGNwFeuVwG3+TSA/XSJXI98
/EA/6/8RvMTcu1LuY1VKJl7projf0SY/HSDr2tBF5FlzaiB+1XZoQ1xi9gSn
GZXztex7QkbkrNA4eR69TzlwOp8N8lP7fAS9yv+PODzrXPLZ20nE39OLix6r
V/qBQ1RaLPGmcqUccevXaxIPWBWKSVxht/SS51SMZ8StG1fKOo2P1cRu6rMW
ss9rZqPfTXOLnTOLNpI4Sc+cSLxmdsIO3UqS89RmZxK/Ym9ZIM9pORRA7iek
ARe5V0j0x86XIPJrzVwmdlPdnpE4bM83cNEd8eAuKZ7y70aFrdi517HgItfH
oDfdn2MP2pVK1eOMIid66Auxt3psD/JKd4s843BB5K2/H+sPGAietfklcVJA
U3Bt/0jw0hp18cdHY2X/lfydxR/oDwuk4qv7RY6Url+R8/opsl6ri9N85DdS
5E9ftgucI2EDed286Q/kvmXuUAdo4kVcNWMquEr7v/i/lrXl+2p5Z8ljtWOT
wM3SfxE7rNUvIXmheWFVc1nvhIbgM6/vy77YKdvBKTZnfiPfKxsGHlN5IPjo
2JzYmwPxEpeoP6LIN47lBK946yrxs1W8svhbaxTxiNYjWM5Xj+mMfY3KjD99
7C95r54H+670fyk4hPJnNTjSyWTyTrcm4L/ttxO/LpmAvKQvQvzboBVy7DJm
qOxrg7IiZ4pn+zDZp3qx4M9B37B7FVcgl4lZ8aOnnwfL9baFiz2yN/uK3zEX
jCN+f5FO8gn94WrRc3NIDuyh5wjiu6X1iUc/XJV9sopWAU+Jd5B90apuAy9Z
vh357rBI7Ij+ceUdzn/HIjm/s23A7059JH/rfxG/3L+VnJu+tSq4Wu7/xfHO
E8+dSEEeh6OXlvuV9XK9NhPk/ubek+jxqfZiZ5WYZ+BE49dj7+4XlXO0n58k
njp9ROyTsu03+hA6XPTcnjYIfLtXc+z7spXiF7X1xYj/Hk+nruS3VPbZin8j
fs5+fVj8s903D3jd7mfkQ+O2ynrtIbfZx45dkJtdGxbIPhVQqUdVP8q5bf4C
zn38LXnBfA/swKBs7EO22uCUHo3AITI0Ro+Ltha9syr8RO+aEp9ahyeQH//+
DX5ZvhR4Ye6e4C9V+sh+qa4e8nxa3934pR0bZV/U0h8kDrGOLRE5M78mid6r
cWcj5Xq/68jn9AK1iA9O5yDfdy5FPLG5tdhJe2UruY5y0h05uj9D9F27H4ld
S8gvdQorbdud8vdKBeS57fgYkX9j076LyMsU8p7wUOLKfe/Ro6sXqV88+oZ8
Hqsh564VoT5ghZYHj7kRLHqhPnMSPTarLRV9s+dO4ByL7CYunZpX1m9n2MO+
vSgo+aU58aHk19qqoyIf9rQI8Nbe29m/fA1F7vS1d8We6wWzBMp9T3SUv6um
SX3zzATOM9RX9l9zPkz80KMKeWiGVaw7OEx+V7vtRr926uT7XUaK3dOeVxG9
0K9cw98VKgEO4FZX8jdl4ABw8XqPwuVz04YKvq7dKSt+2XzhT36zsQR1kbQv
0K+778Re6QWjiGtzFiQ+3p0W3OrfZ+pNeVOayfXGDSOOzJSht+xLs23g27vO
iT1Vur3FTm/6jV17ePQqz/eTePxoc/zU4/6yH1b9NrIfVvMZ5AUHenFOWcm/
jFrdyC+tYmJv9caZJa8xB4IfKzMDRb6MdIvx5xeSkOuuB4kvRvQh3jm2CP0r
chf8LN8efva+QNzb1qOZrMOzntR9rEJDJG80Lr2V57evDiavLrqYfOvZc4mn
9IHXwXcbpwc/TO8zXZ7frSv+r+818pmoZcS9MUf5/lKna8jNMuR8xGPwpbcp
1EU3dxEcwBzYRvZDn+wgf7e6thc9NNq1F79jtq8IfrPND/yuwUDZdyV3ZvFH
6qvMgrupfS9hr3odGSnXy0N90Bq2j/pX1x/Ezc4n18k62noRt02dJvG33a7b
U+QwhPj4tyNxn1lc5M4MTa2TNJkncmes/E49ZF166skD+4gdUlfV2yGfHzWa
PPlNB+yI98lZ8r2Qh5x3mwkiR8owG7wobJPU2YyG68Gd3F0lnjLutaOelOcV
+V1WD+perj3ITwfc5LnW50aud/SRPFEfWFfslL7DxE775BBcUU17X+ReGfno
jVyv4m+xo1aVY/I9ZZcTdeydk8nDG30k/n+UT/yU5tBF7Is1x0XyUv3VG8nz
1LpD8LNZk4n7FnST/TPDwl/L/dPuov5dOkT8haaXA691PS121HiRS/TXyuCM
fdvjLHGlsv07dZFHPuCgL4LQ68f7qE83bNNd7lMkRvbD6NWB+KV+vMiPvWiC
xNmKPUz00z6SxDqcahMn+k4XO6bX2kte+qgk+3E3FH/bl3VYc67Bp7iYAXy0
TSk5H31ScXCK+/OJ77JkJR7s/E5wVutTI8GDlOsPka8j9eV3MylW9MjOfYU4
Lv6Y2At7flHqtm4zxS6bw2PBSefmEv3U1/+V+1qH05IfToqS81GbzYc3MnNc
Km7jJXbIzNwb/Rpzirxq5uNUvQPHt6cNEL9rekdTt4ioJz/1FTry0MuR+Gap
QV066z3ixnSjwNPcDDkXe8406tvjG3BuNcuD984NlX3T/rYUvEgdODhI1vd2
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
EhkLH/0WfUFqyi/medToRN+9SX6sHqxEvlr6luAsRtXtEq9aq+i70/74Mlev
XQHqBPEr8LuNUvOCH/Sp2vGnJZ/T316i3/rWVtlHY3jD06l6/1H293h7eKTj
KsC//NVG+Nlqixv46+t94eGnbIUHURF8RKsHX8+KchD9UWbXJ17IswBe4fgN
/P5mMHmTw7D/nUuA3Tz8krrjauoWWo1EiTvNgrfJZwovBCd2GcN8h9IZiV/P
lhV81w7aDz+04VD4wctG0oeUooAfjF5MvefZMnCqIquYm1V4IvXW5MOCo6hn
N5InBjUAr3ZeiD+6GCN8P+vgBonDdI/J9F8GLqT/9VwhOX/zeVfypcCW2K9T
Z4jDFyVIv7Z9nnk+ltNf4ttWg1LnkR2l3+yTl+COxkT497pXD3C+s4Wxq907
sF/vNokeavGXqFdlf8C5HGkKPtQNf2WeUsG1y3XGHpbEfpnh2dCjLYXAW5pG
UJ9tc4Q4I6QM/Lf0qXX8oN7MMw74RP5zmfhIyavS/+PWGr1ze0zd/Y6nyLv6
4jdxXKGbEp+aHZ7QB/3zBfOV1mrEI3mGCL6i+Q1GbgfW5Tk9Z4id1oOCsbf6
IupRV7cTB0Y4Sb6qrB0uvAGl2YLUus5e+rwmuID3umTZyXn2pj52Nzf7Nm49
frQH85JM5zrgguMmw3sYqVFnyzmWvgbl3wy57/XC4u+MTg+YU2SfhNfcdxZ8
m48x8E6azyOfaN2S+O9+6rwXt+XMLZ/Qmrpg/ED4qUfXwaPouRy7v7Yf9d1S
p8AVHoWJ3TD700dmLRhJHtG/R2M5t9iuxB+tylDPHTAbHsjFFcydHZiBf39/
nTjCisceJv3Gb6xLC481/RDm2u7sKnMu7JMZJI7WdkzFv92Ilv1U3jEnytxV
Cdyo7l14BD1eMf/wcmbim/Gh4IvfnhOXx5xHXgJGgmtcKgWPZZBGvSLrPLFT
5s4g/NXzPZLvKJ4dqVeY+dHLcRPoh1szHj9+eRM8i8Su9LmOc0Hf3g+j36zR
YuaBdPdlvtPtJPLaMfRxam2uy3lZL5mvabf3gU95uoj4CTvgJf0TN2+CK0zq
Tj7TbhX+78R38uh2bqy703bsQ7PVIj9m+wXg5/nnkxcXqiPXN4reoa40M4X4
JmtqX+ayX9jvLVWJazaVhl/89jx1ulEtyHeafaKP9+p8/GU6d/hbo8HPtaTC
+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
a6Vq8nk1/Inwg9UBI8lnemWTeqWabThzmm4w185O+iw8V7VJGP1nj/qTTy8r
h/97O5F5hcUmkuf2c2TOXa60xF9lI+G5ngXXMf4VAS/MsRc/9aCl+GlrO/7D
7Iz9Ue740lfctDFyMaw5+Zgz76sx2z2ijrKnhvht7exU5m0V24Y/mU7/l/nA
Fz/7oRv1osmP2c/IGPju19Mj54urp869UGWdavH9vD8luLX4VWVqbvKlHhZy
nfav8Ph0P3fJc7RuDsy/ueku8axe9xVxbt3p5L1T71JXaRYNrrrlH3y0DzPA
l90rpM7Ri4IfUvo59lh9TT1ejaFON4v+f9XxOnhUYB/OIbYx+UuNrvAIY6Lp
55qagfzg81Hw3pBjch11SRrs9PwH9Od/HBoi18k2nPeflDXgn9/NJ3Ucs1Ef
8vDSf9DbnmOZ8+PkwHyS5WtlDomxzou8re4J6ZdWIx+Q598tiX2oep0+nq8f
xD/bRTPI/c0r37AjQwLQx++ezB1w15mrEzSVenfAJPLqs5WJT+xlyH2+GOZh
3eO9Ita0IcR/6bfRj137MHFA45Pg9a7fiQPzPqO/pnL/IFnP+tHMAX2eX/Rc
TSpBH1fPyeD65ROljm97LmH+RJOL+N+zvBfFiC9KPa77BHCVlZV5noKh+EG3
QvBX288hHu7twXuefj8mLp58c4Fcp0xz6oZPNhOf3JpInLr9Cny8ftPAt35/
Zo5Yt6aCX2g+l6gz2h2YM77+KPtRuRT5yPiZxFM/tkteoe8IEH64tmwTefGX
Bcwj7etBvNf8nOSPSp/HxC0eDcEjlycylyCB9zeqm/oJ/8BwTI+/9a2HnOet
Cd4ZVJs+OpeF8B/Otib+tMsgF0F/mcv91Qde1R3mkZhpXlAPnD6VeT829XZt
STbwoszFZd+V59SRzG/f2fdsU6h3DJmdOhf2vvh5pWp1WZedLzN83JLlwENG
BFP/1DoxjybqDHqYLZZ5YK360i96cAxyd9oP/emTH7nKWZN+nmy5kzlv5sNr
+v++N/EB8yoPpYUfUXgQ8f5sB/pBol3oS1oQBt6T9iv9cnkyw09ZsYZz7LyY
OWizlneV/Wq8k3kgOT8TP+yfhl/JUpX63wv0XDnxDH908jXP5zqafGl0AHPr
C88lPksH/80oOx873nATfc2JFYhT3+4hLp/MHDMzogDnMC8au+3mwnWvhckc
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
x3E+/zQh/3BajT64ENxdDsV3R01fK/atbvUh6tPCQqHL0b98TF+H9QzywlL6
8rQX14j4I3WaB+61czF1sbamiBdavzQv8fzN1pA//GoJrj00to/4nDPt8A/s
epq6ueMc+g43GHRFLueZD7PLFn7WYiG4hjSM/t7IZSJf1Df25H1Mj6Ifx6n5
SvFzA1uJ96hUWwF+P1nC50F9QHx8aJi31H0X+JN6EN/cDfOoM59tg9f+jG+9
NvkE/GpeK/jV7k3o0z5SE/wy6ge87BZvnlNsCv0na3bTd7onFx6qxSfy/I/0
b8jXmd+mfWuF3uvtTM6nB7Pws+xywF1cT8wNwQfpD/eFTyuXLPBKuSnnutrN
Hl5uyALmm+jBibVRN+eI6/u+AT/jnY7oqmwW4/M3w4Nz6ij+d9JMX/iXc6uo
nw+4gHdNcPskvn/0PnR9beuJfamGrEaH1fEt5/qM3eTh3vHoyU7qxPdqfnem
vyZ0Lj4b0w+IuQRKNnNMNC8Mc7vXLaV+KBgn/OykPpznUtO24rloDs/iPF33
Bt3q+QDq9q/D0ZdUOML3zd9Ff7sJnyfpbtNXcTaa/gSn6ez7qzPoMziYT928
chX66Hu1iCunHxD/23jgS1GzsVhX2ugq1BUth6Br0q8WdYh8KYz4tVflvYRO
IF9PPsVcgL6v0bGVz2Uuuns4/jcV0ujDVsqjq/hhin/Pu3h0EpZn6EvJ/4R+
9HcYfP23c/hueIPLqFsTeb8mppxjT5rCL7d8gh55zFPO3dIYdMMFp8mb83J4
jmFN6EN5aEk/9pb3xJXIYcxNUM7jm7zZEj8BzU3es+0z6vVlCfAYBfgtac/v
BKcL3o8+5YwXfpPlXckrZ23hPHlQAM+Q21Tk7fLjvujanleDd/OfIs5j/a+X
4EhVB+K/Y2wM7zwuCF/52Fx0nNnB6CCXjYFPMR9Av493C+LzZNPh4nM/deHc
SPXGd0LJQ4/bIZL1VvEE9bk0iHziD35y0oxDxLs3V+kzcO8i1rN0YC4+OF4u
8ERXtALPUVYZ5vp1cCd/r22PTsgvHX1Q9YnkOc2qkIflL0JPU/suepLdDfAx
bN6IONOoL33cs8aJOZjabFt0JvHB6GAeVmGu5O0l+GVeMOh2Tq7h3J/GfDNt
biT7tTCUfX5vNvuwyQcRRxXb2pwTNwLQ385ZiH4jLYH5e7PXE68bnUGv2HEk
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
vVvE799SIfoK2Wk6/dq2E1cv/Q9agA6n
              "], "Version" -> {12., 0}, "ID" -> 8874117158160028988]]}, 
         "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 3398496960982252545]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["algebra 1" -> 1, "algebra 2" -> 2]}, 
             "MissingCode" -> 0, "Version" -> {12., 0}, "ID" -> 
             1300902506986561626, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 2605288713518276457]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       "algebra 1" -> 0.31921397379912664`, "algebra 2" -> 
        0.6807860262008734]], "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    "Quality", "BatchProcessing" -> Automatic, "Model" -> 
    Association["Method" -> "NeuralNetwork", "Network" -> NetChain[
        Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
iRsad98ijpsu4Jz8JP7/AZb1sCc=
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.04669438302516937, -0.05993879586458206, \
-0.05405006185173988, -0.10596486926078796`, -0.09328580647706985, 
                 0.058900315314531326`, 0.07304509729146957, 
                 0.040188923478126526`, 
                 0.028677141293883324`, -0.017940817400813103`, 
                 0.07711318880319595, 0.016543542966246605`, 
                 0.013775383122265339`, 
                 0.030329925939440727`, -0.018257105723023415`, \
-0.128138929605484, -0.023703020066022873`, -0.020431138575077057`, \
-0.015506334602832794`, -0.046656034886837006`, -0.004749739542603493, \
-0.005798235535621643, -0.0036484135780483484`, 
                 0.019823873415589333`, -0.07221867889165878, 
                 0.05398230627179146, -0.06766948103904724, \
-0.057079341262578964`, -0.05217805132269859, -0.17332985997200012`, \
-0.022453220561146736`, -0.07210680097341537, 0.08933563530445099, 
                 0.01538105122745037, -0.041018079966306686`, \
-0.06235015392303467, 
                 0.011648649349808693`, -0.012298163026571274`, \
-0.023465292528271675`, 0.022942565381526947`, 0.011911323294043541`, 
                 0.025835148990154266`, -0.0610358789563179, \
-0.07183792442083359, 0.046223610639572144`, -0.09072814881801605, 
                 0.02336515486240387, -0.007820364087820053, \
-0.011371515691280365`, -0.11342271417379379`}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               12, "$InputDimensions" -> {12}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "3" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
/1liZ8sbSrVwFh/V/aCS+3r4f5gq5NE=
                "], "Biases" -> 
               RawArray["Real32",{
                 0.003060390707105398, -0.01627957634627819, \
-0.026120809838175774`, -0.01793706603348255, -0.050504349172115326`, \
-0.010755112394690514`, 
                 0.029177255928516388`, -0.02964402176439762, \
-0.04301181063055992, -0.02734367735683918, 
                 0.012897370383143425`, -0.03006208874285221, \
-0.02723531983792782, 0.002555940765887499, 
                 0.00019192940089851618`, -0.042924877256155014`, \
-0.026142947375774384`, -0.02441008761525154, 
                 0.00938736367970705, -0.0932234600186348, \
-0.05317269638180733, -0.0007491511642001569, -0.011364011093974113`, \
-0.03918543457984924, -0.02039201743900776, -0.018390528857707977`, 
                 0.05714302510023117, 
                 0.018769513815641403`, -0.05946968495845795, 
                 0.009387969970703125, -0.032244276255369186`, \
-0.05078247934579849, -0.05529185011982918, 0.037873730063438416`, 
                 0.015164440497756004`, -0.03037848137319088, \
-0.05190611258149147, 
                 0.04398467764258385, -0.06759403645992279, \
-0.016588060185313225`, -0.008882129564881325, 
                 0.01696714572608471, -0.004422749858349562, \
-0.07686644792556763, -0.030090296640992165`, -0.04155028611421585, \
-0.02762044407427311, 
                 0.013973481953144073`, -0.03056884929537773, \
-0.1082865297794342}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "5" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1:eJwBvgFB/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
AgAAADIAAAAeyKm9peBsvup6SD2s/ac+owECPhShtz5LUlw+NxC0PfSgBrs6
3hy+XRuOvkHPLjyBLvI9U1wyvnXAAb65rDe9kVX0POkfar4Le4M+ZIu4vk4B
lr5vKSg9+uEBvrgwND76+g++x2G5Pq57IT4B1669GWc3vCosQL5DIdA8Ntk4
PS1Nk77gqJi+LteIvuGqrD5L7xg9y+jIvTHEob4L64u+jShrPjjopb7rv1U+
keaPvoioiD48YLa9euo4PSxtzb3APGk95ApUPaIWmr7Sa0g8bLmBvjP1R777
LJy+xl6KPfsQqj7i+4s+ubEBvgjRSzyPyXM+1yGAPmmVXr599SY+3CVxPjCo
OL5fj0C+ezEhvpqhbb6I12G++dO6vv0hPD4kEHU+LpSwPfRXTz6Gbpu9e8Cq
PiRds71uJJy+YLBCPX+enL6X44a+7kqOPvQZjD0YCsE9aqaMvnKdNj5/znY+
C7RQvimuM77Ik8U86WpUPl0Bg7rdYQa9J+0BvZsT+L1dhBA+IAuBvb+wlr0o
flS+mb7MCQ==
                "], "Biases" -> 
               RawArray["Real32",{
                 0.00023626218899153173`, -0.00023626256734132767`}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.0.9", "Unstable" -> False]], "Training" -> 
      Association[
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 1.2481581401254225`, "MeanInputsPerSecond" -> 
        47686.26513465599], "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {-0.03136803515590646, 0.10145479923624277`, 
              0.13549319068750648`, 0.05511868865002111, 
              0.1136827948484829, -0.006927454901555848, -0.06429904077273903,
               0.0829480607442641, -0.026671655695706634`, 
              0.03811586669145637, 0.09479185826422724, 0.0636780887976534}, 
             "StandardDeviation" -> {0.22087849437899834`, 
              0.24867938505103807`, 0.28988805158877196`, 
              0.24659457770242174`, 0.26986525589373367`, 
              0.21015978624840573`, 0.24818256528444502`, 0.2410886570999602, 
              0.2207233150769336, 0.23000633196178644`, 0.28253318132052335`, 
              0.2440907573116664}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 4986784802986727550]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
              "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "FeatureNumber" -> 12, "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NetworkType" -> 
        Association["Value" -> "FullyConnected", "Options" -> Association[]], 
        "NetworkDepth" -> 
        Association["Value" -> 2, "Options" -> Association[]], 
        "NumberOfParameters" -> 
        Association["Value" -> 3200, "Options" -> Association[]], 
        "ActivationFunction" -> 
        Association["Value" -> "SELU", "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> None, "Options" -> Association[]], "Dropout" -> 
        Association["Value" -> None, "Options" -> Association[]], 
        "NetInitializationMethod" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association[
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> 
          Association[]], MaxTrainingRounds -> 
        Association["Value" -> 30, "Options" -> Association[]], ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "EarlyStopping" -> 
        Association["Value" -> False, "Options" -> Association[]], 
        TrainingProgressReporting -> 
        Association["Value" -> None, "Options" -> Association[]], 
        "NetTrainOptions" -> 
        Association[
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> Association[]], "LossFunction" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "ValidationSetRatio" -> 
        Association[
         "Value" -> 0.15034965034965034`, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[688753], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      1.3089253`7.568459855689584, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.4923521762163057, 0.0342770314846755], 
         "Accuracy" -> Around[0.6996541749913529, 0.030326737534671234`], 
         "EvaluationTime" -> 0.000056490560255800374`, "TestSize" -> 458, 
         "ModelMemory" -> 62352, "ModelUtility" -> 0.6962465467541008, 
         "TrainingSize" -> 1830, "TrainingTime" -> 1.2589254117941673`, 
         "TrainingMemory" -> 1051352, "ExperimentCount" -> 1, 
         "MeanCrossEntropyHistory" -> {
           Around[0.4923521762163057, 0.02423752140175884]}, 
         "AccuracyHistory" -> {
           Around[0.6996541749913529, 0.02144424176203063]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           2, "NumberOfParameters" -> 3200, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> None, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 30, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
         "FinalTrainingSize" -> 2288], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 17089848505772]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 18200], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.3021887312453653`, 0.12629416001423044`], "Accuracy" -> 
              Around[0.7188603482179364, 0.013335465780322596`], 
              "EvaluationTime" -> 0.000045233748815404945`, "TestSize" -> 
              2278, "ModelMemory" -> 196400, 
              "ModelUtility" -> -2.382795599294209, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              3021384, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.3021887312453653`, 0.08930345697032126]}, 
              "AccuracyHistory" -> {
                Around[0.7188603482179364, 0.009429598283547261]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.0471887099425092`, 0.06484906994389777], "Accuracy" -> 
              Around[0.7266198707834142, 0.014161775128633149`], 
              "EvaluationTime" -> 0.00011218908229348978`, "TestSize" -> 1988,
               "ModelMemory" -> 196400, "ModelUtility" -> -0.8100881604941403,
               "TrainingSize" -> 300, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 630160, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0471887099425092`, 0.04585521711097083]}, 
              "AccuracyHistory" -> {
                Around[0.7266198707834142, 0.01001388722709549]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00011218908229348978`, "MeanCrossEntropy" -> 
             Around[1.0471887099425092`, 0.06484906994389777], "ModelMemory" -> 
             196400, "TrainingMemory" -> 630160, "TrainingTime" -> 
             15.848157933309515`], "Index" -> 1], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 3200], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 300], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.5653787290084231`, 0.08950681491467656], "Accuracy" -> 
              Around[0.7137990628703614, 0.013402499279817837`], 
              "EvaluationTime" -> 0.000024483869806334898`, "TestSize" -> 
              2278, "ModelMemory" -> 66448, 
              "ModelUtility" -> -1.612218325743957, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
              233872, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.5653787290084231`, 0.063290875788577]}, 
              "AccuracyHistory" -> {
                Around[0.7137990628703614, 0.009476998125607011]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.065350779361084, 0.12262214282828558`], "Accuracy" -> 
              Around[0.7165871592126914, 0.013523471111421569`], 
              "EvaluationTime" -> 0.00002777150677990446, "TestSize" -> 2228, 
              "ModelMemory" -> 66448, "ModelUtility" -> -2.1674296337630916`, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 244512, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.065350779361084, 0.0867069487175061]}, 
              "AccuracyHistory" -> {
                Around[0.7165871592126914, 0.009562538128066567]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5687458562498006, 0.022458641388952812`], "Accuracy" -> 
              Around[0.7347092803989771, 0.01401675783752182], 
              "EvaluationTime" -> 0.00002913114007239401, "TestSize" -> 1988, 
              "ModelMemory" -> 66448, "ModelUtility" -> 0.4196891060542095, 
              "TrainingSize" -> 300, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 337384, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5687458562498006, 0.015880657622365395`]}, 
              "AccuracyHistory" -> {
                Around[0.7347092803989771, 0.009911344517161367]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5363664772217525, 0.045866741085213394`], "Accuracy" -> 
              Around[0.718930410028106, 0.029766788924133883`], 
              "EvaluationTime" -> 0.000056490560255800374`, "TestSize" -> 458,
               "ModelMemory" -> 66448, "ModelUtility" -> 0.5187379859608228, 
              "TrainingSize" -> 1830, "TrainingTime" -> 10., "TrainingMemory" -> 
              975512, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5363664772217525, 0.03243268365228202]}, 
              "AccuracyHistory" -> {
                Around[0.718930410028106, 0.021048298302403682`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000056490560255800374`, "MeanCrossEntropy" -> 
             Around[0.5363664772217525, 0.045866741085213394`], "ModelMemory" -> 
             66448, "TrainingMemory" -> 975512, "TrainingTime" -> 
             12.900839410990656`], "Index" -> 2], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 8200], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.3321737658442019`, 0.0758940795012855], "Accuracy" -> 
              Around[0.7241515595530702, 0.013274013015690107`], 
              "EvaluationTime" -> 0.000045502298959612084`, "TestSize" -> 
              2278, "ModelMemory" -> 95328, 
              "ModelUtility" -> -1.2895108985335626`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
              303512, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.3321737658442019`, 0.05366521826726993]}, 
              "AccuracyHistory" -> {
                Around[0.7241515595530702, 0.009386144616952967]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.6923044109571266`, 0.09982500355445288], "Accuracy" -> 
              Around[0.729360812573728, 0.013335815934614775`], 
              "EvaluationTime" -> 0.00003428228005261127, "TestSize" -> 2228, 
              "ModelMemory" -> 95328, "ModelUtility" -> -1.7688669182211298`, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 314344, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.6923044109571266`, 0.07058693694532484]}, 
              "AccuracyHistory" -> {
                Around[0.729360812573728, 0.009429845880021723]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.57015970649271, 0.022426662114128578`], "Accuracy" -> 
              Around[0.7177430870296553, 0.01430546341485724], 
              "EvaluationTime" -> 0.00004067137461682826, "TestSize" -> 1988, 
              "ModelMemory" -> 95328, "ModelUtility" -> 0.4147778441894986, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 372904, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.57015970649271, 0.015858044860279752`]}, 
              "AccuracyHistory" -> {
                Around[0.7177430870296553, 0.010115490188661619`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00004067137461682826, "MeanCrossEntropy" -> 
             Around[0.57015970649271, 0.022426662114128578`], "ModelMemory" -> 
             95328, "TrainingMemory" -> 372904, "TrainingTime" -> 
             6.309265313314812], "Index" -> 3], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 8200], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 10], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6991542721683686, 0.034582532487428], "Accuracy" -> 
              Around[0.7385060987302534, 0.013043875423311898`], 
              "EvaluationTime" -> 0.00004309752221494191, "TestSize" -> 2278, 
              "ModelMemory" -> 104056, "ModelUtility" -> 0.002849891644473135,
               "TrainingSize" -> 10, "TrainingTime" -> 0.15848931924611134`, 
              "TrainingMemory" -> 335984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6991542721683686, 0.02445354323246442]}, 
              "AccuracyHistory" -> {
                Around[0.7385060987302534, 0.00922341276477639]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7287270681917347, 0.06403375608423366], "Accuracy" -> 
              Around[0.7199282983003583, 0.02410379068218974], 
              "EvaluationTime" -> 0.00005560898444385581, "TestSize" -> 700, 
              "ModelMemory" -> 104056, "ModelUtility" -> -0.09516068977455461,
               "TrainingSize" -> 60, "TrainingTime" -> 0.15848931924611134`, 
              "TrainingMemory" -> 346672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7287270681917347, 0.045278703152006966`]}, 
              "AccuracyHistory" -> {
                Around[0.7199282983003583, 0.017043953843677483`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.594569387647971, 0.03276847554565007], "Accuracy" -> 
              Around[0.7225050390294018, 0.01910750548876026], 
              "EvaluationTime" -> 0.000049119801715883956`, "TestSize" -> 
              1100, "ModelMemory" -> 104056, "ModelUtility" -> 
              0.324681436358076, "TrainingSize" -> 300, "TrainingTime" -> 
              0.25118864315095796`, "TrainingMemory" -> 486560, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.594569387647971, 0.02317081126747472]}, 
              "AccuracyHistory" -> {
                Around[0.7225050390294018, 0.013511046702661554`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5572642893615366, 0.043813936709892067`], "Accuracy" -> 
              Around[0.6920617258514047, 0.03057420843338243], 
              "EvaluationTime" -> 0.00008596445438240291, "TestSize" -> 458, 
              "ModelMemory" -> 104056, "ModelUtility" -> 0.44499698833410617`,
               "TrainingSize" -> 1830, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 1108584, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5572642893615366, 0.030981131758042887`]}, 
              "AccuracyHistory" -> {
                Around[0.6920617258514047, 0.021619230112655645`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00008596445438240291, "MeanCrossEntropy" -> 
             Around[0.5572642893615366, 0.043813936709892067`], "ModelMemory" -> 
             104056, "TrainingMemory" -> 1108584, "TrainingTime" -> 
             1.1516166422237923`], "Index" -> 4], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 3200], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 30], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.963236830992291, 0.05175723476332261], "Accuracy" -> 
              Around[0.709589161921636, 0.013463439345345824`], 
              "EvaluationTime" -> 0.000025655243257375693`, "TestSize" -> 
              2278, "ModelMemory" -> 62352, 
              "ModelUtility" -> -0.6396864132564519, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.1, "TrainingMemory" -> 224872, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.963236830992291, 0.03659789167660953]}, 
              "AccuracyHistory" -> {
                Around[0.709589161921636, 0.009520089259187804]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9078952513234699, 0.05884932574716], "Accuracy" -> 
              Around[0.7051583331834753, 0.016684135354534644`], 
              "EvaluationTime" -> 0.000040080546111312295`, "TestSize" -> 
              1500, "ModelMemory" -> 62352, 
              "ModelUtility" -> -0.5257286241849596, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.12589254117941673`, "TrainingMemory" -> 
              233616, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.9078952513234699, 0.04161275730407292]}, 
              "AccuracyHistory" -> {
                Around[0.7051583331834753, 0.01179746524742567]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5623181915914138, 0.022704291235175627`], "Accuracy" -> 
              Around[0.7372299615268683, 0.015104634080596334`], 
              "EvaluationTime" -> 0.00003956715796039517, "TestSize" -> 1700, 
              "ModelMemory" -> 62352, "ModelUtility" -> 0.4420692092678036, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 289320, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5623181915914138, 0.01605435829442698]}, 
              "AccuracyHistory" -> {
                Around[0.7372299615268683, 0.0106805891857311]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4923521762163057, 0.0342770314846755], "Accuracy" -> 
              Around[0.6996541749913529, 0.030326737534671234`], 
              "EvaluationTime" -> 0.000056490560255800374`, "TestSize" -> 458,
               "ModelMemory" -> 62352, "ModelUtility" -> 0.6962465467541008, 
              "TrainingSize" -> 1830, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 1051352, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4923521762163057, 0.02423752140175884]}, 
              "AccuracyHistory" -> {
                Around[0.6996541749913529, 0.02144424176203063]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000056490560255800374`, "MeanCrossEntropy" -> 
             Around[0.4923521762163057, 0.0342770314846755], "ModelMemory" -> 
             62352, "TrainingMemory" -> 1051352, "TrainingTime" -> 
             1.6740007334344562`], "Index" -> 5], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 18200], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 300], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.9103889364435254`, 0.10681030042252986`], "Accuracy" -> 
              Around[0.7220911821801886, 0.013301774075707552`], 
              "EvaluationTime" -> 0.00004164063900592973, "TestSize" -> 2278, 
              "ModelMemory" -> 170896, "ModelUtility" -> -2.0100989435899668`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 471784, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.9103889364435254`, 0.07552628772934322]}, 
              "AccuracyHistory" -> {
                Around[0.7220911821801886, 0.00940577465074423]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.222649881522754, 0.12683919029365312`], "Accuracy" -> 
              Around[0.710535037752555, 0.013618123711244531`], 
              "EvaluationTime" -> 0.00005276874597518848, "TestSize" -> 2228, 
              "ModelMemory" -> 170896, "ModelUtility" -> -2.3133428960721725`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 482760, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.222649881522754, 0.08968885157685302]}, 
              "AccuracyHistory" -> {
                Around[0.710535037752555, 0.009629467623258321]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.5716279810700173`, 0.10269312922074042`], "Accuracy" -> 
              Around[0.7298761723813303, 0.014108678000057695`], 
              "EvaluationTime" -> 0.00003944053235760955, "TestSize" -> 1988, 
              "ModelMemory" -> 170896, "ModelUtility" -> -1.623436723052523, 
              "TrainingSize" -> 300, "TrainingTime" -> 3.1622776601683795`, 
              "TrainingMemory" -> 602200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5716279810700173`, 0.07261500805325194]}, 
              "AccuracyHistory" -> {
                Around[0.7298761723813303, 0.009976341887418253]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003944053235760955, "MeanCrossEntropy" -> 
             Around[1.5716279810700173`, 0.10269312922074042`], "ModelMemory" -> 
             170896, "TrainingMemory" -> 602200, "TrainingTime" -> 
             24.748594966031035`], "Index" -> 6], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 18200], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.2653341069850144`, 0.18232945720332197`], "Accuracy" -> 
              Around[0.7223410933506287, 0.013435081147811572`], 
              "EvaluationTime" -> 0.00003743083751824733, "TestSize" -> 2228, 
              "ModelMemory" -> 196400, "ModelUtility" -> -3.0821867377636796`,
               "TrainingSize" -> 60, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 567576, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.2653341069850144`, 0.12892639559853136`]}, 
              "AccuracyHistory" -> {
                Around[0.7223410933506287, 0.009500036985409107]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.1582929576806777`, 0.1692532400549206], "Accuracy" -> 
              Around[0.7191402902514209, 0.013345648532535424`], 
              "EvaluationTime" -> 0.00004595261979465568, "TestSize" -> 2278, 
              "ModelMemory" -> 196400, "ModelUtility" -> -3.0146365342705135`,
               "TrainingSize" -> 10, "TrainingTime" -> 2.51188643150958, 
              "TrainingMemory" -> 554904, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.1582929576806777`, 0.11968011378062893`]}, 
              "AccuracyHistory" -> {
                Around[0.7191402902514209, 0.009436798576688095]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00004595261979465568, "MeanCrossEntropy" -> 
             Around[3.1582929576806777`, 0.1692532400549206], "ModelMemory" -> 
             196400, "TrainingMemory" -> 554904, "TrainingTime" -> 
             61.453033258474164`], "Index" -> 7], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 3200], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 300], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.5524352131569426`, 0.0882708562098293], "Accuracy" -> 
              Around[0.7126974172115949, 0.013428289630329361`], 
              "EvaluationTime" -> 0.000026592280946926217`, "TestSize" -> 
              2278, "ModelMemory" -> 62352, 
              "ModelUtility" -> -1.5954850697288903`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
              222784, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.5524352131569426`, 0.06241692100711296]}, 
              "AccuracyHistory" -> {
                Around[0.7126974172115949, 0.009495234657342888]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5652430913128117, 0.021742499074652248`], "Accuracy" -> 
              Around[0.7381964696452251, 0.013958247349917447`], 
              "EvaluationTime" -> 0.00003331718096837515, "TestSize" -> 1988, 
              "ModelMemory" -> 62352, "ModelUtility" -> 0.4324513880230425, 
              "TrainingSize" -> 300, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 316856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5652430913128117, 0.015374268535628838`]}, 
              "AccuracyHistory" -> {
                Around[0.7381964696452251, 0.009869971354605782]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.064159853398603, 0.12276974258203217`], "Accuracy" -> 
              Around[0.7168805946426327, 0.013521666655164502`], 
              "EvaluationTime" -> 0.00002777150677990446, "TestSize" -> 2228, 
              "ModelMemory" -> 62352, "ModelUtility" -> -2.1663169114617067`, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 233616, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.064159853398603, 0.08681131750428178]}, 
              "AccuracyHistory" -> {
                Around[0.7168805946426327, 0.009561262184810841]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002777150677990446, "MeanCrossEntropy" -> 
             Around[2.064159853398603, 0.12276974258203217`], "ModelMemory" -> 
             62352, "TrainingMemory" -> 233616, "TrainingTime" -> 
             11.865271075945488`], "Index" -> 8], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 8200], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.182076808437944, 0.12479025881748265`], "Accuracy" -> 
              Around[0.7160978922021977, 0.013381435600922193`], 
              "EvaluationTime" -> 0.00004200007449555511, "TestSize" -> 2278, 
              "ModelMemory" -> 104056, "ModelUtility" -> -2.276529539026768, 
              "TrainingSize" -> 10, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 335968, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.182076808437944, 0.08824003823586633]}, 
              "AccuracyHistory" -> {
                Around[0.7160978922021977, 0.009462103855423166]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00004200007449555511, "MeanCrossEntropy" -> 
             Around[2.182076808437944, 0.12479025881748265`], "ModelMemory" -> 
             104056, "TrainingMemory" -> 335968, "TrainingTime" -> 
             37.8472494359714], "Index" -> 9], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 8200], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 30], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.136894239496866, 0.06400665223708517], "Accuracy" -> 
              Around[0.7243776471365826, 0.01326691948607709], 
              "EvaluationTime" -> 0.000040110766615231555`, "TestSize" -> 
              2278, "ModelMemory" -> 95328, 
              "ModelUtility" -> -0.9722220312003077, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.15848931924611134`, "TrainingMemory" -> 
              303448, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.136894239496866, 0.04525953783789202]}, 
              "AccuracyHistory" -> {
                Around[0.7243776471365826, 0.009381128734061056]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1631463651363942`, 0.06573800385465477], "Accuracy" -> 
              Around[0.7246205167084935, 0.013407509704183352`], 
              "EvaluationTime" -> 0.000029613378963512026`, "TestSize" -> 
              2228, "ModelMemory" -> 95328, 
              "ModelUtility" -> -1.017965228114794, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.15848931924611134`, "TrainingMemory" -> 
              314360, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.1631463651363942`, 0.04648378830729378]}, 
              "AccuracyHistory" -> {
                Around[0.7246205167084935, 0.00948054103065249]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.57015970649271, 0.022426662114128578`], "Accuracy" -> 
              Around[0.7177430870296553, 0.01430546341485724], 
              "EvaluationTime" -> 0.00004625980825281634, "TestSize" -> 1988, 
              "ModelMemory" -> 95328, "ModelUtility" -> 0.414777838601065, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 392848, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.57015970649271, 0.015858044860279752`]}, 
              "AccuracyHistory" -> {
                Around[0.7177430870296553, 0.010115490188661619`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5014957655490633, 0.03414267067559792], "Accuracy" -> 
              Around[0.6996541749913529, 0.030326737534671234`], 
              "EvaluationTime" -> 0.0000711174018325167, "TestSize" -> 458, 
              "ModelMemory" -> 95328, "ModelUtility" -> 0.6600436086376712, 
              "TrainingSize" -> 1830, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 986176, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5014957655490633, 0.02414251396253437]}, 
              "AccuracyHistory" -> {
                Around[0.6996541749913529, 0.02144424176203063]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000711174018325167, "MeanCrossEntropy" -> 
             Around[0.5014957655490633, 0.03414267067559792], "ModelMemory" -> 
             95328, "TrainingMemory" -> 986176, "TrainingTime" -> 
             2.1400388407494053`], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 17085553538476]], "MaxTrainingSize" -> 2288, 
      "PreprocessorEvaluationTime" -> 4.8389537967916`3.*^-6, 
      "PreprocessorMemory" -> 250136, "InputDimension" -> 12, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.6262755529071666,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.7711581862997008`17.32904973901352*^9, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 5.037930677840592, 
          "ElapsedTimes" -> 8.5640708, "ExperimentCounts" -> 10], 
         Association[
         "TrainingSizes" -> 60, "TimeBudgets" -> 7.19704382548656, 
          "ElapsedTimes" -> 7.8505946999999985`, "ExperimentCounts" -> 8], 
         Association[
         "TrainingSizes" -> 300, "TimeBudgets" -> 10.281491179266514`, 
          "ElapsedTimes" -> 12.747061599999999`, "ExperimentCounts" -> 8], 
         Association[
         "TrainingSizes" -> 1830, "TimeBudgets" -> 14.687844541809302`, 
          "ElapsedTimes" -> 15.6881472, "ExperimentCounts" -> 4]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[17094143473068]], "ID" -> 17098438440364]]], 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"968"}, "ID" -> 
           8648384402107197552]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 47.482208247533194`, 
      "MaxTrainingMemory" -> 28447264, "DataMemory" -> 107640, 
      "FunctionMemory" -> 539064, "LanguageVersion" -> {12., 0}, "Date" -> 
      DateObject[{2019, 7, 3, 15, 56, 27.7287168`9.195504687742412}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771172587851804*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"1e293da7-661f-43ec-865a-543f5a565b59"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"calcIsCalc", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"calcQs", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<calc\>\""}], "}"}]}], 
      "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"calcIsAlgebra1", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"calcQs", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 1\>\""}], 
        "}"}]}], "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"calcIsAlgebra2", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"calcQs", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 2\>\""}], 
        "}"}]}], "]"}]}], ";"}], "*)"}]}]], "Input",
 CellChangeTimes->{
  3.7711580435433702`*^9, 3.7711581045325623`*^9, {3.771158178293239*^9, 
   3.7711582669439397`*^9}, {3.7711583616162257`*^9, 
   3.7711584535961103`*^9}, {3.7711585350279884`*^9, 
   3.7711585464551077`*^9}, {3.7711585872250843`*^9, 
   3.7711585886280823`*^9}, {3.7711725238773365`*^9, 
   3.7711725272497325`*^9}, {3.7711727585554667`*^9, 3.771172776237033*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"5652c7f2-04fa-4c09-af67-9f4f252f0675"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"algebra1IsCalc", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"algebra1Questions", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<calc\>\""}], "}"}]}], 
      "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"algebra1IsAlgebra1", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"algebra1Questions", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 1\>\""}], 
        "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"algebra1IsAlgebra2", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"algebra1Questions", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 2\>\""}], 
        "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"algebra2IsCalc", "=", 
      RowBox[{"questionClassifier", "[", 
       RowBox[{"algebra2Qs", ",", " ", 
        RowBox[{"{", 
         RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<calc\>\""}], "}"}]}], 
       "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"algebra2IsAlgebra1", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"algebra2Qs", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 1\>\""}], 
        "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"algebra2IsAlgebra2", "=", 
     RowBox[{"questionClassifier", "[", 
      RowBox[{"algebra2Qs", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<algebra 2\>\""}], 
        "}"}]}], "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.771158604958705*^9, 3.7711586688388205`*^9}, {
  3.771172530952365*^9, 
  3.7711725412987175`*^9}},ExpressionUUID->"de04e5c6-514e-4190-8ac5-\
8bd66302493d"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"ListPlot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#calcu", "/", "#alge"}], "&"}], "@", " ", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<calcu\>\"", "\[Rule]", " ", "calcIsCalc"}], ",", " ", 
       RowBox[{"\"\<alge\>\"", "\[Rule]", " ", 
        RowBox[{"Max", "[", 
         RowBox[{"calcIsAlgebra1", ",", " ", "calcIsAlgebra2"}], "]"}]}]}], 
      "|>"}]}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Training Set\>\"", ",", 
       "\"\<Calculus Probability divided by highest other\>\""}], "}"}]}]}], 
   "]"}], "*)"}]], "Input",
 CellChangeTimes->{{3.771158271668297*^9, 3.7711583575393267`*^9}, {
  3.771158458432547*^9, 3.771158592709983*^9}, {3.7711725459129972`*^9, 
  3.7711725536575017`*^9}},ExpressionUUID->"1571ed99-a23c-4960-8b79-\
e86ea7951882"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lp", "=", 
  RowBox[{"ListLogPlot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#right", "/", "#wrong"}], "&"}], "@", " ", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<right\>\"", "\[Rule]", " ", "algebra1IsAlgebra1"}], ",", 
       " ", 
       RowBox[{"\"\<wrong\>\"", "\[Rule]", " ", "algebra1IsAlgebra2"}]}], 
      "|>"}]}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Training Set\>\"", ",", 
       "\"\<Algebra 1 Probability divided by highest other\>\""}], "}"}]}], 
    ",", " ", 
    RowBox[{"GridLines", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", " ", 
       RowBox[{"{", "1", "}"}]}], "}"}]}], ",", " ", 
    RowBox[{"GridLinesStyle", "\[Rule]", "Red"}]}], "]"}], " "}]], "Input",
 CellChangeTimes->{{3.7711586979645214`*^9, 3.771158763987009*^9}, {
  3.7711589034919567`*^9, 3.7711589198291035`*^9}, {3.7711638938445168`*^9, 
  3.771163931375168*^9}, {3.7711726666542597`*^9, 3.7711726714516697`*^9}, {
  3.7711728159418964`*^9, 3.77117289478926*^9}, {3.7711729758869505`*^9, 
  3.7711729969018683`*^9}, {3.7711730367321424`*^9, 3.7711730394760923`*^9}, {
  3.771173076851448*^9, 3.7711731307854276`*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"a58ec1c8-41a6-4b44-8b8b-48c35008ce34"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
     0.0055000000000000005`], AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.0055000000000000005`], AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.0055000000000000005`], AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Training Set\"", TraditionalForm], 
    FormBox[
    "\"Algebra 1 Probability divided by highest other\"", TraditionalForm]},
  AxesOrigin->{0., -4.248000186546445},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{
     Charting`ScaledTicks[{Log, Exp}], 
     Charting`ScaledFrameTicks[{Log, Exp}]}, {Automatic, Automatic}},
  GridLines->{{}, {0}},
  GridLinesStyle->RGBColor[1, 0, 0],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 730}, {-4.248000186546445, 3.3488638401031494`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->FrontEndValueCache[{Automatic, 
     Charting`ScaledTicks[{Log, Exp}]}, {Automatic, {{-2.995732273553991, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.05\"", 0.05, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.3025850929940455`, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.10\"", 0.1, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.6931471805599453, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.50\"", 0.5, AutoDelete -> True], 
         NumberForm[#, {
           DirectedInfinity[1], 2}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {0., 
       FormBox["1", TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {1.6094379124341003`, 
       FormBox["5", TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {2.302585092994046, 
       FormBox["10", TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-5.298317366548036, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-5.115995809754082, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-4.961845129926823, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-4.8283137373023015`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-4.710530701645918, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-4.605170185988091, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.912023005428146, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.506557897319982, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.2188758248682006`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.8134107167600364`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.659260036932778, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.5257286443082556`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.4079456086518722`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.6094379124341003`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.2039728043259361`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.916290731874155, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.5108256237659907, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.35667494393873245`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.2231435513142097, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.10536051565782628`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {0.6931471805599453, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.0986122886681098`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.3862943611198906`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.791759469228055, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.9459101490553132`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.0794415416798357`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.1972245773362196`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.995732273553991, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {3.4011973816621555`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {3.6888794541139363`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {3.912023005428146, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.0943445622221, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.248495242049359, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.382026634673881, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.499809670330265, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.605170185988092, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {5.298317366548036, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {5.703782474656201, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {5.991464547107982, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {6.214608098422191, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}}}]]], "Output",
 CellChangeTimes->{
  3.7711727667482896`*^9, 3.7711728181214447`*^9, 3.771172895374687*^9, 
   3.7711729980146894`*^9, {3.7711730949296083`*^9, 3.771173131589999*^9}},
 CellLabel->
  "Out[113]=",ExpressionUUID->"dd049dca-219a-4328-b1eb-b60ed8e61c04"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"lp1", "=", 
  RowBox[{"ListLogPlot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#right", "/", "#wrong"}], "&"}], "@", " ", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<right\>\"", "\[Rule]", " ", "algebra2IsAlgebra2"}], ",", 
       " ", 
       RowBox[{"\"\<wrong\>\"", "\[Rule]", " ", "algebra2IsAlgebra1"}]}], 
      "|>"}]}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Training Set\>\"", ",", 
       "\"\<Algebra 1 Probability divided by highest other\>\""}], "}"}]}], 
    ",", 
    RowBox[{"GridLines", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", " ", 
       RowBox[{"{", "1", "}"}]}], "}"}]}], ",", " ", 
    RowBox[{"GridLinesStyle", "\[Rule]", "Red"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Export", "[", 
  RowBox[{
  "\"\<C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\2pset_trained_NeuralNetwork.pdf\>\"", ",", " ", 
   RowBox[{"{", 
    RowBox[{"lp", ",", " ", "lp1"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.771163950480488*^9, 3.771163966361644*^9}, {
  3.7711726416850667`*^9, 3.7711727266470737`*^9}, {3.7711728102008142`*^9, 
  3.771172811149503*^9}, {3.7711728436986227`*^9, 3.771172844611272*^9}, {
  3.7711729042891684`*^9, 3.7711729045893817`*^9}, {3.7711731459772415`*^9, 
  3.771173155041668*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"5f8ee03a-5a6c-4fc8-b268-7b1aba34af42"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxdnH98k9X1x58hzkxR48a2uDGJjm1FUTO/qFE7eUCUip1Gh7NMJkFQIyJE
KBKw2gcoEKCUlBYaB45McVbFmTmmAev6qFUyZRIUpTImUVE7KRoFRlW0397P
Oc89ecIf5PXuub9/nHvOuTc5/eYZ193SzzCMH3zbMNQn/SuM6Psv++pfutr5
D6bi7mOPMnvMb/X9PyG7bwSx1/y6t7f38AM7mQeq9J53/7CP0/vMb3p7aw/u
e595kJJ3bluW5/R+VV5g0lv/ZfkZSh64SfMQJbefGfIp88+VvPud1w9z/jK0
Z+SLO1l+ptnXnPZLPvuY5cPM7/T9X3f4Lyw/R6XvmmR9yPKA2df31IIRO5h/
qeTWon67mM9T9VXbf/+U+f9U+bWb39/G5Q1XfO4F3rdYfr5KP239eT0sv0DJ
e9/5ZSfLLzT/18d7lz/LHDTH9v1vf3Ifp79Itce4+2//Yr4Y/Vv4vW7mS8xj
+/6fGn6U85er+nw/ucgZj18ptm9f5bT/UvOYvv/HbH2d849Q8tTl2c+ZTfM0
NSuHHqH0lmleqiZo2ArOP1Llb72oIU/prZFo3wunO+0bpcqz5s7m8bNGQb7i
8Dssv0zJD/3xu98xSQ4u23KkwOWPNo/2jcf6b7/C+Uer8Tr5GOM9zn+5Wj/P
vnoNs3W5yj9gwyufcf4rVH3m+AyvR+sKNV6pp+v/y/IxaM/r/f7N8jFor13l
zH+F+aWq8IW/srxC1T9r4EcHuf4rVfrwgzfz+rOuNPu2i1Fz94ucfyzm97Hy
V1k+Vu2H2kt+/Dbnv0rl928/8X9c/lWqff59ew6zvBLr7arGTs5fafb0lfe9
6he4/F9jvU1c+xHLf21+1feHodGXOP/VyH/Dwf+w/GpVX2LY9lNovI1r1Gfq
HIeta1R5T4o8pD4LZzlsglNn6vQhd3k2OKDTG9eq+dn742N5f5jXYr0++2de
r9a1Kl3sbJ0f3CX1X1dSPzio01vgkOS/TpUf1P0xfqM+e3R5Jjgp+cEV/205
nvP/BuvtRxNe5vEbB7lOb45T47PyXJ0fclv6D7ak/deXtB9saLauLxk/cEDa
/1v1mZb8v3X31wK36vmwf6v6n9Vy4wbFPl2eeYP6TOn6rBvU/PTeNJL1k32D
ebiPj7txM6+vKvRH8oPzUj84rNtnV0H/nLXieR6/8eZJff/PDD3N8z9epTv0
3huf83ofbx7pq+/M8Vu5/vHQR0u//x+u/3cqvVfmD+yT8QPHpX5w0fjfqD6r
ZPxudI+3daMaH++cD/tx/huxn6Z8k+P6J+DvsSf+Tf0xwVHJD67S42ODC1L/
79WnX9YPOD1U5/99SfvBEdk/N6E8aT84LPsVHJT84Fapf6L6rNDrwySW8Zuo
+rt+RuMHPP6QZ485zdG/Ybc+8IfRXukP2Ks5DC6T8QHL+k2Bi9Yr2NDp82BT
1u8k9RnQ+80/qWQ9Qx7R5YUht9956mPWL5OgD0+4oI36k5rkbo8NbtX15SdB
X0v9N6tPWU9+sOwfE9ypywuDZT4scFy3PwUu2i9UntQPTsv+n4zxkPono33P
Xcr2kznZXV4YXKQfwWV6fFKT3f21wTJ/eZR/RKc3pqhPW5fvn+KuzwQP69rG
+yU8RemT9om/4fPdgtyny09NQfnSf8iDMv/guKzfW9RnRvoPDsv4l8jD4Jys
P3Becwos680Gp3R78mCf9P9WtZ4y0v9boR+ecs4v81aMr4w/OCrjDzb1fk/d
6h4/G+zR852/VZ3vtX8eu4X1523q78lLzuih8fWDI7L/wFmpHxyT9QfukvkH
d8r831bS/9tgfww4bjPXH4H98NlJbD/5I7CXhyx6mvsfQb4tzniEiaX/Efd5
nIK8SsYfXNDty0fc423cjvbL+INl/Zpg6/zFR7j+27H+jjvNsQdJ7h3F502K
WMYf7Jf1B7Zl/09Vn7J+/WCxH0ywnIfhqah/k7ZvprrHIzXV3X4bbGW+c4ja
lwcHKmqc+u9Q421FW/7E43+H+ntO9t8d7v6EwVUy/ne4xy91h1t/2pDLeZUH
+2X8pyG/7D+wV84TcJn0HxyQ+sFp6T/Yuluft9PgHzYseon7P83s3/exZvvz
fP7cifXX0p/tdf+dsC/6/SLD9sSdqpys6H9wTuxTcOqvznykwF16P9pgj/Sf
0ov+nQ6W/oNl/ZrgqTuq2B8NT4d/OXv0frZvpuM8uuXqAteP9EX2Ljgh+hcs
+syYoT4juj1+cE7W3wyM3+7p77D+nYHz4UDHAV5/4ImNc/g8T4Fr9X61UZ5d
pusHy3o2ouqzU4+nF+yT8xic1e0NgEUfmlH4T/efw/Mbgrzw7jJe72Gw6Oco
uMg+p/p1eQmw2HMpsJyfaXDR+U716fJzYDkf8mA5LwtR+CevfOt9Xn93EZfz
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
/WBt6eT7sAzkEq+0waZub5bqk/lHe0bsX8b2R2fJ+OfBch50gcV+KoAlnthD
5f9khPM+ewnildc/z+vHswRyc+8/WP+Dxf/3gWV/+cHyfqqM+LZH3+D5B4t9
EQQXvddT9dfOMyaz/qqAPHzJa+x/hyi/Lr9qCfTJhDDbV2G0f4a2FyJUvsSb
wWJ/xZYgHvLcq2w/WMS/f5zfN8WXlNh/S9zx7STKk/WaovFqc+z51iXwlwIP
8/imIS/a/+Ci+M0S2G+/uYnt4SzkRfdZNJ7TT2X90rkE/ql58QOs/0mu29cF
lvhOoWS+ekgu8Y+46l9slKMfPXHY+3/X9n/c/V7MF1efRfeDkPfu7+X3yWWQ
S/wgAJb4QRD1GZPOyrH+p/y9D/B5UoH0RfeJxDp/Fdj+9VzWL2Fwp96vEbAx
27FPomD/3hzfj8RQ39qmx533g5DL+6h4vGT+IZfzIUnl6/dhKbDYD60of+Ly
3Y7/T/3b7di3GaSX+ymbytecpf5937k/yIHl/r8TLO+H83HYmzU3Psj6H+23
DlzO/mwhjvX19utsn/cgf1H8aynq+2YM25eepe73oF7I5f2rDyz3p36Si/8P
Fv0VQHnXfH0O698g5LKfzaXu92MVkIv/G4Lc+OPP2D+tglzsmzCVp/sTofbI
+U/9e/7lrzn+s1SNx6yyVue9PdV33Lkcj4yDJR6RoPqnb2H9kKTyBiU4vpRa
an7e18HBO1lfti51xxPTSJ/V/cuAZX/bNF6Dh/L3bbLIv/LkvBPPhlzWVyfk
67U/lKf2vXIj96cL6eU8LoDFX+1B+rxev8Yy9XfrwSe4Ps+ykngo5HKf7wPL
exc/2J58UX8bXEYs8w8WfycIFv1kLsP5uGQxx4MqIJf3PiGw3FdVIb0x7Vvs
v4YhF38hQuXVjmN9EqX2X33Eif8tg7/12paNPP/L3Ps9DjZ0/DVBPPuA4/+D
82d/xvfnKZQv8ehWcNF7Hcqv33dmIJf3TjbYI/ufWPT/Mtjvp63h87ET5Vnn
LmV/KI/0h88cxPGcLhov0f9g8ed7SubTWI72i/0HTsr8g+sffJP9Sx9Y9Icf
LO/nypa79UcActHnweW4L7TnsX40kX7MlNc4nlmx3L3+Qkhvelq5/1Uor+g9
OuTRE/txPCiC/HuNsc57K6pfr/8YWOIPFpU3dijfn8VJfsx3+PtjieVu/y4J
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
nxC1V+7/waKPq6g9qrz/B8dgf+E=
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Training Set\"", TraditionalForm], 
    FormBox[
    "\"Algebra 1 Probability divided by highest other\"", TraditionalForm]},
  AxesOrigin->{0., -3.074274618352187},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{
     Charting`ScaledTicks[{Log, Exp}], 
     Charting`ScaledFrameTicks[{Log, Exp}]}, {Automatic, Automatic}},
  GridLines->{{}, {0}},
  GridLinesStyle->RGBColor[1, 0, 0],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Exp[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 1558}, {-3.074274618352187, 4.452331900596619}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->FrontEndValueCache[{Automatic, 
     Charting`ScaledTicks[{Log, Exp}]}, {Automatic, {{-2.3025850929940455`, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.1\"", 0.1, AutoDelete -> True], NumberForm[#, {
           DirectedInfinity[1], 1}]& ], StandardForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {0., 
       FormBox["1", StandardForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {2.302585092994046, 
       FormBox["10", StandardForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {4.605170185988092, 
       FormBox["100", StandardForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-4.605170185988091, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.912023005428146, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.506557897319982, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-3.2188758248682006`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.995732273553991, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.8134107167600364`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.659260036932778, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.5257286443082556`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-2.4079456086518722`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.6094379124341003`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.2039728043259361`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.916290731874155, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.6931471805599453, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.5108256237659907, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.35667494393873245`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.2231435513142097, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.10536051565782628`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {0.6931471805599453, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.0986122886681098`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.3862943611198906`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.6094379124341003`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.791759469228055, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.9459101490553132`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.0794415416798357`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.1972245773362196`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {2.995732273553991, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {3.4011973816621555`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {3.6888794541139363`, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {3.912023005428146, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.0943445622221, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.248495242049359, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.382026634673881, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {4.499809670330265, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {5.298317366548036, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {5.703782474656201, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {5.991464547107982, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {6.214608098422191, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {6.396929655216146, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {6.551080335043404, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {6.684611727667927, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {6.802394763324311, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {6.907755278982137, 
       FormBox[
        TemplateBox[{0., 0.}, "Spacer2"], StandardForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}}}]]], "Output",
 CellChangeTimes->{{3.771172766862372*^9, 3.771172771201454*^9}, 
   3.771172823857523*^9, 3.771172905147781*^9, {3.7711731474903173`*^9, 
   3.771173155986356*^9}},
 CellLabel->
  "Out[116]=",ExpressionUUID->"a3a9cf45-1c91-489b-af34-577425fd0f8c"],

Cell[BoxData["\<\"C:\\\\Users\\\\Silas \
Grossberndt\\\\Documents\\\\GitHub\\\\WSS-Template\\\\Final Project\\\\Drafts\
\\\\problem_sets\\\\2pset_trained_NeuralNetwork.pdf\"\>"], "Output",
 CellChangeTimes->{{3.771172766862372*^9, 3.771172771201454*^9}, 
   3.771172823857523*^9, 3.771172905147781*^9, {3.7711731474903173`*^9, 
   3.771173156463695*^9}},
 CellLabel->
  "Out[117]=",ExpressionUUID->"168663e1-549d-4688-bf6d-e4a93f88d109"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"equivilentFraction", "[", 
    RowBox[{"x_", ",", " ", "y_", ",", " ", "n_"}], "]"}], ":=", " ", 
   RowBox[{"n", "*", 
    RowBox[{"x", "/", "y"}]}]}], " ", ";"}], "\n", 
 RowBox[{
  RowBox[{"turnOffEquivFrac", "[", "question_", "]"}], ":=", 
  RowBox[{"MatchQ", "[", 
   RowBox[{"question", ",", " ", 
    RowBox[{"{", 
     RowBox[{
     "__", ",", " ", "\"\<Fraction\>\"", ",", "__", ",", 
      "\"\<implest form\>\""}], "}"}]}], "]"}]}], "\n", 
 RowBox[{"Function", "[", 
  RowBox[{"question", ",", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"question", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Fraction\>\"", ",", "__", ",", "\"\<implest form\>\""}], 
      "}"}]}], "]"}]}], "]"}], "\n", 
 RowBox[{
  RowBox[{"allpoints", "[", "question_", "]"}], ":=", 
  RowBox[{"MatchQ", "[", 
   RowBox[{"question", ",", " ", 
    RowBox[{"{", 
     RowBox[{"__", ",", " ", "\"\<all points\>\"", ",", " ", "__"}], "}"}]}], 
   "]"}]}], "\n", 
 RowBox[{
  RowBox[{"eitherPointfirst", "[", 
   RowBox[{"a_", ",", " ", "b_", ",", "c_", ",", " ", "d_"}], "]"}], ":=", 
  " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", "a", ",", " ", "b", ",", " ", "\"\<)\>\""}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<(\>\"", "c"}], ",", " ", 
       RowBox[{"d", "\"\<)\>\""}]}], "}"}]}], "}"}], "\[Rule]", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<(\>\"", "c"}], ",", " ", 
       RowBox[{"d", "\"\<)\>\""}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<(\>\"", ",", "a", ",", " ", "b", ",", " ", "\"\<)\>\""}], 
      "}"}]}], "}"}]}]}], "\n", 
 RowBox[{
  RowBox[{"isPoint", "[", "answer_", "]"}], ":=", 
  RowBox[{"MatchQ", "[", 
   RowBox[{"answer", ",", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<(\>\"", "__", "\"\<)\>\""}], "}"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"commutative", "[", 
   RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"a", "+", "b"}], "\[Rule]", " ", 
   RowBox[{"b", "+", "a"}]}]}], "\n", 
 RowBox[{
  RowBox[{"distributive", "[", 
   RowBox[{"a_", ",", "b_", ",", " ", "c_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"a", "*", 
    RowBox[{"(", 
     RowBox[{"b", "+", "c"}], ")"}]}], "\[Rule]", " ", 
   RowBox[{
    RowBox[{"a", "*", "b"}], "+", 
    RowBox[{"a", "*", "c"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"commutativemulti", "[", 
    RowBox[{"a_", ",", " ", "b_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "*", "b"}], "\[Rule]", " ", 
    RowBox[{"b", "*", "a"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"associative", "[", 
    RowBox[{"a_", ",", " ", "b_", ",", " ", "c_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "+", 
     RowBox[{"(", 
      RowBox[{"b", "+", "c"}], ")"}]}], "\[Rule]", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"a", "+", "b"}], ")"}], "+", "c"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"associativemulti", "[", 
    RowBox[{"a_", ",", " ", "b_", ",", "c_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"a", "*", 
     RowBox[{"(", 
      RowBox[{"b", "*", "c"}], ")"}]}], "\[Rule]", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"a", "*", "b"}], ")"}], "*", "c"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"isMatrix", "[", "answer_", "]"}], ":=", 
  RowBox[{"MatchQ", "[", 
   RowBox[{"answer", ",", " ", "MatrixForm"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.7710690813754177`*^9, 3.7710691204935193`*^9}, 
   3.771069190433951*^9, 3.771102351223105*^9},
 CellLabel->"In[77]:=",ExpressionUUID->"c7c8062e-a44d-44d6-9860-e4bb30b9612d"],

Cell[BoxData[
 RowBox[{"Function", "[", 
  RowBox[{"question", ",", 
   RowBox[{"MatchQ", "[", 
    RowBox[{"question", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"Fraction\"\>", ",", "__", ",", "\<\"implest form\"\>"}], 
      "}"}]}], "]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.771172767313691*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"e905f049-468d-46d4-9632-1ebee397bc66"],

Cell[BoxData[
 TemplateBox[{
  "Classify","bdfmt",
   "\"Argument \\!\\(\\*RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\
\[RightSkeleton]\\\"}]\\) should be a rule, a list of rules, or an \
association.\"",2,75,9,15900850196461898464,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.7710862057331266`*^9, {3.7710863743998404`*^9, 3.7710863783357706`*^9}, 
   3.7710887341244173`*^9, 3.7711055210731*^9},
 CellLabel->
  "During evaluation of \
In[47]:=",ExpressionUUID->"1f53da2c-693a-488a-8b5d-5f6cfe1b3ef4"],

Cell[BoxData[
 TemplateBox[{
  "Classify","bdfmt",
   "\"Argument \
\\!\\(\\*InterpretationBox[RowBox[{TagBox[\\\"ClassifierFunction\\\", \
\\\"SummaryHead\\\"], \\\"[\\\", DynamicModuleBox[{Typeset`open$$ = False, \
Set[Typeset`embedState$$, \\\"Ready\\\"]}, \
TemplateBox[List[PaneSelectorBox[List[Rule[False, \
GridBox[List[List[PaneBox[ButtonBox[DynamicBox[FEPrivate`FrontEndResource[\\\"\
FEBitmaps\\\", \\\"SquarePlusIconMedium\\\"]], RuleDelayed[ButtonFunction, \
Set[Typeset`open$$, True]], Rule[Appearance, None], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], Rule[Alignment, List[Center, \
Center]], Rule[ImageSize, Dynamic[List[Automatic, Times[3.5`, CurrentValue[\\\
\"FontCapHeight\\\"], Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
GraphicsBox[List[List[PointSize[0.13`], GrayLevel[0.45`], \
PointBox[List[List[0.9821769431797024`, -0.440194219686987`], \
List[1.1339776261519132`, 0.8056918676854272`], List[0.5279892326667741`, \
0.6574306661126254`], List[0.022147046479890797`, 1.4937877187998898`]]], \
GrayLevel[0.7`], PointBox[List[List[-0.9815166384819979`, \
0.15045697525228735`], List[-0.5923526886966953`, -0.33441771553094035`], \
List[-0.005656646679640442`, -1.462421365651345`], List[-1.0734370436522753`, \
-1.3729645043477454`]]]], List[GrayLevel[0.55`], AbsoluteThickness[1.5`], \
LineBox[List[List[-1.`, 1.5`], List[1, -1.6`]]]]], List[Rule[Axes, \
List[False, False]], Rule[AxesLabel, List[None, None]], Rule[AxesOrigin, \
List[0, 0]], Rule[BaseStyle, List[Rule[FontFamily, \\\"Arial\\\"], \
AbsoluteThickness[1.5`]]], Rule[DisplayFunction, Identity], Rule[Frame, \
List[List[True, True], List[True, True]]], Rule[FrameLabel, List[List[None, \
None], List[None, None]]], Rule[FrameStyle, Directive[Thickness[Tiny], \
GrayLevel[0.7`]]], Rule[FrameTicks, List[List[None, None], List[None, \
None]]], Rule[GridLines, List[None, None]], Rule[LabelStyle, \
List[Rule[FontFamily, \\\"Arial\\\"]]], Rule[Method, \
List[Rule[\\\"ScalingFunctions\\\", None]]], Rule[PlotRange, List[List[-1.`, \
1], List[-1.3`, 1.1`]]], Rule[PlotRangeClipping, True], \
Rule[PlotRangePadding, List[List[0.7`, 0.7`], List[0.7`, 0.7`]]], Rule[Ticks, \
List[None, None]]], Rule[Axes, False], Rule[AspectRatio, 1], Rule[ImageSize, \
Dynamic[List[Automatic, Times[3.5`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]], Rule[Frame, True], \
Rule[FrameTicks, None], Rule[FrameStyle, Directive[Opacity[0.5`], \
Thickness[Tiny], RGBColor[0.368417`, 0.506779`, 0.709798`]]], \
Rule[Background, GrayLevel[0.94`]]], \
GridBox[List[List[RowBox[List[TagBox[\\\"\\\\\\\"Input type: \\\\\\\"\\\", \\\
\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\\\
\"Nominal\\\\\\\"\\\", \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Classes: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[TemplateBox[List[\\\",\\\", \\\"\\\\\\\",\\\\\\\"\\\", \
\\\"\\\\\\\"algebra 1\\\\\\\"\\\", \\\"\\\\\\\"algebra 2\\\\\\\"\\\", \
\\\"\\\\\\\"calc\\\\\\\"\\\"], \\\"RowWithSeparators\\\"], \
\\\"SummaryItem\\\"]]]]], Rule[GridBoxAlignment, List[Rule[\\\"Columns\\\", \
List[List[Left]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[AutoDelete, False], Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", \
List[List[Automatic]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[GridBoxSpacings, List[Rule[\\\"Columns\\\", List[List[2]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[BaseStyle, \
List[Rule[ShowStringCharacters, False], Rule[NumberMarks, False], \
Rule[PrintPrecision, 3], Rule[ShowSyntaxStyles, False]]]]]], \
Rule[GridBoxAlignment, List[Rule[\\\"Rows\\\", List[List[Top]]]]], \
Rule[AutoDelete, False], Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", \
List[List[Automatic]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[BaselinePosition, List[1, 1]]]], Rule[True, \
GridBox[List[List[PaneBox[ButtonBox[DynamicBox[FEPrivate`FrontEndResource[\\\"\
FEBitmaps\\\", \\\"SquareMinusIconMedium\\\"]], RuleDelayed[ButtonFunction, \
Set[Typeset`open$$, False]], Rule[Appearance, None], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], Rule[Alignment, List[Center, \
Center]], Rule[ImageSize, Dynamic[List[Automatic, Times[3.5`, CurrentValue[\\\
\"FontCapHeight\\\"], Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
GraphicsBox[List[List[PointSize[0.13`], GrayLevel[0.45`], \
PointBox[List[List[0.9821769431797024`, -0.440194219686987`], \
List[1.1339776261519132`, 0.8056918676854272`], List[0.5279892326667741`, \
0.6574306661126254`], List[0.022147046479890797`, 1.4937877187998898`]]], \
GrayLevel[0.7`], PointBox[List[List[-0.9815166384819979`, \
0.15045697525228735`], List[-0.5923526886966953`, -0.33441771553094035`], \
List[-0.005656646679640442`, -1.462421365651345`], List[-1.0734370436522753`, \
-1.3729645043477454`]]]], List[GrayLevel[0.55`], AbsoluteThickness[1.5`], \
LineBox[List[List[-1.`, 1.5`], List[1, -1.6`]]]]], List[Rule[Axes, \
List[False, False]], Rule[AxesLabel, List[None, None]], Rule[AxesOrigin, \
List[0, 0]], Rule[BaseStyle, List[Rule[FontFamily, \\\"Arial\\\"], \
AbsoluteThickness[1.5`]]], Rule[DisplayFunction, Identity], Rule[Frame, \
List[List[True, True], List[True, True]]], Rule[FrameLabel, List[List[None, \
None], List[None, None]]], Rule[FrameStyle, Directive[Thickness[Tiny], \
GrayLevel[0.7`]]], Rule[FrameTicks, List[List[None, None], List[None, \
None]]], Rule[GridLines, List[None, None]], Rule[LabelStyle, \
List[Rule[FontFamily, \\\"Arial\\\"]]], Rule[Method, \
List[Rule[\\\"ScalingFunctions\\\", None]]], Rule[PlotRange, List[List[-1.`, \
1], List[-1.3`, 1.1`]]], Rule[PlotRangeClipping, True], \
Rule[PlotRangePadding, List[List[0.7`, 0.7`], List[0.7`, 0.7`]]], Rule[Ticks, \
List[None, None]]], Rule[Axes, False], Rule[AspectRatio, 1], Rule[ImageSize, \
Dynamic[List[Automatic, Times[3.5`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]], Rule[Frame, True], \
Rule[FrameTicks, None], Rule[FrameStyle, Directive[Opacity[0.5`], \
Thickness[Tiny], RGBColor[0.368417`, 0.506779`, 0.709798`]]], \
Rule[Background, GrayLevel[0.94`]]], \
GridBox[List[List[RowBox[List[TagBox[\\\"\\\\\\\"Input type: \\\\\\\"\\\", \\\
\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\\\
\"Nominal\\\\\\\"\\\", \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Classes: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[TemplateBox[List[\\\",\\\", \\\"\\\\\\\",\\\\\\\"\\\", \
\\\"\\\\\\\"algebra 1\\\\\\\"\\\", \\\"\\\\\\\"algebra 2\\\\\\\"\\\", \
\\\"\\\\\\\"calc\\\\\\\"\\\"], \\\"RowWithSeparators\\\"], \
\\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\"\\\\\\\"Method: \\\\\\\"\
\\\", \\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\
\"\\\\\\\"NearestNeighbors\\\\\\\"\\\", \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Number of training examples: \
\\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[\\\"137\\\", \\\"SummaryItem\\\"]]]]], Rule[GridBoxAlignment, \
List[Rule[\\\"Columns\\\", List[List[Left]]], Rule[\\\"Rows\\\", \
List[List[Automatic]]]]], Rule[AutoDelete, False], Rule[GridBoxItemSize, \
List[Rule[\\\"Columns\\\", List[List[Automatic]]], Rule[\\\"Rows\\\", \
List[List[Automatic]]]]], Rule[GridBoxSpacings, List[Rule[\\\"Columns\\\", \
List[List[2]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[BaseStyle, \
List[Rule[ShowStringCharacters, False], Rule[NumberMarks, False], \
Rule[PrintPrecision, 3], Rule[ShowSyntaxStyles, False]]]]]], \
Rule[GridBoxAlignment, List[Rule[\\\"Rows\\\", List[List[Top]]]]], \
Rule[AutoDelete, False], Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", \
List[List[Automatic]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[BaselinePosition, List[1, 1]]]]], Dynamic[Typeset`open$$], \
Rule[ImageSize, Automatic]]], \\\"SummaryPanel\\\"], \
RuleDelayed[DynamicModuleValues, List[]]], \\\"]\\\"}], \
ClassifierFunction[Association[Rule[\\\"ExampleNumber\\\", 137], \
Rule[\\\"ClassNumber\\\", 3], Rule[\\\"Input\\\", \
Association[Rule[\\\"Preprocessor\\\", \
MachineLearning`MLProcessor[\\\"ToMLDataset\\\", Association[Rule[\\\"Input\\\
\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"Nominal\\\
\"]]]]], Rule[\\\"Output\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Preprocessor\\\", MachineLearning`MLProcessor[\\\"Sequence\\\", \
Association[Rule[\\\"Processors\\\", \
List[MachineLearning`MLProcessor[\\\"List\\\"], \
MachineLearning`MLProcessor[\\\"WrapMLDataset\\\", \
Association[Rule[\\\"FeatureTypes\\\", List[\\\"Nominal\\\"]], \
Rule[\\\"FeatureKeys\\\", List[\\\"f1\\\"]], Rule[\\\"FeatureWeights\\\", \
Automatic], Rule[\\\"ExampleWeights\\\", Automatic], Rule[\\\"RawExample\\\", \
Missing[\\\"KeyAbsent\\\", \\\"RawExample\\\"]]]]]]]]], \
Rule[\\\"ScalarFeature\\\", True], Rule[\\\"Invertibility\\\", \
\\\"Perfect\\\"], Rule[\\\"Missing\\\", \\\"Allowed\\\"]]]], \
Rule[\\\"Processor\\\", MachineLearning`MLProcessor[\\\"Sequence\\\", \
Association[Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Output\\\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\
\", \\\"NominalVector\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Processors\\\", List[MachineLearning`MLProcessor[\\\"ToVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"Input\\\", Association[Rule[\
\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], \
Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\
\\\"], Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Version\\\", List[12.`, 0]], \
Rule[\\\"ID\\\", 1537627216228573037]]], \
MachineLearning`MLProcessor[\\\"ImputeMissing\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Imputed\\\"], Rule[\\\"Input\\\", Association[Rule[\
\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\\\"], \
Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"VectorLength\\\", 1], Rule[\\\"Output\\\
\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \
\\\"NominalVector\\\"], Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Type\\\", \
\\\"NominalVector\\\"], Rule[\\\"Version\\\", List[12.`, 0]], \
Rule[\\\"ID\\\", 4026204838636604962]]], \
MachineLearning`MLProcessor[\\\"IntegerEncodeNominalVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"Input\\\", Association[Rule[\
\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\\\"], \
Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Index\\\", \
List[Association[Rule[\\\"2+3\\\", 1], Rule[\\\"2/3 x+3 =15\\\", 2], \
Rule[\\\"-3(\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \
\\\\(2\\\\)]\\\\)-2x+7)\\\", 3], Rule[\\\"5(2x+4)\\\", 4], \
Rule[\\\"-(5\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(4\\\\)]\\\\)-8)\\\
\", 5], Rule[\\\"8x-2=22\\\", 6], Rule[\\\"Add 1/2 and 1/3\\\", 7], \
Rule[\\\"A salesman is paid a monthly salary of $2,300 plus 7% commission on \
his monthly sales.\\\\nDetermine the amount of sales required for his total \
monthly income to be $3,000.\\\", 8], Rule[\\\"A salesman tells you that the \
$140 earrings are already marked 20% off. What\\\\nwas the original \
price?\\\", 9], Rule[\\\"A $750 watch is on sale for 15% off. Find the sale \
price.\\\", 10], Rule[\\\"Combine 2 \
\\\\!\\\\(\\\\*SubscriptBox[\\\\(log\\\\), \\\\(4\\\\)]\\\\)x +5 \\\\!\\\\(\\\
\\*SubscriptBox[\\\\(log\\\\), \\\\(4\\\\)]\\\\)y - 1/2 \
\\\\!\\\\(\\\\*SubscriptBox[\\\\(log\\\\), \\\\(4\\\\)]\\\\)x\\\", 11], Rule[\
\\\"Combine like terms of 3a-6a+10a-a\\\", 12], Rule[\\\"Combine like terms \
of 3n-5\\\\!\\\\(\\\\*SuperscriptBox[\\\\(n\\\\), \\\\(\\\\(2\\\\)\\\\(\\\\\\\
\\ \\\\)\\\\)]\\\\)+6n-10+2\\\\!\\\\(\\\\*SuperscriptBox[\\\\(n\\\\), \
\\\\(2\\\\)]\\\\)\\\", 13], Rule[\\\"Combine the like terms of 5x-10y+6z-3x\\\
\", 14], Rule[\\\"Compute  the difrence quotient for the given function\\\", \
15], Rule[\\\"Determine f (x) given that f'(x) = 6x^8 \\\\[Minus] 20x^4 + x^2 \
+ 9\\\", 16], Rule[\\\"Determine \
ln(\\\\!\\\\(\\\\*SuperscriptBox[\\\\(e\\\\), \\\\(4\\\\)]\\\\))\\\", 17], \
Rule[\\\"Evaluate 2\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \
\\\\(2\\\\)]\\\\)-9 for x=-3\\\", 18], Rule[\\\"Evaluate \
a-\\\\!\\\\(\\\\*SuperscriptBox[\\\\(b\\\\), \\\\(2\\\\)]\\\\) when a=4 and \
b=2\\\", 19], Rule[\\\"Evaluate \
f(x)=3-5x-2\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(2\\\\)]\\\\) for \
the below values: f(0), f(x+h), f(6-t)\\\", 20], Rule[\\\"Evaluate \\\\!\\\\(\
\\\\*SuperscriptBox[\\\\(a\\\\), \\\\(2\\\\)]\\\\)+b when a=7 and b=1\\\", \
21], Rule[\\\"Evaluate \\\\!\\\\(\\\\*SuperscriptBox[\\\\(a\\\\), \
\\\\(2\\\\)]\\\\)-\\\\!\\\\(\\\\*SuperscriptBox[\\\\(b\\\\), \
\\\\(2\\\\)]\\\\) when a=5 and b=3\\\", 22], Rule[\\\"Evaluate the derivative\
\\\", 23], Rule[\\\"Evaluate \\\\[Integral]z^6 + 4z^4 \\\\[Minus] z^2 dz\\\", \
24], Rule[\\\"Expand (a+b\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \
\\\\(3\\\\)]\\\\)\\\", 25], Rule[\\\"express 12 1/3 as an improper fraction\\\
\", 26], Rule[\\\"express 3 2/7 as an improper fraction\\\", 27], \
Rule[\\\"Express 42/5 as a mixed number\\\", 28], Rule[\\\"Express 53/9 as a \
mixed number\\\", 29], Rule[\\\"Find a perpedicular line of y=3x+2 with y \
intercept of the origin\\\", 30], Rule[\\\"Find extrema of \
f(x)=12+6\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(2\\\\)]\\\\)-\\\\!\\\
\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(3\\\\)]\\\\)\\\", 31], Rule[\\\"Find \
extrema of g(w)=tan (w)sec(w)\\\", 32], Rule[\\\"Find inverse of W (x) =  (9 \
\\\\[Minus]11x\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \
\\\\(1/5\\\\)]\\\\)\\\", 33], Rule[\\\"Find the area under the curve of |x| \
from -1 to 1\\\", 34], Rule[\\\"Find the Derivative\\\", 35], Rule[\\\"Find \
the derivative of 2 cos(x)+arccos(x)\\\", 36], Rule[\\\"Find the derivative \
of f(x)=2\\\\!\\\\(\\\\*SuperscriptBox[\\\\(e\\\\), \\\\(x\\\\)]\\\\)-\\\\!\\\
\\(\\\\*SuperscriptBox[\\\\(8\\\\), \\\\(x\\\\)]\\\\)\\\", 37], Rule[\\\"Find \
the derivative of g(t)=4 \\\\!\\\\(\\\\*SubscriptBox[\\\\(log\\\\), \
\\\\(3\\\\)]\\\\)(t)-ln(t)\\\", 38], Rule[\\\"Find the derivative of \
\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \
\\\\(2\\\\)]\\\\)/\\\\!\\\\(\\\\*SuperscriptBox[\\\\(y\\\\), \
\\\\(3\\\\)]\\\\)=1\\\", 39], Rule[\\\"Find the deriviative of f (x) = \
2cos(x) \\\\[Minus] 6sec(x) + 3\\\", 40], Rule[\\\"Find the deriviative of g \
(z) =10 tan (z) \\\\[Minus] 2cot (z)\\\", 41], Rule[\\\"Find the deriviative \
of R(t)=(t+ tan(t))/(1+csc(t))\\\", 42], Rule[\\\"Find the deriviative of  \
tan (w)sec(w)\\\", 43], Rule[\\\"Find the domain of \
(\\\\!\\\\(\\\\*SuperscriptBox[\\\\(w\\\\), \\\\(3\\\\)]\\\\)-3w+1)/(12 \
w-7)\\\", 44], Rule[\\\"Find the equation of best fit for the below listed \
data\\\", 45], Rule[\\\"Find the exact value of cos(5 \\\\[Pi]/6) without \
using a calculator\\\", 46], Rule[\\\"Find the exact value of sin(-4 \
\\\\[Pi]/3) without using a calculator\\\", 47], Rule[\\\"Find the integral\\\
\", 48], Rule[\\\"Find the inverse of f (x) = 6x +15\\\", 49], Rule[\\\"Find \
the MacLauren Expanision of z(n)= \
(z+1\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \\\\(1/2\\\\)]\\\\)/(z+4)\\\", \
50], Rule[\\\"find the taylor expanision of g(w)=tan (w)sec(w) at \
w=\\\\[Pi]/4\\\", 51], Rule[\\\"Find \\\\[Integral]12 + csc(\\\\[Theta] ) \
[sin (\\\\[Theta] ) + csc(\\\\[Theta] )] d\\\\[Theta]\\\", 52], Rule[\\\"Find \
\\\\[Integral] 2cos (w) \\\\[Minus] sec(w) tan (w)dw\\\", 53], Rule[\\\"Find \
\\\\[Integral]6\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(5\\\\)]\\\\) \
dx \\\\[Minus]18x + 7\\\", 54], Rule[\\\"Find \
\\\\[Integral]6\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(5\\\\)]\\\\) \
\\\\[Minus]18\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(2\\\\)]\\\\) + 7 \
dx\\\", 55], Rule[\\\"For the function \
(2-(\\\\!\\\\(\\\\*SuperscriptBox[\\\\(t\\\\), \
\\\\(2\\\\)]\\\\)+3\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \
\\\\(1/2\\\\)]\\\\))/(t+1), L'Hoptial's rule to find the limit as x \
approaches -1\\\", 56], Rule[\\\"For the function \
f(x)=(8-\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \
\\\\(2\\\\)]\\\\))/(\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(2\\\\)]\\\
\\)-4), find the values at the below listed points and th limit as x \
aproaches 2\\\", 57], Rule[\\\"For the function \
f(x)=(8-\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \
\\\\(2\\\\)]\\\\))/(\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(2\\\\)]\\\
\\)-4), use L'Hoptial's rule to find the limit as x aproaches 2\\\", 58], \
Rule[\\\"For the function f(y)= sin(y)/y find the value at the below listed \
points and the limit as y approaches 0\\\", 59], Rule[\\\"For the function \
W(x)=ln(1+\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(4\\\\)]\\\\)) and \
the point x=1, find the secants at point Q and the tangenet line\\\", 60], \
Rule[\\\"Graph the inequality y<3x+4\\\", 61], Rule[\\\"Graph the parabola \
give by \\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(2\\\\)]\\\\)+3x+2. \
Find the zeros, vertex and intercept\\\", 62], Rule[\\\"How many miutes are \
in a day?\\\", 63], Rule[\\\"Identify the property used in the equations \
below as distributive, inverse or associative\\\", 64], Rule[\\\"Is x=-8 a \
solution to 1/2x+6>3?\\\", 65], Rule[\\\"Multiply 24/3 and 27/8\\\", 66], \
Rule[\\\"Multiply 8 and 3/24\\\", 67], Rule[\\\"Plot 1.25, 2/3 and 2 on a \
number line\\\", 68], Rule[\\\"Simplify 10-(7+1)\\\", 69], Rule[\\\"Simplify \
10-7+1\\\", 70], Rule[\\\"Simplify (15-3)/(1+5)\\\", 71], Rule[\\\"Simplify \
24/(4-2\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \\\\(3\\\\)]\\\\)\\\", 72], \
Rule[\\\"Simplify (2-5\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \\\\(2\\\\)]\
\\\\)\\\", 73], Rule[\\\"Simplify \
2-\\\\!\\\\(\\\\*SuperscriptBox[\\\\(5\\\\), \\\\(2\\\\)]\\\\)\\\", 74], \
Rule[\\\"Simplify 4+5(1+12/6\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \\\\(2\
\\\\)]\\\\)\\\", 75], Rule[\\\"Sketch the graph of \
f(x)=\\\\!\\\\(\\\\*SuperscriptBox[\\\\(3\\\\), \\\\(1 + 2  x\\\\)]\\\\)\\\", \
76], Rule[\\\"Sketch the graph of \
h(x)=8+3\\\\!\\\\(\\\\*SuperscriptBox[\\\\(e\\\\), \\\\(2  t - 4\\\\)]\\\\)\\\
\", 77], Rule[\\\"Solve 3sec(4 \\\\[Minus] 9z) \\\\[Minus] 24 = 0\\\", 78], \
Rule[\\\"Solve 3(x-5)+4=10\\\", 79], Rule[\\\"Solve 3\\\\[Minus]14sin (12t + \
7) =13\\\", 80], Rule[\\\"Solve  4sin (3t ) = 2\\\", 81], Rule[\\\"Solve 4sin \
(3t ) = 2 in [0, 4\\\\[Pi]/3], 2cos(x/3) \
+\\\\!\\\\(\\\\*SuperscriptBox[\\\\(2\\\\), \\\\(0.5\\\\)]\\\\) = 0 in \
[\\\\[Minus]7\\\\[Pi] ,7\\\\[Pi] }\\\", 82], Rule[\\\"Solve 4x-9=11\\\", 83], \
Rule[\\\"Solve 4y sec(7 y) = \\\\[Minus]21y\\\", 84], Rule[\\\"Solve and \
graph the solution to 2x-3<7\\\", 85], Rule[\\\"Solve and graph the solution \
to |3x-1|\\\\[GreaterEqual]10\\\", 86], Rule[\\\"Tommy\\\\[CloseCurlyQuote]s \
grandma gave him a $50 gift card to Toys R Us for his birthday.\\\\nSales tax \
is currently 9%. Determine the price of the most expensive toy Tommy can buy \
with\\\\nthe $50 gift card.\\\", 87], Rule[\\\"Use the chain rule to find the \
derivative of Q(t)=(3\\\\!\\\\(\\\\*SuperscriptBox[\\\\(t\\\\), \
\\\\(3\\\\)]\\\\)-4\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \
\\\\(1/2\\\\)]\\\\)\\\", 88], Rule[\\\"Use the definition of the derivative \
to find the derivative of f(x)=6\\\", 89], Rule[\\\"Use the definition of the \
derivative to find the derivative of V (t ) = 3\\\\[Minus]14t\\\", 90], Rule[\
\\\"Use the definition of the derivative to find the derivative of z(n)= \
(n+1)/(n+4)\\\", 91], Rule[\\\"Use the law of sines to find the missing side \
of this triangle\\\", 92], Rule[\\\"Use the quotient rule to find the \
derivative of z(n)= (z+1\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \\\\(1/2\\\
\\)]\\\\)/(z+4)\\\", 93], Rule[\\\"What are the discontiuities in the \
function y=(x+2)/(x+3x+2). Which are fundamental and which are \
removable?\\\", 94], Rule[\\\"What are the domain and range of \
\\\\!\\\\(\\\\*SuperscriptBox[\\\\(e\\\\), \\\\(x\\\\)]\\\\) and ln(x)\\\", \
95], Rule[\\\"What are the domain and range of the trigonometric functions?\\\
\", 96], Rule[\\\"What is |1|\\\", 97], Rule[\\\"What is 10% of 100\\\", 98], \
Rule[\\\"What is 1+1\\\", 99], Rule[\\\"What is  1/2 + 1/3\\\", 100], Rule[\\\
\"What is 12 1/3 as an improper fraction\\\", 101], Rule[\\\"What is 2+2\\\", \
102], Rule[\\\"What is 2+3\\\", 103], Rule[\\\"What is  24/3 * 27/8\\\", \
104], Rule[\\\"What is |-30|\\\", 105], Rule[\\\"What is 3/18 in simplest \
form\\\", 106], Rule[\\\"What is 3-(-2)?\\\", 107], Rule[\\\"What is \
-3+4\\\", 108], Rule[\\\"What is 42/54 in simplest form\\\", 109], \
Rule[\\\"What is 42/5 as a mixed number\\\", 110], Rule[\\\"What is 4% of 16?\
\\\", 111], Rule[\\\"What is 53/9 as a mixed number\\\", 112], Rule[\\\"What \
is  8 * 3/24\\\", 113], Rule[\\\"What is (a+b\\\\!\\\\(\\\\*SuperscriptBox[\\\
\\()\\\\), \\\\(n\\\\)]\\\\) (Hint: What theorem is this?)\\\", 114], Rule[\\\
\"What is ln(1)?\\\", 115], Rule[\\\"What is sin(60)\\\", 116], Rule[\\\"What \
is tan(30)\\\", 117], Rule[\\\"What is the absolute value of -1?\\\", 118], \
Rule[\\\"What is the area under the curve \
\\\\!\\\\(\\\\*SuperscriptBox[\\\\(sin\\\\), \\\\(2\\\\)]\\\\)x from 0 to \
\\\\[Pi]/2\\\", 119], Rule[\\\"What is the Deriviative\\\", 120], \
Rule[\\\"What is the integral of sin(2x)?\\\", 121], Rule[\\\"What is the \
integral of x dx\\\", 122], Rule[\\\"What is the largest value for the \
missing side of this triangle\\\", 123], Rule[\\\"What is the most specific \
subset of the real numbers that -7 is a part of?\\\", 124], Rule[\\\"What is \
the next term in the series \\\", 125], Rule[\\\"What is the sum from 1 to 5 \
of a=10n+3\\\", 126], Rule[\\\"what is the sum of the geometric series from 1 \
to infinity of 9(1/10\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \
\\\\(n\\\\)]\\\\)?\\\", 127], Rule[\\\"What is \
\\\\[Integral]6\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(5\\\\)]\\\\) \
\\\\[Minus]18\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(2\\\\)]\\\\) + 7 \
dx\\\", 128], Rule[\\\"Wrie the standard form of y=3/2 x+2\\\", 129], Rule[\\\
\"Write 30 degrees in radians\\\", 130], Rule[\\\"write 3/18 in simplest form\
\\\", 131], Rule[Times[\\\"What is 3 2/7 as an improper fraction\\\", \
\\\"write 42/54 in simplest form\\\"], 132], Rule[\\\"Write slope intercept \
form for a slope of 2 and y-intercept of 12\\\", 133], Rule[\\\"Write \
\\\\[Pi]/4 in degrees\\\", 134], Rule[\\\"-x-2=12\\\", 135], Rule[Null, \
136]]]], Rule[\\\"MissingCode\\\", 0], Rule[\\\"Version\\\", List[12.`, 0]], \
Rule[\\\"ID\\\", 8874348951581137712], Rule[\\\"Output\\\", Association[Rule[\
\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\\\"], \
Rule[\\\"Weight\\\", 1]]]]]]]]], Rule[\\\"Invertibility\\\", \
\\\"Perfect\\\"], Rule[\\\"Missing\\\", \\\"Imputed\\\"]]]]]], \
Rule[\\\"Output\\\", Association[Rule[\\\"Preprocessor\\\", \
MachineLearning`MLProcessor[\\\"ToMLDataset\\\", Association[Rule[\\\"Input\\\
\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"Nominal\\\
\"]]]]], Rule[\\\"Output\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Preprocessor\\\", MachineLearning`MLProcessor[\\\"Sequence\\\", \
Association[Rule[\\\"Processors\\\", \
List[MachineLearning`MLProcessor[\\\"List\\\"], \
MachineLearning`MLProcessor[\\\"WrapMLDataset\\\", \
Association[Rule[\\\"FeatureTypes\\\", List[\\\"Nominal\\\"]], \
Rule[\\\"FeatureKeys\\\", List[\\\"f1\\\"]], Rule[\\\"FeatureWeights\\\", \
Automatic], Rule[\\\"ExampleWeights\\\", Automatic], Rule[\\\"RawExample\\\", \
Missing[\\\"KeyAbsent\\\", \\\"RawExample\\\"]]]]]]]]], \
Rule[\\\"ScalarFeature\\\", True], Rule[\\\"Invertibility\\\", \
\\\"Perfect\\\"], Rule[\\\"Missing\\\", \\\"Allowed\\\"]]]], \
Rule[\\\"Processor\\\", MachineLearning`MLProcessor[\\\"Sequence\\\", \
Association[Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Output\\\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\
\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Processors\\\", \
List[MachineLearning`MLProcessor[\\\"ToVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"Input\\\", Association[Rule[\
\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], \
Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\
\\\"], Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Version\\\", List[12.`, 0]], \
Rule[\\\"ID\\\", 7740907413418953510]]], \
MachineLearning`MLProcessor[\\\"IntegerEncodeNominalVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"Input\\\", Association[Rule[\
\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\\\"], \
Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Index\\\", \
List[Association[Rule[\\\"algebra 1\\\", 1], Rule[\\\"algebra 2\\\", 2], \
Rule[\\\"calc\\\", 3]]]], Rule[\\\"MissingCode\\\", 0], Rule[\\\"Version\\\", \
List[12.`, 0]], Rule[\\\"ID\\\", 3923291764372626615], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\
\\\"], Rule[\\\"Weight\\\", 1]]]]]]], \
MachineLearning`MLProcessor[\\\"FromVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"Input\\\", Association[Rule[\
\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\\\"], \
Rule[\\\"Weight\\\", 1], Rule[\\\"SetSize\\\", List[3]]]]]], \
Rule[\\\"Output\\\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\
\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Version\\\", \
List[12.`, 0]], Rule[\\\"ID\\\", 689381485439722164]]], \
MachineLearning`MLProcessor[\\\"FirstValues\\\", \
Association[Rule[\\\"Info\\\", Association[Rule[\\\"Type\\\", \
\\\"Nominal\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"SetSize\\\", 3]]], \
Rule[\\\"Key\\\", \\\"f1\\\"], Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"]]]]], Rule[\\\"Invertibility\\\", \
\\\"Perfect\\\"], Rule[\\\"Missing\\\", \\\"Allowed\\\"]]]], \
Rule[\\\"ProbabilityPostprocessor\\\", Identity], Rule[\\\"Name\\\", \
\\\"class\\\"], Rule[\\\"Marginal\\\", Association[Rule[\\\"algebra 1\\\", \
0.37142857142857144`], Rule[\\\"algebra 2\\\", 0.22857142857142856`], Rule[\\\
\"calc\\\", 0.39999999999999997`]]]]], Rule[\\\"Prior\\\", Automatic], \
Rule[\\\"Utility\\\", SparseArray[Automatic, List[3, 4], 0.`, List[1, \
List[List[0, 1, 2, 3], List[List[2], List[3], List[4]]], List[1.`, 1.`, \
1.`]]]], Rule[\\\"Threshold\\\", 0], Rule[\\\"TieBreaker\\\", RandomChoice], \
Rule[\\\"PerformanceGoal\\\", Automatic], Rule[\\\"BatchProcessing\\\", \
Automatic], Rule[\\\"Model\\\", Association[Rule[\\\"NeighborsFunction\\\", \
MachineLearning`PackageScope`NeighborsFunction[\\\"Nearest\\\", \
NearestFunction[Hold[Nearest[Rule[List[List[0.20874287902662356`, \
0.05076760013054465`, 0.12299217336751644`, -0.7217178113767901`, \
-0.01950969285105098`, 0.15758229720049532`, -0.03452407136774974`, \
0.11166155823546944`, 0.18876632146856745`], List[-0.3594795130895579`, \
-0.16042385138793877`, 0.09963466370799849`, 0.5483324399248775`, \
-0.034378135355781936`, 0.009196829528893545`, 0.17572011803586657`, \
-0.3546858694223344`, 0.5273107984733745`], List[-0.5365576313720708`, \
0.01462031426383527`, -0.08051531640664132`, -0.31946909538319324`, \
-0.02894369615382801`, -0.6462972209561233`, 0.21362509803048088`, \
0.1864404763153632`, 0.7223601241934188`], List[0.11428169955115125`, \
0.2165675671799198`, -0.15099286041902274`, -0.23356450220118308`, \
-0.653306347595659`, -0.31269089816647233`, 0.4356209169626309`, \
-0.1037569526941192`, -0.1726383474985441`], List[0.09076148083722635`, \
-0.7724130124795144`, -0.3633984414607187`, 0.44055528880320455`, \
-0.6539328931879371`, -0.4185083086349062`, -0.12365704376200198`, \
0.09404430398690063`, 0.19271983785291286`], List[-0.4676081065897829`, \
0.30279068596913294`, -0.10701208671912901`, -0.4263098012177711`, \
0.23697574243009006`, 0.33755051732080593`, -0.05194023589766424`, \
0.03460633098407323`, -0.3514329810037291`], List[0.13170335014743753`, \
0.376657489075397`, 0.2920051731464742`, -0.4497051066967155`, \
0.1440874775399693`, 0.18625325035164533`, -0.16104804579834978`, \
0.4085984708289707`, 0.04328533320547977`], List[0.10614978292417514`, \
-0.13845376093685008`, 0.11688803121888576`, 0.3744064770466563`, \
-0.06057815674434259`, -0.0013536235535923085`, -0.43510388605203426`, \
0.29401704685689123`, 0.24493780288679798`], List[0.6993706445890546`, \
0.1115644916472831`, 0.17311607252650144`, -0.038341022327356616`, \
0.1306520765355172`, -0.17205235346446685`, -0.17840362356979186`, \
0.006835761686547726`, -0.21315255414120637`], List[-0.11228283862572064`, \
-0.11752194920493007`, -0.2401843105378093`, 0.2060291335668737`, \
0.4795961627587431`, 0.15290001489936247`, 0.05293575857540196`, \
-0.18960889539019632`, -0.18745396406105982`], List[0.28929444211581623`, \
-0.04139896184765097`, 0.4321836837109878`, 0.057571688157827386`, \
-0.7157332584916373`, -0.673392025831568`, 0.20624532623852898`, \
-0.07919576999377469`, -0.034575602943176444`], List[-0.14211389814024747`, \
0.5067736291271908`, -0.04075904961614285`, 0.11688810219608545`, \
-0.3625112173016552`, 0.35627977686819373`, 0.5460409897319862`, \
0.043691481870640356`, -0.22718230951995047`], List[0.2673442840755443`, \
0.49824021931002`, 0.22912496436118365`, -0.07707997678791205`, \
-0.08301340854219655`, -0.45659153489907117`, -0.1014002054342086`, \
0.268792403186081`, -0.09830225542247353`], List[0.1996367226301195`, \
0.17564098182668908`, -0.012801171952048298`, -0.7157202028829195`, \
0.20786069998156775`, 0.08308143352664293`, 0.08612406164217518`, \
0.0037716223529896563`, 0.6886686227462105`], List[0.008347260796583458`, \
-0.03087658403936844`, -0.40197202133273996`, 0.35966348865793`, \
-0.3954058614895362`, 0.715814251527444`, 0.024732690588725466`, \
-0.049388856886686726`, -0.30091962202154`], List[-0.08133418460850446`, \
0.30589212713541625`, -0.2225950134619789`, -0.5297467566362765`, \
-0.38232820804206263`, -0.1730999954173601`, 0.1395611216479457`, \
-0.09086670355775994`, -0.12034914322203075`], List[0.0786951912438882`, \
0.003796088031110102`, 0.2609178724988531`, -0.08581203127629053`, \
-0.2861974018971561`, 0.3895889052812407`, -0.4319916601403748`, \
-0.21363525669285197`, 0.23187084055161056`], List[0.280134251705132`, \
0.24035078840781643`, -0.3758218829699329`, 0.17220737689227084`, \
-0.0171507317251199`, 0.07818343679181021`, 0.35249044102768357`, \
0.19016030557667155`, -0.31985117289380405`], List[-0.22752452792716213`, \
0.029155537966807313`, -0.22030865425983226`, -0.09984461808020004`, \
-0.20492536651100907`, 0.036960527849913376`, 0.28563271601838114`, \
0.183220979967337`, -0.25819738406715487`], List[-0.3545227260045899`, \
0.4500489633030616`, -0.616829959556116`, 0.15135656197218672`, \
0.6445167267695278`, 0.40377009624390214`, 0.37973248435417895`, \
-0.4245961769794931`, 0.34834747458284226`], List[-0.04570269538665324`, \
0.2460061839813122`, 0.14165978440229876`, -0.12405227749400839`, \
0.5932468114242796`, 0.2279556393564271`, 0.29343050721194164`, \
0.0801505345631597`, 0.35186526577299104`], List[-0.09152228216323975`, \
0.31768719717084315`, -0.1488717878250302`, 0.09515446416495542`, \
0.3598480250292752`, 0.09621967727440374`, 0.34684468624004444`, \
0.2993518436246563`, 0.09623757694157219`], List[0.4495386678326473`, \
0.2989116002414778`, 0.1704847968719811`, -0.4519461768574132`, \
0.3830479301501389`, -0.032884480177115274`, -0.5535258771010826`, \
-0.15517593654589323`, -0.18686761017707723`], List[0.5137420607388886`, \
-0.05634970859018103`, -0.09681266038875096`, -0.12021083408010039`, \
0.33463864039756014`, -0.44865042865465604`, -0.4670738581379808`, \
0.022088254733766105`, 0.03985088886666773`], List[0.34363889601989145`, \
-0.3777912717113709`, 0.37584788448768136`, 0.2833635047245089`, \
-0.21780605760908914`, -0.03035958391081397`, -0.40291027298062876`, \
-0.013695143872673768`, -0.24009196743240757`], List[-0.06266126388771766`, \
-0.11711362154648372`, -0.11386633254788112`, 0.011423306452275054`, \
0.07906022194844414`, 0.037982944788481535`, -0.0923555533454689`, \
-0.44632127620348433`, 0.04067860051096198`], List[-0.2551207695865459`, \
-0.5559426709266213`, 0.22716814347115505`, 0.0026638976367955366`, \
-0.02899285704316629`, 0.33735945225049535`, -0.016860088872758108`, \
0.06785295315247933`, 0.12115114051102578`], List[-0.42491212908905396`, \
-0.02453360559490337`, 0.017421609395471098`, -0.38932050287872944`, \
-0.691552387755212`, 0.6158059459144742`, 0.7428083394653718`, \
-0.0760566146571162`, -0.0873273831993349`], List[0.46933994820429226`, \
0.3454480862743675`, 0.09093886677567012`, 0.9134630439487503`, \
-0.303706380148827`, 0.20491076518726314`, -0.17634721343237947`, \
0.04060965569226836`, 0.02143629282893743`], List[-0.08673553407781519`, \
-0.25038015212525894`, -0.2019957663530101`, 0.45501785415030793`, \
0.4028178510996319`, -0.5190522602723715`, -0.23195416934987112`, \
0.2120154489552414`, -0.030324526164113984`], List[0.4945378945368456`, \
0.26868485326149405`, 0.026197273880055442`, 0.09316943958678726`, \
-0.5147454324270786`, 0.00003165341609528542`, 0.4488046910133153`, \
0.029474298644174515`, 0.416588935600327`], List[-0.08133945905484026`, \
0.39410712647261953`, -0.15453432684214938`, -0.5932110435637872`, \
0.34572067259242245`, 0.5475879603672886`, 0.8791973885719282`, \
0.7005171113420935`, 0.7883007236820052`], List[-0.27551702735730177`, \
-0.27297559532912474`, -0.4451059201168938`, -0.23024414179074615`, \
0.1991878956396616`, -0.01166668653439136`, 0.3439681084393318`, \
0.12889496462431263`, -0.3284322408929016`], List[-0.1030299118411174`, \
0.325555317786535`, -0.020379710933565304`, 0.023690673980041637`, \
-0.25176992149715677`, -0.18965997155340658`, 0.21659459025811015`, \
-0.2958058796511218`, 0.4279936777340847`], List[-0.193706799138636`, \
-0.16581841246709947`, 0.09978317991566894`, 0.07784682985479077`, \
-0.1434286777575322`, -0.2539882903557889`, -0.2830966017449637`, \
-0.0941575646109914`, -0.4199799938946097`], List[-0.22965316345041578`, \
0.06731724112316789`, 0.18348191971557576`, -0.23030464471221923`, \
0.4787191700515942`, 0.10031795198805464`, -0.140898553193766`, \
-0.42334740678730565`, -0.07632550063346422`], List[-0.3383822144480971`, \
-0.05653832022286427`, 0.05688138998989475`, 0.8225183746644238`, \
0.6389002427953396`, -0.9710851703540733`, -0.01693772660037855`, \
-0.12618646400173777`, -0.023438725249073263`], List[0.048411419060566487`, \
-0.029510412079914266`, 0.6108093541972673`, -0.5336483493807325`, \
0.13004031112388645`, -0.16995669638771213`, 0.08358901542056327`, \
0.07624629979716718`, 0.4707891588626374`], List[0.07534547294030489`, \
0.19570317136196377`, 0.8213800016028077`, 0.18515624510107173`, \
-0.2070334867287674`, 0.5477599124772589`, -0.38631175087988034`, \
-0.2659828341275149`, -0.1927456489208404`], List[0.31766866040048874`, \
0.27257906000247895`, -0.08534173597651015`, -0.5650156053209847`, \
-0.05241427548628652`, 0.3704908551178045`, -0.1709892634964243`, \
-0.15058952777284768`, 0.1968658292895203`], List[-0.3370698738287689`, \
0.6492241919887263`, 0.15424101249281363`, -0.025644036049699375`, \
0.11186146404803164`, -0.4499098411633441`, 0.028322969017715627`, \
-0.1418704373301254`, -0.3202963795299451`], List[-0.6515587130848055`, \
0.1319219051929129`, -0.2209652208611733`, -0.1629403825527452`, \
-0.22815489685638563`, -0.36087967140507204`, 0.003016676132132802`, \
0.12803408080061252`, 0.4279091953634936`], List[0.20877907964224446`, \
-0.0057544998079518996`, 0.1183841790818105`, 0.30117211789580434`, \
0.5772193447574975`, 0.21656196931117788`, 0.20321968083530906`, \
0.5351129233022265`, 0.020336109579133423`], List[0.7639526600417711`, \
0.23927147868841994`, 0.0008142341064539886`, -0.08375792161366058`, \
0.009978226984107405`, 0.24252378856462156`, -0.3833739969695768`, \
-0.024158178155864678`, 0.3170775974157653`], List[-0.3160271236209324`, \
0.6225468236915149`, -0.8563275233747362`, 0.15811062734253908`, \
-0.00167710274364925`, 0.7948678996429545`, -0.15702568858933014`, \
0.4066013216632693`, -0.2862708476517795`], List[0.3488094535669043`, \
-0.39536847365342326`, -0.10788925162971541`, -0.27202098756522114`, \
0.010240701873752232`, -0.0673296620559716`, -0.02201752562989382`, \
0.19048027529379005`, 0.11101679153943364`], List[-0.18789457774672616`, \
-0.0838619543735332`, 0.30350975899120464`, -0.2595146987478871`, \
0.40557456368504546`, 0.050231489525318`, 0.1437968539236454`, \
-0.40707100210556585`, 0.2795517609776055`], List[0.44733252105322957`, \
-0.24141494081838163`, -0.06415466845491304`, -0.645900266229139`, \
0.4955035485689486`, -0.17883191503904924`, -0.19887840265909318`, \
-0.09203663504817157`, -0.7784434470521396`], List[-0.3818382929931367`, \
0.19993052195500105`, 0.5571983801074892`, -0.7299461830412856`, \
-0.10021958735771684`, -0.5066235012485987`, -0.24464986131986166`, \
-0.7298345166539386`, -0.0962734322087367`], List[1.135640276343542`, \
-0.289604096553808`, -0.5909165011318928`, 0.26818737108806273`, \
-0.07719298033413753`, 0.025726152414889635`, -0.4422726667302176`, \
0.08117988767535687`, 0.4022636395662933`], List[-0.07527472601369956`, \
-0.604629911383174`, -0.17467999583596944`, 0.06678671006068645`, \
-0.1334883101510681`, -0.6217472340461452`, -0.16058289667765835`, \
-0.405465829345206`, -0.3769669872911506`], List[-0.08455873109576686`, \
-0.02453198099065159`, 0.3153151764714562`, 0.20826841450067188`, \
-0.7428676815320632`, -0.25866802296287783`, -0.2320371719007801`, \
0.3596508440611076`, -0.3777203706447362`], List[-0.37968196591290676`, \
-0.47704875849041567`, -0.6385213366667166`, 0.5015003297716015`, \
0.3583792076295074`, -0.3181431224662174`, -0.10594750923291396`, \
-0.1602487808612161`, 0.0937084317177743`], List[0.7302715711053949`, \
-0.08916043862683222`, 0.1506782411616488`, 0.1279303989236035`, \
-0.023067774611477316`, -0.482795938707709`, -0.43929146697284743`, \
0.5050546151732136`, -0.08115527277125914`], List[-0.16582725794399328`, \
-0.0798424203742381`, -0.2491473289476622`, 0.3858371564988335`, \
0.008080257859220405`, 0.024807907153558618`, -0.08841527231705089`, \
-0.14144256256817306`, 0.2815587084151075`], List[0.6993707322516595`, \
0.1115634666529753`, 0.17311510198751606`, -0.038341984929288385`, \
0.1306513488007615`, -0.1720517353309059`, -0.17840362245107508`, \
0.006834874050391562`, -0.2131512652623155`], List[-0.25913600224016853`, \
0.4420896381508019`, -0.3950728655832447`, 0.2348657904633493`, \
0.1750812242945353`, 0.24961259493346707`, 0.40244217990613546`, \
0.39149205291973327`, -0.22119692924020398`], List[0.5950464612423597`, \
-0.3653590762378188`, -0.2770347112193803`, 0.14172302388422134`, \
-0.12145047307079512`, 0.126351794737711`, -0.6250761706781518`, \
0.4033346480118836`, -0.13105036336505138`], List[0.28950602835663075`, \
0.4910929202353126`, -0.2682853968674736`, 0.2258108992680348`, \
-0.23162805031718467`, 0.13656793343356813`, 0.4786464953153419`, \
-0.1807971529049329`, -0.7512087763198596`], List[-0.34900733580673693`, \
-0.08538619007393361`, 0.07444756783077076`, 0.2590291360314095`, \
0.5260827330564427`, 0.10242489761672117`, -0.0957782790058187`, \
-0.49911615965105327`, 0.018216825362685946`], List[-0.4252637828207426`, \
0.519254789140753`, -0.4208258507255675`, -0.0542164744332335`, \
0.1801788150028814`, 0.22453303745698838`, -0.242351239887168`, \
0.21841519108360535`, -0.0010125705150938126`], List[0.10192713695482356`, \
0.16523739202927476`, -0.36494168690346107`, -0.28525193708945884`, \
-0.43740556238093753`, 0.11609586531903311`, 0.11192006849606445`, \
-0.1803563150838122`, -0.39385248840602405`], List[0.2627099502195116`, \
0.05943974609871901`, -0.13240812780815683`, -0.17784621590066169`, \
-0.432415912609308`, -0.03736390776878427`, -0.8969861067597724`, \
0.2866678841867095`, 0.5164641317845157`], List[-0.3916442830393213`, \
0.38879328849515266`, 0.6109291396865102`, -0.014156223580248888`, \
-0.17553426148269835`, -0.6990110775265206`, 0.22981929281342547`, \
-0.6051160448142078`, -0.1159859848634532`], List[0.0299215238877316`, \
-0.19280849671632683`, 0.036525066102937306`, -0.29912287431104445`, \
-0.37482336515977205`, 0.15181456445391223`, 0.13993660003885003`, \
0.14395676966881993`, 0.6199233699838844`], List[0.42454831848251945`, \
-0.07230996565543596`, -0.11533333974397957`, -0.39670824434575946`, \
0.08166892043386316`, -0.22897101575811446`, -0.037310582431729654`, \
0.279322354428391`, -0.18566643301215618`], List[-0.39046950003736625`, \
0.19920876010502908`, -0.5133538506324218`, 0.15004744249688048`, \
-0.41026180937375983`, -0.7000700290551709`, -0.8885369532723615`, \
-0.5680447278762831`, 0.24697318966019732`], List[0.3322940876202558`, \
-0.5314456958613133`, -0.5026281159068638`, 0.27662101039832987`, \
-0.07150425665556988`, -0.19835522984224568`, -0.07549085807811515`, \
0.9669855974266183`, -0.37829181104502646`], List[-0.06308073930380526`, \
-0.08657028133699515`, 0.15125791890361046`, -0.5012487519959512`, \
-0.041637050588429494`, 0.0814743597547742`, -0.4592981595909421`, \
-0.011059948151477756`, -0.04675608151022355`], List[-0.13664247048316064`, \
-0.4362393952334086`, -0.08726032684867374`, 0.37119049571632046`, \
0.4290705794366175`, -0.12117277750307989`, 0.1658681553917835`, \
-0.04627976144871422`, -0.04142654501907702`], List[0.06368755819023038`, \
0.23749796789362487`, 0.17656813722765266`, -0.16103142816285473`, \
0.7223508028471574`, -0.0324672744697649`, -0.3484786621309663`, \
0.30808684350078963`, 0.35070721054861886`], List[-0.13572281645921758`, \
0.271203515519359`, -0.29878868824835064`, 0.20319958072750482`, \
-0.5568729943127333`, 0.006559723511454851`, 0.2819537202825195`, \
-0.19625710861484627`, -0.5195209653844483`], List[-0.12525616331251352`, \
-0.1539231886021072`, -0.33230468416278114`, 0.0008381239064730425`, \
0.29914550089266473`, 0.3911428016453452`, 0.09494692850228265`, \
0.049311913416938996`, -0.006369260710246987`], List[0.649604389751506`, \
0.3247288926012502`, 0.4105425647050521`, 0.3924607989012559`, \
0.7708676746190289`, 0.023929416459328185`, -0.026677654373686344`, \
0.3031462736741994`, -0.19687095126026685`], List[0.18960841202137074`, \
0.3458928874669899`, -0.23849238311982862`, 0.500737598186573`, \
0.3138140282252132`, 0.5495899352411213`, -0.45410956200213515`, \
0.03354194783677001`, 0.13985421171779197`], List[-0.2604765815832215`, \
0.042917344598454296`, 0.06834722891672103`, -0.04427601087619971`, \
0.2958850427445316`, 0.26289858156440754`, -0.29503983413907525`, \
-0.35335335318481276`, 0.5557621406858145`], List[-0.15041904988515012`, \
0.4893337841407504`, 0.3039784389521658`, 0.36038197113422504`, \
-0.06319656783839438`, 0.07138163962466548`, 0.21131971405540828`, \
0.6988107543242317`, 0.04950114269403004`], List[-0.15769883533937587`, \
0.04785276251520545`, 0.8955811207933329`, 0.5174973468034412`, \
0.16342916237500962`, 0.4368364221677568`, -0.2317493333852527`, \
0.7974091442632546`, -0.3477349751305598`], List[0.2090675920068328`, \
0.3724518300309729`, -0.000955216237396284`, 0.20147288414599018`, \
0.3090949314732799`, -0.11240796919254263`, -0.32074260313581815`, \
-0.03590285426102904`, 0.3936563865349585`], List[-0.50615614557493`, \
0.002258602403135732`, 0.15630935689421063`, 0.2707437005669415`, \
-0.34838884976975587`, 0.05315801005395906`, 0.18877918004433142`, \
-0.6017982762113175`, -0.29668880801291636`], List[0.1134587464448435`, \
-0.29978778313216575`, 0.5586837966218207`, -0.18951765829271036`, \
-0.22020413484169168`, -0.5374673695066325`, -0.021252971232965788`, \
-0.04977993055007394`, -0.06891276470173492`], List[0.14115356282760344`, \
-0.012464107953009637`, 0.0064291848469569856`, -0.0833835833715372`, \
0.6265052859206968`, -0.2274214874457897`, 0.1928743878306332`, \
0.17434268919387508`, 0.33895976146077605`], List[0.12146056706638518`, \
0.08822600997115312`, -0.5276589700875568`, 0.1743688529037854`, \
0.07595526525487478`, -0.06023656649961369`, -0.0316238314181319`, \
-0.19720958158014576`, -0.04832927017968282`], List[0.3922274059669975`, \
0.34273645627619076`, 0.23769161112247209`, 0.2789847494043621`, \
-0.13161091020153579`, -0.19414346245211048`, -0.1218666676090055`, \
0.0993894132381497`, 0.8567880811016394`], List[-0.29641989798480095`, \
-0.13964151896450797`, -0.3991424933584305`, 0.5534202209775267`, \
-0.06952833631528567`, 0.18266307424594427`, -0.0028021557597296197`, \
0.718768931941333`, -0.2569440521348632`], List[-0.17141790875848306`, \
0.2273384142254456`, 0.17476519709069263`, -0.08068524912812608`, \
0.0328304497181446`, 0.20663625548371087`, -0.21035218857616933`, \
0.16613052115848864`, 0.15521117876233217`], List[-0.19846621698659267`, \
-0.21217826681976326`, 0.2957255272039071`, -0.10369050812254703`, \
-0.059266418099869426`, 0.4216594545369327`, -0.32192720791388524`, \
0.2615298460053594`, 0.4583350185339478`], List[-0.32712406864981636`, \
-0.5006346612619237`, 0.04977453385389784`, -0.027566609716521164`, \
-0.044840118289667705`, 0.8469813467085209`, -0.23878730147975485`, \
0.1375557214253854`, 0.2290334619981145`], List[-0.5170170359329428`, \
-0.20557169679332182`, -0.359177878883745`, 0.16441115236915949`, \
-0.03164153766772894`, 0.028168825003322375`, 0.2016892625264097`, \
0.09221102138285306`, 0.18106884123923947`], List[-0.2678616107963751`, \
-0.09583176717032524`, 0.5658593182891725`, 0.3012921475846824`, \
0.18115546530239654`, -0.474135342146021`, -0.16503426876118885`, \
0.369258418188094`, 0.2240753088770534`], List[-0.6746456756698453`, \
-0.07398840853482327`, -0.4282664594440127`, 0.3615386503695829`, \
0.18006686597602228`, -0.13439661150466334`, 0.1761112001035316`, \
-0.2424366272016183`, 0.29516032638180756`], List[-0.17057963960075972`, \
-0.4735863643713902`, -0.5377766461673048`, 0.20263570406823225`, \
0.2757840266636262`, -0.5120897540507036`, -0.7782198522518828`, \
-0.22768078869001515`, 0.24691907962212264`], List[-0.3057641641534392`, \
0.19569360220223006`, -0.38238237796943225`, -0.04909472250349194`, \
-0.3265349908199793`, 0.4190156847572954`, 0.16893341173961796`, \
0.15981069422764646`, 0.09115402852083196`], List[-0.05411753075688497`, \
-0.08556660853683688`, -0.5068180029475401`, 0.48290170403471205`, \
-0.3218343884996128`, -0.0027320496909966764`, 0.31877210759938046`, \
0.27870747489960307`, -0.11707652864618859`], List[-0.285473043274214`, \
0.06183013160939251`, 0.05673688031472053`, -0.2226175153759567`, \
-0.09154018617418541`, 0.11074462818882146`, 0.7220209162919877`, \
-0.2596605140189729`, -0.2277792489078885`], List[0.15933745572618865`, \
-0.5740848278950217`, 0.14455664874106558`, 0.20090423250669687`, \
-0.6382199126956035`, -0.034013201074845595`, 0.47493242664242735`, \
-0.12053057178753036`, -0.0741325137654815`], List[0.19543413182814884`, \
0.36788355203238404`, -0.37748234472975584`, -0.6052191712950729`, \
0.03395390346287355`, 0.4752831985658618`, -0.12883926109838834`, \
-0.15887963391271961`, -0.013050716807415935`], List[0.24299915488266927`, \
-0.1250913970371324`, -0.05108582388415028`, 0.03404227200261135`, \
-0.5160475300575409`, 0.3091233315211689`, -0.5094500109400362`, \
0.03855671027109207`, -0.2181429046745454`], List[-0.12010360272753756`, \
0.32121421995052474`, -0.02837146557966537`, 0.32010901703674854`, \
-0.5156782302144831`, 0.18898049839450168`, 0.9442705326914314`, \
-0.17375306340976607`, 0.07108707084962265`], List[0.016375467989809465`, \
0.44809604163552647`, -0.45284417872895955`, -0.48966296108970914`, \
0.214971476316191`, 0.1188528207256086`, 0.5702766676880383`, \
0.09492575967338066`, 0.36233386116556415`], List[0.41722759743723525`, \
-0.8073547668610904`, -0.024488172816665734`, 0.2008434795425218`, \
0.011983324211450649`, -0.4077005700607466`, 0.19019054499111374`, \
0.387374087807272`, -0.09086894098034302`], List[0.0532725897326204`, \
-0.27374489851321604`, 0.003781466952232597`, -0.24803197615314815`, \
0.062305082108779025`, -0.02455623694520868`, -0.22576109502271868`, \
0.06877378866531023`, 0.14188753766549406`], List[0.30849677939551623`, \
0.08045312415061241`, 0.002153275333974313`, -0.351974704972973`, \
0.2746377208906142`, -0.07863688063825786`, 0.8698650618261081`, \
-0.06235764377839263`, 0.5998181858711278`], List[0.5133988926101243`, \
-0.28978848634382226`, 0.07052733984665967`, -0.08369868830897471`, \
0.23278436065513589`, -0.06182325911684266`, -0.10833271803258925`, \
-0.037436524667012715`, 0.3941999003402016`], List[-1.016917565522857`, \
0.6854671093892978`, -0.023244736900856443`, 0.19931379865655363`, \
-0.2088378318351566`, -0.1208748170664811`, -0.06141967859437304`, \
-0.10597167600873109`, 0.10875444046422103`], List[-0.11759585947574482`, \
-0.20903426745748094`, -0.5148550128484543`, 0.1781765903893341`, \
-0.2729175260777728`, -0.2448467808957223`, -0.18339764793392305`, \
0.43652343980281133`, 0.3450341511825375`], List[-0.3778310061965379`, \
0.15892728636531703`, 0.019960278876657373`, 0.3943532556347979`, \
-0.034646384053198136`, 0.11630689700227902`, -0.21194704535075837`, \
0.3474019475169545`, 0.3460325119596193`], List[-0.5642436244758945`, \
0.9004256547801892`, 0.1384145250283422`, -0.1118189628317223`, \
-0.09364711727940128`, 0.12097314682193795`, -0.3596772738516575`, \
-0.23452752639196575`, 0.4772603814258445`], List[0.9342466281746301`, \
0.4167505316085906`, 0.27935044962561156`, -0.12481067985303393`, \
0.07047647859902852`, 0.637780449652865`, 0.4586718112134463`, \
0.050949038905411644`, -0.15966730544394575`], List[-0.002291086311673129`, \
0.447789057544173`, 0.15745272935060484`, -0.03998129758573962`, \
0.12120861159568577`, 0.08749619135148178`, -0.15925142736754433`, \
0.37213404342043727`, 0.02902068456655079`], List[0.1656791881215801`, \
0.008029881047586616`, 0.004207157971730912`, 0.5150989160130408`, \
-0.10402766331304579`, -0.09739254574090851`, -0.04143430827607297`, \
-0.057382378163407806`, -0.23188758777150828`], List[-0.48637321504774506`, \
0.11291402344229534`, -0.22080657969069975`, -0.018804955836153252`, \
-0.26949155285518755`, 0.1406983555635552`, -0.2938645374584946`, \
-0.047690040035073405`, 0.15379228577813975`], List[-0.007963838780995158`, \
-0.09005623977920009`, -0.13424891311341547`, 0.02753554217748073`, \
0.2892953609510857`, -0.004933571723441445`, 0.532650093976695`, \
0.15891308958656583`, -0.6966794010457582`], List[-0.45802686465599735`, \
-0.02666533659251453`, -0.21200274419876802`, 0.563909148857333`, \
0.16476255757151723`, 0.29456965203768853`, 0.09015839852771952`, \
1.1167830534377428`, -0.7191608297232752`], List[0.17403735722164138`, \
-0.2542507189056533`, 0.32814237898597254`, 0.054713534501833964`, \
-0.12442956705023747`, -0.4766624505869813`, 0.1926764155992447`, \
-0.19244966366726804`, 0.7083667961092437`], List[-0.058373944501506195`, \
-0.2656568831047161`, 0.017095359154467412`, 0.0037395503557728434`, \
-0.10993288477879751`, 0.02432304343270765`, -0.288601690052489`, \
-0.22796518323303974`, 0.05849934661010106`], List[0.7029641974303402`, \
-0.33319767019895724`, -0.07128309895749682`, -0.7027920138466923`, \
0.5342614045896668`, 0.3491304626108965`, -0.804121595611196`, \
-0.10923058518196056`, 0.23902327340804871`], List[-0.2701676438018764`, \
-0.30321644187380914`, 0.1455762367690625`, -0.004026296876858546`, \
-0.20424160150534743`, -0.055414655374477734`, -0.09007945516845413`, \
-0.3386786134224352`, 0.21636080492297902`], List[-0.48104696404634195`, \
0.4279034308841531`, 0.07543847604919432`, 0.03599121759518621`, \
0.308707238243412`, 0.05559609500536701`, -0.5172789267139858`, \
0.0798199097598091`, 0.1685005812848279`], List[0.37800354437032985`, \
-0.6050900380201988`, 0.014536843456992491`, 0.17154117650926956`, \
-0.9170492614103716`, 0.4267490564834378`, 0.20534489195054828`, \
-0.2677223121543032`, 0.0037569578326140988`], List[-0.03271290204427099`, \
-0.10537906434401388`, -0.06507722026199479`, -0.06519205575527176`, \
0.26502494570747726`, 0.6356328891022943`, -0.00860928434837733`, \
0.5441002550924445`, -0.01894429675172112`], List[0.3252793585970136`, \
-0.10341117690465823`, -0.5999044302353354`, -0.40322945668697635`, \
-0.5170485513963122`, -0.0389720027238153`, 0.026845471145501097`, \
0.027355080182707145`, -0.07485582795741245`], List[-0.23948701247232598`, \
-0.1163019269080546`, -0.21206356622183456`, -0.2817503645247456`, \
-0.004062233267416012`, -0.5971049475470607`, -0.18426926496426194`, \
-0.39565818210136944`, 0.040642872306378815`], List[-0.17048579500696684`, \
-0.19733345589844453`, -0.5485314901065682`, 0.8215821641327099`, \
0.12712671799966072`, -0.9577265527552393`, 0.3032205652416131`, \
0.27382819234138844`, -0.2985141295893147`], List[0.10130460116025061`, \
0.090414587124574`, 0.249194842565596`, -0.21016182421222218`, \
0.228376859902311`, -0.27368828665330874`, -0.22004104840758876`, \
-0.2999583882322103`, 0.021467430893304947`], List[-0.29937630893572303`, \
0.5040818901879784`, -0.000560633785451259`, 0.06289767481476646`, \
-0.1877214125004518`, 0.36058838677561983`, 0.3334478521405993`, \
0.6796874628991235`, 0.02356247920313138`], List[0.19114533575453754`, \
-0.26101512237478824`, 0.13069240311674912`, -0.2045589905415304`, \
-0.5453465291272831`, -0.2365793389071655`, -0.07315991044521537`, \
0.44358834935459585`, 0.5190722191051635`], List[0.04192657899938222`, \
-0.3602902076342167`, -0.16949852931002532`, 0.5252036694875512`, \
0.19437846208605974`, 0.16392556261631774`, 0.07305832244518655`, \
0.2917495790223045`, 0.0009178890573062108`], List[0.24346709103121064`, \
-0.290754151588093`, 0.48281782237054943`, -0.0756452270785661`, \
-0.058055217609387165`, -0.6393912968164641`, -0.04512656441325176`, \
0.16108579254840696`, 0.22613604692850517`], List[0.40575009955079394`, \
-0.22014210198684914`, 0.09302852789251864`, 0.2780295413843263`, \
-0.09004412502839276`, 0.14884875449443427`, 0.2614061299073047`, \
-0.060535183008039214`, -0.16612011579954897`], List[0.7877708151085587`, \
-0.059760077563293594`, 0.08904183119458094`, -0.5875016105338112`, \
-0.010459303658681298`, 0.29593139390852774`, -0.11537023434662842`, \
0.2175652297921246`, 0.061281503730874265`], List[-0.16217523392084005`, \
0.45573653207053516`, -0.027462434613493552`, -0.020645875164570397`, \
0.392522188748133`, 0.5437654186758104`, 0.30178874388165855`, \
0.4940765688437397`, -1.1180128683497634`], List[-0.1474147295100771`, \
0.33554906858311767`, -0.18246483010381187`, -0.7805359130033949`, \
0.21184968562908743`, 0.18365561377289674`, 0.4996360134554676`, \
0.4303580342941452`, -0.054951211804662704`], List[-0.22005541417771513`, \
-0.1471007953983846`, -0.13667113649092616`, 0.09442028879985948`, \
0.6029068346765541`, 0.48395283377799636`, -0.0797143920672395`, \
-0.020713984246130846`, 0.1600058851903673`], List[0.20528497618614713`, \
0.30781085637359074`, -0.1751154842130706`, -0.21904501312338498`, \
-0.6560049725561148`, 0.1538412230103912`, 0.5645704103407829`, \
-0.6282110730346023`, -0.3632942544924067`], List[0.012058306400679685`, \
0.1586931794429063`, 0.427729142045124`, 0.012339416253587828`, \
-0.09642924822186161`, 0.23111410565785612`, 0.05554075748901117`, \
0.7515931441263077`, -0.5402081692546554`], List[-0.09202984877044768`, \
-0.2238907571911146`, 0.06327585264771497`, -0.011703445548714128`, \
0.4770468965249828`, -0.33844331259865684`, 0.2818503839058962`, \
-0.5170950946103163`, 0.06286588064434676`]], Automatic], Rule[Method, \
\\\"KDtree\\\"]]]]]], Rule[\\\"NeighborsNumber\\\", 50], Rule[\\\"ClassPriors\
\\\", List[0.37142857142857144`, 0.22857142857142856`, \
0.39999999999999997`]], Rule[\\\"TrainingOutput\\\", NumericArray[List[1, 3, \
1, 2, 3, 2, 3, 2, 3, 1, 1, 1, 1, 1, 1, 3, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 2, \
2, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 1, 2, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 1, \
2, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 1, 2, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 1, \
2, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 1, 2, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 2, \
3, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 1, 3, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 1, \
2, 3, 2, 3, 3], \\\"UnsignedInteger8\\\"]], \
Rule[\\\"DistributionSmoothing\\\", 0.5`], Rule[\\\"Processor\\\", \
MachineLearning`MLProcessor[\\\"Sequence\\\", Association[Rule[\\\"Input\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\
\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"SetSize\\\", List[136]]]]]], Rule[\\\
\"Output\\\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Weight\\\", \
1], Rule[\\\"Type\\\", \\\"NumericalVector\\\"]]]]], Rule[\\\"Processors\\\", \
List[MachineLearning`MLProcessor[\\\"EmbedNominalVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Impossible\\\"], Rule[\\\"Missing\
\\\", \\\"Allowed\\\"], Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"NominalVector\\\"], Rule[\\\"Weight\\\", \
1], Rule[\\\"SetSize\\\", List[136]]]]]], Rule[\\\"Index\\\", \
List[Association[Rule[1, 1], Rule[2, 2], Rule[3, 3], Rule[4, 4], Rule[5, 5], \
Rule[6, 6], Rule[7, 7], Rule[8, 8], Rule[9, 9], Rule[10, 10], Rule[11, 11], \
Rule[12, 12], Rule[13, 13], Rule[14, 14], Rule[15, 15], Rule[16, 16], \
Rule[17, 17], Rule[18, 18], Rule[19, 19], Rule[20, 20], Rule[21, 21], \
Rule[22, 22], Rule[23, 23], Rule[24, 24], Rule[25, 25], Rule[26, 26], \
Rule[27, 27], Rule[28, 28], Rule[29, 29], Rule[30, 30], Rule[31, 31], \
Rule[32, 32], Rule[33, 33], Rule[34, 34], Rule[35, 35], Rule[36, 36], \
Rule[37, 37], Rule[38, 38], Rule[39, 39], Rule[40, 40], Rule[41, 41], \
Rule[42, 42], Rule[43, 43], Rule[44, 44], Rule[45, 45], Rule[46, 46], \
Rule[47, 47], Rule[48, 48], Rule[49, 49], Rule[50, 50], Rule[51, 51], \
Rule[52, 52], Rule[53, 53], Rule[54, 54], Rule[55, 55], Rule[56, 56], \
Rule[57, 57], Rule[58, 58], Rule[59, 59], Rule[60, 60], Rule[61, 61], \
Rule[62, 62], Rule[63, 63], Rule[64, 64], Rule[65, 65], Rule[66, 66], \
Rule[67, 67], Rule[68, 68], Rule[69, 69], Rule[70, 70], Rule[71, 71], \
Rule[72, 72], Rule[73, 73], Rule[74, 74], Rule[75, 75], Rule[76, 76], \
Rule[77, 77], Rule[78, 78], Rule[79, 79], Rule[80, 80], Rule[81, 81], \
Rule[82, 82], Rule[83, 83], Rule[84, 84], Rule[85, 85], Rule[86, 86], \
Rule[87, 87], Rule[88, 88], Rule[89, 89], Rule[90, 90], Rule[91, 91], \
Rule[92, 92], Rule[93, 93], Rule[94, 94], Rule[95, 95], Rule[96, 96], \
Rule[97, 97], Rule[98, 98], Rule[99, 99], Rule[100, 100], Rule[101, 101], \
Rule[102, 102], Rule[103, 103], Rule[104, 104], Rule[105, 105], Rule[106, \
106], Rule[107, 107], Rule[108, 108], Rule[109, 109], Rule[110, 110], \
Rule[111, 111], Rule[112, 112], Rule[113, 113], Rule[114, 114], Rule[115, \
115], Rule[116, 116], Rule[117, 117], Rule[118, 118], Rule[119, 119], \
Rule[120, 120], Rule[121, 121], Rule[122, 122], Rule[123, 123], Rule[124, \
124], Rule[125, 125], Rule[126, 126], Rule[127, 127], Rule[128, 128], \
Rule[129, 129], Rule[130, 130], Rule[131, 131], Rule[132, 132], Rule[133, \
133], Rule[134, 134], Rule[135, 135], Rule[136, 136]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Weight\\\", 1], \
Rule[\\\"Type\\\", \\\"NumericalVector\\\"]]]]], \
Rule[\\\"EmbeddingVectors\\\", List[NumericArray[List[List[0.`, 0.`, 0.`, \
0.`, 0.`, 0.`, 0.`, 0.`, 0.`], List[-1.0169178247451782`, 0.685467004776001`, \
-0.023245172575116158`, 0.19931364059448242`, -0.20883788168430328`, \
-0.12087416648864746`, -0.06141949072480202`, -0.10597263276576996`, \
0.10875528305768967`], List[-0.38183823227882385`, 0.19993092119693756`, \
0.5571987628936768`, -0.7299461960792542`, -0.1002204567193985`, \
-0.506624162197113`, -0.24465039372444153`, -0.7298336029052734`, \
-0.09627307951450348`], List[-0.6746448874473572`, -0.07398883253335953`, \
-0.42826589941978455`, 0.36153942346572876`, 0.1800663024187088`, \
-0.13439685106277466`, 0.17611148953437805`, -0.242436021566391`, \
0.2951604127883911`], List[-0.06266189366579056`, -0.11711419373750687`, \
-0.113866426050663`, 0.011423281393945217`, 0.07906065136194229`, \
0.03798345848917961`, -0.0923553854227066`, -0.4463205635547638`, \
0.040678951889276505`], List[-0.15769875049591064`, 0.04785262420773506`, \
0.8955807685852051`, 0.5174974799156189`, 0.16342827677726746`, \
0.43683674931526184`, -0.23174996674060822`, 0.7974100112915039`, \
-0.3477349281311035`], List[-0.45802634954452515`, -0.026666218414902687`, \
-0.2120026797056198`, 0.5639081597328186`, 0.16476315259933472`, \
0.2945692837238312`, 0.09015791118144989`, 1.1167832612991333`, \
-0.7191606163978577`], List[-0.3271239101886749`, -0.5006350874900818`, \
0.04977414384484291`, -0.0275662150233984`, -0.04484076797962189`, \
0.8469821810722351`, -0.23878704011440277`, 0.1375560462474823`, \
0.2290327548980713`], List[-0.3370705246925354`, 0.6492243409156799`, \
0.1542404741048813`, -0.02564394846558571`, 0.11186157912015915`, \
-0.4499099552631378`, 0.028323005884885788`, -0.1418711096048355`, \
-0.32029569149017334`], List[-0.39046886563301086`, 0.19920919835567474`, \
-0.5133547782897949`, 0.15004779398441315`, -0.41026270389556885`, \
-0.7000691890716553`, -0.8885369896888733`, -0.5680444240570068`, \
0.24697338044643402`], List[-0.30576378107070923`, 0.19569341838359833`, \
-0.3823833465576172`, -0.04909564182162285`, -0.32653552293777466`, \
0.4190160632133484`, 0.16893252730369568`, 0.15981048345565796`, \
0.09115470945835114`], List[0.09076130390167236`, -0.7724121809005737`, \
-0.3633984625339508`, 0.4405556619167328`, -0.6539329886436462`, \
-0.4185083508491516`, -0.12365677952766418`, 0.09404507279396057`, \
0.19271914660930634`], List[0.7029639482498169`, -0.3331974148750305`, \
-0.07128302752971649`, -0.7027923464775085`, 0.5342609882354736`, \
0.34912997484207153`, -0.8041211366653442`, -0.10923010110855103`, \
0.23902353644371033`], List[-0.08455947786569595`, -0.024532098323106766`, \
0.31531572341918945`, 0.2082686871290207`, -0.7428684234619141`, \
-0.25866782665252686`, -0.23203624784946442`, 0.3596508502960205`, \
-0.37771955132484436`], List[0.513399064540863`, -0.28978872299194336`, \
0.07052686810493469`, -0.08369769901037216`, 0.2327839881181717`, \
-0.06182286515831947`, -0.10833325982093811`, -0.03743553161621094`, \
0.3942003846168518`], List[-0.08133348822593689`, 0.3058929443359375`, \
-0.22259502112865448`, -0.5297461152076721`, -0.3823282718658447`, \
-0.17310070991516113`, 0.1395619958639145`, -0.09086639434099197`, \
-0.12034841626882553`], List[0.3084975779056549`, 0.08045269548892975`, \
0.0021532014943659306`, -0.3519752323627472`, 0.27463796734809875`, \
-0.0786370113492012`, 0.8698643445968628`, -0.06235788017511368`, \
0.5998180508613586`], List[-0.05837412551045418`, -0.2656559646129608`, \
0.01709442213177681`, 0.0037399553693830967`, -0.10993218421936035`, \
0.0243239626288414`, -0.2886017858982086`, -0.2279660999774933`, \
0.05849849060177803`], List[0.05327356234192848`, -0.2737447917461395`, \
0.003780995262786746`, -0.24803178012371063`, 0.06230556592345238`, \
-0.02455543912947178`, -0.22576038539409637`, 0.06877411901950836`, \
0.14188840985298157`], List[-0.18789388239383698`, -0.08386208862066269`, \
0.30350950360298157`, -0.25951507687568665`, 0.4055745303630829`, \
0.05023087188601494`, 0.14379703998565674`, -0.40707144141197205`, \
0.27955204248428345`], List[0.37800291180610657`, -0.6050896048545837`, \
0.01453770138323307`, 0.17154021561145782`, -0.9170495271682739`, \
0.42674824595451355`, 0.20534555613994598`, -0.2677231431007385`, \
0.0037560262717306614`], List[-0.37968289852142334`, -0.477049320936203`, \
-0.6385208368301392`, 0.5015006065368652`, 0.35837939381599426`, \
-0.31814369559288025`, -0.10594674944877625`, -0.16024793684482574`, \
0.09370878338813782`], List[-0.10302981734275818`, 0.32555606961250305`, \
-0.020380273461341858`, 0.023691225796937943`, -0.2517704367637634`, \
-0.18965965509414673`, 0.2165936529636383`, -0.2958061695098877`, \
0.4279932975769043`], List[-0.19370640814304352`, -0.1658187061548233`, \
0.09978403896093369`, 0.07784608006477356`, -0.14342893660068512`, \
-0.2539879083633423`, -0.2830966114997864`, -0.09415733814239502`, \
-0.41997963190078735`], List[0.04841238632798195`, -0.029509762302041054`, \
0.6108091473579407`, -0.5336490273475647`, 0.1300397366285324`, \
-0.1699560582637787`, 0.08358840644359589`, 0.07624684274196625`, \
0.47078976035118103`], List[0.041927359998226166`, -0.36029052734375`, \
-0.16949933767318726`, 0.5252031683921814`, 0.19437755644321442`, \
0.16392606496810913`, 0.07305867969989777`, 0.29174917936325073`, \
0.0009182951762340963`], List[0.029922284185886383`, -0.19280871748924255`, \
0.036524698138237`, -0.29912301898002625`, -0.37482377886772156`, \
0.15181422233581543`, 0.139937162399292`, 0.1439560204744339`, \
0.6199225187301636`], List[0.07534495741128922`, 0.19570234417915344`, \
0.8213793039321899`, 0.1851562112569809`, -0.20703260600566864`, \
0.547758936882019`, -0.3863110840320587`, -0.2659819424152374`, \
-0.19274474680423737`], List[0.1996368169784546`, 0.1756415069103241`, \
-0.012801856733858585`, -0.71571946144104`, 0.20786060392856598`, \
0.08308102190494537`, 0.08612477779388428`, 0.003771750722080469`, \
0.688667893409729`], List[-0.34900733828544617`, -0.08538716286420822`, \
0.07444765418767929`, 0.25902897119522095`, 0.5260823369026184`, \
0.10242468118667603`, -0.09577737748622894`, -0.49911585450172424`, \
0.01821751520037651`], List[0.12145963311195374`, 0.08822529762983322`, \
-0.5276590585708618`, 0.17436815798282623`, 0.07595526427030563`, \
-0.06023672968149185`, -0.031623706221580505`, -0.19721029698848724`, \
-0.04832950606942177`], List[-0.29937660694122314`, 0.5040826201438904`, \
-0.0005601666634902358`, 0.0628974661231041`, -0.18772228062152863`, \
0.3605892062187195`, 0.33344700932502747`, 0.6796883344650269`, \
0.023562492802739143`], List[0.016374880447983742`, 0.4480959475040436`, \
-0.4528443217277527`, -0.48966261744499207`, 0.2149709314107895`, \
0.1188533827662468`, 0.5702773332595825`, 0.09492628276348114`, \
0.3623334467411041`], List[-0.2964191734790802`, -0.13964231312274933`, \
-0.3991428315639496`, 0.5534203052520752`, -0.06952809542417526`, \
0.18266330659389496`, -0.0028029666282236576`, 0.7187694907188416`, \
-0.256944864988327`], List[0.07869593054056168`, 0.0037951970007270575`, \
0.26091790199279785`, -0.0858110710978508`, -0.28619813919067383`, \
0.38958969712257385`, -0.43199241161346436`, -0.2136356681585312`, \
0.23187033832073212`], List[0.6496050357818604`, 0.3247295320034027`, \
0.4105420410633087`, 0.39246076345443726`, 0.7708675265312195`, \
0.023928536102175713`, -0.026677774265408516`, 0.30314597487449646`, \
-0.19687074422836304`], List[-0.007964256219565868`, -0.09005565941333771`, \
-0.13424956798553467`, 0.027534790337085724`, 0.28929463028907776`, \
-0.004933161661028862`, 0.5326501131057739`, 0.15891297161579132`, \
-0.6966797113418579`], List[-0.08133985102176666`, 0.3941076695919037`, \
-0.15453429520130157`, -0.5932101607322693`, 0.34571993350982666`, \
0.5475886464118958`, 0.8791981935501099`, 0.7005172967910767`, \
0.7883008122444153`], List[0.44733256101608276`, -0.24141563475131989`, \
-0.06415511667728424`, -0.6459012031555176`, 0.4955042004585266`, \
-0.1788315773010254`, -0.1988784521818161`, -0.09203624725341797`, \
-0.7784431576728821`], List[-0.19846613705158234`, -0.2121790498495102`, \
0.2957253158092499`, -0.10369091480970383`, -0.0592663399875164`, \
0.4216597080230713`, -0.3219279944896698`, 0.2615300714969635`, \
0.45833420753479004`], List[-0.23948687314987183`, -0.11630275100469589`, \
-0.2120644450187683`, -0.2817501723766327`, -0.004062260035425425`, \
-0.5971055030822754`, -0.18426978588104248`, -0.3956587016582489`, \
0.04064249247312546`], List[0.5950467586517334`, -0.3653585910797119`, \
-0.27703505754470825`, 0.14172329008579254`, -0.12145133316516876`, \
0.1263512372970581`, -0.6250767707824707`, 0.4033346474170685`, \
-0.13105075061321259`], List[-0.22752541303634644`, 0.029156355187296867`, \
-0.22030916810035706`, -0.09984365850687027`, -0.2049245834350586`, \
0.036960337311029434`, 0.2856332063674927`, 0.18322110176086426`, \
-0.2581981122493744`], List[0.06368806213140488`, 0.2374972552061081`, \
0.17656727135181427`, -0.16103196144104004`, 0.7223507165908813`, \
-0.03246800974011421`, -0.34847864508628845`, 0.3080858886241913`, \
0.3507067561149597`], List[-0.37783095240592957`, 0.1589278280735016`, \
0.019960718229413033`, 0.3943537175655365`, -0.03464667126536369`, \
0.11630609631538391`, -0.21194681525230408`, 0.3474021852016449`, \
0.3460320234298706`], List[0.11345788836479187`, -0.29978713393211365`, \
0.5586828589439392`, -0.18951687216758728`, -0.2202049344778061`, \
-0.5374675989151001`, -0.021253732964396477`, -0.049779023975133896`, \
-0.06891293823719025`], List[0.1656789481639862`, 0.008029182441532612`, \
0.004206680692732334`, 0.5150996446609497`, -0.10402830690145493`, \
-0.09739168733358383`, -0.041434623301029205`, -0.0573817640542984`, \
-0.23188842833042145`], List[-0.13572221994400024`, 0.2712044417858124`, \
-0.2987896502017975`, 0.20320051908493042`, -0.5568735599517822`, \
0.006558898836374283`, 0.28195279836654663`, -0.19625809788703918`, \
-0.519520103931427`], List[-0.0867348238825798`, -0.25038081407546997`, \
-0.2019965499639511`, 0.4550168812274933`, 0.402818500995636`, \
-0.5190525054931641`, -0.23195363581180573`, 0.21201640367507935`, \
-0.030325179919600487`], List[0.2429981827735901`, -0.1250923126935959`, \
-0.05108584463596344`, 0.03404320403933525`, -0.5160472989082336`, \
0.30912327766418457`, -0.5094493627548218`, 0.0385567769408226`, \
-0.21814216673374176`], List[-0.35947951674461365`, -0.1604236513376236`, \
0.0996348187327385`, 0.5483320951461792`, -0.03437819331884384`, \
0.009196917526423931`, 0.17572011053562164`, -0.3546849191188812`, \
0.5273112654685974`], List[-0.09152204543352127`, 0.31768813729286194`, \
-0.14887136220932007`, 0.09515384584665298`, 0.3598482012748718`, \
0.09621994197368622`, 0.34684380888938904`, 0.2993508577346802`, \
0.09623733907938004`], List[-0.03271199390292168`, -0.10537983477115631`, \
-0.06507682800292969`, -0.0651918575167656`, 0.26502394676208496`, \
0.6356333494186401`, -0.008610018528997898`, 0.544100284576416`, \
-0.018944919109344482`], List[-0.06308135390281677`, -0.08656999468803406`, \
0.1512584537267685`, -0.5012490749359131`, -0.04163763299584389`, \
0.08147362619638443`, -0.4592985510826111`, -0.011060184799134731`, \
-0.046756722033023834`], List[0.6993705034255981`, 0.11156374961137772`, \
0.17311590909957886`, -0.038341373205184937`, 0.13065212965011597`, \
-0.172051802277565`, -0.1784030944108963`, 0.006835562642663717`, \
-0.21315184235572815`], List[0.24346709251403809`, -0.29075419902801514`, \
0.4828173518180847`, -0.07564429938793182`, -0.05805511027574539`, \
-0.6393919587135315`, -0.04512730985879898`, 0.16108562052249908`, \
0.2261369377374649`], List[0.012057618238031864`, 0.1586926132440567`, \
0.4277288615703583`, 0.012339344248175621`, -0.0964287742972374`, \
0.23111392557621002`, 0.05554140731692314`, 0.7515929937362671`, \
-0.5402078032493591`], List[0.3436395823955536`, -0.37779131531715393`, \
0.37584877014160156`, 0.28336265683174133`, -0.21780510246753693`, \
-0.030359188094735146`, -0.40291082859039307`, -0.013694602996110916`, \
-0.24009257555007935`], List[0.20877988636493683`, -0.0057547008618712425`, \
0.11838492751121521`, 0.30117204785346985`, 0.5772191286087036`, \
0.2165612131357193`, 0.203219935297966`, 0.5351128578186035`, \
0.02033594623208046`], List[-0.2678607404232025`, -0.0958322212100029`, \
0.565859317779541`, 0.30129218101501465`, 0.18115465342998505`, \
-0.47413507103919983`, -0.16503487527370453`, 0.36925798654556274`, \
0.224075049161911`], List[-0.39164403080940247`, 0.38879284262657166`, \
0.6109297275543213`, -0.014155513606965542`, -0.17553424835205078`, \
-0.6990113854408264`, 0.2298184335231781`, -0.6051162481307983`, \
-0.11598522961139679`], List[-0.25913533568382263`, 0.44208937883377075`, \
-0.39507198333740234`, 0.2348666489124298`, 0.17508171498775482`, \
0.24961228668689728`, 0.4024421274662018`, 0.3914923071861267`, \
-0.22119742631912231`], List[-0.6515596508979797`, 0.13192275166511536`, \
-0.22096556425094604`, -0.16294033825397491`, -0.22815421223640442`, \
-0.36087894439697266`, 0.003016421338543296`, 0.12803375720977783`, \
0.4279095232486725`], List[0.9342473149299622`, 0.41675129532814026`, \
0.27935078740119934`, -0.12481070309877396`, 0.07047680765390396`, \
0.6377807855606079`, 0.45867082476615906`, 0.05094962939620018`, \
-0.15966808795928955`], List[0.5137415528297424`, -0.05635056644678116`, \
-0.09681291878223419`, -0.12020998448133469`, 0.33463814854621887`, \
-0.44864973425865173`, -0.4670730531215668`, 0.022089192643761635`, \
0.03985021263360977`], List[0.4945376217365265`, 0.2686857581138611`, \
0.02619694359600544`, 0.09316994994878769`, -0.5147454738616943`, \
0.00003194186501787044`, 0.4488053619861603`, 0.029475048184394836`, \
0.4165897071361542`], List[0.10192635655403137`, 0.16523775458335876`, \
-0.3649407923221588`, -0.28525254130363464`, -0.4374057352542877`, \
0.11609647423028946`, 0.1119190976023674`, -0.18035545945167542`, \
-0.39385202527046204`], List[0.008347583934664726`, -0.030875926837325096`, \
-0.40197283029556274`, 0.35966363549232483`, -0.39540615677833557`, \
0.7158137559890747`, 0.02473270520567894`, -0.04938812181353569`, \
-0.30092036724090576`], List[-0.11759591847658157`, -0.20903363823890686`, \
-0.5148555636405945`, 0.17817626893520355`, -0.27291759848594666`, \
-0.24484644830226898`, -0.18339672684669495`, 0.4365241825580597`, \
0.34503376483917236`], List[-0.27016785740852356`, -0.3032154440879822`, \
0.14557714760303497`, -0.004026204813271761`, -0.2042412906885147`, \
-0.05541543290019035`, -0.09007949382066727`, -0.3386784791946411`, \
0.2163616418838501`], List[-0.25512051582336426`, -0.555943489074707`, \
0.2271685004234314`, 0.002664665225893259`, -0.028991980478167534`, \
0.33735859394073486`, -0.01685941591858864`, 0.06785374134778976`, \
0.12115045636892319`], List[0.19114458560943604`, -0.26101598143577576`, \
0.1306922882795334`, -0.2045592963695526`, -0.5453455448150635`, \
-0.23657923936843872`, -0.07316028326749802`, 0.44358763098716736`, \
0.5190718173980713`], List[0.28929367661476135`, -0.04139848053455353`, \
0.4321828782558441`, 0.05757157504558563`, -0.7157338261604309`, \
-0.6733927726745605`, 0.2062457650899887`, -0.07919652760028839`, \
-0.034575559198856354`], List[-0.17058050632476807`, -0.47358596324920654`, \
-0.5377767086029053`, 0.2026347517967224`, 0.27578452229499817`, \
-0.5120897889137268`, -0.7782192230224609`, -0.22768142819404602`, \
0.2469194233417511`], List[0.3176695704460144`, 0.27257832884788513`, \
-0.08534102141857147`, -0.5650151371955872`, -0.05241360887885094`, \
0.3704909682273865`, -0.17098914086818695`, -0.15058884024620056`, \
0.19686639308929443`], List[0.44953909516334534`, 0.2989118993282318`, \
0.17048557102680206`, -0.45194628834724426`, 0.3830479681491852`, \
-0.03288361057639122`, -0.5535257458686829`, -0.15517595410346985`, \
-0.18686699867248535`], List[0.34880876541137695`, -0.39536798000335693`, \
-0.10788843035697937`, -0.2720208168029785`, 0.010240682400763035`, \
-0.067329540848732`, -0.02201654203236103`, 0.19047990441322327`, \
0.11101661622524261`], List[-0.15041881799697876`, 0.4893346130847931`, \
0.30397912859916687`, 0.36038267612457275`, -0.06319575756788254`, \
0.07138068974018097`, 0.21132026612758636`, 0.6988100409507751`, \
0.049500755965709686`], List[-0.09202887117862701`, -0.22389046847820282`, \
0.06327538192272186`, -0.01170277502387762`, 0.4770478904247284`, \
-0.33844342827796936`, 0.28185132145881653`, -0.517094612121582`, \
0.06286593526601791`], List[-0.33838316798210144`, -0.056538816541433334`, \
0.05688149109482765`, 0.822517454624176`, 0.6388998627662659`, \
-0.9710853695869446`, -0.01693742349743843`, -0.12618644535541534`, \
-0.02343815751373768`], List[-0.17048659920692444`, -0.19733409583568573`, \
-0.5485324263572693`, 0.8215819597244263`, 0.12712737917900085`, \
-0.9577258229255676`, 0.3032202124595642`, 0.2738291323184967`, \
-0.2985136806964874`], List[-0.3545224666595459`, 0.45004957914352417`, \
-0.6168292164802551`, 0.15135636925697327`, 0.6445160508155823`, \
0.4037705957889557`, 0.3797319829463959`, -0.4245952069759369`, \
0.34834787249565125`], List[-0.2755165994167328`, -0.27297553420066833`, \
-0.44510653614997864`, -0.23024488985538483`, 0.1991884708404541`, \
-0.011666926555335522`, 0.3439676761627197`, 0.12889574468135834`, \
-0.32843124866485596`], List[1.135640263557434`, -0.2896031439304352`, \
-0.5909157395362854`, 0.2681869864463806`, -0.07719293236732483`, \
0.025726143270730972`, -0.4422725439071655`, 0.08118036389350891`, \
0.4022643268108368`], List[0.2895057499408722`, 0.49109306931495667`, \
-0.26828521490097046`, 0.22581180930137634`, -0.23162707686424255`, \
0.13656796514987946`, 0.4786456227302551`, -0.18079617619514465`, \
-0.751209557056427`], List[-0.13664263486862183`, -0.4362390637397766`, \
-0.08726069331169128`, 0.37119027972221375`, 0.4290711581707001`, \
-0.12117315083742142`, 0.16586771607398987`, -0.046279046684503555`, \
-0.041426774114370346`], List[0.32527920603752136`, -0.10341030359268188`, \
-0.5999037623405457`, -0.40323036909103394`, -0.5170480608940125`, \
-0.03897251933813095`, 0.026844944804906845`, 0.027356065809726715`, \
-0.07485645264387131`], List[-0.16217467188835144`, 0.45573607087135315`, \
-0.02746248058974743`, -0.02064630389213562`, 0.3925214111804962`, \
0.5437646508216858`, 0.3017883598804474`, 0.4940774440765381`, \
-1.1180137395858765`], List[0.13170428574085236`, 0.3766573667526245`, \
0.29200467467308044`, -0.44970521330833435`, 0.14408665895462036`, \
0.18625302612781525`, -0.16104869544506073`, 0.40859904885292053`, \
0.04328501224517822`], List[0.3922278881072998`, 0.34273743629455566`, \
0.23769144713878632`, 0.27898475527763367`, -0.1316114366054535`, \
-0.19414347410202026`, -0.12186639755964279`, 0.09938866645097733`, \
0.8567876815795898`], List[-0.002291486132889986`, 0.4477890133857727`, \
0.15745295584201813`, -0.0399809256196022`, 0.12120793014764786`, \
0.08749629557132721`, -0.1592520922422409`, 0.3721342980861664`, \
0.029020575806498528`], List[-0.31602802872657776`, 0.6225473284721375`, \
-0.8563281297683716`, 0.15810993313789368`, -0.0016780529404059052`, \
0.794868528842926`, -0.15702517330646515`, 0.40660157799720764`, \
-0.2862715721130371`], List[0.26271018385887146`, 0.0594397597014904`, \
-0.13240884244441986`, -0.17784692347049713`, -0.43241673707962036`, \
-0.03736482933163643`, -0.8969855904579163`, 0.2866676449775696`, \
0.5164644718170166`], List[0.1954335719347`, 0.36788269877433777`, \
-0.3774826228618622`, -0.6052183508872986`, 0.03395292907953262`, \
0.4752822816371918`, -0.12883968651294708`, -0.15887951850891113`, \
-0.013051191344857216`], List[-0.46760788559913635`, 0.3027907609939575`, \
-0.10701248049736023`, -0.42631059885025024`, 0.2369767278432846`, \
0.33754971623420715`, -0.05194045975804329`, 0.034607067704200745`, \
-0.35143211483955383`], List[0.33229339122772217`, -0.531445324420929`, \
-0.5026278495788574`, 0.2766217887401581`, -0.07150352001190186`, \
-0.19835497438907623`, -0.07548996061086655`, 0.9669865369796753`, \
-0.3782917559146881`], List[0.2801341712474823`, 0.24035079777240753`, \
-0.37582266330718994`, 0.1722068041563034`, -0.017151638865470886`, \
0.07818286120891571`, 0.3524913489818573`, 0.19016100466251373`, \
-0.31985175609588623`], List[0.26734471321105957`, 0.498241126537323`, \
0.2291247546672821`, -0.07707913219928741`, -0.0830126404762268`, \
-0.45659130811691284`, -0.10140009224414825`, 0.26879164576530457`, \
-0.09830139577388763`], List[-0.5061553120613098`, 0.0022589995060116053`, \
0.15630897879600525`, 0.27074459195137024`, -0.34838831424713135`, \
0.05315786600112915`, 0.18877987563610077`, -0.6017982363700867`, \
-0.296688437461853`], List[0.4245492219924927`, -0.07231033593416214`, \
-0.11533338576555252`, -0.39670872688293457`, 0.08166976273059845`, \
-0.22897163033485413`, -0.0373113639652729`, 0.2793227434158325`, \
-0.18566620349884033`], List[0.18960785865783691`, 0.3458932042121887`, \
-0.2384927123785019`, 0.5007370710372925`, 0.3138138949871063`, \
0.5495890378952026`, -0.4541100263595581`, 0.03354278951883316`, \
0.13985420763492584`], List[-0.04570317268371582`, 0.2460070252418518`, \
0.1416606456041336`, -0.12405139207839966`, 0.5932475328445435`, \
0.22795470058918`, 0.2934301197528839`, 0.0801498144865036`, \
0.3518645167350769`], List[0.209067240357399`, 0.3724527359008789`, \
-0.0009560862672515213`, 0.20147334039211273`, 0.3090948760509491`, \
-0.11240733414888382`, -0.32074207067489624`, -0.03590240702033043`, \
0.3936568796634674`], List[0.7877712249755859`, -0.059760406613349915`, \
0.08904169499874115`, -0.5875014066696167`, -0.010458369739353657`, \
0.2959323227405548`, -0.11536931246519089`, 0.21756604313850403`, \
0.06128077208995819`], List[0.4172285795211792`, -0.8073537945747375`, \
-0.024488475173711777`, 0.20084349811077118`, 0.011983875185251236`, \
-0.40770018100738525`, 0.19019122421741486`, 0.38737472891807556`, \
-0.09086863696575165`], List[0.405749648809433`, -0.22014188766479492`, \
0.09302785992622375`, 0.2780304253101349`, -0.09004358947277069`, \
0.14884944260120392`, 0.26140567660331726`, -0.06053468585014343`, \
-0.16611996293067932`], List[-0.4863741397857666`, 0.11291444301605225`, \
-0.22080586850643158`, -0.01880413107573986`, -0.26949167251586914`, \
0.1406985968351364`, -0.2938636243343353`, -0.04769033193588257`, \
0.15379184484481812`], List[-0.4810469448566437`, 0.42790284752845764`, \
0.07543817907571793`, 0.03599093109369278`, 0.30870798230171204`, \
0.05559595301747322`, -0.5172789096832275`, 0.07982054352760315`, \
0.16850009560585022`], List[0.7302711606025696`, -0.08916133642196655`, \
0.15067806839942932`, 0.12793047726154327`, -0.023067301139235497`, \
-0.48279643058776855`, -0.43929171562194824`, 0.505054771900177`, \
-0.08115485310554504`], List[0.20874284207820892`, 0.05076679587364197`, \
0.12299265712499619`, -0.7217181324958801`, -0.019509993493556976`, \
0.15758173167705536`, -0.0345248319208622`, 0.11166226863861084`, \
0.18876558542251587`], List[-0.12010371685028076`, 0.321214884519577`, \
-0.02837139181792736`, 0.3201087713241577`, -0.5156776309013367`, \
0.18898101150989532`, 0.9442706108093262`, -0.17375333607196808`, \
0.07108709216117859`], List[-0.1421143263578415`, 0.5067741274833679`, \
-0.0407596230506897`, 0.11688807606697083`, -0.36251118779182434`, \
0.3562803864479065`, 0.5460411310195923`, 0.043691910803318024`, \
-0.22718296945095062`], List[-0.17141854763031006`, 0.2273387759923935`, \
0.1747654527425766`, -0.08068513125181198`, 0.03283100202679634`, \
0.20663534104824066`, -0.21035172045230865`, 0.16613076627254486`, \
0.1552112102508545`], List[-0.22965364158153534`, 0.06731626391410828`, \
0.18348199129104614`, -0.2303047925233841`, 0.47871899604797363`, \
0.10031872987747192`, -0.14089933037757874`, -0.4233468770980835`, \
-0.0763261541724205`], List[0.17403720319271088`, -0.25425028800964355`, \
0.3281426429748535`, 0.05471377074718475`, -0.12443040311336517`, \
-0.4766627252101898`, 0.19267739355564117`, -0.1924499124288559`, \
0.7083666920661926`], List[-0.14741477370262146`, 0.3355497717857361`, \
-0.18246543407440186`, -0.7805359363555908`, 0.2118496596813202`, \
0.1836565136909485`, 0.49963635206222534`, 0.4303573668003082`, \
-0.05495163053274155`], List[0.1142817884683609`, 0.2165672928094864`, \
-0.1509932428598404`, -0.23356449604034424`, -0.6533068418502808`, \
-0.3126901388168335`, 0.4356204569339752`, -0.1037573292851448`, \
-0.17263923585414886`], List[0.10615052282810211`, -0.13845327496528625`, \
0.11688720434904099`, 0.3744066059589386`, -0.06057777628302574`, \
-0.001352898427285254`, -0.4351048171520233`, 0.29401692748069763`, \
0.24493823945522308`], List[-0.11228270828723907`, -0.11752118170261383`, \
-0.24018336832523346`, 0.20602847635746002`, 0.479596883058548`, \
0.15289942920207977`, 0.05293618142604828`, -0.1896096169948578`, \
-0.1874532401561737`], List[-0.28547245264053345`, 0.06183011829853058`, \
0.056735970079898834`, -0.22261790931224823`, -0.09154044091701508`, \
0.11074430495500565`, 0.7220212817192078`, -0.2596607506275177`, \
-0.22777961194515228`], List[-0.42526477575302124`, 0.5192554593086243`, \
-0.420825719833374`, -0.0542169027030468`, 0.18017897009849548`, \
0.22453317046165466`, -0.24235183000564575`, 0.21841475367546082`, \
-0.001013101078569889`], List[0.14115308225154877`, -0.012464858591556549`, \
0.006429685279726982`, -0.08338285982608795`, 0.6265051364898682`, \
-0.22742202877998352`, 0.1928739994764328`, 0.17434197664260864`, \
0.3389594256877899`], List[-0.22005556523799896`, -0.14710108935832977`, \
-0.13667117059230804`, 0.09441990405321121`, 0.6029067635536194`, \
0.4839520752429962`, -0.07971476018428802`, -0.020714128389954567`, \
0.16000643372535706`], List[-0.260475754737854`, 0.04291832074522972`, \
0.06834647804498672`, -0.044275157153606415`, 0.2958850562572479`, \
0.26289859414100647`, -0.29503950476646423`, -0.3533533215522766`, \
0.5557618141174316`], List[-0.4249122440814972`, -0.02453320100903511`, \
0.017422199249267578`, -0.38932114839553833`, -0.6915526390075684`, \
0.6158058643341064`, 0.7428083419799805`, -0.07605688273906708`, \
-0.08732659369707108`], List[-0.16582734882831573`, -0.07984234392642975`, \
-0.2491479367017746`, 0.38583648204803467`, 0.008080440573394299`, \
0.0248081237077713`, -0.08841446787118912`, -0.14144188165664673`, \
0.2815594971179962`], List[0.4693391025066376`, 0.34544867277145386`, \
0.09093966335058212`, 0.9134631156921387`, -0.3037063479423523`, \
0.20491115748882294`, -0.1763468086719513`, 0.0406094454228878`, \
0.021436158567667007`], List[-0.05411667004227638`, -0.08556566387414932`, \
-0.5068187713623047`, 0.4829022288322449`, -0.32183340191841125`, \
-0.002731087850406766`, 0.31877216696739197`, 0.2787071466445923`, \
-0.11707715690135956`], List[-0.5642439723014832`, 0.9004257321357727`, \
0.13841429352760315`, -0.11181846261024475`, -0.09364678710699081`, \
0.12097259610891342`, -0.3596777021884918`, -0.23452700674533844`, \
0.47726136445999146`], List[0.15933667123317719`, -0.5740842223167419`, \
0.1445559859275818`, 0.2009049504995346`, -0.6382194757461548`, \
-0.03401389345526695`, 0.4749314785003662`, -0.12053003907203674`, \
-0.07413347065448761`], List[-0.5170167088508606`, -0.20557083189487457`, \
-0.35917800664901733`, 0.16441187262535095`, -0.03164123743772507`, \
0.02816860005259514`, 0.20169007778167725`, 0.09221015125513077`, \
0.18106845021247864`], List[0.10130499303340912`, 0.090415358543396`, \
0.24919496476650238`, -0.21016179025173187`, 0.2283778339624405`, \
-0.27368810772895813`, -0.22004079818725586`, -0.2999582290649414`, \
0.021466970443725586`], List[-0.12525679171085358`, -0.1539241075515747`, \
-0.33230555057525635`, 0.0008387343259528279`, 0.2991461157798767`, \
0.3911428451538086`, 0.0949469804763794`, 0.04931199550628662`, \
-0.006370131392031908`], List[0.20528505742549896`, 0.30781155824661255`, \
-0.1751159280538559`, -0.2190442979335785`, -0.6560042500495911`, \
0.1538417935371399`, 0.5645711421966553`, -0.6282116770744324`, \
-0.36329326033592224`], List[0.7639521360397339`, 0.23927178978919983`, \
0.0008147930493578315`, -0.08375809341669083`, 0.009979203343391418`, \
0.2425236999988556`, -0.3833742141723633`, -0.024158474057912827`, \
0.3170769512653351`], List[-0.5365582704544067`, 0.014620231464505196`, \
-0.08051476627588272`, -0.3194691240787506`, -0.028943659737706184`, \
-0.6462967395782471`, 0.2136247456073761`, 0.18644101917743683`, \
0.7223593592643738`], List[-0.07527545839548111`, -0.6046292185783386`, \
-0.17468030750751495`, 0.06678745895624161`, -0.13348864018917084`, \
-0.6217470765113831`, -0.16058361530303955`, -0.40546488761901855`, \
-0.3769676387310028`]], \\\"Real32\\\"]]], Rule[\\\"Version\\\", List[12.`, \
0]], Rule[\\\"ID\\\", 7204649762786858506]]], \
MachineLearning`MLProcessor[\\\"FirstValues\\\", \
Association[Rule[\\\"Info\\\", Association[Rule[\\\"Weight\\\", 1], \
Rule[\\\"Type\\\", \\\"NumericalVector\\\"]]], Rule[\\\"Key\\\", \\\"f1\\\"], \
Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], Rule[\\\"Missing\\\", \
\\\"Allowed\\\"]]]]], Rule[\\\"Invertibility\\\", \\\"Impossible\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"]]]], Rule[\\\"Method\\\", \
\\\"NearestNeighbors\\\"], Rule[\\\"PostProcessor\\\", \
MachineLearning`MLProcessor[\\\"Identity\\\"]], Rule[\\\"Options\\\", \
Association[Rule[\\\"NeighborsNumber\\\", Association[Rule[\\\"Value\\\", \
50], Rule[\\\"Options\\\", Association[]]]], Rule[\\\"DistributionSmoothing\\\
\", Association[Rule[\\\"Value\\\", 0.5`], Rule[\\\"Options\\\", \
Association[]]]], Rule[\\\"NearestMethod\\\", Association[Rule[\\\"Value\\\", \
\\\"KDtree\\\"], Rule[\\\"Options\\\", Association[]]]]]]]], \
Rule[\\\"TrainingInformation\\\", Association[Rule[\\\"PanelCell\\\", \
CellObject[201681]], Rule[\\\"TrainingFunction\\\", Classify], \
Rule[\\\"EMIterations\\\", Missing[\\\"KeyAbsent\\\", \\\"EMIterations\\\"]], \
Rule[\\\"ProcessorEntropyShift\\\", 0], Rule[\\\"PreprocessingTime\\\", \
0.1200265`6.530822135653541], Rule[\\\"LossName\\\", \
\\\"MeanCrossEntropy\\\"], Rule[\\\"BestModelInformation\\\", \
RawBoxes[RowBox[List[\\\"Dataset\\\", RowBox[List[\\\"[\\\", RowBox[List[\\\"\
\\\\[LeftSkeleton]\\\", \\\"14\\\", \\\"\\\\[RightSkeleton]\\\"]], \
\\\"]\\\"]]]]]], Rule[\\\"Configurations\\\", \
RawBoxes[RowBox[List[\\\"Dataset\\\", RowBox[List[\\\"[\\\", RowBox[List[\\\"\
\\\\[LeftSkeleton]\\\", \\\"10\\\", \\\"\\\\[RightSkeleton]\\\"]], \
\\\"]\\\"]]]]]], Rule[\\\"MaxTrainingSize\\\", 137], \
Rule[\\\"PreprocessorEvaluationTime\\\", 4.6485139580686`3.*^-6], \
Rule[\\\"PreprocessorMemory\\\", 43368], Rule[\\\"InputDimension\\\", 1], \
Rule[\\\"OutputDimension\\\", 1], Rule[\\\"BaselineLogProbability\\\", \
-1.0717287302022056`], Rule[\\\"VariableBudget\\\", True], \
Rule[\\\"CheckpointingInfo\\\", Association[Rule[\\\"Checkpointing\\\", \
False]]], Rule[\\\"UserStop\\\", False], Rule[\\\"NaturalStop\\\", True], \
Rule[\\\"AbortStop\\\", False], Rule[\\\"LastReportingTime\\\", \
3.7710698432335728`17.32903956512167*^9], Rule[\\\"RoundPartitioning\\\", \
RawBoxes[RowBox[List[\\\"Dataset\\\", RowBox[List[\\\"[\\\", RowBox[List[\\\"\
\\\\[LeftSkeleton]\\\", \\\"2\\\", \\\"\\\\[RightSkeleton]\\\"]], \
\\\"]\\\"]]]]]]]], Rule[\\\"Log\\\", Association[Rule[\\\"Example\\\", \
MachineLearning`MLDataset[Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[\\\"For the function \
W(x)=ln(1+\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(4\\\\)]\\\\)) and \
the point x=1, find the secants at point Q and the tangenet line\\\"]], Rule[\
\\\"ID\\\", 4654099653526711133]]]], Association[Rule[\\\"ExampleNumber\\\", \
1], Rule[\\\"ExampleWeights\\\", 1], Rule[\\\"LogDensityRatios\\\", 0], Rule[\
\\\"RawExample\\\", False]]]], Rule[\\\"TrainingTime\\\", \
1.1817953044690073`], Rule[\\\"MaxTrainingMemory\\\", 1446536], \
Rule[\\\"DataMemory\\\", 14552], Rule[\\\"FunctionMemory\\\", 230504], \
Rule[\\\"LanguageVersion\\\", List[12.`, 0]], Rule[\\\"Date\\\", \
DateObject[List[2019, 7, 2, 15, 24, 3.397786`8.283771003554588], \
\\\"Instant\\\", \\\"Gregorian\\\", -4.`]], Rule[\\\"ProcessorCount\\\", 2], \
Rule[\\\"ProcessorType\\\", \\\"x86-64\\\"], Rule[\\\"OperatingSystem\\\", \\\
\"Windows\\\"], Rule[\\\"SystemWordLength\\\", 64], Rule[\\\"Evaluations\\\", \
List[]]]]]], Rule[Selectable, False], Rule[Editable, False], \
Rule[SelectWithContents, True]]\\) should be a rule, a list of rules, or an \
association.\"",2,255,67,15900704727939038710,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.7710862057331266`*^9, {3.7710863743998404`*^9, 3.7710863783357706`*^9}, 
   3.7710887341244173`*^9},
 CellLabel->
  "During evaluation of \
In[227]:=",ExpressionUUID->"f292ed84-5f1a-4523-8b56-e4765be64c1e"],

Cell[BoxData[
 TemplateBox[{
  "Classify","bdfmt",
   "\"Argument \
\\!\\(\\*InterpretationBox[RowBox[{TagBox[\\\"ClassifierFunction\\\", \
\\\"SummaryHead\\\"], \\\"[\\\", DynamicModuleBox[{Typeset`open$$ = False, \
Set[Typeset`embedState$$, \\\"Ready\\\"]}, \
TemplateBox[List[PaneSelectorBox[List[Rule[False, \
GridBox[List[List[PaneBox[ButtonBox[DynamicBox[FEPrivate`FrontEndResource[\\\"\
FEBitmaps\\\", \\\"SquarePlusIconMedium\\\"]], RuleDelayed[ButtonFunction, \
Set[Typeset`open$$, True]], Rule[Appearance, None], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], Rule[Alignment, List[Center, \
Center]], Rule[ImageSize, Dynamic[List[Automatic, Times[3.5`, CurrentValue[\\\
\"FontCapHeight\\\"], Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
GraphicsBox[List[List[PointSize[0.13`], GrayLevel[0.45`], \
PointBox[List[List[0.9821769431797024`, -0.440194219686987`], \
List[1.1339776261519132`, 0.8056918676854272`], List[0.5279892326667741`, \
0.6574306661126254`], List[0.022147046479890797`, 1.4937877187998898`]]], \
GrayLevel[0.7`], PointBox[List[List[-0.9815166384819979`, \
0.15045697525228735`], List[-0.5923526886966953`, -0.33441771553094035`], \
List[-0.005656646679640442`, -1.462421365651345`], List[-1.0734370436522753`, \
-1.3729645043477454`]]]], List[GrayLevel[0.55`], AbsoluteThickness[1.5`], \
LineBox[List[List[-1.`, 1.5`], List[1, -1.6`]]]]], List[Rule[Axes, \
List[False, False]], Rule[AxesLabel, List[None, None]], Rule[AxesOrigin, \
List[0, 0]], Rule[BaseStyle, List[Rule[FontFamily, \\\"Arial\\\"], \
AbsoluteThickness[1.5`]]], Rule[DisplayFunction, Identity], Rule[Frame, \
List[List[True, True], List[True, True]]], Rule[FrameLabel, List[List[None, \
None], List[None, None]]], Rule[FrameStyle, Directive[Thickness[Tiny], \
GrayLevel[0.7`]]], Rule[FrameTicks, List[List[None, None], List[None, \
None]]], Rule[GridLines, List[None, None]], Rule[LabelStyle, \
List[Rule[FontFamily, \\\"Arial\\\"]]], Rule[Method, \
List[Rule[\\\"ScalingFunctions\\\", None]]], Rule[PlotRange, List[List[-1.`, \
1], List[-1.3`, 1.1`]]], Rule[PlotRangeClipping, True], \
Rule[PlotRangePadding, List[List[0.7`, 0.7`], List[0.7`, 0.7`]]], Rule[Ticks, \
List[None, None]]], Rule[Axes, False], Rule[AspectRatio, 1], Rule[ImageSize, \
Dynamic[List[Automatic, Times[3.5`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]], Rule[Frame, True], \
Rule[FrameTicks, None], Rule[FrameStyle, Directive[Opacity[0.5`], \
Thickness[Tiny], RGBColor[0.368417`, 0.506779`, 0.709798`]]], \
Rule[Background, GrayLevel[0.94`]]], \
GridBox[List[List[RowBox[List[TagBox[\\\"\\\\\\\"Input type: \\\\\\\"\\\", \\\
\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\\\
\"Nominal\\\\\\\"\\\", \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Classes: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[TemplateBox[List[\\\",\\\", \\\"\\\\\\\",\\\\\\\"\\\", \
\\\"\\\\\\\"algebra 1\\\\\\\"\\\", \\\"\\\\\\\"algebra 2\\\\\\\"\\\", \
\\\"\\\\\\\"calc\\\\\\\"\\\"], \\\"RowWithSeparators\\\"], \
\\\"SummaryItem\\\"]]]]], Rule[GridBoxAlignment, List[Rule[\\\"Columns\\\", \
List[List[Left]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[AutoDelete, False], Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", \
List[List[Automatic]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[GridBoxSpacings, List[Rule[\\\"Columns\\\", List[List[2]]], \
Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[BaseStyle, \
List[Rule[ShowStringCharacters, False], Rule[NumberMarks, False], \
Rule[PrintPrecision, 3], Rule[ShowSyntaxStyles, False]]]]]], \
Rule[GridBoxAlignment, List[Rule[\\\"Rows\\\", List[List[Top]]]]], \
Rule[AutoDelete, False], Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", \
List[List[Automatic]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[BaselinePosition, List[1, 1]]]], Rule[True, \
GridBox[List[List[PaneBox[ButtonBox[DynamicBox[FEPrivate`FrontEndResource[\\\"\
FEBitmaps\\\", \\\"SquareMinusIconMedium\\\"]], RuleDelayed[ButtonFunction, \
Set[Typeset`open$$, False]], Rule[Appearance, None], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], Rule[Alignment, List[Center, \
Center]], Rule[ImageSize, Dynamic[List[Automatic, Times[3.5`, CurrentValue[\\\
\"FontCapHeight\\\"], Power[AbsoluteCurrentValue[Magnification], -1]]]]]], \
GraphicsBox[List[List[PointSize[0.13`], GrayLevel[0.45`], \
PointBox[List[List[0.9821769431797024`, -0.440194219686987`], \
List[1.1339776261519132`, 0.8056918676854272`], List[0.5279892326667741`, \
0.6574306661126254`], List[0.022147046479890797`, 1.4937877187998898`]]], \
GrayLevel[0.7`], PointBox[List[List[-0.9815166384819979`, \
0.15045697525228735`], List[-0.5923526886966953`, -0.33441771553094035`], \
List[-0.005656646679640442`, -1.462421365651345`], List[-1.0734370436522753`, \
-1.3729645043477454`]]]], List[GrayLevel[0.55`], AbsoluteThickness[1.5`], \
LineBox[List[List[-1.`, 1.5`], List[1, -1.6`]]]]], List[Rule[Axes, \
List[False, False]], Rule[AxesLabel, List[None, None]], Rule[AxesOrigin, \
List[0, 0]], Rule[BaseStyle, List[Rule[FontFamily, \\\"Arial\\\"], \
AbsoluteThickness[1.5`]]], Rule[DisplayFunction, Identity], Rule[Frame, \
List[List[True, True], List[True, True]]], Rule[FrameLabel, List[List[None, \
None], List[None, None]]], Rule[FrameStyle, Directive[Thickness[Tiny], \
GrayLevel[0.7`]]], Rule[FrameTicks, List[List[None, None], List[None, \
None]]], Rule[GridLines, List[None, None]], Rule[LabelStyle, \
List[Rule[FontFamily, \\\"Arial\\\"]]], Rule[Method, \
List[Rule[\\\"ScalingFunctions\\\", None]]], Rule[PlotRange, List[List[-1.`, \
1], List[-1.3`, 1.1`]]], Rule[PlotRangeClipping, True], \
Rule[PlotRangePadding, List[List[0.7`, 0.7`], List[0.7`, 0.7`]]], Rule[Ticks, \
List[None, None]]], Rule[Axes, False], Rule[AspectRatio, 1], Rule[ImageSize, \
Dynamic[List[Automatic, Times[3.5`, CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]], Rule[Frame, True], \
Rule[FrameTicks, None], Rule[FrameStyle, Directive[Opacity[0.5`], \
Thickness[Tiny], RGBColor[0.368417`, 0.506779`, 0.709798`]]], \
Rule[Background, GrayLevel[0.94`]]], \
GridBox[List[List[RowBox[List[TagBox[\\\"\\\\\\\"Input type: \\\\\\\"\\\", \\\
\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\"\\\\\\\
\"Nominal\\\\\\\"\\\", \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Classes: \\\\\\\"\\\", \
\\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[TemplateBox[List[\\\",\\\", \\\"\\\\\\\",\\\\\\\"\\\", \
\\\"\\\\\\\"algebra 1\\\\\\\"\\\", \\\"\\\\\\\"algebra 2\\\\\\\"\\\", \
\\\"\\\\\\\"calc\\\\\\\"\\\"], \\\"RowWithSeparators\\\"], \
\\\"SummaryItem\\\"]]]], List[RowBox[List[TagBox[\\\"\\\\\\\"Method: \\\\\\\"\
\\\", \\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", TagBox[\\\
\"\\\\\\\"NearestNeighbors\\\\\\\"\\\", \\\"SummaryItem\\\"]]]], \
List[RowBox[List[TagBox[\\\"\\\\\\\"Number of training examples: \
\\\\\\\"\\\", \\\"SummaryItemAnnotation\\\"], \\\"\\\\[InvisibleSpace]\\\", \
TagBox[\\\"137\\\", \\\"SummaryItem\\\"]]]]], Rule[GridBoxAlignment, \
List[Rule[\\\"Columns\\\", List[List[Left]]], Rule[\\\"Rows\\\", \
List[List[Automatic]]]]], Rule[AutoDelete, False], Rule[GridBoxItemSize, \
List[Rule[\\\"Columns\\\", List[List[Automatic]]], Rule[\\\"Rows\\\", \
List[List[Automatic]]]]], Rule[GridBoxSpacings, List[Rule[\\\"Columns\\\", \
List[List[2]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], Rule[BaseStyle, \
List[Rule[ShowStringCharacters, False], Rule[NumberMarks, False], \
Rule[PrintPrecision, 3], Rule[ShowSyntaxStyles, False]]]]]], \
Rule[GridBoxAlignment, List[Rule[\\\"Rows\\\", List[List[Top]]]]], \
Rule[AutoDelete, False], Rule[GridBoxItemSize, List[Rule[\\\"Columns\\\", \
List[List[Automatic]]], Rule[\\\"Rows\\\", List[List[Automatic]]]]], \
Rule[BaselinePosition, List[1, 1]]]]], Dynamic[Typeset`open$$], \
Rule[ImageSize, Automatic]]], \\\"SummaryPanel\\\"], \
RuleDelayed[DynamicModuleValues, List[]]], \\\"]\\\"}], \
ClassifierFunction[Association[Rule[\\\"ExampleNumber\\\", 137], \
Rule[\\\"ClassNumber\\\", 3], Rule[\\\"Input\\\", \
Association[Rule[\\\"Preprocessor\\\", \
MachineLearning`MLProcessor[\\\"ToMLDataset\\\", Association[Rule[\\\"Input\\\
\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"Nominal\\\
\"]]]]], Rule[\\\"Output\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Preprocessor\\\", MachineLearning`MLProcessor[\\\"Sequence\\\", \
Association[Rule[\\\"Processors\\\", \
List[MachineLearning`MLProcessor[\\\"List\\\"], \
MachineLearning`MLProcessor[\\\"WrapMLDataset\\\", \
Association[Rule[\\\"FeatureTypes\\\", List[\\\"Nominal\\\"]], \
Rule[\\\"FeatureKeys\\\", List[\\\"f1\\\"]], Rule[\\\"FeatureWeights\\\", \
Automatic], Rule[\\\"ExampleWeights\\\", Automatic], Rule[\\\"RawExample\\\", \
Missing[\\\"KeyAbsent\\\", \\\"RawExample\\\"]]]]]]]]], \
Rule[\\\"ScalarFeature\\\", True], Rule[\\\"Invertibility\\\", \
\\\"Perfect\\\"], Rule[\\\"Missing\\\", \\\"Allowed\\\"]]]], \
Rule[\\\"Processor\\\", MachineLearning`MLProcessor[\\\"Sequence\\\", \
Association[Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Output\\\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\
\", \\\"NominalVector\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Processors\\\", List[MachineLearning`MLProcessor[\\\"ToVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"Input\\\", Association[Rule[\
\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], \
Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\
\\\"], Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Version\\\", List[12.`, 0]], \
Rule[\\\"ID\\\", 1537627216228573037]]], \
MachineLearning`MLProcessor[\\\"ImputeMissing\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Imputed\\\"], Rule[\\\"Input\\\", Association[Rule[\
\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\\\"], \
Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"VectorLength\\\", 1], Rule[\\\"Output\\\
\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \
\\\"NominalVector\\\"], Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Type\\\", \
\\\"NominalVector\\\"], Rule[\\\"Version\\\", List[12.`, 0]], \
Rule[\\\"ID\\\", 4026204838636604962]]], \
MachineLearning`MLProcessor[\\\"IntegerEncodeNominalVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"Input\\\", Association[Rule[\
\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\\\"], \
Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Index\\\", \
List[Association[Rule[\\\"2+3\\\", 1], Rule[\\\"2/3 x+3 =15\\\", 2], \
Rule[\\\"-3(\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \
\\\\(2\\\\)]\\\\)-2x+7)\\\", 3], Rule[\\\"5(2x+4)\\\", 4], \
Rule[\\\"-(5\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(4\\\\)]\\\\)-8)\\\
\", 5], Rule[\\\"8x-2=22\\\", 6], Rule[\\\"Add 1/2 and 1/3\\\", 7], \
Rule[\\\"A salesman is paid a monthly salary of $2,300 plus 7% commission on \
his monthly sales.\\\\nDetermine the amount of sales required for his total \
monthly income to be $3,000.\\\", 8], Rule[\\\"A salesman tells you that the \
$140 earrings are already marked 20% off. What\\\\nwas the original \
price?\\\", 9], Rule[\\\"A $750 watch is on sale for 15% off. Find the sale \
price.\\\", 10], Rule[\\\"Combine 2 \
\\\\!\\\\(\\\\*SubscriptBox[\\\\(log\\\\), \\\\(4\\\\)]\\\\)x +5 \\\\!\\\\(\\\
\\*SubscriptBox[\\\\(log\\\\), \\\\(4\\\\)]\\\\)y - 1/2 \
\\\\!\\\\(\\\\*SubscriptBox[\\\\(log\\\\), \\\\(4\\\\)]\\\\)x\\\", 11], Rule[\
\\\"Combine like terms of 3a-6a+10a-a\\\", 12], Rule[\\\"Combine like terms \
of 3n-5\\\\!\\\\(\\\\*SuperscriptBox[\\\\(n\\\\), \\\\(\\\\(2\\\\)\\\\(\\\\\\\
\\ \\\\)\\\\)]\\\\)+6n-10+2\\\\!\\\\(\\\\*SuperscriptBox[\\\\(n\\\\), \
\\\\(2\\\\)]\\\\)\\\", 13], Rule[\\\"Combine the like terms of 5x-10y+6z-3x\\\
\", 14], Rule[\\\"Compute  the difrence quotient for the given function\\\", \
15], Rule[\\\"Determine f (x) given that f'(x) = 6x^8 \\\\[Minus] 20x^4 + x^2 \
+ 9\\\", 16], Rule[\\\"Determine \
ln(\\\\!\\\\(\\\\*SuperscriptBox[\\\\(e\\\\), \\\\(4\\\\)]\\\\))\\\", 17], \
Rule[\\\"Evaluate 2\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \
\\\\(2\\\\)]\\\\)-9 for x=-3\\\", 18], Rule[\\\"Evaluate \
a-\\\\!\\\\(\\\\*SuperscriptBox[\\\\(b\\\\), \\\\(2\\\\)]\\\\) when a=4 and \
b=2\\\", 19], Rule[\\\"Evaluate \
f(x)=3-5x-2\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(2\\\\)]\\\\) for \
the below values: f(0), f(x+h), f(6-t)\\\", 20], Rule[\\\"Evaluate \\\\!\\\\(\
\\\\*SuperscriptBox[\\\\(a\\\\), \\\\(2\\\\)]\\\\)+b when a=7 and b=1\\\", \
21], Rule[\\\"Evaluate \\\\!\\\\(\\\\*SuperscriptBox[\\\\(a\\\\), \
\\\\(2\\\\)]\\\\)-\\\\!\\\\(\\\\*SuperscriptBox[\\\\(b\\\\), \
\\\\(2\\\\)]\\\\) when a=5 and b=3\\\", 22], Rule[\\\"Evaluate the derivative\
\\\", 23], Rule[\\\"Evaluate \\\\[Integral]z^6 + 4z^4 \\\\[Minus] z^2 dz\\\", \
24], Rule[\\\"Expand (a+b\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \
\\\\(3\\\\)]\\\\)\\\", 25], Rule[\\\"express 12 1/3 as an improper fraction\\\
\", 26], Rule[\\\"express 3 2/7 as an improper fraction\\\", 27], \
Rule[\\\"Express 42/5 as a mixed number\\\", 28], Rule[\\\"Express 53/9 as a \
mixed number\\\", 29], Rule[\\\"Find a perpedicular line of y=3x+2 with y \
intercept of the origin\\\", 30], Rule[\\\"Find extrema of \
f(x)=12+6\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(2\\\\)]\\\\)-\\\\!\\\
\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(3\\\\)]\\\\)\\\", 31], Rule[\\\"Find \
extrema of g(w)=tan (w)sec(w)\\\", 32], Rule[\\\"Find inverse of W (x) =  (9 \
\\\\[Minus]11x\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \
\\\\(1/5\\\\)]\\\\)\\\", 33], Rule[\\\"Find the area under the curve of |x| \
from -1 to 1\\\", 34], Rule[\\\"Find the Derivative\\\", 35], Rule[\\\"Find \
the derivative of 2 cos(x)+arccos(x)\\\", 36], Rule[\\\"Find the derivative \
of f(x)=2\\\\!\\\\(\\\\*SuperscriptBox[\\\\(e\\\\), \\\\(x\\\\)]\\\\)-\\\\!\\\
\\(\\\\*SuperscriptBox[\\\\(8\\\\), \\\\(x\\\\)]\\\\)\\\", 37], Rule[\\\"Find \
the derivative of g(t)=4 \\\\!\\\\(\\\\*SubscriptBox[\\\\(log\\\\), \
\\\\(3\\\\)]\\\\)(t)-ln(t)\\\", 38], Rule[\\\"Find the derivative of \
\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \
\\\\(2\\\\)]\\\\)/\\\\!\\\\(\\\\*SuperscriptBox[\\\\(y\\\\), \
\\\\(3\\\\)]\\\\)=1\\\", 39], Rule[\\\"Find the deriviative of f (x) = \
2cos(x) \\\\[Minus] 6sec(x) + 3\\\", 40], Rule[\\\"Find the deriviative of g \
(z) =10 tan (z) \\\\[Minus] 2cot (z)\\\", 41], Rule[\\\"Find the deriviative \
of R(t)=(t+ tan(t))/(1+csc(t))\\\", 42], Rule[\\\"Find the deriviative of  \
tan (w)sec(w)\\\", 43], Rule[\\\"Find the domain of \
(\\\\!\\\\(\\\\*SuperscriptBox[\\\\(w\\\\), \\\\(3\\\\)]\\\\)-3w+1)/(12 \
w-7)\\\", 44], Rule[\\\"Find the equation of best fit for the below listed \
data\\\", 45], Rule[\\\"Find the exact value of cos(5 \\\\[Pi]/6) without \
using a calculator\\\", 46], Rule[\\\"Find the exact value of sin(-4 \
\\\\[Pi]/3) without using a calculator\\\", 47], Rule[\\\"Find the integral\\\
\", 48], Rule[\\\"Find the inverse of f (x) = 6x +15\\\", 49], Rule[\\\"Find \
the MacLauren Expanision of z(n)= \
(z+1\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \\\\(1/2\\\\)]\\\\)/(z+4)\\\", \
50], Rule[\\\"find the taylor expanision of g(w)=tan (w)sec(w) at \
w=\\\\[Pi]/4\\\", 51], Rule[\\\"Find \\\\[Integral]12 + csc(\\\\[Theta] ) \
[sin (\\\\[Theta] ) + csc(\\\\[Theta] )] d\\\\[Theta]\\\", 52], Rule[\\\"Find \
\\\\[Integral] 2cos (w) \\\\[Minus] sec(w) tan (w)dw\\\", 53], Rule[\\\"Find \
\\\\[Integral]6\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(5\\\\)]\\\\) \
dx \\\\[Minus]18x + 7\\\", 54], Rule[\\\"Find \
\\\\[Integral]6\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(5\\\\)]\\\\) \
\\\\[Minus]18\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(2\\\\)]\\\\) + 7 \
dx\\\", 55], Rule[\\\"For the function \
(2-(\\\\!\\\\(\\\\*SuperscriptBox[\\\\(t\\\\), \
\\\\(2\\\\)]\\\\)+3\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \
\\\\(1/2\\\\)]\\\\))/(t+1), L'Hoptial's rule to find the limit as x \
approaches -1\\\", 56], Rule[\\\"For the function \
f(x)=(8-\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \
\\\\(2\\\\)]\\\\))/(\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(2\\\\)]\\\
\\)-4), find the values at the below listed points and th limit as x \
aproaches 2\\\", 57], Rule[\\\"For the function \
f(x)=(8-\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \
\\\\(2\\\\)]\\\\))/(\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(2\\\\)]\\\
\\)-4), use L'Hoptial's rule to find the limit as x aproaches 2\\\", 58], \
Rule[\\\"For the function f(y)= sin(y)/y find the value at the below listed \
points and the limit as y approaches 0\\\", 59], Rule[\\\"For the function \
W(x)=ln(1+\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(4\\\\)]\\\\)) and \
the point x=1, find the secants at point Q and the tangenet line\\\", 60], \
Rule[\\\"Graph the inequality y<3x+4\\\", 61], Rule[\\\"Graph the parabola \
give by \\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(2\\\\)]\\\\)+3x+2. \
Find the zeros, vertex and intercept\\\", 62], Rule[\\\"How many miutes are \
in a day?\\\", 63], Rule[\\\"Identify the property used in the equations \
below as distributive, inverse or associative\\\", 64], Rule[\\\"Is x=-8 a \
solution to 1/2x+6>3?\\\", 65], Rule[\\\"Multiply 24/3 and 27/8\\\", 66], \
Rule[\\\"Multiply 8 and 3/24\\\", 67], Rule[\\\"Plot 1.25, 2/3 and 2 on a \
number line\\\", 68], Rule[\\\"Simplify 10-(7+1)\\\", 69], Rule[\\\"Simplify \
10-7+1\\\", 70], Rule[\\\"Simplify (15-3)/(1+5)\\\", 71], Rule[\\\"Simplify \
24/(4-2\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \\\\(3\\\\)]\\\\)\\\", 72], \
Rule[\\\"Simplify (2-5\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \\\\(2\\\\)]\
\\\\)\\\", 73], Rule[\\\"Simplify \
2-\\\\!\\\\(\\\\*SuperscriptBox[\\\\(5\\\\), \\\\(2\\\\)]\\\\)\\\", 74], \
Rule[\\\"Simplify 4+5(1+12/6\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \\\\(2\
\\\\)]\\\\)\\\", 75], Rule[\\\"Sketch the graph of \
f(x)=\\\\!\\\\(\\\\*SuperscriptBox[\\\\(3\\\\), \\\\(1 + 2  x\\\\)]\\\\)\\\", \
76], Rule[\\\"Sketch the graph of \
h(x)=8+3\\\\!\\\\(\\\\*SuperscriptBox[\\\\(e\\\\), \\\\(2  t - 4\\\\)]\\\\)\\\
\", 77], Rule[\\\"Solve 3sec(4 \\\\[Minus] 9z) \\\\[Minus] 24 = 0\\\", 78], \
Rule[\\\"Solve 3(x-5)+4=10\\\", 79], Rule[\\\"Solve 3\\\\[Minus]14sin (12t + \
7) =13\\\", 80], Rule[\\\"Solve  4sin (3t ) = 2\\\", 81], Rule[\\\"Solve 4sin \
(3t ) = 2 in [0, 4\\\\[Pi]/3], 2cos(x/3) \
+\\\\!\\\\(\\\\*SuperscriptBox[\\\\(2\\\\), \\\\(0.5\\\\)]\\\\) = 0 in \
[\\\\[Minus]7\\\\[Pi] ,7\\\\[Pi] }\\\", 82], Rule[\\\"Solve 4x-9=11\\\", 83], \
Rule[\\\"Solve 4y sec(7 y) = \\\\[Minus]21y\\\", 84], Rule[\\\"Solve and \
graph the solution to 2x-3<7\\\", 85], Rule[\\\"Solve and graph the solution \
to |3x-1|\\\\[GreaterEqual]10\\\", 86], Rule[\\\"Tommy\\\\[CloseCurlyQuote]s \
grandma gave him a $50 gift card to Toys R Us for his birthday.\\\\nSales tax \
is currently 9%. Determine the price of the most expensive toy Tommy can buy \
with\\\\nthe $50 gift card.\\\", 87], Rule[\\\"Use the chain rule to find the \
derivative of Q(t)=(3\\\\!\\\\(\\\\*SuperscriptBox[\\\\(t\\\\), \
\\\\(3\\\\)]\\\\)-4\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \
\\\\(1/2\\\\)]\\\\)\\\", 88], Rule[\\\"Use the definition of the derivative \
to find the derivative of f(x)=6\\\", 89], Rule[\\\"Use the definition of the \
derivative to find the derivative of V (t ) = 3\\\\[Minus]14t\\\", 90], Rule[\
\\\"Use the definition of the derivative to find the derivative of z(n)= \
(n+1)/(n+4)\\\", 91], Rule[\\\"Use the law of sines to find the missing side \
of this triangle\\\", 92], Rule[\\\"Use the quotient rule to find the \
derivative of z(n)= (z+1\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \\\\(1/2\\\
\\)]\\\\)/(z+4)\\\", 93], Rule[\\\"What are the discontiuities in the \
function y=(x+2)/(x+3x+2). Which are fundamental and which are \
removable?\\\", 94], Rule[\\\"What are the domain and range of \
\\\\!\\\\(\\\\*SuperscriptBox[\\\\(e\\\\), \\\\(x\\\\)]\\\\) and ln(x)\\\", \
95], Rule[\\\"What are the domain and range of the trigonometric functions?\\\
\", 96], Rule[\\\"What is |1|\\\", 97], Rule[\\\"What is 10% of 100\\\", 98], \
Rule[\\\"What is 1+1\\\", 99], Rule[\\\"What is  1/2 + 1/3\\\", 100], Rule[\\\
\"What is 12 1/3 as an improper fraction\\\", 101], Rule[\\\"What is 2+2\\\", \
102], Rule[\\\"What is 2+3\\\", 103], Rule[\\\"What is  24/3 * 27/8\\\", \
104], Rule[\\\"What is |-30|\\\", 105], Rule[\\\"What is 3/18 in simplest \
form\\\", 106], Rule[\\\"What is 3-(-2)?\\\", 107], Rule[\\\"What is \
-3+4\\\", 108], Rule[\\\"What is 42/54 in simplest form\\\", 109], \
Rule[\\\"What is 42/5 as a mixed number\\\", 110], Rule[\\\"What is 4% of 16?\
\\\", 111], Rule[\\\"What is 53/9 as a mixed number\\\", 112], Rule[\\\"What \
is  8 * 3/24\\\", 113], Rule[\\\"What is (a+b\\\\!\\\\(\\\\*SuperscriptBox[\\\
\\()\\\\), \\\\(n\\\\)]\\\\) (Hint: What theorem is this?)\\\", 114], Rule[\\\
\"What is ln(1)?\\\", 115], Rule[\\\"What is sin(60)\\\", 116], Rule[\\\"What \
is tan(30)\\\", 117], Rule[\\\"What is the absolute value of -1?\\\", 118], \
Rule[\\\"What is the area under the curve \
\\\\!\\\\(\\\\*SuperscriptBox[\\\\(sin\\\\), \\\\(2\\\\)]\\\\)x from 0 to \
\\\\[Pi]/2\\\", 119], Rule[\\\"What is the Deriviative\\\", 120], \
Rule[\\\"What is the integral of sin(2x)?\\\", 121], Rule[\\\"What is the \
integral of x dx\\\", 122], Rule[\\\"What is the largest value for the \
missing side of this triangle\\\", 123], Rule[\\\"What is the most specific \
subset of the real numbers that -7 is a part of?\\\", 124], Rule[\\\"What is \
the next term in the series \\\", 125], Rule[\\\"What is the sum from 1 to 5 \
of a=10n+3\\\", 126], Rule[\\\"what is the sum of the geometric series from 1 \
to infinity of 9(1/10\\\\!\\\\(\\\\*SuperscriptBox[\\\\()\\\\), \
\\\\(n\\\\)]\\\\)?\\\", 127], Rule[\\\"What is \
\\\\[Integral]6\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(5\\\\)]\\\\) \
\\\\[Minus]18\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(2\\\\)]\\\\) + 7 \
dx\\\", 128], Rule[\\\"Wrie the standard form of y=3/2 x+2\\\", 129], Rule[\\\
\"Write 30 degrees in radians\\\", 130], Rule[\\\"write 3/18 in simplest form\
\\\", 131], Rule[Times[\\\"What is 3 2/7 as an improper fraction\\\", \
\\\"write 42/54 in simplest form\\\"], 132], Rule[\\\"Write slope intercept \
form for a slope of 2 and y-intercept of 12\\\", 133], Rule[\\\"Write \
\\\\[Pi]/4 in degrees\\\", 134], Rule[\\\"-x-2=12\\\", 135], Rule[Null, \
136]]]], Rule[\\\"MissingCode\\\", 0], Rule[\\\"Version\\\", List[12.`, 0]], \
Rule[\\\"ID\\\", 8874348951581137712], Rule[\\\"Output\\\", Association[Rule[\
\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\\\"], \
Rule[\\\"Weight\\\", 1]]]]]]]]], Rule[\\\"Invertibility\\\", \
\\\"Perfect\\\"], Rule[\\\"Missing\\\", \\\"Imputed\\\"]]]]]], \
Rule[\\\"Output\\\", Association[Rule[\\\"Preprocessor\\\", \
MachineLearning`MLProcessor[\\\"ToMLDataset\\\", Association[Rule[\\\"Input\\\
\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"Nominal\\\
\"]]]]], Rule[\\\"Output\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Preprocessor\\\", MachineLearning`MLProcessor[\\\"Sequence\\\", \
Association[Rule[\\\"Processors\\\", \
List[MachineLearning`MLProcessor[\\\"List\\\"], \
MachineLearning`MLProcessor[\\\"WrapMLDataset\\\", \
Association[Rule[\\\"FeatureTypes\\\", List[\\\"Nominal\\\"]], \
Rule[\\\"FeatureKeys\\\", List[\\\"f1\\\"]], Rule[\\\"FeatureWeights\\\", \
Automatic], Rule[\\\"ExampleWeights\\\", Automatic], Rule[\\\"RawExample\\\", \
Missing[\\\"KeyAbsent\\\", \\\"RawExample\\\"]]]]]]]]], \
Rule[\\\"ScalarFeature\\\", True], Rule[\\\"Invertibility\\\", \
\\\"Perfect\\\"], Rule[\\\"Missing\\\", \\\"Allowed\\\"]]]], \
Rule[\\\"Processor\\\", MachineLearning`MLProcessor[\\\"Sequence\\\", \
Association[Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1]]]]], \
Rule[\\\"Output\\\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\
\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Processors\\\", \
List[MachineLearning`MLProcessor[\\\"ToVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"Input\\\", Association[Rule[\
\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], \
Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\
\\\"], Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Version\\\", List[12.`, 0]], \
Rule[\\\"ID\\\", 7740907413418953510]]], \
MachineLearning`MLProcessor[\\\"IntegerEncodeNominalVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"Input\\\", Association[Rule[\
\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\\\"], \
Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Index\\\", \
List[Association[Rule[\\\"algebra 1\\\", 1], Rule[\\\"algebra 2\\\", 2], \
Rule[\\\"calc\\\", 3]]]], Rule[\\\"MissingCode\\\", 0], Rule[\\\"Version\\\", \
List[12.`, 0]], Rule[\\\"ID\\\", 3923291764372626615], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\
\\\"], Rule[\\\"Weight\\\", 1]]]]]]], \
MachineLearning`MLProcessor[\\\"FromVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"], Rule[\\\"Input\\\", Association[Rule[\
\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\\\"], \
Rule[\\\"Weight\\\", 1], Rule[\\\"SetSize\\\", List[3]]]]]], \
Rule[\\\"Output\\\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\
\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1]]]]], Rule[\\\"Version\\\", \
List[12.`, 0]], Rule[\\\"ID\\\", 689381485439722164]]], \
MachineLearning`MLProcessor[\\\"FirstValues\\\", \
Association[Rule[\\\"Info\\\", Association[Rule[\\\"Type\\\", \
\\\"Nominal\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"SetSize\\\", 3]]], \
Rule[\\\"Key\\\", \\\"f1\\\"], Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"]]]]], Rule[\\\"Invertibility\\\", \
\\\"Perfect\\\"], Rule[\\\"Missing\\\", \\\"Allowed\\\"]]]], \
Rule[\\\"ProbabilityPostprocessor\\\", Identity], Rule[\\\"Name\\\", \
\\\"class\\\"], Rule[\\\"Marginal\\\", Association[Rule[\\\"algebra 1\\\", \
0.37142857142857144`], Rule[\\\"algebra 2\\\", 0.22857142857142856`], Rule[\\\
\"calc\\\", 0.39999999999999997`]]]]], Rule[\\\"Prior\\\", Automatic], \
Rule[\\\"Utility\\\", SparseArray[Automatic, List[3, 4], 0.`, List[1, \
List[List[0, 1, 2, 3], List[List[2], List[3], List[4]]], List[1.`, 1.`, \
1.`]]]], Rule[\\\"Threshold\\\", 0], Rule[\\\"TieBreaker\\\", RandomChoice], \
Rule[\\\"PerformanceGoal\\\", Automatic], Rule[\\\"BatchProcessing\\\", \
Automatic], Rule[\\\"Model\\\", Association[Rule[\\\"NeighborsFunction\\\", \
MachineLearning`PackageScope`NeighborsFunction[\\\"Nearest\\\", \
NearestFunction[Hold[Nearest[Rule[List[List[0.20874287902662356`, \
0.05076760013054465`, 0.12299217336751644`, -0.7217178113767901`, \
-0.01950969285105098`, 0.15758229720049532`, -0.03452407136774974`, \
0.11166155823546944`, 0.18876632146856745`], List[-0.3594795130895579`, \
-0.16042385138793877`, 0.09963466370799849`, 0.5483324399248775`, \
-0.034378135355781936`, 0.009196829528893545`, 0.17572011803586657`, \
-0.3546858694223344`, 0.5273107984733745`], List[-0.5365576313720708`, \
0.01462031426383527`, -0.08051531640664132`, -0.31946909538319324`, \
-0.02894369615382801`, -0.6462972209561233`, 0.21362509803048088`, \
0.1864404763153632`, 0.7223601241934188`], List[0.11428169955115125`, \
0.2165675671799198`, -0.15099286041902274`, -0.23356450220118308`, \
-0.653306347595659`, -0.31269089816647233`, 0.4356209169626309`, \
-0.1037569526941192`, -0.1726383474985441`], List[0.09076148083722635`, \
-0.7724130124795144`, -0.3633984414607187`, 0.44055528880320455`, \
-0.6539328931879371`, -0.4185083086349062`, -0.12365704376200198`, \
0.09404430398690063`, 0.19271983785291286`], List[-0.4676081065897829`, \
0.30279068596913294`, -0.10701208671912901`, -0.4263098012177711`, \
0.23697574243009006`, 0.33755051732080593`, -0.05194023589766424`, \
0.03460633098407323`, -0.3514329810037291`], List[0.13170335014743753`, \
0.376657489075397`, 0.2920051731464742`, -0.4497051066967155`, \
0.1440874775399693`, 0.18625325035164533`, -0.16104804579834978`, \
0.4085984708289707`, 0.04328533320547977`], List[0.10614978292417514`, \
-0.13845376093685008`, 0.11688803121888576`, 0.3744064770466563`, \
-0.06057815674434259`, -0.0013536235535923085`, -0.43510388605203426`, \
0.29401704685689123`, 0.24493780288679798`], List[0.6993706445890546`, \
0.1115644916472831`, 0.17311607252650144`, -0.038341022327356616`, \
0.1306520765355172`, -0.17205235346446685`, -0.17840362356979186`, \
0.006835761686547726`, -0.21315255414120637`], List[-0.11228283862572064`, \
-0.11752194920493007`, -0.2401843105378093`, 0.2060291335668737`, \
0.4795961627587431`, 0.15290001489936247`, 0.05293575857540196`, \
-0.18960889539019632`, -0.18745396406105982`], List[0.28929444211581623`, \
-0.04139896184765097`, 0.4321836837109878`, 0.057571688157827386`, \
-0.7157332584916373`, -0.673392025831568`, 0.20624532623852898`, \
-0.07919576999377469`, -0.034575602943176444`], List[-0.14211389814024747`, \
0.5067736291271908`, -0.04075904961614285`, 0.11688810219608545`, \
-0.3625112173016552`, 0.35627977686819373`, 0.5460409897319862`, \
0.043691481870640356`, -0.22718230951995047`], List[0.2673442840755443`, \
0.49824021931002`, 0.22912496436118365`, -0.07707997678791205`, \
-0.08301340854219655`, -0.45659153489907117`, -0.1014002054342086`, \
0.268792403186081`, -0.09830225542247353`], List[0.1996367226301195`, \
0.17564098182668908`, -0.012801171952048298`, -0.7157202028829195`, \
0.20786069998156775`, 0.08308143352664293`, 0.08612406164217518`, \
0.0037716223529896563`, 0.6886686227462105`], List[0.008347260796583458`, \
-0.03087658403936844`, -0.40197202133273996`, 0.35966348865793`, \
-0.3954058614895362`, 0.715814251527444`, 0.024732690588725466`, \
-0.049388856886686726`, -0.30091962202154`], List[-0.08133418460850446`, \
0.30589212713541625`, -0.2225950134619789`, -0.5297467566362765`, \
-0.38232820804206263`, -0.1730999954173601`, 0.1395611216479457`, \
-0.09086670355775994`, -0.12034914322203075`], List[0.0786951912438882`, \
0.003796088031110102`, 0.2609178724988531`, -0.08581203127629053`, \
-0.2861974018971561`, 0.3895889052812407`, -0.4319916601403748`, \
-0.21363525669285197`, 0.23187084055161056`], List[0.280134251705132`, \
0.24035078840781643`, -0.3758218829699329`, 0.17220737689227084`, \
-0.0171507317251199`, 0.07818343679181021`, 0.35249044102768357`, \
0.19016030557667155`, -0.31985117289380405`], List[-0.22752452792716213`, \
0.029155537966807313`, -0.22030865425983226`, -0.09984461808020004`, \
-0.20492536651100907`, 0.036960527849913376`, 0.28563271601838114`, \
0.183220979967337`, -0.25819738406715487`], List[-0.3545227260045899`, \
0.4500489633030616`, -0.616829959556116`, 0.15135656197218672`, \
0.6445167267695278`, 0.40377009624390214`, 0.37973248435417895`, \
-0.4245961769794931`, 0.34834747458284226`], List[-0.04570269538665324`, \
0.2460061839813122`, 0.14165978440229876`, -0.12405227749400839`, \
0.5932468114242796`, 0.2279556393564271`, 0.29343050721194164`, \
0.0801505345631597`, 0.35186526577299104`], List[-0.09152228216323975`, \
0.31768719717084315`, -0.1488717878250302`, 0.09515446416495542`, \
0.3598480250292752`, 0.09621967727440374`, 0.34684468624004444`, \
0.2993518436246563`, 0.09623757694157219`], List[0.4495386678326473`, \
0.2989116002414778`, 0.1704847968719811`, -0.4519461768574132`, \
0.3830479301501389`, -0.032884480177115274`, -0.5535258771010826`, \
-0.15517593654589323`, -0.18686761017707723`], List[0.5137420607388886`, \
-0.05634970859018103`, -0.09681266038875096`, -0.12021083408010039`, \
0.33463864039756014`, -0.44865042865465604`, -0.4670738581379808`, \
0.022088254733766105`, 0.03985088886666773`], List[0.34363889601989145`, \
-0.3777912717113709`, 0.37584788448768136`, 0.2833635047245089`, \
-0.21780605760908914`, -0.03035958391081397`, -0.40291027298062876`, \
-0.013695143872673768`, -0.24009196743240757`], List[-0.06266126388771766`, \
-0.11711362154648372`, -0.11386633254788112`, 0.011423306452275054`, \
0.07906022194844414`, 0.037982944788481535`, -0.0923555533454689`, \
-0.44632127620348433`, 0.04067860051096198`], List[-0.2551207695865459`, \
-0.5559426709266213`, 0.22716814347115505`, 0.0026638976367955366`, \
-0.02899285704316629`, 0.33735945225049535`, -0.016860088872758108`, \
0.06785295315247933`, 0.12115114051102578`], List[-0.42491212908905396`, \
-0.02453360559490337`, 0.017421609395471098`, -0.38932050287872944`, \
-0.691552387755212`, 0.6158059459144742`, 0.7428083394653718`, \
-0.0760566146571162`, -0.0873273831993349`], List[0.46933994820429226`, \
0.3454480862743675`, 0.09093886677567012`, 0.9134630439487503`, \
-0.303706380148827`, 0.20491076518726314`, -0.17634721343237947`, \
0.04060965569226836`, 0.02143629282893743`], List[-0.08673553407781519`, \
-0.25038015212525894`, -0.2019957663530101`, 0.45501785415030793`, \
0.4028178510996319`, -0.5190522602723715`, -0.23195416934987112`, \
0.2120154489552414`, -0.030324526164113984`], List[0.4945378945368456`, \
0.26868485326149405`, 0.026197273880055442`, 0.09316943958678726`, \
-0.5147454324270786`, 0.00003165341609528542`, 0.4488046910133153`, \
0.029474298644174515`, 0.416588935600327`], List[-0.08133945905484026`, \
0.39410712647261953`, -0.15453432684214938`, -0.5932110435637872`, \
0.34572067259242245`, 0.5475879603672886`, 0.8791973885719282`, \
0.7005171113420935`, 0.7883007236820052`], List[-0.27551702735730177`, \
-0.27297559532912474`, -0.4451059201168938`, -0.23024414179074615`, \
0.1991878956396616`, -0.01166668653439136`, 0.3439681084393318`, \
0.12889496462431263`, -0.3284322408929016`], List[-0.1030299118411174`, \
0.325555317786535`, -0.020379710933565304`, 0.023690673980041637`, \
-0.25176992149715677`, -0.18965997155340658`, 0.21659459025811015`, \
-0.2958058796511218`, 0.4279936777340847`], List[-0.193706799138636`, \
-0.16581841246709947`, 0.09978317991566894`, 0.07784682985479077`, \
-0.1434286777575322`, -0.2539882903557889`, -0.2830966017449637`, \
-0.0941575646109914`, -0.4199799938946097`], List[-0.22965316345041578`, \
0.06731724112316789`, 0.18348191971557576`, -0.23030464471221923`, \
0.4787191700515942`, 0.10031795198805464`, -0.140898553193766`, \
-0.42334740678730565`, -0.07632550063346422`], List[-0.3383822144480971`, \
-0.05653832022286427`, 0.05688138998989475`, 0.8225183746644238`, \
0.6389002427953396`, -0.9710851703540733`, -0.01693772660037855`, \
-0.12618646400173777`, -0.023438725249073263`], List[0.048411419060566487`, \
-0.029510412079914266`, 0.6108093541972673`, -0.5336483493807325`, \
0.13004031112388645`, -0.16995669638771213`, 0.08358901542056327`, \
0.07624629979716718`, 0.4707891588626374`], List[0.07534547294030489`, \
0.19570317136196377`, 0.8213800016028077`, 0.18515624510107173`, \
-0.2070334867287674`, 0.5477599124772589`, -0.38631175087988034`, \
-0.2659828341275149`, -0.1927456489208404`], List[0.31766866040048874`, \
0.27257906000247895`, -0.08534173597651015`, -0.5650156053209847`, \
-0.05241427548628652`, 0.3704908551178045`, -0.1709892634964243`, \
-0.15058952777284768`, 0.1968658292895203`], List[-0.3370698738287689`, \
0.6492241919887263`, 0.15424101249281363`, -0.025644036049699375`, \
0.11186146404803164`, -0.4499098411633441`, 0.028322969017715627`, \
-0.1418704373301254`, -0.3202963795299451`], List[-0.6515587130848055`, \
0.1319219051929129`, -0.2209652208611733`, -0.1629403825527452`, \
-0.22815489685638563`, -0.36087967140507204`, 0.003016676132132802`, \
0.12803408080061252`, 0.4279091953634936`], List[0.20877907964224446`, \
-0.0057544998079518996`, 0.1183841790818105`, 0.30117211789580434`, \
0.5772193447574975`, 0.21656196931117788`, 0.20321968083530906`, \
0.5351129233022265`, 0.020336109579133423`], List[0.7639526600417711`, \
0.23927147868841994`, 0.0008142341064539886`, -0.08375792161366058`, \
0.009978226984107405`, 0.24252378856462156`, -0.3833739969695768`, \
-0.024158178155864678`, 0.3170775974157653`], List[-0.3160271236209324`, \
0.6225468236915149`, -0.8563275233747362`, 0.15811062734253908`, \
-0.00167710274364925`, 0.7948678996429545`, -0.15702568858933014`, \
0.4066013216632693`, -0.2862708476517795`], List[0.3488094535669043`, \
-0.39536847365342326`, -0.10788925162971541`, -0.27202098756522114`, \
0.010240701873752232`, -0.0673296620559716`, -0.02201752562989382`, \
0.19048027529379005`, 0.11101679153943364`], List[-0.18789457774672616`, \
-0.0838619543735332`, 0.30350975899120464`, -0.2595146987478871`, \
0.40557456368504546`, 0.050231489525318`, 0.1437968539236454`, \
-0.40707100210556585`, 0.2795517609776055`], List[0.44733252105322957`, \
-0.24141494081838163`, -0.06415466845491304`, -0.645900266229139`, \
0.4955035485689486`, -0.17883191503904924`, -0.19887840265909318`, \
-0.09203663504817157`, -0.7784434470521396`], List[-0.3818382929931367`, \
0.19993052195500105`, 0.5571983801074892`, -0.7299461830412856`, \
-0.10021958735771684`, -0.5066235012485987`, -0.24464986131986166`, \
-0.7298345166539386`, -0.0962734322087367`], List[1.135640276343542`, \
-0.289604096553808`, -0.5909165011318928`, 0.26818737108806273`, \
-0.07719298033413753`, 0.025726152414889635`, -0.4422726667302176`, \
0.08117988767535687`, 0.4022636395662933`], List[-0.07527472601369956`, \
-0.604629911383174`, -0.17467999583596944`, 0.06678671006068645`, \
-0.1334883101510681`, -0.6217472340461452`, -0.16058289667765835`, \
-0.405465829345206`, -0.3769669872911506`], List[-0.08455873109576686`, \
-0.02453198099065159`, 0.3153151764714562`, 0.20826841450067188`, \
-0.7428676815320632`, -0.25866802296287783`, -0.2320371719007801`, \
0.3596508440611076`, -0.3777203706447362`], List[-0.37968196591290676`, \
-0.47704875849041567`, -0.6385213366667166`, 0.5015003297716015`, \
0.3583792076295074`, -0.3181431224662174`, -0.10594750923291396`, \
-0.1602487808612161`, 0.0937084317177743`], List[0.7302715711053949`, \
-0.08916043862683222`, 0.1506782411616488`, 0.1279303989236035`, \
-0.023067774611477316`, -0.482795938707709`, -0.43929146697284743`, \
0.5050546151732136`, -0.08115527277125914`], List[-0.16582725794399328`, \
-0.0798424203742381`, -0.2491473289476622`, 0.3858371564988335`, \
0.008080257859220405`, 0.024807907153558618`, -0.08841527231705089`, \
-0.14144256256817306`, 0.2815587084151075`], List[0.6993707322516595`, \
0.1115634666529753`, 0.17311510198751606`, -0.038341984929288385`, \
0.1306513488007615`, -0.1720517353309059`, -0.17840362245107508`, \
0.006834874050391562`, -0.2131512652623155`], List[-0.25913600224016853`, \
0.4420896381508019`, -0.3950728655832447`, 0.2348657904633493`, \
0.1750812242945353`, 0.24961259493346707`, 0.40244217990613546`, \
0.39149205291973327`, -0.22119692924020398`], List[0.5950464612423597`, \
-0.3653590762378188`, -0.2770347112193803`, 0.14172302388422134`, \
-0.12145047307079512`, 0.126351794737711`, -0.6250761706781518`, \
0.4033346480118836`, -0.13105036336505138`], List[0.28950602835663075`, \
0.4910929202353126`, -0.2682853968674736`, 0.2258108992680348`, \
-0.23162805031718467`, 0.13656793343356813`, 0.4786464953153419`, \
-0.1807971529049329`, -0.7512087763198596`], List[-0.34900733580673693`, \
-0.08538619007393361`, 0.07444756783077076`, 0.2590291360314095`, \
0.5260827330564427`, 0.10242489761672117`, -0.0957782790058187`, \
-0.49911615965105327`, 0.018216825362685946`], List[-0.4252637828207426`, \
0.519254789140753`, -0.4208258507255675`, -0.0542164744332335`, \
0.1801788150028814`, 0.22453303745698838`, -0.242351239887168`, \
0.21841519108360535`, -0.0010125705150938126`], List[0.10192713695482356`, \
0.16523739202927476`, -0.36494168690346107`, -0.28525193708945884`, \
-0.43740556238093753`, 0.11609586531903311`, 0.11192006849606445`, \
-0.1803563150838122`, -0.39385248840602405`], List[0.2627099502195116`, \
0.05943974609871901`, -0.13240812780815683`, -0.17784621590066169`, \
-0.432415912609308`, -0.03736390776878427`, -0.8969861067597724`, \
0.2866678841867095`, 0.5164641317845157`], List[-0.3916442830393213`, \
0.38879328849515266`, 0.6109291396865102`, -0.014156223580248888`, \
-0.17553426148269835`, -0.6990110775265206`, 0.22981929281342547`, \
-0.6051160448142078`, -0.1159859848634532`], List[0.0299215238877316`, \
-0.19280849671632683`, 0.036525066102937306`, -0.29912287431104445`, \
-0.37482336515977205`, 0.15181456445391223`, 0.13993660003885003`, \
0.14395676966881993`, 0.6199233699838844`], List[0.42454831848251945`, \
-0.07230996565543596`, -0.11533333974397957`, -0.39670824434575946`, \
0.08166892043386316`, -0.22897101575811446`, -0.037310582431729654`, \
0.279322354428391`, -0.18566643301215618`], List[-0.39046950003736625`, \
0.19920876010502908`, -0.5133538506324218`, 0.15004744249688048`, \
-0.41026180937375983`, -0.7000700290551709`, -0.8885369532723615`, \
-0.5680447278762831`, 0.24697318966019732`], List[0.3322940876202558`, \
-0.5314456958613133`, -0.5026281159068638`, 0.27662101039832987`, \
-0.07150425665556988`, -0.19835522984224568`, -0.07549085807811515`, \
0.9669855974266183`, -0.37829181104502646`], List[-0.06308073930380526`, \
-0.08657028133699515`, 0.15125791890361046`, -0.5012487519959512`, \
-0.041637050588429494`, 0.0814743597547742`, -0.4592981595909421`, \
-0.011059948151477756`, -0.04675608151022355`], List[-0.13664247048316064`, \
-0.4362393952334086`, -0.08726032684867374`, 0.37119049571632046`, \
0.4290705794366175`, -0.12117277750307989`, 0.1658681553917835`, \
-0.04627976144871422`, -0.04142654501907702`], List[0.06368755819023038`, \
0.23749796789362487`, 0.17656813722765266`, -0.16103142816285473`, \
0.7223508028471574`, -0.0324672744697649`, -0.3484786621309663`, \
0.30808684350078963`, 0.35070721054861886`], List[-0.13572281645921758`, \
0.271203515519359`, -0.29878868824835064`, 0.20319958072750482`, \
-0.5568729943127333`, 0.006559723511454851`, 0.2819537202825195`, \
-0.19625710861484627`, -0.5195209653844483`], List[-0.12525616331251352`, \
-0.1539231886021072`, -0.33230468416278114`, 0.0008381239064730425`, \
0.29914550089266473`, 0.3911428016453452`, 0.09494692850228265`, \
0.049311913416938996`, -0.006369260710246987`], List[0.649604389751506`, \
0.3247288926012502`, 0.4105425647050521`, 0.3924607989012559`, \
0.7708676746190289`, 0.023929416459328185`, -0.026677654373686344`, \
0.3031462736741994`, -0.19687095126026685`], List[0.18960841202137074`, \
0.3458928874669899`, -0.23849238311982862`, 0.500737598186573`, \
0.3138140282252132`, 0.5495899352411213`, -0.45410956200213515`, \
0.03354194783677001`, 0.13985421171779197`], List[-0.2604765815832215`, \
0.042917344598454296`, 0.06834722891672103`, -0.04427601087619971`, \
0.2958850427445316`, 0.26289858156440754`, -0.29503983413907525`, \
-0.35335335318481276`, 0.5557621406858145`], List[-0.15041904988515012`, \
0.4893337841407504`, 0.3039784389521658`, 0.36038197113422504`, \
-0.06319656783839438`, 0.07138163962466548`, 0.21131971405540828`, \
0.6988107543242317`, 0.04950114269403004`], List[-0.15769883533937587`, \
0.04785276251520545`, 0.8955811207933329`, 0.5174973468034412`, \
0.16342916237500962`, 0.4368364221677568`, -0.2317493333852527`, \
0.7974091442632546`, -0.3477349751305598`], List[0.2090675920068328`, \
0.3724518300309729`, -0.000955216237396284`, 0.20147288414599018`, \
0.3090949314732799`, -0.11240796919254263`, -0.32074260313581815`, \
-0.03590285426102904`, 0.3936563865349585`], List[-0.50615614557493`, \
0.002258602403135732`, 0.15630935689421063`, 0.2707437005669415`, \
-0.34838884976975587`, 0.05315801005395906`, 0.18877918004433142`, \
-0.6017982762113175`, -0.29668880801291636`], List[0.1134587464448435`, \
-0.29978778313216575`, 0.5586837966218207`, -0.18951765829271036`, \
-0.22020413484169168`, -0.5374673695066325`, -0.021252971232965788`, \
-0.04977993055007394`, -0.06891276470173492`], List[0.14115356282760344`, \
-0.012464107953009637`, 0.0064291848469569856`, -0.0833835833715372`, \
0.6265052859206968`, -0.2274214874457897`, 0.1928743878306332`, \
0.17434268919387508`, 0.33895976146077605`], List[0.12146056706638518`, \
0.08822600997115312`, -0.5276589700875568`, 0.1743688529037854`, \
0.07595526525487478`, -0.06023656649961369`, -0.0316238314181319`, \
-0.19720958158014576`, -0.04832927017968282`], List[0.3922274059669975`, \
0.34273645627619076`, 0.23769161112247209`, 0.2789847494043621`, \
-0.13161091020153579`, -0.19414346245211048`, -0.1218666676090055`, \
0.0993894132381497`, 0.8567880811016394`], List[-0.29641989798480095`, \
-0.13964151896450797`, -0.3991424933584305`, 0.5534202209775267`, \
-0.06952833631528567`, 0.18266307424594427`, -0.0028021557597296197`, \
0.718768931941333`, -0.2569440521348632`], List[-0.17141790875848306`, \
0.2273384142254456`, 0.17476519709069263`, -0.08068524912812608`, \
0.0328304497181446`, 0.20663625548371087`, -0.21035218857616933`, \
0.16613052115848864`, 0.15521117876233217`], List[-0.19846621698659267`, \
-0.21217826681976326`, 0.2957255272039071`, -0.10369050812254703`, \
-0.059266418099869426`, 0.4216594545369327`, -0.32192720791388524`, \
0.2615298460053594`, 0.4583350185339478`], List[-0.32712406864981636`, \
-0.5006346612619237`, 0.04977453385389784`, -0.027566609716521164`, \
-0.044840118289667705`, 0.8469813467085209`, -0.23878730147975485`, \
0.1375557214253854`, 0.2290334619981145`], List[-0.5170170359329428`, \
-0.20557169679332182`, -0.359177878883745`, 0.16441115236915949`, \
-0.03164153766772894`, 0.028168825003322375`, 0.2016892625264097`, \
0.09221102138285306`, 0.18106884123923947`], List[-0.2678616107963751`, \
-0.09583176717032524`, 0.5658593182891725`, 0.3012921475846824`, \
0.18115546530239654`, -0.474135342146021`, -0.16503426876118885`, \
0.369258418188094`, 0.2240753088770534`], List[-0.6746456756698453`, \
-0.07398840853482327`, -0.4282664594440127`, 0.3615386503695829`, \
0.18006686597602228`, -0.13439661150466334`, 0.1761112001035316`, \
-0.2424366272016183`, 0.29516032638180756`], List[-0.17057963960075972`, \
-0.4735863643713902`, -0.5377766461673048`, 0.20263570406823225`, \
0.2757840266636262`, -0.5120897540507036`, -0.7782198522518828`, \
-0.22768078869001515`, 0.24691907962212264`], List[-0.3057641641534392`, \
0.19569360220223006`, -0.38238237796943225`, -0.04909472250349194`, \
-0.3265349908199793`, 0.4190156847572954`, 0.16893341173961796`, \
0.15981069422764646`, 0.09115402852083196`], List[-0.05411753075688497`, \
-0.08556660853683688`, -0.5068180029475401`, 0.48290170403471205`, \
-0.3218343884996128`, -0.0027320496909966764`, 0.31877210759938046`, \
0.27870747489960307`, -0.11707652864618859`], List[-0.285473043274214`, \
0.06183013160939251`, 0.05673688031472053`, -0.2226175153759567`, \
-0.09154018617418541`, 0.11074462818882146`, 0.7220209162919877`, \
-0.2596605140189729`, -0.2277792489078885`], List[0.15933745572618865`, \
-0.5740848278950217`, 0.14455664874106558`, 0.20090423250669687`, \
-0.6382199126956035`, -0.034013201074845595`, 0.47493242664242735`, \
-0.12053057178753036`, -0.0741325137654815`], List[0.19543413182814884`, \
0.36788355203238404`, -0.37748234472975584`, -0.6052191712950729`, \
0.03395390346287355`, 0.4752831985658618`, -0.12883926109838834`, \
-0.15887963391271961`, -0.013050716807415935`], List[0.24299915488266927`, \
-0.1250913970371324`, -0.05108582388415028`, 0.03404227200261135`, \
-0.5160475300575409`, 0.3091233315211689`, -0.5094500109400362`, \
0.03855671027109207`, -0.2181429046745454`], List[-0.12010360272753756`, \
0.32121421995052474`, -0.02837146557966537`, 0.32010901703674854`, \
-0.5156782302144831`, 0.18898049839450168`, 0.9442705326914314`, \
-0.17375306340976607`, 0.07108707084962265`], List[0.016375467989809465`, \
0.44809604163552647`, -0.45284417872895955`, -0.48966296108970914`, \
0.214971476316191`, 0.1188528207256086`, 0.5702766676880383`, \
0.09492575967338066`, 0.36233386116556415`], List[0.41722759743723525`, \
-0.8073547668610904`, -0.024488172816665734`, 0.2008434795425218`, \
0.011983324211450649`, -0.4077005700607466`, 0.19019054499111374`, \
0.387374087807272`, -0.09086894098034302`], List[0.0532725897326204`, \
-0.27374489851321604`, 0.003781466952232597`, -0.24803197615314815`, \
0.062305082108779025`, -0.02455623694520868`, -0.22576109502271868`, \
0.06877378866531023`, 0.14188753766549406`], List[0.30849677939551623`, \
0.08045312415061241`, 0.002153275333974313`, -0.351974704972973`, \
0.2746377208906142`, -0.07863688063825786`, 0.8698650618261081`, \
-0.06235764377839263`, 0.5998181858711278`], List[0.5133988926101243`, \
-0.28978848634382226`, 0.07052733984665967`, -0.08369868830897471`, \
0.23278436065513589`, -0.06182325911684266`, -0.10833271803258925`, \
-0.037436524667012715`, 0.3941999003402016`], List[-1.016917565522857`, \
0.6854671093892978`, -0.023244736900856443`, 0.19931379865655363`, \
-0.2088378318351566`, -0.1208748170664811`, -0.06141967859437304`, \
-0.10597167600873109`, 0.10875444046422103`], List[-0.11759585947574482`, \
-0.20903426745748094`, -0.5148550128484543`, 0.1781765903893341`, \
-0.2729175260777728`, -0.2448467808957223`, -0.18339764793392305`, \
0.43652343980281133`, 0.3450341511825375`], List[-0.3778310061965379`, \
0.15892728636531703`, 0.019960278876657373`, 0.3943532556347979`, \
-0.034646384053198136`, 0.11630689700227902`, -0.21194704535075837`, \
0.3474019475169545`, 0.3460325119596193`], List[-0.5642436244758945`, \
0.9004256547801892`, 0.1384145250283422`, -0.1118189628317223`, \
-0.09364711727940128`, 0.12097314682193795`, -0.3596772738516575`, \
-0.23452752639196575`, 0.4772603814258445`], List[0.9342466281746301`, \
0.4167505316085906`, 0.27935044962561156`, -0.12481067985303393`, \
0.07047647859902852`, 0.637780449652865`, 0.4586718112134463`, \
0.050949038905411644`, -0.15966730544394575`], List[-0.002291086311673129`, \
0.447789057544173`, 0.15745272935060484`, -0.03998129758573962`, \
0.12120861159568577`, 0.08749619135148178`, -0.15925142736754433`, \
0.37213404342043727`, 0.02902068456655079`], List[0.1656791881215801`, \
0.008029881047586616`, 0.004207157971730912`, 0.5150989160130408`, \
-0.10402766331304579`, -0.09739254574090851`, -0.04143430827607297`, \
-0.057382378163407806`, -0.23188758777150828`], List[-0.48637321504774506`, \
0.11291402344229534`, -0.22080657969069975`, -0.018804955836153252`, \
-0.26949155285518755`, 0.1406983555635552`, -0.2938645374584946`, \
-0.047690040035073405`, 0.15379228577813975`], List[-0.007963838780995158`, \
-0.09005623977920009`, -0.13424891311341547`, 0.02753554217748073`, \
0.2892953609510857`, -0.004933571723441445`, 0.532650093976695`, \
0.15891308958656583`, -0.6966794010457582`], List[-0.45802686465599735`, \
-0.02666533659251453`, -0.21200274419876802`, 0.563909148857333`, \
0.16476255757151723`, 0.29456965203768853`, 0.09015839852771952`, \
1.1167830534377428`, -0.7191608297232752`], List[0.17403735722164138`, \
-0.2542507189056533`, 0.32814237898597254`, 0.054713534501833964`, \
-0.12442956705023747`, -0.4766624505869813`, 0.1926764155992447`, \
-0.19244966366726804`, 0.7083667961092437`], List[-0.058373944501506195`, \
-0.2656568831047161`, 0.017095359154467412`, 0.0037395503557728434`, \
-0.10993288477879751`, 0.02432304343270765`, -0.288601690052489`, \
-0.22796518323303974`, 0.05849934661010106`], List[0.7029641974303402`, \
-0.33319767019895724`, -0.07128309895749682`, -0.7027920138466923`, \
0.5342614045896668`, 0.3491304626108965`, -0.804121595611196`, \
-0.10923058518196056`, 0.23902327340804871`], List[-0.2701676438018764`, \
-0.30321644187380914`, 0.1455762367690625`, -0.004026296876858546`, \
-0.20424160150534743`, -0.055414655374477734`, -0.09007945516845413`, \
-0.3386786134224352`, 0.21636080492297902`], List[-0.48104696404634195`, \
0.4279034308841531`, 0.07543847604919432`, 0.03599121759518621`, \
0.308707238243412`, 0.05559609500536701`, -0.5172789267139858`, \
0.0798199097598091`, 0.1685005812848279`], List[0.37800354437032985`, \
-0.6050900380201988`, 0.014536843456992491`, 0.17154117650926956`, \
-0.9170492614103716`, 0.4267490564834378`, 0.20534489195054828`, \
-0.2677223121543032`, 0.0037569578326140988`], List[-0.03271290204427099`, \
-0.10537906434401388`, -0.06507722026199479`, -0.06519205575527176`, \
0.26502494570747726`, 0.6356328891022943`, -0.00860928434837733`, \
0.5441002550924445`, -0.01894429675172112`], List[0.3252793585970136`, \
-0.10341117690465823`, -0.5999044302353354`, -0.40322945668697635`, \
-0.5170485513963122`, -0.0389720027238153`, 0.026845471145501097`, \
0.027355080182707145`, -0.07485582795741245`], List[-0.23948701247232598`, \
-0.1163019269080546`, -0.21206356622183456`, -0.2817503645247456`, \
-0.004062233267416012`, -0.5971049475470607`, -0.18426926496426194`, \
-0.39565818210136944`, 0.040642872306378815`], List[-0.17048579500696684`, \
-0.19733345589844453`, -0.5485314901065682`, 0.8215821641327099`, \
0.12712671799966072`, -0.9577265527552393`, 0.3032205652416131`, \
0.27382819234138844`, -0.2985141295893147`], List[0.10130460116025061`, \
0.090414587124574`, 0.249194842565596`, -0.21016182421222218`, \
0.228376859902311`, -0.27368828665330874`, -0.22004104840758876`, \
-0.2999583882322103`, 0.021467430893304947`], List[-0.29937630893572303`, \
0.5040818901879784`, -0.000560633785451259`, 0.06289767481476646`, \
-0.1877214125004518`, 0.36058838677561983`, 0.3334478521405993`, \
0.6796874628991235`, 0.02356247920313138`], List[0.19114533575453754`, \
-0.26101512237478824`, 0.13069240311674912`, -0.2045589905415304`, \
-0.5453465291272831`, -0.2365793389071655`, -0.07315991044521537`, \
0.44358834935459585`, 0.5190722191051635`], List[0.04192657899938222`, \
-0.3602902076342167`, -0.16949852931002532`, 0.5252036694875512`, \
0.19437846208605974`, 0.16392556261631774`, 0.07305832244518655`, \
0.2917495790223045`, 0.0009178890573062108`], List[0.24346709103121064`, \
-0.290754151588093`, 0.48281782237054943`, -0.0756452270785661`, \
-0.058055217609387165`, -0.6393912968164641`, -0.04512656441325176`, \
0.16108579254840696`, 0.22613604692850517`], List[0.40575009955079394`, \
-0.22014210198684914`, 0.09302852789251864`, 0.2780295413843263`, \
-0.09004412502839276`, 0.14884875449443427`, 0.2614061299073047`, \
-0.060535183008039214`, -0.16612011579954897`], List[0.7877708151085587`, \
-0.059760077563293594`, 0.08904183119458094`, -0.5875016105338112`, \
-0.010459303658681298`, 0.29593139390852774`, -0.11537023434662842`, \
0.2175652297921246`, 0.061281503730874265`], List[-0.16217523392084005`, \
0.45573653207053516`, -0.027462434613493552`, -0.020645875164570397`, \
0.392522188748133`, 0.5437654186758104`, 0.30178874388165855`, \
0.4940765688437397`, -1.1180128683497634`], List[-0.1474147295100771`, \
0.33554906858311767`, -0.18246483010381187`, -0.7805359130033949`, \
0.21184968562908743`, 0.18365561377289674`, 0.4996360134554676`, \
0.4303580342941452`, -0.054951211804662704`], List[-0.22005541417771513`, \
-0.1471007953983846`, -0.13667113649092616`, 0.09442028879985948`, \
0.6029068346765541`, 0.48395283377799636`, -0.0797143920672395`, \
-0.020713984246130846`, 0.1600058851903673`], List[0.20528497618614713`, \
0.30781085637359074`, -0.1751154842130706`, -0.21904501312338498`, \
-0.6560049725561148`, 0.1538412230103912`, 0.5645704103407829`, \
-0.6282110730346023`, -0.3632942544924067`], List[0.012058306400679685`, \
0.1586931794429063`, 0.427729142045124`, 0.012339416253587828`, \
-0.09642924822186161`, 0.23111410565785612`, 0.05554075748901117`, \
0.7515931441263077`, -0.5402081692546554`], List[-0.09202984877044768`, \
-0.2238907571911146`, 0.06327585264771497`, -0.011703445548714128`, \
0.4770468965249828`, -0.33844331259865684`, 0.2818503839058962`, \
-0.5170950946103163`, 0.06286588064434676`]], Automatic], Rule[Method, \
\\\"KDtree\\\"]]]]]], Rule[\\\"NeighborsNumber\\\", 50], Rule[\\\"ClassPriors\
\\\", List[0.37142857142857144`, 0.22857142857142856`, \
0.39999999999999997`]], Rule[\\\"TrainingOutput\\\", NumericArray[List[1, 3, \
1, 2, 3, 2, 3, 2, 3, 1, 1, 1, 1, 1, 1, 3, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 2, \
2, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 1, 2, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 1, \
2, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 1, 2, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 1, \
2, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 1, 2, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 2, \
3, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 1, 3, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 1, \
2, 3, 2, 3, 3], \\\"UnsignedInteger8\\\"]], \
Rule[\\\"DistributionSmoothing\\\", 0.5`], Rule[\\\"Processor\\\", \
MachineLearning`MLProcessor[\\\"Sequence\\\", Association[Rule[\\\"Input\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Type\\\", \\\"NominalVector\
\\\"], Rule[\\\"Weight\\\", 1], Rule[\\\"SetSize\\\", List[136]]]]]], Rule[\\\
\"Output\\\", Association[Rule[\\\"f1\\\", Association[Rule[\\\"Weight\\\", \
1], Rule[\\\"Type\\\", \\\"NumericalVector\\\"]]]]], Rule[\\\"Processors\\\", \
List[MachineLearning`MLProcessor[\\\"EmbedNominalVector\\\", \
Association[Rule[\\\"Invertibility\\\", \\\"Impossible\\\"], Rule[\\\"Missing\
\\\", \\\"Allowed\\\"], Rule[\\\"Input\\\", Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"NominalVector\\\"], Rule[\\\"Weight\\\", \
1], Rule[\\\"SetSize\\\", List[136]]]]]], Rule[\\\"Index\\\", \
List[Association[Rule[1, 1], Rule[2, 2], Rule[3, 3], Rule[4, 4], Rule[5, 5], \
Rule[6, 6], Rule[7, 7], Rule[8, 8], Rule[9, 9], Rule[10, 10], Rule[11, 11], \
Rule[12, 12], Rule[13, 13], Rule[14, 14], Rule[15, 15], Rule[16, 16], \
Rule[17, 17], Rule[18, 18], Rule[19, 19], Rule[20, 20], Rule[21, 21], \
Rule[22, 22], Rule[23, 23], Rule[24, 24], Rule[25, 25], Rule[26, 26], \
Rule[27, 27], Rule[28, 28], Rule[29, 29], Rule[30, 30], Rule[31, 31], \
Rule[32, 32], Rule[33, 33], Rule[34, 34], Rule[35, 35], Rule[36, 36], \
Rule[37, 37], Rule[38, 38], Rule[39, 39], Rule[40, 40], Rule[41, 41], \
Rule[42, 42], Rule[43, 43], Rule[44, 44], Rule[45, 45], Rule[46, 46], \
Rule[47, 47], Rule[48, 48], Rule[49, 49], Rule[50, 50], Rule[51, 51], \
Rule[52, 52], Rule[53, 53], Rule[54, 54], Rule[55, 55], Rule[56, 56], \
Rule[57, 57], Rule[58, 58], Rule[59, 59], Rule[60, 60], Rule[61, 61], \
Rule[62, 62], Rule[63, 63], Rule[64, 64], Rule[65, 65], Rule[66, 66], \
Rule[67, 67], Rule[68, 68], Rule[69, 69], Rule[70, 70], Rule[71, 71], \
Rule[72, 72], Rule[73, 73], Rule[74, 74], Rule[75, 75], Rule[76, 76], \
Rule[77, 77], Rule[78, 78], Rule[79, 79], Rule[80, 80], Rule[81, 81], \
Rule[82, 82], Rule[83, 83], Rule[84, 84], Rule[85, 85], Rule[86, 86], \
Rule[87, 87], Rule[88, 88], Rule[89, 89], Rule[90, 90], Rule[91, 91], \
Rule[92, 92], Rule[93, 93], Rule[94, 94], Rule[95, 95], Rule[96, 96], \
Rule[97, 97], Rule[98, 98], Rule[99, 99], Rule[100, 100], Rule[101, 101], \
Rule[102, 102], Rule[103, 103], Rule[104, 104], Rule[105, 105], Rule[106, \
106], Rule[107, 107], Rule[108, 108], Rule[109, 109], Rule[110, 110], \
Rule[111, 111], Rule[112, 112], Rule[113, 113], Rule[114, 114], Rule[115, \
115], Rule[116, 116], Rule[117, 117], Rule[118, 118], Rule[119, 119], \
Rule[120, 120], Rule[121, 121], Rule[122, 122], Rule[123, 123], Rule[124, \
124], Rule[125, 125], Rule[126, 126], Rule[127, 127], Rule[128, 128], \
Rule[129, 129], Rule[130, 130], Rule[131, 131], Rule[132, 132], Rule[133, \
133], Rule[134, 134], Rule[135, 135], Rule[136, 136]]]], Rule[\\\"Output\\\", \
Association[Rule[\\\"f1\\\", Association[Rule[\\\"Weight\\\", 1], \
Rule[\\\"Type\\\", \\\"NumericalVector\\\"]]]]], \
Rule[\\\"EmbeddingVectors\\\", List[NumericArray[List[List[0.`, 0.`, 0.`, \
0.`, 0.`, 0.`, 0.`, 0.`, 0.`], List[-1.0169178247451782`, 0.685467004776001`, \
-0.023245172575116158`, 0.19931364059448242`, -0.20883788168430328`, \
-0.12087416648864746`, -0.06141949072480202`, -0.10597263276576996`, \
0.10875528305768967`], List[-0.38183823227882385`, 0.19993092119693756`, \
0.5571987628936768`, -0.7299461960792542`, -0.1002204567193985`, \
-0.506624162197113`, -0.24465039372444153`, -0.7298336029052734`, \
-0.09627307951450348`], List[-0.6746448874473572`, -0.07398883253335953`, \
-0.42826589941978455`, 0.36153942346572876`, 0.1800663024187088`, \
-0.13439685106277466`, 0.17611148953437805`, -0.242436021566391`, \
0.2951604127883911`], List[-0.06266189366579056`, -0.11711419373750687`, \
-0.113866426050663`, 0.011423281393945217`, 0.07906065136194229`, \
0.03798345848917961`, -0.0923553854227066`, -0.4463205635547638`, \
0.040678951889276505`], List[-0.15769875049591064`, 0.04785262420773506`, \
0.8955807685852051`, 0.5174974799156189`, 0.16342827677726746`, \
0.43683674931526184`, -0.23174996674060822`, 0.7974100112915039`, \
-0.3477349281311035`], List[-0.45802634954452515`, -0.026666218414902687`, \
-0.2120026797056198`, 0.5639081597328186`, 0.16476315259933472`, \
0.2945692837238312`, 0.09015791118144989`, 1.1167832612991333`, \
-0.7191606163978577`], List[-0.3271239101886749`, -0.5006350874900818`, \
0.04977414384484291`, -0.0275662150233984`, -0.04484076797962189`, \
0.8469821810722351`, -0.23878704011440277`, 0.1375560462474823`, \
0.2290327548980713`], List[-0.3370705246925354`, 0.6492243409156799`, \
0.1542404741048813`, -0.02564394846558571`, 0.11186157912015915`, \
-0.4499099552631378`, 0.028323005884885788`, -0.1418711096048355`, \
-0.32029569149017334`], List[-0.39046886563301086`, 0.19920919835567474`, \
-0.5133547782897949`, 0.15004779398441315`, -0.41026270389556885`, \
-0.7000691890716553`, -0.8885369896888733`, -0.5680444240570068`, \
0.24697338044643402`], List[-0.30576378107070923`, 0.19569341838359833`, \
-0.3823833465576172`, -0.04909564182162285`, -0.32653552293777466`, \
0.4190160632133484`, 0.16893252730369568`, 0.15981048345565796`, \
0.09115470945835114`], List[0.09076130390167236`, -0.7724121809005737`, \
-0.3633984625339508`, 0.4405556619167328`, -0.6539329886436462`, \
-0.4185083508491516`, -0.12365677952766418`, 0.09404507279396057`, \
0.19271914660930634`], List[0.7029639482498169`, -0.3331974148750305`, \
-0.07128302752971649`, -0.7027923464775085`, 0.5342609882354736`, \
0.34912997484207153`, -0.8041211366653442`, -0.10923010110855103`, \
0.23902353644371033`], List[-0.08455947786569595`, -0.024532098323106766`, \
0.31531572341918945`, 0.2082686871290207`, -0.7428684234619141`, \
-0.25866782665252686`, -0.23203624784946442`, 0.3596508502960205`, \
-0.37771955132484436`], List[0.513399064540863`, -0.28978872299194336`, \
0.07052686810493469`, -0.08369769901037216`, 0.2327839881181717`, \
-0.06182286515831947`, -0.10833325982093811`, -0.03743553161621094`, \
0.3942003846168518`], List[-0.08133348822593689`, 0.3058929443359375`, \
-0.22259502112865448`, -0.5297461152076721`, -0.3823282718658447`, \
-0.17310070991516113`, 0.1395619958639145`, -0.09086639434099197`, \
-0.12034841626882553`], List[0.3084975779056549`, 0.08045269548892975`, \
0.0021532014943659306`, -0.3519752323627472`, 0.27463796734809875`, \
-0.0786370113492012`, 0.8698643445968628`, -0.06235788017511368`, \
0.5998180508613586`], List[-0.05837412551045418`, -0.2656559646129608`, \
0.01709442213177681`, 0.0037399553693830967`, -0.10993218421936035`, \
0.0243239626288414`, -0.2886017858982086`, -0.2279660999774933`, \
0.05849849060177803`], List[0.05327356234192848`, -0.2737447917461395`, \
0.003780995262786746`, -0.24803178012371063`, 0.06230556592345238`, \
-0.02455543912947178`, -0.22576038539409637`, 0.06877411901950836`, \
0.14188840985298157`], List[-0.18789388239383698`, -0.08386208862066269`, \
0.30350950360298157`, -0.25951507687568665`, 0.4055745303630829`, \
0.05023087188601494`, 0.14379703998565674`, -0.40707144141197205`, \
0.27955204248428345`], List[0.37800291180610657`, -0.6050896048545837`, \
0.01453770138323307`, 0.17154021561145782`, -0.9170495271682739`, \
0.42674824595451355`, 0.20534555613994598`, -0.2677231431007385`, \
0.0037560262717306614`], List[-0.37968289852142334`, -0.477049320936203`, \
-0.6385208368301392`, 0.5015006065368652`, 0.35837939381599426`, \
-0.31814369559288025`, -0.10594674944877625`, -0.16024793684482574`, \
0.09370878338813782`], List[-0.10302981734275818`, 0.32555606961250305`, \
-0.020380273461341858`, 0.023691225796937943`, -0.2517704367637634`, \
-0.18965965509414673`, 0.2165936529636383`, -0.2958061695098877`, \
0.4279932975769043`], List[-0.19370640814304352`, -0.1658187061548233`, \
0.09978403896093369`, 0.07784608006477356`, -0.14342893660068512`, \
-0.2539879083633423`, -0.2830966114997864`, -0.09415733814239502`, \
-0.41997963190078735`], List[0.04841238632798195`, -0.029509762302041054`, \
0.6108091473579407`, -0.5336490273475647`, 0.1300397366285324`, \
-0.1699560582637787`, 0.08358840644359589`, 0.07624684274196625`, \
0.47078976035118103`], List[0.041927359998226166`, -0.36029052734375`, \
-0.16949933767318726`, 0.5252031683921814`, 0.19437755644321442`, \
0.16392606496810913`, 0.07305867969989777`, 0.29174917936325073`, \
0.0009182951762340963`], List[0.029922284185886383`, -0.19280871748924255`, \
0.036524698138237`, -0.29912301898002625`, -0.37482377886772156`, \
0.15181422233581543`, 0.139937162399292`, 0.1439560204744339`, \
0.6199225187301636`], List[0.07534495741128922`, 0.19570234417915344`, \
0.8213793039321899`, 0.1851562112569809`, -0.20703260600566864`, \
0.547758936882019`, -0.3863110840320587`, -0.2659819424152374`, \
-0.19274474680423737`], List[0.1996368169784546`, 0.1756415069103241`, \
-0.012801856733858585`, -0.71571946144104`, 0.20786060392856598`, \
0.08308102190494537`, 0.08612477779388428`, 0.003771750722080469`, \
0.688667893409729`], List[-0.34900733828544617`, -0.08538716286420822`, \
0.07444765418767929`, 0.25902897119522095`, 0.5260823369026184`, \
0.10242468118667603`, -0.09577737748622894`, -0.49911585450172424`, \
0.01821751520037651`], List[0.12145963311195374`, 0.08822529762983322`, \
-0.5276590585708618`, 0.17436815798282623`, 0.07595526427030563`, \
-0.06023672968149185`, -0.031623706221580505`, -0.19721029698848724`, \
-0.04832950606942177`], List[-0.29937660694122314`, 0.5040826201438904`, \
-0.0005601666634902358`, 0.0628974661231041`, -0.18772228062152863`, \
0.3605892062187195`, 0.33344700932502747`, 0.6796883344650269`, \
0.023562492802739143`], List[0.016374880447983742`, 0.4480959475040436`, \
-0.4528443217277527`, -0.48966261744499207`, 0.2149709314107895`, \
0.1188533827662468`, 0.5702773332595825`, 0.09492628276348114`, \
0.3623334467411041`], List[-0.2964191734790802`, -0.13964231312274933`, \
-0.3991428315639496`, 0.5534203052520752`, -0.06952809542417526`, \
0.18266330659389496`, -0.0028029666282236576`, 0.7187694907188416`, \
-0.256944864988327`], List[0.07869593054056168`, 0.0037951970007270575`, \
0.26091790199279785`, -0.0858110710978508`, -0.28619813919067383`, \
0.38958969712257385`, -0.43199241161346436`, -0.2136356681585312`, \
0.23187033832073212`], List[0.6496050357818604`, 0.3247295320034027`, \
0.4105420410633087`, 0.39246076345443726`, 0.7708675265312195`, \
0.023928536102175713`, -0.026677774265408516`, 0.30314597487449646`, \
-0.19687074422836304`], List[-0.007964256219565868`, -0.09005565941333771`, \
-0.13424956798553467`, 0.027534790337085724`, 0.28929463028907776`, \
-0.004933161661028862`, 0.5326501131057739`, 0.15891297161579132`, \
-0.6966797113418579`], List[-0.08133985102176666`, 0.3941076695919037`, \
-0.15453429520130157`, -0.5932101607322693`, 0.34571993350982666`, \
0.5475886464118958`, 0.8791981935501099`, 0.7005172967910767`, \
0.7883008122444153`], List[0.44733256101608276`, -0.24141563475131989`, \
-0.06415511667728424`, -0.6459012031555176`, 0.4955042004585266`, \
-0.1788315773010254`, -0.1988784521818161`, -0.09203624725341797`, \
-0.7784431576728821`], List[-0.19846613705158234`, -0.2121790498495102`, \
0.2957253158092499`, -0.10369091480970383`, -0.0592663399875164`, \
0.4216597080230713`, -0.3219279944896698`, 0.2615300714969635`, \
0.45833420753479004`], List[-0.23948687314987183`, -0.11630275100469589`, \
-0.2120644450187683`, -0.2817501723766327`, -0.004062260035425425`, \
-0.5971055030822754`, -0.18426978588104248`, -0.3956587016582489`, \
0.04064249247312546`], List[0.5950467586517334`, -0.3653585910797119`, \
-0.27703505754470825`, 0.14172329008579254`, -0.12145133316516876`, \
0.1263512372970581`, -0.6250767707824707`, 0.4033346474170685`, \
-0.13105075061321259`], List[-0.22752541303634644`, 0.029156355187296867`, \
-0.22030916810035706`, -0.09984365850687027`, -0.2049245834350586`, \
0.036960337311029434`, 0.2856332063674927`, 0.18322110176086426`, \
-0.2581981122493744`], List[0.06368806213140488`, 0.2374972552061081`, \
0.17656727135181427`, -0.16103196144104004`, 0.7223507165908813`, \
-0.03246800974011421`, -0.34847864508628845`, 0.3080858886241913`, \
0.3507067561149597`], List[-0.37783095240592957`, 0.1589278280735016`, \
0.019960718229413033`, 0.3943537175655365`, -0.03464667126536369`, \
0.11630609631538391`, -0.21194681525230408`, 0.3474021852016449`, \
0.3460320234298706`], List[0.11345788836479187`, -0.29978713393211365`, \
0.5586828589439392`, -0.18951687216758728`, -0.2202049344778061`, \
-0.5374675989151001`, -0.021253732964396477`, -0.049779023975133896`, \
-0.06891293823719025`], List[0.1656789481639862`, 0.008029182441532612`, \
0.004206680692732334`, 0.5150996446609497`, -0.10402830690145493`, \
-0.09739168733358383`, -0.041434623301029205`, -0.0573817640542984`, \
-0.23188842833042145`], List[-0.13572221994400024`, 0.2712044417858124`, \
-0.2987896502017975`, 0.20320051908493042`, -0.5568735599517822`, \
0.006558898836374283`, 0.28195279836654663`, -0.19625809788703918`, \
-0.519520103931427`], List[-0.0867348238825798`, -0.25038081407546997`, \
-0.2019965499639511`, 0.4550168812274933`, 0.402818500995636`, \
-0.5190525054931641`, -0.23195363581180573`, 0.21201640367507935`, \
-0.030325179919600487`], List[0.2429981827735901`, -0.1250923126935959`, \
-0.05108584463596344`, 0.03404320403933525`, -0.5160472989082336`, \
0.30912327766418457`, -0.5094493627548218`, 0.0385567769408226`, \
-0.21814216673374176`], List[-0.35947951674461365`, -0.1604236513376236`, \
0.0996348187327385`, 0.5483320951461792`, -0.03437819331884384`, \
0.009196917526423931`, 0.17572011053562164`, -0.3546849191188812`, \
0.5273112654685974`], List[-0.09152204543352127`, 0.31768813729286194`, \
-0.14887136220932007`, 0.09515384584665298`, 0.3598482012748718`, \
0.09621994197368622`, 0.34684380888938904`, 0.2993508577346802`, \
0.09623733907938004`], List[-0.03271199390292168`, -0.10537983477115631`, \
-0.06507682800292969`, -0.0651918575167656`, 0.26502394676208496`, \
0.6356333494186401`, -0.008610018528997898`, 0.544100284576416`, \
-0.018944919109344482`], List[-0.06308135390281677`, -0.08656999468803406`, \
0.1512584537267685`, -0.5012490749359131`, -0.04163763299584389`, \
0.08147362619638443`, -0.4592985510826111`, -0.011060184799134731`, \
-0.046756722033023834`], List[0.6993705034255981`, 0.11156374961137772`, \
0.17311590909957886`, -0.038341373205184937`, 0.13065212965011597`, \
-0.172051802277565`, -0.1784030944108963`, 0.006835562642663717`, \
-0.21315184235572815`], List[0.24346709251403809`, -0.29075419902801514`, \
0.4828173518180847`, -0.07564429938793182`, -0.05805511027574539`, \
-0.6393919587135315`, -0.04512730985879898`, 0.16108562052249908`, \
0.2261369377374649`], List[0.012057618238031864`, 0.1586926132440567`, \
0.4277288615703583`, 0.012339344248175621`, -0.0964287742972374`, \
0.23111392557621002`, 0.05554140731692314`, 0.7515929937362671`, \
-0.5402078032493591`], List[0.3436395823955536`, -0.37779131531715393`, \
0.37584877014160156`, 0.28336265683174133`, -0.21780510246753693`, \
-0.030359188094735146`, -0.40291082859039307`, -0.013694602996110916`, \
-0.24009257555007935`], List[0.20877988636493683`, -0.0057547008618712425`, \
0.11838492751121521`, 0.30117204785346985`, 0.5772191286087036`, \
0.2165612131357193`, 0.203219935297966`, 0.5351128578186035`, \
0.02033594623208046`], List[-0.2678607404232025`, -0.0958322212100029`, \
0.565859317779541`, 0.30129218101501465`, 0.18115465342998505`, \
-0.47413507103919983`, -0.16503487527370453`, 0.36925798654556274`, \
0.224075049161911`], List[-0.39164403080940247`, 0.38879284262657166`, \
0.6109297275543213`, -0.014155513606965542`, -0.17553424835205078`, \
-0.6990113854408264`, 0.2298184335231781`, -0.6051162481307983`, \
-0.11598522961139679`], List[-0.25913533568382263`, 0.44208937883377075`, \
-0.39507198333740234`, 0.2348666489124298`, 0.17508171498775482`, \
0.24961228668689728`, 0.4024421274662018`, 0.3914923071861267`, \
-0.22119742631912231`], List[-0.6515596508979797`, 0.13192275166511536`, \
-0.22096556425094604`, -0.16294033825397491`, -0.22815421223640442`, \
-0.36087894439697266`, 0.003016421338543296`, 0.12803375720977783`, \
0.4279095232486725`], List[0.9342473149299622`, 0.41675129532814026`, \
0.27935078740119934`, -0.12481070309877396`, 0.07047680765390396`, \
0.6377807855606079`, 0.45867082476615906`, 0.05094962939620018`, \
-0.15966808795928955`], List[0.5137415528297424`, -0.05635056644678116`, \
-0.09681291878223419`, -0.12020998448133469`, 0.33463814854621887`, \
-0.44864973425865173`, -0.4670730531215668`, 0.022089192643761635`, \
0.03985021263360977`], List[0.4945376217365265`, 0.2686857581138611`, \
0.02619694359600544`, 0.09316994994878769`, -0.5147454738616943`, \
0.00003194186501787044`, 0.4488053619861603`, 0.029475048184394836`, \
0.4165897071361542`], List[0.10192635655403137`, 0.16523775458335876`, \
-0.3649407923221588`, -0.28525254130363464`, -0.4374057352542877`, \
0.11609647423028946`, 0.1119190976023674`, -0.18035545945167542`, \
-0.39385202527046204`], List[0.008347583934664726`, -0.030875926837325096`, \
-0.40197283029556274`, 0.35966363549232483`, -0.39540615677833557`, \
0.7158137559890747`, 0.02473270520567894`, -0.04938812181353569`, \
-0.30092036724090576`], List[-0.11759591847658157`, -0.20903363823890686`, \
-0.5148555636405945`, 0.17817626893520355`, -0.27291759848594666`, \
-0.24484644830226898`, -0.18339672684669495`, 0.4365241825580597`, \
0.34503376483917236`], List[-0.27016785740852356`, -0.3032154440879822`, \
0.14557714760303497`, -0.004026204813271761`, -0.2042412906885147`, \
-0.05541543290019035`, -0.09007949382066727`, -0.3386784791946411`, \
0.2163616418838501`], List[-0.25512051582336426`, -0.555943489074707`, \
0.2271685004234314`, 0.002664665225893259`, -0.028991980478167534`, \
0.33735859394073486`, -0.01685941591858864`, 0.06785374134778976`, \
0.12115045636892319`], List[0.19114458560943604`, -0.26101598143577576`, \
0.1306922882795334`, -0.2045592963695526`, -0.5453455448150635`, \
-0.23657923936843872`, -0.07316028326749802`, 0.44358763098716736`, \
0.5190718173980713`], List[0.28929367661476135`, -0.04139848053455353`, \
0.4321828782558441`, 0.05757157504558563`, -0.7157338261604309`, \
-0.6733927726745605`, 0.2062457650899887`, -0.07919652760028839`, \
-0.034575559198856354`], List[-0.17058050632476807`, -0.47358596324920654`, \
-0.5377767086029053`, 0.2026347517967224`, 0.27578452229499817`, \
-0.5120897889137268`, -0.7782192230224609`, -0.22768142819404602`, \
0.2469194233417511`], List[0.3176695704460144`, 0.27257832884788513`, \
-0.08534102141857147`, -0.5650151371955872`, -0.05241360887885094`, \
0.3704909682273865`, -0.17098914086818695`, -0.15058884024620056`, \
0.19686639308929443`], List[0.44953909516334534`, 0.2989118993282318`, \
0.17048557102680206`, -0.45194628834724426`, 0.3830479681491852`, \
-0.03288361057639122`, -0.5535257458686829`, -0.15517595410346985`, \
-0.18686699867248535`], List[0.34880876541137695`, -0.39536798000335693`, \
-0.10788843035697937`, -0.2720208168029785`, 0.010240682400763035`, \
-0.067329540848732`, -0.02201654203236103`, 0.19047990441322327`, \
0.11101661622524261`], List[-0.15041881799697876`, 0.4893346130847931`, \
0.30397912859916687`, 0.36038267612457275`, -0.06319575756788254`, \
0.07138068974018097`, 0.21132026612758636`, 0.6988100409507751`, \
0.049500755965709686`], List[-0.09202887117862701`, -0.22389046847820282`, \
0.06327538192272186`, -0.01170277502387762`, 0.4770478904247284`, \
-0.33844342827796936`, 0.28185132145881653`, -0.517094612121582`, \
0.06286593526601791`], List[-0.33838316798210144`, -0.056538816541433334`, \
0.05688149109482765`, 0.822517454624176`, 0.6388998627662659`, \
-0.9710853695869446`, -0.01693742349743843`, -0.12618644535541534`, \
-0.02343815751373768`], List[-0.17048659920692444`, -0.19733409583568573`, \
-0.5485324263572693`, 0.8215819597244263`, 0.12712737917900085`, \
-0.9577258229255676`, 0.3032202124595642`, 0.2738291323184967`, \
-0.2985136806964874`], List[-0.3545224666595459`, 0.45004957914352417`, \
-0.6168292164802551`, 0.15135636925697327`, 0.6445160508155823`, \
0.4037705957889557`, 0.3797319829463959`, -0.4245952069759369`, \
0.34834787249565125`], List[-0.2755165994167328`, -0.27297553420066833`, \
-0.44510653614997864`, -0.23024488985538483`, 0.1991884708404541`, \
-0.011666926555335522`, 0.3439676761627197`, 0.12889574468135834`, \
-0.32843124866485596`], List[1.135640263557434`, -0.2896031439304352`, \
-0.5909157395362854`, 0.2681869864463806`, -0.07719293236732483`, \
0.025726143270730972`, -0.4422725439071655`, 0.08118036389350891`, \
0.4022643268108368`], List[0.2895057499408722`, 0.49109306931495667`, \
-0.26828521490097046`, 0.22581180930137634`, -0.23162707686424255`, \
0.13656796514987946`, 0.4786456227302551`, -0.18079617619514465`, \
-0.751209557056427`], List[-0.13664263486862183`, -0.4362390637397766`, \
-0.08726069331169128`, 0.37119027972221375`, 0.4290711581707001`, \
-0.12117315083742142`, 0.16586771607398987`, -0.046279046684503555`, \
-0.041426774114370346`], List[0.32527920603752136`, -0.10341030359268188`, \
-0.5999037623405457`, -0.40323036909103394`, -0.5170480608940125`, \
-0.03897251933813095`, 0.026844944804906845`, 0.027356065809726715`, \
-0.07485645264387131`], List[-0.16217467188835144`, 0.45573607087135315`, \
-0.02746248058974743`, -0.02064630389213562`, 0.3925214111804962`, \
0.5437646508216858`, 0.3017883598804474`, 0.4940774440765381`, \
-1.1180137395858765`], List[0.13170428574085236`, 0.3766573667526245`, \
0.29200467467308044`, -0.44970521330833435`, 0.14408665895462036`, \
0.18625302612781525`, -0.16104869544506073`, 0.40859904885292053`, \
0.04328501224517822`], List[0.3922278881072998`, 0.34273743629455566`, \
0.23769144713878632`, 0.27898475527763367`, -0.1316114366054535`, \
-0.19414347410202026`, -0.12186639755964279`, 0.09938866645097733`, \
0.8567876815795898`], List[-0.002291486132889986`, 0.4477890133857727`, \
0.15745295584201813`, -0.0399809256196022`, 0.12120793014764786`, \
0.08749629557132721`, -0.1592520922422409`, 0.3721342980861664`, \
0.029020575806498528`], List[-0.31602802872657776`, 0.6225473284721375`, \
-0.8563281297683716`, 0.15810993313789368`, -0.0016780529404059052`, \
0.794868528842926`, -0.15702517330646515`, 0.40660157799720764`, \
-0.2862715721130371`], List[0.26271018385887146`, 0.0594397597014904`, \
-0.13240884244441986`, -0.17784692347049713`, -0.43241673707962036`, \
-0.03736482933163643`, -0.8969855904579163`, 0.2866676449775696`, \
0.5164644718170166`], List[0.1954335719347`, 0.36788269877433777`, \
-0.3774826228618622`, -0.6052183508872986`, 0.03395292907953262`, \
0.4752822816371918`, -0.12883968651294708`, -0.15887951850891113`, \
-0.013051191344857216`], List[-0.46760788559913635`, 0.3027907609939575`, \
-0.10701248049736023`, -0.42631059885025024`, 0.2369767278432846`, \
0.33754971623420715`, -0.05194045975804329`, 0.034607067704200745`, \
-0.35143211483955383`], List[0.33229339122772217`, -0.531445324420929`, \
-0.5026278495788574`, 0.2766217887401581`, -0.07150352001190186`, \
-0.19835497438907623`, -0.07548996061086655`, 0.9669865369796753`, \
-0.3782917559146881`], List[0.2801341712474823`, 0.24035079777240753`, \
-0.37582266330718994`, 0.1722068041563034`, -0.017151638865470886`, \
0.07818286120891571`, 0.3524913489818573`, 0.19016100466251373`, \
-0.31985175609588623`], List[0.26734471321105957`, 0.498241126537323`, \
0.2291247546672821`, -0.07707913219928741`, -0.0830126404762268`, \
-0.45659130811691284`, -0.10140009224414825`, 0.26879164576530457`, \
-0.09830139577388763`], List[-0.5061553120613098`, 0.0022589995060116053`, \
0.15630897879600525`, 0.27074459195137024`, -0.34838831424713135`, \
0.05315786600112915`, 0.18877987563610077`, -0.6017982363700867`, \
-0.296688437461853`], List[0.4245492219924927`, -0.07231033593416214`, \
-0.11533338576555252`, -0.39670872688293457`, 0.08166976273059845`, \
-0.22897163033485413`, -0.0373113639652729`, 0.2793227434158325`, \
-0.18566620349884033`], List[0.18960785865783691`, 0.3458932042121887`, \
-0.2384927123785019`, 0.5007370710372925`, 0.3138138949871063`, \
0.5495890378952026`, -0.4541100263595581`, 0.03354278951883316`, \
0.13985420763492584`], List[-0.04570317268371582`, 0.2460070252418518`, \
0.1416606456041336`, -0.12405139207839966`, 0.5932475328445435`, \
0.22795470058918`, 0.2934301197528839`, 0.0801498144865036`, \
0.3518645167350769`], List[0.209067240357399`, 0.3724527359008789`, \
-0.0009560862672515213`, 0.20147334039211273`, 0.3090948760509491`, \
-0.11240733414888382`, -0.32074207067489624`, -0.03590240702033043`, \
0.3936568796634674`], List[0.7877712249755859`, -0.059760406613349915`, \
0.08904169499874115`, -0.5875014066696167`, -0.010458369739353657`, \
0.2959323227405548`, -0.11536931246519089`, 0.21756604313850403`, \
0.06128077208995819`], List[0.4172285795211792`, -0.8073537945747375`, \
-0.024488475173711777`, 0.20084349811077118`, 0.011983875185251236`, \
-0.40770018100738525`, 0.19019122421741486`, 0.38737472891807556`, \
-0.09086863696575165`], List[0.405749648809433`, -0.22014188766479492`, \
0.09302785992622375`, 0.2780304253101349`, -0.09004358947277069`, \
0.14884944260120392`, 0.26140567660331726`, -0.06053468585014343`, \
-0.16611996293067932`], List[-0.4863741397857666`, 0.11291444301605225`, \
-0.22080586850643158`, -0.01880413107573986`, -0.26949167251586914`, \
0.1406985968351364`, -0.2938636243343353`, -0.04769033193588257`, \
0.15379184484481812`], List[-0.4810469448566437`, 0.42790284752845764`, \
0.07543817907571793`, 0.03599093109369278`, 0.30870798230171204`, \
0.05559595301747322`, -0.5172789096832275`, 0.07982054352760315`, \
0.16850009560585022`], List[0.7302711606025696`, -0.08916133642196655`, \
0.15067806839942932`, 0.12793047726154327`, -0.023067301139235497`, \
-0.48279643058776855`, -0.43929171562194824`, 0.505054771900177`, \
-0.08115485310554504`], List[0.20874284207820892`, 0.05076679587364197`, \
0.12299265712499619`, -0.7217181324958801`, -0.019509993493556976`, \
0.15758173167705536`, -0.0345248319208622`, 0.11166226863861084`, \
0.18876558542251587`], List[-0.12010371685028076`, 0.321214884519577`, \
-0.02837139181792736`, 0.3201087713241577`, -0.5156776309013367`, \
0.18898101150989532`, 0.9442706108093262`, -0.17375333607196808`, \
0.07108709216117859`], List[-0.1421143263578415`, 0.5067741274833679`, \
-0.0407596230506897`, 0.11688807606697083`, -0.36251118779182434`, \
0.3562803864479065`, 0.5460411310195923`, 0.043691910803318024`, \
-0.22718296945095062`], List[-0.17141854763031006`, 0.2273387759923935`, \
0.1747654527425766`, -0.08068513125181198`, 0.03283100202679634`, \
0.20663534104824066`, -0.21035172045230865`, 0.16613076627254486`, \
0.1552112102508545`], List[-0.22965364158153534`, 0.06731626391410828`, \
0.18348199129104614`, -0.2303047925233841`, 0.47871899604797363`, \
0.10031872987747192`, -0.14089933037757874`, -0.4233468770980835`, \
-0.0763261541724205`], List[0.17403720319271088`, -0.25425028800964355`, \
0.3281426429748535`, 0.05471377074718475`, -0.12443040311336517`, \
-0.4766627252101898`, 0.19267739355564117`, -0.1924499124288559`, \
0.7083666920661926`], List[-0.14741477370262146`, 0.3355497717857361`, \
-0.18246543407440186`, -0.7805359363555908`, 0.2118496596813202`, \
0.1836565136909485`, 0.49963635206222534`, 0.4303573668003082`, \
-0.05495163053274155`], List[0.1142817884683609`, 0.2165672928094864`, \
-0.1509932428598404`, -0.23356449604034424`, -0.6533068418502808`, \
-0.3126901388168335`, 0.4356204569339752`, -0.1037573292851448`, \
-0.17263923585414886`], List[0.10615052282810211`, -0.13845327496528625`, \
0.11688720434904099`, 0.3744066059589386`, -0.06057777628302574`, \
-0.001352898427285254`, -0.4351048171520233`, 0.29401692748069763`, \
0.24493823945522308`], List[-0.11228270828723907`, -0.11752118170261383`, \
-0.24018336832523346`, 0.20602847635746002`, 0.479596883058548`, \
0.15289942920207977`, 0.05293618142604828`, -0.1896096169948578`, \
-0.1874532401561737`], List[-0.28547245264053345`, 0.06183011829853058`, \
0.056735970079898834`, -0.22261790931224823`, -0.09154044091701508`, \
0.11074430495500565`, 0.7220212817192078`, -0.2596607506275177`, \
-0.22777961194515228`], List[-0.42526477575302124`, 0.5192554593086243`, \
-0.420825719833374`, -0.0542169027030468`, 0.18017897009849548`, \
0.22453317046165466`, -0.24235183000564575`, 0.21841475367546082`, \
-0.001013101078569889`], List[0.14115308225154877`, -0.012464858591556549`, \
0.006429685279726982`, -0.08338285982608795`, 0.6265051364898682`, \
-0.22742202877998352`, 0.1928739994764328`, 0.17434197664260864`, \
0.3389594256877899`], List[-0.22005556523799896`, -0.14710108935832977`, \
-0.13667117059230804`, 0.09441990405321121`, 0.6029067635536194`, \
0.4839520752429962`, -0.07971476018428802`, -0.020714128389954567`, \
0.16000643372535706`], List[-0.260475754737854`, 0.04291832074522972`, \
0.06834647804498672`, -0.044275157153606415`, 0.2958850562572479`, \
0.26289859414100647`, -0.29503950476646423`, -0.3533533215522766`, \
0.5557618141174316`], List[-0.4249122440814972`, -0.02453320100903511`, \
0.017422199249267578`, -0.38932114839553833`, -0.6915526390075684`, \
0.6158058643341064`, 0.7428083419799805`, -0.07605688273906708`, \
-0.08732659369707108`], List[-0.16582734882831573`, -0.07984234392642975`, \
-0.2491479367017746`, 0.38583648204803467`, 0.008080440573394299`, \
0.0248081237077713`, -0.08841446787118912`, -0.14144188165664673`, \
0.2815594971179962`], List[0.4693391025066376`, 0.34544867277145386`, \
0.09093966335058212`, 0.9134631156921387`, -0.3037063479423523`, \
0.20491115748882294`, -0.1763468086719513`, 0.0406094454228878`, \
0.021436158567667007`], List[-0.05411667004227638`, -0.08556566387414932`, \
-0.5068187713623047`, 0.4829022288322449`, -0.32183340191841125`, \
-0.002731087850406766`, 0.31877216696739197`, 0.2787071466445923`, \
-0.11707715690135956`], List[-0.5642439723014832`, 0.9004257321357727`, \
0.13841429352760315`, -0.11181846261024475`, -0.09364678710699081`, \
0.12097259610891342`, -0.3596777021884918`, -0.23452700674533844`, \
0.47726136445999146`], List[0.15933667123317719`, -0.5740842223167419`, \
0.1445559859275818`, 0.2009049504995346`, -0.6382194757461548`, \
-0.03401389345526695`, 0.4749314785003662`, -0.12053003907203674`, \
-0.07413347065448761`], List[-0.5170167088508606`, -0.20557083189487457`, \
-0.35917800664901733`, 0.16441187262535095`, -0.03164123743772507`, \
0.02816860005259514`, 0.20169007778167725`, 0.09221015125513077`, \
0.18106845021247864`], List[0.10130499303340912`, 0.090415358543396`, \
0.24919496476650238`, -0.21016179025173187`, 0.2283778339624405`, \
-0.27368810772895813`, -0.22004079818725586`, -0.2999582290649414`, \
0.021466970443725586`], List[-0.12525679171085358`, -0.1539241075515747`, \
-0.33230555057525635`, 0.0008387343259528279`, 0.2991461157798767`, \
0.3911428451538086`, 0.0949469804763794`, 0.04931199550628662`, \
-0.006370131392031908`], List[0.20528505742549896`, 0.30781155824661255`, \
-0.1751159280538559`, -0.2190442979335785`, -0.6560042500495911`, \
0.1538417935371399`, 0.5645711421966553`, -0.6282116770744324`, \
-0.36329326033592224`], List[0.7639521360397339`, 0.23927178978919983`, \
0.0008147930493578315`, -0.08375809341669083`, 0.009979203343391418`, \
0.2425236999988556`, -0.3833742141723633`, -0.024158474057912827`, \
0.3170769512653351`], List[-0.5365582704544067`, 0.014620231464505196`, \
-0.08051476627588272`, -0.3194691240787506`, -0.028943659737706184`, \
-0.6462967395782471`, 0.2136247456073761`, 0.18644101917743683`, \
0.7223593592643738`], List[-0.07527545839548111`, -0.6046292185783386`, \
-0.17468030750751495`, 0.06678745895624161`, -0.13348864018917084`, \
-0.6217470765113831`, -0.16058361530303955`, -0.40546488761901855`, \
-0.3769676387310028`]], \\\"Real32\\\"]]], Rule[\\\"Version\\\", List[12.`, \
0]], Rule[\\\"ID\\\", 7204649762786858506]]], \
MachineLearning`MLProcessor[\\\"FirstValues\\\", \
Association[Rule[\\\"Info\\\", Association[Rule[\\\"Weight\\\", 1], \
Rule[\\\"Type\\\", \\\"NumericalVector\\\"]]], Rule[\\\"Key\\\", \\\"f1\\\"], \
Rule[\\\"Invertibility\\\", \\\"Perfect\\\"], Rule[\\\"Missing\\\", \
\\\"Allowed\\\"]]]]], Rule[\\\"Invertibility\\\", \\\"Impossible\\\"], \
Rule[\\\"Missing\\\", \\\"Allowed\\\"]]]], Rule[\\\"Method\\\", \
\\\"NearestNeighbors\\\"], Rule[\\\"PostProcessor\\\", \
MachineLearning`MLProcessor[\\\"Identity\\\"]], Rule[\\\"Options\\\", \
Association[Rule[\\\"NeighborsNumber\\\", Association[Rule[\\\"Value\\\", \
50], Rule[\\\"Options\\\", Association[]]]], Rule[\\\"DistributionSmoothing\\\
\", Association[Rule[\\\"Value\\\", 0.5`], Rule[\\\"Options\\\", \
Association[]]]], Rule[\\\"NearestMethod\\\", Association[Rule[\\\"Value\\\", \
\\\"KDtree\\\"], Rule[\\\"Options\\\", Association[]]]]]]]], \
Rule[\\\"TrainingInformation\\\", Association[Rule[\\\"PanelCell\\\", \
CellObject[201681]], Rule[\\\"TrainingFunction\\\", Classify], \
Rule[\\\"EMIterations\\\", Missing[\\\"KeyAbsent\\\", \\\"EMIterations\\\"]], \
Rule[\\\"ProcessorEntropyShift\\\", 0], Rule[\\\"PreprocessingTime\\\", \
0.1200265`6.530822135653541], Rule[\\\"LossName\\\", \
\\\"MeanCrossEntropy\\\"], Rule[\\\"BestModelInformation\\\", \
RawBoxes[RowBox[List[\\\"Dataset\\\", RowBox[List[\\\"[\\\", RowBox[List[\\\"\
\\\\[LeftSkeleton]\\\", \\\"14\\\", \\\"\\\\[RightSkeleton]\\\"]], \
\\\"]\\\"]]]]]], Rule[\\\"Configurations\\\", \
RawBoxes[RowBox[List[\\\"Dataset\\\", RowBox[List[\\\"[\\\", RowBox[List[\\\"\
\\\\[LeftSkeleton]\\\", \\\"10\\\", \\\"\\\\[RightSkeleton]\\\"]], \
\\\"]\\\"]]]]]], Rule[\\\"MaxTrainingSize\\\", 137], \
Rule[\\\"PreprocessorEvaluationTime\\\", 4.6485139580686`3.*^-6], \
Rule[\\\"PreprocessorMemory\\\", 43368], Rule[\\\"InputDimension\\\", 1], \
Rule[\\\"OutputDimension\\\", 1], Rule[\\\"BaselineLogProbability\\\", \
-1.0717287302022056`], Rule[\\\"VariableBudget\\\", True], \
Rule[\\\"CheckpointingInfo\\\", Association[Rule[\\\"Checkpointing\\\", \
False]]], Rule[\\\"UserStop\\\", False], Rule[\\\"NaturalStop\\\", True], \
Rule[\\\"AbortStop\\\", False], Rule[\\\"LastReportingTime\\\", \
3.7710698432335728`17.32903956512167*^9], Rule[\\\"RoundPartitioning\\\", \
RawBoxes[RowBox[List[\\\"Dataset\\\", RowBox[List[\\\"[\\\", RowBox[List[\\\"\
\\\\[LeftSkeleton]\\\", \\\"2\\\", \\\"\\\\[RightSkeleton]\\\"]], \
\\\"]\\\"]]]]]]]], Rule[\\\"Log\\\", Association[Rule[\\\"Example\\\", \
MachineLearning`MLDataset[Association[Rule[\\\"f1\\\", \
Association[Rule[\\\"Type\\\", \\\"Nominal\\\"], Rule[\\\"Weight\\\", 1], \
Rule[\\\"Values\\\", List[\\\"For the function \
W(x)=ln(1+\\\\!\\\\(\\\\*SuperscriptBox[\\\\(x\\\\), \\\\(4\\\\)]\\\\)) and \
the point x=1, find the secants at point Q and the tangenet line\\\"]], Rule[\
\\\"ID\\\", 4654099653526711133]]]], Association[Rule[\\\"ExampleNumber\\\", \
1], Rule[\\\"ExampleWeights\\\", 1], Rule[\\\"LogDensityRatios\\\", 0], Rule[\
\\\"RawExample\\\", False]]]], Rule[\\\"TrainingTime\\\", \
1.1817953044690073`], Rule[\\\"MaxTrainingMemory\\\", 1446536], \
Rule[\\\"DataMemory\\\", 14552], Rule[\\\"FunctionMemory\\\", 230504], \
Rule[\\\"LanguageVersion\\\", List[12.`, 0]], Rule[\\\"Date\\\", \
DateObject[List[2019, 7, 2, 15, 24, 3.397786`8.283771003554588], \
\\\"Instant\\\", \\\"Gregorian\\\", -4.`]], Rule[\\\"ProcessorCount\\\", 2], \
Rule[\\\"ProcessorType\\\", \\\"x86-64\\\"], Rule[\\\"OperatingSystem\\\", \\\
\"Windows\\\"], Rule[\\\"SystemWordLength\\\", 64], Rule[\\\"Evaluations\\\", \
List[]]]]]], Rule[Selectable, False], Rule[Editable, False], \
Rule[SelectWithContents, True]]\\) should be a rule, a list of rules, or an \
association.\"",2,162,12,15900704727939038710,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.7710862057331266`*^9, {3.7710863743998404`*^9, 3.7710863783357706`*^9}, 
   3.7711008085772295`*^9},ExpressionUUID->"1d8f8f8b-c4e6-46ce-8c8a-\
26728a5e6575"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Nominal\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"algebra 1\"", "\"algebra 2\"", 
                    "\"calc\""}, "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Nominal\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"algebra 1\"", "\"algebra 2\"", 
                    "\"calc\""}, "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["137", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 137, "ClassNumber" -> 3, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 1537627216228573037]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "VectorLength" -> 1, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Type" -> "NominalVector", "Version" -> {12., 0}, "ID" -> 
             4026204838636604962]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[
               "2+3" -> 1, "2/3 x+3 =15" -> 2, 
                "-3(\!\(\*SuperscriptBox[\(x\), \(2\)]\)-2x+7)" -> 3, 
                "5(2x+4)" -> 4, "-(5\!\(\*SuperscriptBox[\(x\), \(4\)]\)-8)" -> 
                5, "8x-2=22" -> 6, "Add 1/2 and 1/3" -> 7, 
                "A salesman is paid a monthly salary of $2,300 plus 7% \
commission on his monthly sales.\nDetermine the amount of sales required for \
his total monthly income to be $3,000." -> 8, 
                "A salesman tells you that the $140 earrings are already \
marked 20% off. What\nwas the original price?" -> 9, 
                "A $750 watch is on sale for 15% off. Find the sale price." -> 
                10, "Combine 2 \!\(\*SubscriptBox[\(log\), \(4\)]\)x +5 \
\!\(\*SubscriptBox[\(log\), \(4\)]\)y - 1/2 \!\(\*SubscriptBox[\(log\), \
\(4\)]\)x" -> 11, "Combine like terms of 3a-6a+10a-a" -> 12, 
                "Combine like terms of 3n-5\!\(\*SuperscriptBox[\(n\), \
\(\(2\)\(\\ \)\)]\)+6n-10+2\!\(\*SuperscriptBox[\(n\), \(2\)]\)" -> 13, 
                "Combine the like terms of 5x-10y+6z-3x" -> 14, 
                "Compute  the difrence quotient for the given function" -> 15,
                 "Determine f (x) given that f'(x) = 6x^8 \[Minus] 20x^4 + \
x^2 + 9" -> 16, "Determine ln(\!\(\*SuperscriptBox[\(e\), \(4\)]\))" -> 17, 
                "Evaluate 2\!\(\*SuperscriptBox[\(x\), \(2\)]\)-9 for x=-3" -> 
                18, "Evaluate a-\!\(\*SuperscriptBox[\(b\), \(2\)]\) when a=4 \
and b=2" -> 19, 
                "Evaluate f(x)=3-5x-2\!\(\*SuperscriptBox[\(x\), \(2\)]\) for \
the below values: f(0), f(x+h), f(6-t)" -> 20, 
                "Evaluate \!\(\*SuperscriptBox[\(a\), \(2\)]\)+b when a=7 and \
b=1" -> 21, 
                "Evaluate \!\(\*SuperscriptBox[\(a\), \
\(2\)]\)-\!\(\*SuperscriptBox[\(b\), \(2\)]\) when a=5 and b=3" -> 22, 
                "Evaluate the derivative" -> 23, 
                "Evaluate \[Integral]z^6 + 4z^4 \[Minus] z^2 dz" -> 24, 
                "Expand (a+b\!\(\*SuperscriptBox[\()\), \(3\)]\)" -> 25, 
                "express 12 1/3 as an improper fraction" -> 26, 
                "express 3 2/7 as an improper fraction" -> 27, 
                "Express 42/5 as a mixed number" -> 28, 
                "Express 53/9 as a mixed number" -> 29, 
                "Find a perpedicular line of y=3x+2 with y intercept of the \
origin" -> 30, 
                "Find extrema of f(x)=12+6\!\(\*SuperscriptBox[\(x\), \
\(2\)]\)-\!\(\*SuperscriptBox[\(x\), \(3\)]\)" -> 31, 
                "Find extrema of g(w)=tan (w)sec(w)" -> 32, 
                "Find inverse of W (x) =  (9 \[Minus]11x\!\(\*SuperscriptBox[\
\()\), \(1/5\)]\)" -> 33, "Find the area under the curve of |x| from -1 to 1" -> 
                34, "Find the Derivative" -> 35, 
                "Find the derivative of 2 cos(x)+arccos(x)" -> 36, 
                "Find the derivative of f(x)=2\!\(\*SuperscriptBox[\(e\), \(x\
\)]\)-\!\(\*SuperscriptBox[\(8\), \(x\)]\)" -> 37, 
                "Find the derivative of g(t)=4 \!\(\*SubscriptBox[\(log\), \
\(3\)]\)(t)-ln(t)" -> 38, 
                "Find the derivative of \!\(\*SuperscriptBox[\(x\), \(2\)]\)/\
\!\(\*SuperscriptBox[\(y\), \(3\)]\)=1" -> 39, 
                "Find the deriviative of f (x) = 2cos(x) \[Minus] 6sec(x) + \
3" -> 40, "Find the deriviative of g (z) =10 tan (z) \[Minus] 2cot (z)" -> 41,
                 "Find the deriviative of R(t)=(t+ tan(t))/(1+csc(t))" -> 42, 
                "Find the deriviative of  tan (w)sec(w)" -> 43, 
                "Find the domain of (\!\(\*SuperscriptBox[\(w\), \
\(3\)]\)-3w+1)/(12 w-7)" -> 44, 
                "Find the equation of best fit for the below listed data" -> 
                45, "Find the exact value of cos(5 \[Pi]/6) without using a \
calculator" -> 46, 
                "Find the exact value of sin(-4 \[Pi]/3) without using a \
calculator" -> 47, "Find the integral" -> 48, 
                "Find the inverse of f (x) = 6x +15" -> 49, 
                "Find the MacLauren Expanision of z(n)= \
(z+1\!\(\*SuperscriptBox[\()\), \(1/2\)]\)/(z+4)" -> 50, 
                "find the taylor expanision of g(w)=tan (w)sec(w) at \
w=\[Pi]/4" -> 51, 
                "Find \[Integral]12 + csc(\[Theta] ) [sin (\[Theta] ) + csc(\
\[Theta] )] d\[Theta]" -> 52, 
                "Find \[Integral] 2cos (w) \[Minus] sec(w) tan (w)dw" -> 53, 
                "Find \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) dx \
\[Minus]18x + 7" -> 54, 
                "Find \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) \
\[Minus]18\!\(\*SuperscriptBox[\(x\), \(2\)]\) + 7 dx" -> 55, 
                "For the function (2-(\!\(\*SuperscriptBox[\(t\), \
\(2\)]\)+3\!\(\*SuperscriptBox[\()\), \(1/2\)]\))/(t+1), L'Hoptial's rule to \
find the limit as x approaches -1" -> 56, 
                "For the function f(x)=(8-\!\(\*SuperscriptBox[\(x\), \
\(2\)]\))/(\!\(\*SuperscriptBox[\(x\), \(2\)]\)-4), find the values at the \
below listed points and th limit as x aproaches 2" -> 57, 
                
                "For the function f(x)=(8-\!\(\*SuperscriptBox[\(x\), \
\(2\)]\))/(\!\(\*SuperscriptBox[\(x\), \(2\)]\)-4), use L'Hoptial's rule to \
find the limit as x aproaches 2" -> 58, 
                "For the function f(y)= sin(y)/y find the value at the below \
listed points and the limit as y approaches 0" -> 59, 
                "For the function W(x)=ln(1+\!\(\*SuperscriptBox[\(x\), \
\(4\)]\)) and the point x=1, find the secants at point Q and the tangenet \
line" -> 60, "Graph the inequality y<3x+4" -> 61, 
                "Graph the parabola give by \!\(\*SuperscriptBox[\(x\), \
\(2\)]\)+3x+2. Find the zeros, vertex and intercept" -> 62, 
                "How many miutes are in a day?" -> 63, 
                "Identify the property used in the equations below as \
distributive, inverse or associative" -> 64, 
                "Is x=-8 a solution to 1/2x+6>3?" -> 65, 
                "Multiply 24/3 and 27/8" -> 66, "Multiply 8 and 3/24" -> 67, 
                "Plot 1.25, 2/3 and 2 on a number line" -> 68, 
                "Simplify 10-(7+1)" -> 69, "Simplify 10-7+1" -> 70, 
                "Simplify (15-3)/(1+5)" -> 71, 
                "Simplify 24/(4-2\!\(\*SuperscriptBox[\()\), \(3\)]\)" -> 72, 
                "Simplify (2-5\!\(\*SuperscriptBox[\()\), \(2\)]\)" -> 73, 
                "Simplify 2-\!\(\*SuperscriptBox[\(5\), \(2\)]\)" -> 74, 
                "Simplify 4+5(1+12/6\!\(\*SuperscriptBox[\()\), \(2\)]\)" -> 
                75, "Sketch the graph of f(x)=\!\(\*SuperscriptBox[\(3\), \(1 \
+ 2  x\)]\)" -> 76, 
                "Sketch the graph of h(x)=8+3\!\(\*SuperscriptBox[\(e\), \(2  \
t - 4\)]\)" -> 77, "Solve 3sec(4 \[Minus] 9z) \[Minus] 24 = 0" -> 78, 
                "Solve 3(x-5)+4=10" -> 79, 
                "Solve 3\[Minus]14sin (12t + 7) =13" -> 80, 
                "Solve  4sin (3t ) = 2" -> 81, 
                "Solve 4sin (3t ) = 2 in [0, 4\[Pi]/3], 2cos(x/3) \
+\!\(\*SuperscriptBox[\(2\), \(0.5\)]\) = 0 in [\[Minus]7\[Pi] ,7\[Pi] }" -> 
                82, "Solve 4x-9=11" -> 83, "Solve 4y sec(7 y) = \[Minus]21y" -> 
                84, "Solve and graph the solution to 2x-3<7" -> 85, 
                "Solve and graph the solution to |3x-1|\[GreaterEqual]10" -> 
                86, "Tommy\[CloseCurlyQuote]s grandma gave him a $50 gift \
card to Toys R Us for his birthday.\nSales tax is currently 9%. Determine the \
price of the most expensive toy Tommy can buy with\nthe $50 gift card." -> 87,
                 "Use the chain rule to find the derivative of \
Q(t)=(3\!\(\*SuperscriptBox[\(t\), \(3\)]\)-4\!\(\*SuperscriptBox[\()\), \
\(1/2\)]\)" -> 88, 
                "Use the definition of the derivative to find the derivative \
of f(x)=6" -> 89, 
                "Use the definition of the derivative to find the derivative \
of V (t ) = 3\[Minus]14t" -> 90, 
                "Use the definition of the derivative to find the derivative \
of z(n)= (n+1)/(n+4)" -> 91, 
                "Use the law of sines to find the missing side of this \
triangle" -> 92, 
                "Use the quotient rule to find the derivative of z(n)= (z+1\!\
\(\*SuperscriptBox[\()\), \(1/2\)]\)/(z+4)" -> 93, 
                "What are the discontiuities in the function \
y=(x+2)/(x+3x+2). Which are fundamental and which are removable?" -> 94, 
                "What are the domain and range of \!\(\*SuperscriptBox[\(e\), \
\(x\)]\) and ln(x)" -> 95, 
                "What are the domain and range of the trigonometric \
functions?" -> 96, "What is |1|" -> 97, "What is 10% of 100" -> 98, 
                "What is 1+1" -> 99, "What is  1/2 + 1/3" -> 100, 
                "What is 12 1/3 as an improper fraction" -> 101, 
                "What is 2+2" -> 102, "What is 2+3" -> 103, 
                "What is  24/3 * 27/8" -> 104, "What is |-30|" -> 105, 
                "What is 3/18 in simplest form" -> 106, "What is 3-(-2)?" -> 
                107, "What is -3+4" -> 108, "What is 42/54 in simplest form" -> 
                109, "What is 42/5 as a mixed number" -> 110, 
                "What is 4% of 16?" -> 111, "What is 53/9 as a mixed number" -> 
                112, "What is  8 * 3/24" -> 113, 
                "What is (a+b\!\(\*SuperscriptBox[\()\), \(n\)]\) (Hint: What \
theorem is this?)" -> 114, "What is ln(1)?" -> 115, "What is sin(60)" -> 116, 
                "What is tan(30)" -> 117, "What is the absolute value of -1?" -> 
                118, "What is the area under the curve \
\!\(\*SuperscriptBox[\(sin\), \(2\)]\)x from 0 to \[Pi]/2" -> 119, 
                "What is the Deriviative" -> 120, 
                "What is the integral of sin(2x)?" -> 121, 
                "What is the integral of x dx" -> 122, 
                "What is the largest value for the missing side of this \
triangle" -> 123, 
                "What is the most specific subset of the real numbers that -7 \
is a part of?" -> 124, "What is the next term in the series " -> 125, 
                "What is the sum from 1 to 5 of a=10n+3" -> 126, 
                "what is the sum of the geometric series from 1 to infinity \
of 9(1/10\!\(\*SuperscriptBox[\()\), \(n\)]\)?" -> 127, 
                "What is \[Integral]6\!\(\*SuperscriptBox[\(x\), \(5\)]\) \
\[Minus]18\!\(\*SuperscriptBox[\(x\), \(2\)]\) + 7 dx" -> 128, 
                "Wrie the standard form of y=3/2 x+2" -> 129, 
                "Write 30 degrees in radians" -> 130, 
                "write 3/18 in simplest form" -> 131, 
                "What is 3 2/7 as an improper fraction" 
                 "write 42/54 in simplest form" -> 132, 
                "Write slope intercept form for a slope of 2 and y-intercept \
of 12" -> 133, "Write \[Pi]/4 in degrees" -> 134, "-x-2=12" -> 135, Null -> 
                136]}, "MissingCode" -> 0, "Version" -> {12., 0}, "ID" -> 
             8874348951581137712, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 7740907413418953510]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["algebra 1" -> 1, "algebra 2" -> 2, "calc" -> 3]}, 
             "MissingCode" -> 0, "Version" -> {12., 0}, "ID" -> 
             3923291764372626615, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {3}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 689381485439722164]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       "algebra 1" -> 0.37142857142857144`, "algebra 2" -> 
        0.22857142857142856`, "calc" -> 0.39999999999999997`]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {3, 4}, 0., {
      1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
    "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
    "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "NeighborsFunction" -> 
      MachineLearning`PackageScope`NeighborsFunction["Nearest", 
        NearestFunction[
         Hold[
          Nearest[CompressedData["
1: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
            "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 50, 
      "ClassPriors" -> {0.37142857142857144`, 0.22857142857142856`, 
       0.39999999999999997`}, "TrainingOutput" -> 
      RawArray["UnsignedInteger8",{1, 3, 1, 2, 3, 2, 3, 2, 3, 1, 1, 1, 1, 1, 
        1, 3, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 2, 2, 3, 2, 3, 3, 1, 3, 1, 2, 
        3, 1, 1, 1, 2, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 1, 2, 3, 2, 3, 3, 1, 
        3, 1, 2, 3, 1, 1, 1, 2, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 1, 2, 3, 2, 
        3, 3, 1, 3, 1, 2, 3, 1, 1, 1, 2, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 2, 
        3, 3, 2, 3, 3, 1, 3, 1, 2, 3, 1, 1, 1, 3, 3, 2, 3, 3, 1, 3, 1, 2, 3, 
        1, 1, 1, 2, 3, 2, 3, 3}], "DistributionSmoothing" -> 0.5, "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association[
            "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {136}]], 
         "Output" -> 
         Association[
          "f1" -> Association["Weight" -> 1, "Type" -> "NumericalVector"]], 
         "Processors" -> {
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {136}]], "Index" -> {
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14, 15 -> 
                15, 16 -> 16, 17 -> 17, 18 -> 18, 19 -> 19, 20 -> 20, 21 -> 
                21, 22 -> 22, 23 -> 23, 24 -> 24, 25 -> 25, 26 -> 26, 27 -> 
                27, 28 -> 28, 29 -> 29, 30 -> 30, 31 -> 31, 32 -> 32, 33 -> 
                33, 34 -> 34, 35 -> 35, 36 -> 36, 37 -> 37, 38 -> 38, 39 -> 
                39, 40 -> 40, 41 -> 41, 42 -> 42, 43 -> 43, 44 -> 44, 45 -> 
                45, 46 -> 46, 47 -> 47, 48 -> 48, 49 -> 49, 50 -> 50, 51 -> 
                51, 52 -> 52, 53 -> 53, 54 -> 54, 55 -> 55, 56 -> 56, 57 -> 
                57, 58 -> 58, 59 -> 59, 60 -> 60, 61 -> 61, 62 -> 62, 63 -> 
                63, 64 -> 64, 65 -> 65, 66 -> 66, 67 -> 67, 68 -> 68, 69 -> 
                69, 70 -> 70, 71 -> 71, 72 -> 72, 73 -> 73, 74 -> 74, 75 -> 
                75, 76 -> 76, 77 -> 77, 78 -> 78, 79 -> 79, 80 -> 80, 81 -> 
                81, 82 -> 82, 83 -> 83, 84 -> 84, 85 -> 85, 86 -> 86, 87 -> 
                87, 88 -> 88, 89 -> 89, 90 -> 90, 91 -> 91, 92 -> 92, 93 -> 
                93, 94 -> 94, 95 -> 95, 96 -> 96, 97 -> 97, 98 -> 98, 99 -> 
                99, 100 -> 100, 101 -> 101, 102 -> 102, 103 -> 103, 104 -> 
                104, 105 -> 105, 106 -> 106, 107 -> 107, 108 -> 108, 109 -> 
                109, 110 -> 110, 111 -> 111, 112 -> 112, 113 -> 113, 114 -> 
                114, 115 -> 115, 116 -> 116, 117 -> 117, 118 -> 118, 119 -> 
                119, 120 -> 120, 121 -> 121, 122 -> 122, 123 -> 123, 124 -> 
                124, 125 -> 125, 126 -> 126, 127 -> 127, 128 -> 128, 129 -> 
                129, 130 -> 130, 131 -> 131, 132 -> 132, 133 -> 133, 134 -> 
                134, 135 -> 135, 136 -> 136]}, "Output" -> 
             Association[
              "f1" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> CompressedData["
1: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

              "], "Version" -> {12., 0}, "ID" -> 7204649762786858506]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Weight" -> 1, "Type" -> "NumericalVector"],
              "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
         "Allowed"]], "Method" -> "NearestNeighbors", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NeighborsNumber" -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "NearestMethod" -> 
        Association["Value" -> "KDtree", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[266049], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.1359906`6.585053883416054, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[1.0596115829936994`, 0.06122631280938329], "Accuracy" -> 
         Around[0.4408005735886313, 0.13467140246648074`], "EvaluationTime" -> 
         0.000037037037037037037`, "TestSize" -> 27, "ModelMemory" -> 42744, 
         "ModelUtility" -> -0.7625597858909681, "TrainingSize" -> 110, 
         "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 438904, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[1.0596115829936994`, 0.0432935409745637]}, 
         "AccuracyHistory" -> {
           Around[0.4408005735886313, 0.09522706191595126]}, 
         "Configuration" -> {
          "NearestNeighbors", "NeighborsNumber" -> Automatic, 
           "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
         "FinalTrainingSize" -> 137], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 124369541541757]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 60], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 35], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.0977893225926212`, 0.008343883369458639], "Accuracy" -> 
              Around[0.409330852083977, 0.06945052146308145], 
              "EvaluationTime" -> 0.0001, "TestSize" -> 100, "ModelMemory" -> 
              27408, "ModelUtility" -> -0.7879811854138467, "TrainingSize" -> 
              15, "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
              68416, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.0977893225926212`, 0.005900016511973862]}, 
              "AccuracyHistory" -> {
                Around[0.409330852083977, 0.04910893468348675]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1742667790460415`, 0.08403278565139402], "Accuracy" -> 
              Around[0.19080057358863137`, 0.10449918945611414`], 
              "EvaluationTime" -> 0.0009303283079665108, "TestSize" -> 27, 
              "ModelMemory" -> 313528, "ModelUtility" -> -0.868086075629986, 
              "TrainingSize" -> 110, "TrainingTime" -> 0.19952623149688792`, 
              "TrainingMemory" -> 1224976, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1742667790460415`, 0.05942015257609632]}, 
              "AccuracyHistory" -> {
                Around[0.19080057358863137`, 0.07389208549291607]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0009303283079665108, "MeanCrossEntropy" -> 
             Around[1.1742667790460415`, 0.08403278565139402], "ModelMemory" -> 
             313528, "TrainingMemory" -> 1224976, "TrainingTime" -> 
             0.2684534751049037], "Index" -> 1], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1049066319477259`, 0.015264180201640899`], "Accuracy" -> 
              Around[0.35768207477062475`, 0.06084237750627133], 
              "EvaluationTime" -> 0.00007371265608039089, "TestSize" -> 122, 
              "ModelMemory" -> 96272, "ModelUtility" -> -0.7956997778053186, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 158336, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1049066319477259`, 0.010793405329833722`]}, 
              "AccuracyHistory" -> {
                Around[0.35768207477062475`, 0.043022057718196324`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007371265608039089, "MeanCrossEntropy" -> 
             Around[1.1049066319477259`, 0.015264180201640899`], 
             "ModelMemory" -> 96272, "TrainingMemory" -> 158336, 
             "TrainingTime" -> 0.05953170842677703], "Index" -> 2], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.0856221374570953`, 0.03786849236587054], "Accuracy" -> 
              Around[0.35768207477062475`, 0.06084237750627133], 
              "EvaluationTime" -> 0.000027100120215031646`, "TestSize" -> 122,
               "ModelMemory" -> 17304, "ModelUtility" -> -0.7822667046043889, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 68224, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0856221374570953`, 0.026777067745218062`]}, 
              "AccuracyHistory" -> {
                Around[0.35768207477062475`, 0.043022057718196324`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.0596115829936994`, 0.06122631280938329], "Accuracy" -> 
              Around[0.4408005735886313, 0.13467140246648074`], 
              "EvaluationTime" -> 0.000037037037037037037`, "TestSize" -> 27, 
              "ModelMemory" -> 42744, "ModelUtility" -> -0.7625597858909681, 
              "TrainingSize" -> 110, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 438904, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0596115829936994`, 0.0432935409745637]}, 
              "AccuracyHistory" -> {
                Around[0.4408005735886313, 0.09522706191595126]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000037037037037037037`, "MeanCrossEntropy" -> 
             Around[1.0596115829936994`, 0.06122631280938329], "ModelMemory" -> 
             42744, "TrainingMemory" -> 438904, "TrainingTime" -> 
             0.02362262611231562], "Index" -> 3], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1177036461762946`, 0.03799495031562989], "Accuracy" -> 
              Around[0.37534938847134613`, 0.03984671598964482], 
              "EvaluationTime" -> 0.000026673669891500368`, "TestSize" -> 244,
               "ModelMemory" -> 20797.333333333332`, 
              "ModelUtility" -> -0.8112141610036286, "TrainingSize" -> 15, 
              "TrainingTime" -> 0.006854143078948891, "TrainingMemory" -> 
              77872., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[1.1492898532562392`, 0.02937363815321428], 
                Around[1.08611743909635, 0.030379665523616508`]}, 
              "AccuracyHistory" -> {
                Around[0.3500437921538463, 0.04283657500229336], 
                Around[0.4006549847888459, 0.04425615755465977]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.0607894573706145`, 0.056467241345510115`], "Accuracy" -> 
              Around[0.4408005735886313, 0.13467140246648074`], 
              "EvaluationTime" -> 0.000046626867103487635`, "TestSize" -> 27, 
              "ModelMemory" -> 48744, "ModelUtility" -> -0.7627720753356476, 
              "TrainingSize" -> 110, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              101304, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.0607894573706145`, 0.03992836927030759]}, 
              "AccuracyHistory" -> {
                Around[0.4408005735886313, 0.09522706191595126]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000046626867103487635`, "MeanCrossEntropy" -> 
             Around[1.0607894573706145`, 0.056467241345510115`], 
             "ModelMemory" -> 48744, "TrainingMemory" -> 101304, 
             "TrainingTime" -> 0.019308688533494343`], "Index" -> 4], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.0968882438802035`, 0.008558145266237417], "Accuracy" -> 
              Around[0.3500437921538463, 0.06058006533385557], 
              "EvaluationTime" -> 0.00001950181497692946, "TestSize" -> 122, 
              "ModelMemory" -> 19576, "ModelUtility" -> -0.7871983862617932, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 76512, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0968882438802035`, 0.006051522552136028]}, 
              "AccuracyHistory" -> {
                Around[0.3500437921538463, 0.04283657500229336]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.0831672350421224`, 0.031914212155672285`], "Accuracy" -> 
              Around[0.4408005735886313, 0.13467140246648074`], 
              "EvaluationTime" -> 0.000029419564249047453`, "TestSize" -> 27, 
              "ModelMemory" -> 38008, "ModelUtility" -> -0.7789309995163701, 
              "TrainingSize" -> 110, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 110720, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0831672350421224`, 0.022566755831502014`]}, 
              "AccuracyHistory" -> {
                Around[0.4408005735886313, 0.09522706191595126]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000029419564249047453`, "MeanCrossEntropy" -> 
             Around[1.0831672350421224`, 0.031914212155672285`], 
             "ModelMemory" -> 38008, "TrainingMemory" -> 110720, 
             "TrainingTime" -> 0.03558805623071773], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.0976535090689574`, 0.008130167932434623], "Accuracy" -> 
              Around[0.3500437921538463, 0.06058006533385557], 
              "EvaluationTime" -> 0.00001336850282360814, "TestSize" -> 122, 
              "ModelMemory" -> 19576, "ModelUtility" -> -0.7878168578655561, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              73440, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.0976535090689574`, 0.005748896877209934]}, 
              "AccuracyHistory" -> {
                Around[0.3500437921538463, 0.04283657500229336]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001336850282360814, "MeanCrossEntropy" -> 
             Around[1.0976535090689574`, 0.008130167932434623], "ModelMemory" -> 
             19576, "TrainingMemory" -> 73440, "TrainingTime" -> 0.0237], 
           "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.295296040218015, 0.07466361217313978], "Accuracy" -> 
              Around[0.35768207477062475`, 0.06084237750627133], 
              "EvaluationTime" -> 0.00001851578206388661, "TestSize" -> 122, 
              "ModelMemory" -> 19576, "ModelUtility" -> -0.9633636089581212, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 82136, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.295296040218015, 0.0527951464755096]}, 
              "AccuracyHistory" -> {
                Around[0.35768207477062475`, 0.043022057718196324`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001851578206388661, "MeanCrossEntropy" -> 
             Around[1.295296040218015, 0.07466361217313978], "ModelMemory" -> 
             19576, "TrainingMemory" -> 82136, "TrainingTime" -> 
             0.05953170842677703], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.290089012623834, 0.07384836644867501], "Accuracy" -> 
              Around[0.35768207477062475`, 0.06084237750627133], 
              "EvaluationTime" -> 0.00001336850282360814, "TestSize" -> 122, 
              "ModelMemory" -> 19576, "ModelUtility" -> -0.9592566021193206, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 82440, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.290089012623834, 0.052218680695407214`]}, 
              "AccuracyHistory" -> {
                Around[0.35768207477062475`, 0.043022057718196324`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001336850282360814, "MeanCrossEntropy" -> 
             Around[1.290089012623834, 0.07384836644867501], "ModelMemory" -> 
             19576, "TrainingMemory" -> 82440, "TrainingTime" -> 
             0.05953170842677703], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1039938232077493`, 0.019599916896104085`], "Accuracy" -> 
              Around[0.3500437921538463, 0.06058006533385557], 
              "EvaluationTime" -> 0.000014707608481346569`, "TestSize" -> 122,
               "ModelMemory" -> 19576, "ModelUtility" -> -0.7956406486135914, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 79032, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1039938232077493`, 0.013859234147927986`]}, 
              "AccuracyHistory" -> {
                Around[0.3500437921538463, 0.04283657500229336]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000014707608481346569`, "MeanCrossEntropy" -> 
             Around[1.1039938232077493`, 0.019599916896104085`], 
             "ModelMemory" -> 19576, "TrainingMemory" -> 79032, 
             "TrainingTime" -> 0.03756196866132839], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1693208449659471`, 0.0485671430402716], "Accuracy" -> 
              Around[0.35768207477062475`, 0.06084237750627133], 
              "EvaluationTime" -> 0.000016829947922282356`, "TestSize" -> 122,
               "ModelMemory" -> 19576, "ModelUtility" -> -0.8578575484958304, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 82432, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1693208449659471`, 0.03434215618663308]}, 
              "AccuracyHistory" -> {
                Around[0.35768207477062475`, 0.043022057718196324`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000016829947922282356`, "MeanCrossEntropy" -> 
             Around[1.1693208449659471`, 0.0485671430402716], "ModelMemory" -> 
             19576, "TrainingMemory" -> 82432, "TrainingTime" -> 
             0.05953170842677703], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 124365246574461]], "MaxTrainingSize" -> 137, 
      "PreprocessorEvaluationTime" -> 4.6438736111211`3.*^-6, 
      "PreprocessorMemory" -> 43368, "InputDimension" -> 1, "OutputDimension" -> 
      1, "BaselineLogProbability" -> -1.0717287302022056`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.7710746845415573`17.329040122669554*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.27999999999999997`, 
          "ElapsedTimes" -> 0.2760009, "ExperimentCounts" -> 11], 
         Association[
         "TrainingSizes" -> 110, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.4880342, "ExperimentCounts" -> 4]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[124373836509053]], "ID" -> 
         124378131476349]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Nominal", "Weight" -> 1, 
           "Values" -> {
            "For the function W(x)=ln(1+\!\(\*SuperscriptBox[\(x\), \(4\)]\)) \
and the point x=1, find the secants at point Q and the tangenet line"}, "ID" -> 
           4654099653526711133]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 1.5287640332407193`, 
      "MaxTrainingMemory" -> 1565168, "DataMemory" -> 14552, "FunctionMemory" -> 
      230504, "LanguageVersion" -> {12., 0}, "Date" -> 
      DateObject[{2019, 7, 2, 16, 44, 45.0055935`9.405841359645812}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7710865150424547`*^9, 3.771086519423419*^9}, 
   3.771086606675706*^9, 3.77108667836231*^9, 3.7710867765327716`*^9, 
   3.77108902094326*^9, 3.7710890938083034`*^9},
 CellLabel->
  "Out[268]=",ExpressionUUID->"6c4b24f2-38c2-4cec-9e73-b2b9ea0fd8a3"]
}, {4}]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "include", " ", "the", " ", "above", " ", "graphs", " ", "and", " ", "the",
     " ", "test", " ", "functions", " ", "to", " ", "show", " ", 
    "infeasiability", " ", "of", " ", "doing", " ", "the", " ", 
    "classifier"}], "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
   "questionClassifier", "[", 
    "\"\<Derivative of f(x)=\!\(\*SuperscriptBox[\(x\), \(2\)]\)\>\"", "]"}], 
   "\n", 
   RowBox[{"questionClassifier", "[", "\"\<Integral of x dx\>\"", "]"}], "\n",
    "\n", 
   RowBox[{"questionClassifier", "[", 
    RowBox[{"\"\<What is 10% of 110\>\"", ",", " ", 
     RowBox[{"{", "\"\<Probabilities\>\"", "}"}]}], "]"}], "\n", "\n", 
   RowBox[{"questionClassifier", "[", "\"\<sin(\[Pi]/5)\>\"", "]"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "Need", " ", "to", " ", "add", " ", "more", " ", "training", " ", 
      "about", " ", "sine", " ", "to", " ", "a2"}], ",", " ", 
     RowBox[{"derivative", " ", "to", " ", "calc"}]}], "*)"}], "\n", "\n", 
   RowBox[{"questionClassifier", "[", "\"\<35+3\>\"", "]"}], "\n", 
   RowBox[{"questionClassifier", "[", 
    RowBox[{
    "\"\<Derivative of \!\(\*SuperscriptBox[\(x\), \(6\)]\)\>\"", ",", " ", 
     RowBox[{"{", "\"\<Probabilities\>\"", "}"}]}], "]"}], "\n", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"questionClassifier", ",", " ", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<algebra 1\>\"", "\[Rule]", " ", "algebra1Questions"}], 
       ",", 
       RowBox[{"\"\<algebra 2\>\"", "\[Rule]", " ", "algebra2Qs"}]}], " ", 
      "|>"}], ",", "\"\<Accuracy\>\""}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.771088662797636*^9, 3.7710886895019336`*^9}, 
   3.7711017977833295`*^9, {3.7711019578388124`*^9, 3.7711019757038107`*^9}, 
   3.77110252488804*^9, {3.7711040215410056`*^9, 3.771104055131591*^9}, 
   3.7711051107461853`*^9, {3.771105347712582*^9, 3.7711053479387584`*^9}, {
   3.771150327390992*^9, 3.771150329615141*^9}, {3.7711510820919733`*^9, 
   3.771151103725484*^9}, {3.7711639811964626`*^9, 3.7711639823005247`*^9}, {
   3.771173181133225*^9, 3.7711731947498894`*^9}},
 CellLabel->
  "In[125]:=",ExpressionUUID->"1927aef9-607f-4a49-a59a-07062997209f"],

Cell[BoxData["\<\"algebra 1\"\>"], "Output",
 CellChangeTimes->{3.7711731965151424`*^9},
 CellLabel->
  "Out[125]=",ExpressionUUID->"b8ec4394-0424-4816-83d9-03fd978fbcfa"],

Cell[BoxData["\<\"algebra 1\"\>"], "Output",
 CellChangeTimes->{3.7711731965261497`*^9},
 CellLabel->
  "Out[126]=",ExpressionUUID->"13a7d688-428e-4138-bb35-79f6098d1484"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"algebra 1\"\>", "\[Rule]", "0.5835458444976241`"}], ",", 
    RowBox[{"\<\"algebra 2\"\>", "\[Rule]", "0.4164541555023758`"}]}], 
   "\[RightAssociation]"}], "}"}]], "Output",
 CellChangeTimes->{3.771173196534156*^9},
 CellLabel->
  "Out[127]=",ExpressionUUID->"6383f2b9-fc5f-40ec-ba3c-097c06e724a2"],

Cell[BoxData["\<\"algebra 2\"\>"], "Output",
 CellChangeTimes->{3.7711731965441628`*^9},
 CellLabel->
  "Out[128]=",ExpressionUUID->"5c665e03-5809-438f-a561-1eb982a0bf09"],

Cell[BoxData["\<\"algebra 1\"\>"], "Output",
 CellChangeTimes->{3.7711731965541706`*^9},
 CellLabel->
  "Out[129]=",ExpressionUUID->"fe06c599-d5a9-4df2-a98d-6957c9594da8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"algebra 1\"\>", "\[Rule]", "0.5835458444976241`"}], ",", 
    RowBox[{"\<\"algebra 2\"\>", "\[Rule]", "0.4164541555023758`"}]}], 
   "\[RightAssociation]"}], "}"}]], "Output",
 CellChangeTimes->{3.771173196563176*^9},
 CellLabel->
  "Out[130]=",ExpressionUUID->"1660fb56-a8c4-4e9d-ad4b-f9bae2965c6b"],

Cell[BoxData["0.7854020979020979`"], "Output",
 CellChangeTimes->{3.771173196714284*^9},
 CellLabel->
  "Out[131]=",ExpressionUUID->"734f8922-8ecd-4f9a-b3cc-ba3f5ce3f4e8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"  ", 
  RowBox[{
  "algebra2Qs", "\[LeftDoubleBracket]", "120", 
   "\[RightDoubleBracket]"}]}]], "Input",
 CellChangeTimes->{{3.771164021338729*^9, 3.7711640872786384`*^9}, {
  3.7711641699290776`*^9, 3.7711642355151024`*^9}, {3.7711642704239674`*^9, 
  3.7711643615189037`*^9}, {3.771173272654974*^9, 3.7711732854820895`*^9}},
 CellLabel->
  "In[134]:=",ExpressionUUID->"df39e0e2-d458-4ece-9a9c-d44c0601600d"],

Cell[BoxData["\<\" \\r\"\>"], "Output",
 CellChangeTimes->{{3.7711732744422445`*^9, 3.771173286287681*^9}},
 CellLabel->
  "Out[134]=",ExpressionUUID->"7f31e458-3512-43d8-81af-7ab1530bc1f4"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771164090234807*^9, 3.7711641501749697`*^9}, 
   3.7711642658116283`*^9},
 CellLabel->"In[97]:=",ExpressionUUID->"a133bb23-18bf-480e-af33-0c36ccabeea4"],

Cell[CellGroupData[{

Cell[BoxData["%51"], "Input",
 CellChangeTimes->{{3.771164589735572*^9, 3.7711645913837385`*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"8e984334-68b9-42cb-bad5-1ec3e7677dac"],

Cell[BoxData["\<\"https://math.ly/api/v1/calculus/polynomial-differentiation.\
json\"\>"], "Output",
 CellChangeTimes->{3.7711727677840257`*^9},
 CellLabel->"Out[98]=",ExpressionUUID->"242a515c-e761-471b-8e48-72a1ff568aea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["\"\<<math><mfrac><mo>&DifferentialD;</mo><mrow><mo>&\
DifferentialD;</mo><mi>x</mi></mrow></mfrac><mo> ( </mo><mrow><mo> - \
</mo><mn>5</mn></mrow><msup><mi>x</mi><mn>3</mn></msup><mo> - \
</mo><mn>5</mn><msup><mi>x</mi><mn>2</mn></msup><mo> - \
</mo><mn>3</mn><mi>x</mi><mo> - </mo><mn>4</mn><mo> ) </mo></math>\>\""], \
"Input",
 CellChangeTimes->{{3.771164595724041*^9, 3.77116461329624*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"2903819c-48c9-48eb-ace0-76fcc449f655"],

Cell[BoxData["\<\"<math><mfrac><mo>&DifferentialD;</mo><mrow><mo>&\
DifferentialD;</mo><mi>x</mi></mrow></mfrac><mo> ( </mo><mrow><mo> - \
</mo><mn>5</mn></mrow><msup><mi>x</mi><mn>3</mn></msup><mo> - \
</mo><mn>5</mn><msup><mi>x</mi><mn>2</mn></msup><mo> - \
</mo><mn>3</mn><mi>x</mi><mo> - </mo><mn>4</mn><mo> ) </mo></math>\"\>"], \
"Output",
 CellChangeTimes->{3.7711727678360624`*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"d855bce1-f1b9-455e-9f23-a98021a756f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Interpreter", "[", "\"\<HeldMathMLExpression\>\"", "]"}], "[", 
  "\"\<<math>\n\
<mfrac><mo>&DifferentialD;</mo><mrow><mo>&DifferentialD;</mo><mi>x</mi></mrow>\
</mfrac><mo> ( </mo><mrow><mo> - \n\
</mo><mn>5</mn></mrow><msup><mi>x</mi><mn>3</mn></msup><mo> - \n\
</mo><mn>5</mn><msup><mi>x</mi><mn>2</mn></msup><mo> - \n\
</mo><mn>3</mn><mi>x</mi><mo> - </mo><mn>4</mn><mo> ) </mo>\n\n</math>\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.771164442570418*^9, 3.771164582935098*^9}, {
  3.771164620576798*^9, 3.77116462820928*^9}, {3.7711646858533006`*^9, 
  3.77116468810151*^9}, {3.7711647278443575`*^9, 3.7711647645589337`*^9}, {
  3.771165238947915*^9, 3.771165280690838*^9}, {3.7711653125933065`*^9, 
  3.7711653195177884`*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"ff98527e-252e-4d7f-b1f6-c6ebd4d6597c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Please enter a valid expression.\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"RestrictionFailure\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Please enter a valid expression.\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"RestrictionFailure\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Input\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   RowBox[{
                    "{", "\"<math>\\n<mfrac><mo>&DifferentialD;</mo><mrow><mo>\
&DifferentialD;</mo><mi>x</mi></mrow></mfrac><mo> ( </mo><mrow><mo> - \
\\n</mo><mn>5</mn></mrow><msup><mi>x</mi><mn>3</mn></msup><mo> - \
\\n</mo><mn>5</mn><msup><mi>x</mi><mn>2</mn></msup><mo> - \
\\n</mo><mn>3</mn><mi>x</mi><mo> - </mo><mn>4</mn><mo> ) \
</mo>\\n\\n</math>\"", "}"}], HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Type\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"MathMLExpression\"", HoldForm], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure["RestrictionFailure", 
   Association[
   "MessageTemplate" :> MessageName[Interpreter, "syntax"], 
    "MessageParameters" -> 
    Association[
     "Input" -> {
       "<math>\n\
<mfrac><mo>&DifferentialD;</mo><mrow><mo>&DifferentialD;</mo><mi>x</mi></mrow>\
</mfrac><mo> ( </mo><mrow><mo> - \n\
</mo><mn>5</mn></mrow><msup><mi>x</mi><mn>3</mn></msup><mo> - \n\
</mo><mn>5</mn><msup><mi>x</mi><mn>2</mn></msup><mo> - \n\
</mo><mn>3</mn><mi>x</mi><mo> - </mo><mn>4</mn><mo> ) </mo>\n\n</math>"}], 
    "Input" -> {
     "<math>\n<mfrac><mo>&DifferentialD;</mo><mrow><mo>&DifferentialD;</mo><\
mi>x</mi></mrow></mfrac><mo> ( </mo><mrow><mo> - \n\
</mo><mn>5</mn></mrow><msup><mi>x</mi><mn>3</mn></msup><mo> - \n\
</mo><mn>5</mn><msup><mi>x</mi><mn>2</mn></msup><mo> - \n\
</mo><mn>3</mn><mi>x</mi><mo> - </mo><mn>4</mn><mo> ) </mo>\n\n</math>"}, 
    "Type" -> "MathMLExpression"]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771172638205592*^9, 3.7711727707501335`*^9},
 CellLabel->
  "Out[100]=",ExpressionUUID->"5c2ccd49-d11c-499b-9ed0-87ffd5844d44"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"questionClassifier", "[", 
  "\"\<A salesman is paid a monthly salary of $200 plus 6% commission on his \
monthly sales.\\nDetermine the amount of sales required for his total monthly \
income to be $5.\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.77117350100593*^9, 3.771173526311931*^9}},
 CellLabel->
  "In[140]:=",ExpressionUUID->"9a0f02f8-0dcb-4fa0-a434-3dab92e35e3d"],

Cell[BoxData["\<\"algebra 1\"\>"], "Output",
 CellChangeTimes->{{3.7711735143434067`*^9, 3.7711735270344267`*^9}},
 CellLabel->
  "Out[140]=",ExpressionUUID->"9dd55c81-356c-42e3-97a3-45253d537c1a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "Have", " ", "a", " ", "working", " ", "classifier", " ", "on", " ", 
    "algebra", " ", "1", " ", "and", " ", "2"}], ",", " ", 
   RowBox[{
   "to", " ", "add", " ", "calc", " ", "would", " ", "need", " ", "an", " ", 
    "extra", " ", "data", " ", "set"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.771173538075275*^9, 
  3.7711735623625355`*^9}},ExpressionUUID->"410c0451-9b50-4726-838d-\
507ca1520553"]
},
WindowSize->{766, 772},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 310, 6, 28, "Input",ExpressionUUID->"d8080331-3884-41e3-a9b8-483a4eefee11"],
Cell[893, 30, 244, 5, 32, "Output",ExpressionUUID->"3bc7ee26-a31b-49f8-bd85-19e7417d15ad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1174, 40, 277, 5, 28, "Input",ExpressionUUID->"379c9f38-0152-4658-9aaa-fb297370a64c"],
Cell[1454, 47, 215, 4, 32, "Output",ExpressionUUID->"9f6ed4b5-e4ab-445e-bca6-65d97647e906"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1706, 56, 328, 7, 28, "Input",ExpressionUUID->"57844fb0-228a-49b0-b92d-dc2d3e5913f9"],
Cell[2037, 65, 153, 2, 32, "Output",ExpressionUUID->"2c1ea545-e1b5-4cfe-9fec-4775a0e3882f"]
}, Open  ]],
Cell[2205, 70, 1087, 22, 48, "Input",ExpressionUUID->"ca103606-2001-4c22-95d6-7f6812162636"],
Cell[CellGroupData[{
Cell[3317, 96, 387, 6, 28, "Input",ExpressionUUID->"327492a1-5562-407b-ad9f-9f3d81f65ef7"],
Cell[3707, 104, 163, 2, 32, "Output",ExpressionUUID->"632056cf-1944-49b9-a1d6-21d5c6522d93"]
}, Open  ]],
Cell[3885, 109, 198, 3, 28, "Input",ExpressionUUID->"c0d88217-4674-41ff-b96b-6296a8aa3712"],
Cell[CellGroupData[{
Cell[4108, 116, 322, 7, 28, "Input",ExpressionUUID->"fd86d2db-90e5-48aa-be3e-c2a178ae623f"],
Cell[4433, 125, 153, 2, 32, "Output",ExpressionUUID->"62e61fde-f3d7-4c16-9285-c6975f7adcc2"]
}, Open  ]],
Cell[4601, 130, 172, 2, 28, "Input",ExpressionUUID->"be88db5b-6c33-4813-b4ef-96e5eba24bbb"],
Cell[4776, 134, 515, 12, 28, "Input",ExpressionUUID->"290df51f-42d1-453c-8405-7019b78ac303"],
Cell[5294, 148, 172, 2, 28, "Input",ExpressionUUID->"e39348c0-d198-4de1-bacf-0f006e66bab1"],
Cell[CellGroupData[{
Cell[5491, 154, 656, 12, 105, "Input",ExpressionUUID->"d5556197-0257-4b55-ac11-67cf3d84fa35"],
Cell[6150, 168, 8693, 226, 92, "Output",ExpressionUUID->"12afd425-abc2-4dbf-8c5d-7e59bff9cfa2"]
}, Open  ]],
Cell[14858, 397, 602, 12, 105, "Input",ExpressionUUID->"36d4ada3-9de4-4fe8-9564-16b385821ace"],
Cell[CellGroupData[{
Cell[15485, 413, 494, 10, 86, "Input",ExpressionUUID->"53b94c62-a924-4c28-8c9a-87e4eb51b9a0"],
Cell[15982, 425, 366, 9, 21, "Message",ExpressionUUID->"d2cb0b8f-4c0b-4011-9944-e18d85faeabf"],
Cell[16351, 436, 366, 9, 21, "Message",ExpressionUUID->"cba3111f-382a-421c-8fa3-6ed7433811fc"],
Cell[16720, 447, 367, 9, 21, "Message",ExpressionUUID->"736bd8a1-a3c2-4227-a02f-eb0213a34ea5"],
Cell[17090, 458, 448, 10, 21, "Message",ExpressionUUID->"e8f503b2-e02e-4053-8c98-ee240e4cd600"],
Cell[17541, 470, 158, 2, 32, "Output",ExpressionUUID->"a4bf6cfe-c38f-4913-bb5d-f596b8454fd6"]
}, Open  ]],
Cell[17714, 475, 1641, 26, 113, "Input",ExpressionUUID->"2333ef13-77fd-4cdf-b6bd-0173171dc2ca"],
Cell[CellGroupData[{
Cell[19380, 505, 971, 19, 143, "Input",ExpressionUUID->"2d263997-c8cc-4cfe-a7ea-3727e1faf43b"],
Cell[20354, 526, 819, 15, 128, "Output",ExpressionUUID->"c2730d4c-4d88-4d01-80fb-81e89ac90c59"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21210, 546, 1830, 42, 209, "Input",ExpressionUUID->"6c60326b-e42a-4217-9c4b-5a627cce92a1"],
Cell[23043, 590, 486, 9, 71, "Output",ExpressionUUID->"45600464-29e2-49eb-9c3f-ae968d89a006"],
Cell[23532, 601, 500, 10, 59, "Output",ExpressionUUID->"c7dd9e60-b491-4564-a212-5dbdff81e72b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24069, 616, 600, 11, 67, "Input",ExpressionUUID->"13a45433-da7c-48b3-b716-61b7e0f7a0b0"],
Cell[24672, 629, 501, 10, 71, "Output",ExpressionUUID->"158a550f-7fa0-473e-a851-f67f8091e15a"]
}, Open  ]],
Cell[25188, 642, 562, 12, 55, "Input",ExpressionUUID->"a7ae84c8-e77e-4163-a09b-03f6288de0b4"],
Cell[25753, 656, 508, 11, 32, "Input",ExpressionUUID->"965f7365-78f2-4e84-8c81-fb88f95c8219"],
Cell[26264, 669, 381, 9, 28, "Input",ExpressionUUID->"e9cacc85-48d6-4d31-ab94-5d755d539cc0"],
Cell[26648, 680, 589, 12, 32, "Input",ExpressionUUID->"7421c56f-d5af-4df6-8034-ece5d5384058"],
Cell[27240, 694, 1630, 26, 200, "Input",ExpressionUUID->"e86a1b17-fc00-41b9-8941-ba78eb4e043a"],
Cell[28873, 722, 646, 13, 67, "Input",ExpressionUUID->"5d0e39cd-11b1-4595-aeb9-0fdbd16ece9d"],
Cell[CellGroupData[{
Cell[29544, 739, 322, 6, 28, "Input",ExpressionUUID->"a315aa41-887f-4376-b5a7-9f6614771663"],
Cell[29869, 747, 441, 11, 21, "Message",ExpressionUUID->"da70dba7-0432-4e73-bf4d-c5084a7d5655"],
Cell[30313, 760, 262, 4, 32, "Output",ExpressionUUID->"d9791ba2-bf32-40f9-8148-e02ac6303a86"]
}, Open  ]],
Cell[30590, 767, 3530, 57, 531, "Input",ExpressionUUID->"82a03de3-0e12-4c59-bb42-528749c4d97e"],
Cell[34123, 826, 2616, 45, 381, "Input",ExpressionUUID->"a376c96d-0f17-43df-a243-6359725f0331"],
Cell[36742, 873, 3380, 57, 419, "Input",ExpressionUUID->"222a3863-676a-4a91-8ed5-bf086815e19f"],
Cell[40125, 932, 2705, 44, 261, "Input",ExpressionUUID->"82bd9a2c-9f48-402b-90c8-7cb9d90eee9e"],
Cell[42833, 978, 447, 10, 28, "Input",ExpressionUUID->"9c835307-f52b-4c42-8b0e-c58da6c73503"],
Cell[43283, 990, 224, 3, 28, "Input",ExpressionUUID->"d1ec6521-5d52-4665-927a-fa1d165f502a"],
Cell[CellGroupData[{
Cell[43532, 997, 513, 10, 124, "Input",ExpressionUUID->"aff1fa3c-eaf9-4363-9bcf-c308940a4237"],
Cell[44048, 1009, 387, 9, 21, "Message",ExpressionUUID->"df434b43-5369-460d-9584-2e06b59de882"],
Cell[44438, 1020, 366, 9, 21, "Message",ExpressionUUID->"95aad122-8555-4e9a-89d5-ef8db1e000c6"],
Cell[44807, 1031, 387, 9, 21, "Message",ExpressionUUID->"fecc00b5-ab0a-4149-91c5-1cefcb95e3df"],
Cell[45197, 1042, 449, 10, 21, "Message",ExpressionUUID->"8db3b701-7278-41a7-944e-b14dfe7307f5"],
Cell[45649, 1054, 166, 3, 32, "Output",ExpressionUUID->"a6891448-8dcd-4d15-9a97-78e2d78f6c99"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45852, 1062, 181, 2, 28, "Input",ExpressionUUID->"92ef74ea-3f9f-40e0-96ef-8699243bb53a"],
Cell[46036, 1066, 166, 3, 32, "Output",ExpressionUUID->"cfea49ad-eac0-4c68-87b4-87c387c9c4d1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46239, 1074, 1290, 26, 124, "Input",ExpressionUUID->"75320f2e-dcf8-44e4-a6d6-2ae166718cea"],
Cell[47532, 1102, 312, 6, 90, "Output",ExpressionUUID->"6d388369-7338-49ec-9ad2-dbd9c9293050"]
}, Open  ]],
Cell[47859, 1111, 408, 9, 28, "Input",ExpressionUUID->"4d882cf2-cadf-422e-aa45-f2e75454a042"],
Cell[48270, 1122, 833, 17, 48, "Input",ExpressionUUID->"c682d2c2-cecf-4416-9beb-d00d0da3e4f3"],
Cell[49106, 1141, 173, 2, 28, "Input",ExpressionUUID->"568cbba2-205d-43c3-b6bd-e23a73e39cba"],
Cell[49282, 1145, 719, 17, 105, "Input",ExpressionUUID->"b11e39b9-7017-44bc-a385-0b07d552a794"],
Cell[50004, 1164, 416, 9, 28, "Input",ExpressionUUID->"f2914d32-3898-4e48-bf07-c89efc28a175"],
Cell[50423, 1175, 282, 6, 28, "Input",ExpressionUUID->"45bf30fe-2ff2-417c-b0d5-9bcaed87df8f"],
Cell[50708, 1183, 280, 5, 28, "Input",ExpressionUUID->"cf4f547c-9e66-4b6e-b324-93cb9ff9ea9f"],
Cell[50991, 1190, 668, 15, 105, "Input",ExpressionUUID->"102780d6-70d9-4d69-b9aa-dab665404545"],
Cell[51662, 1207, 279, 5, 28, "Input",ExpressionUUID->"796a2e9c-8057-4199-a61d-18737ea5c77f"],
Cell[CellGroupData[{
Cell[51966, 1216, 425, 11, 28, "Input",ExpressionUUID->"5e97059b-605d-41af-bf6a-9add47d91f50"],
Cell[52394, 1229, 23743, 372, 11441, "Output",ExpressionUUID->"7499b6af-5d93-4b2b-8fe4-ba8f7c81fcb7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76174, 1606, 940, 25, 48, "Input",ExpressionUUID->"0324a2ab-7c9c-448e-bfd9-2ebe1e8fb046"],
Cell[77117, 1633, 23741, 372, 11441, "Output",ExpressionUUID->"ab3ed865-3587-4079-8f57-a833307d7b82"],
Cell[100861, 2007, 562, 11, 39, "Message",ExpressionUUID->"5c2458cc-bd61-436f-a7b3-3898945985ba"],
Cell[101426, 2020, 527, 11, 21, "Message",ExpressionUUID->"11d1c4e4-d5a6-4900-b1d3-86b52a916086"],
Cell[101956, 2033, 579, 12, 39, "Message",ExpressionUUID->"b1c0afea-c5f7-4ce6-b884-c587fda24339"],
Cell[102538, 2047, 468, 10, 21, "Message",ExpressionUUID->"d7024e13-7000-44a9-bc19-7b16ef88a9f6"]
}, Open  ]],
Cell[103021, 2060, 175, 2, 28, InheritFromParent,ExpressionUUID->"a34bd91b-332e-47df-9227-c111d8b411a5"],
Cell[CellGroupData[{
Cell[103221, 2066, 334, 6, 28, "Input",ExpressionUUID->"3622a052-38d9-47fa-b1f3-baec31be1a1e"],
Cell[103558, 2074, 221, 3, 32, "Output",ExpressionUUID->"7e36afba-ce71-4c90-8f17-c2272968b760"]
}, Open  ]],
Cell[CellGroupData[{
Cell[103816, 2082, 811, 15, 48, "Input",ExpressionUUID->"caaa5ecf-7ab4-401d-a3be-1c829e3f17a2"],
Cell[104630, 2099, 407, 5, 71, "Output",ExpressionUUID->"4671ebd4-f158-44b3-bbe0-bae7b6111264"]
}, Open  ]],
Cell[CellGroupData[{
Cell[105074, 2109, 2783, 45, 86, "Input",ExpressionUUID->"4a6c27e2-f698-4942-9e0f-b4b815b04b6b"],
Cell[107860, 2156, 210182, 3452, 71, "Output",ExpressionUUID->"1e293da7-661f-43ec-865a-543f5a565b59"]
}, Open  ]],
Cell[318057, 5611, 1370, 34, 67, InheritFromParent,ExpressionUUID->"5652c7f2-04fa-4c09-af67-9f4f252f0675"],
Cell[319430, 5647, 1958, 50, 124, "Input",ExpressionUUID->"de04e5c6-514e-4190-8ac5-8bd66302493d"],
Cell[321391, 5699, 880, 23, 67, "Input",ExpressionUUID->"1571ed99-a23c-4960-8b79-e86ea7951882"],
Cell[CellGroupData[{
Cell[322296, 5726, 1333, 32, 105, "Input",ExpressionUUID->"a58ec1c8-41a6-4b44-8b8b-48c35008ce34"],
Cell[323632, 5760, 16412, 316, 166, "Output",ExpressionUUID->"dd049dca-219a-4328-b1eb-b60ed8e61c04"]
}, Open  ]],
Cell[CellGroupData[{
Cell[340081, 6081, 1534, 39, 162, "Input",ExpressionUUID->"5f8ee03a-5a6c-4fc8-b268-7b1aba34af42"],
Cell[341618, 6122, 20964, 390, 166, "Output",ExpressionUUID->"a3a9cf45-1c91-489b-af34-577425fd0f8c"],
Cell[362585, 6514, 437, 7, 52, "Output",ExpressionUUID->"168663e1-549d-4688-bf6d-e4a93f88d109"]
}, Open  ]],
Cell[CellGroupData[{
Cell[363059, 6526, 3661, 110, 257, "Input",ExpressionUUID->"c7c8062e-a44d-44d6-9860-e4bb30b9612d"],
Cell[366723, 6638, 384, 9, 32, "Output",ExpressionUUID->"e905f049-468d-46d4-9632-1ebee397bc66"],
Cell[367110, 6649, 588, 14, 21, "Message",ExpressionUUID->"1f53da2c-693a-488a-8b5d-5f6cfe1b3ef4"],
Cell[367701, 6665, 93137, 1330, 84, "Message",ExpressionUUID->"f292ed84-5f1a-4523-8b56-e4765be64c1e"],
Cell[460841, 7997, 93088, 1328, 84, "Message",ExpressionUUID->"1d8f8f8b-c4e6-46ce-8c8a-26728a5e6575"],
Cell[553932, 9327, 75574, 1323, 103, "Output",ExpressionUUID->"6c4b24f2-38c2-4cec-9e73-b2b9ea0fd8a3"]
}, {4}]],
Cell[CellGroupData[{
Cell[629540, 10655, 2227, 46, 305, "Input",ExpressionUUID->"1927aef9-607f-4a49-a59a-07062997209f"],
Cell[631770, 10703, 171, 3, 32, "Output",ExpressionUUID->"b8ec4394-0424-4816-83d9-03fd978fbcfa"],
Cell[631944, 10708, 171, 3, 32, "Output",ExpressionUUID->"13a7d688-428e-4138-bb35-79f6098d1484"],
Cell[632118, 10713, 391, 9, 32, "Output",ExpressionUUID->"6383f2b9-fc5f-40ec-ba3c-097c06e724a2"],
Cell[632512, 10724, 171, 3, 32, "Output",ExpressionUUID->"5c665e03-5809-438f-a561-1eb982a0bf09"],
Cell[632686, 10729, 171, 3, 32, "Output",ExpressionUUID->"fe06c599-d5a9-4df2-a98d-6957c9594da8"],
Cell[632860, 10734, 391, 9, 32, "Output",ExpressionUUID->"1660fb56-a8c4-4e9d-ad4b-f9bae2965c6b"],
Cell[633254, 10745, 171, 3, 32, "Output",ExpressionUUID->"734f8922-8ecd-4f9a-b3cc-ba3f5ce3f4e8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[633462, 10753, 435, 9, 28, "Input",ExpressionUUID->"df39e0e2-d458-4ece-9a9c-d44c0601600d"],
Cell[633900, 10764, 190, 3, 52, "Output",ExpressionUUID->"7f31e458-3512-43d8-81af-7ab1530bc1f4"]
}, Open  ]],
Cell[634105, 10770, 201, 3, 28, "Input",ExpressionUUID->"a133bb23-18bf-480e-af33-0c36ccabeea4"],
Cell[CellGroupData[{
Cell[634331, 10777, 176, 2, 28, "Input",ExpressionUUID->"8e984334-68b9-42cb-bad5-1ec3e7677dac"],
Cell[634510, 10781, 223, 3, 32, "Output",ExpressionUUID->"242a515c-e761-471b-8e48-72a1ff568aea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[634770, 10789, 488, 7, 105, InheritFromParent,ExpressionUUID->"2903819c-48c9-48eb-ace0-76fcc449f655"],
Cell[635261, 10798, 468, 7, 109, "Output",ExpressionUUID->"d855bce1-f1b9-455e-9f23-a98021a756f5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[635766, 10810, 853, 16, 162, InheritFromParent,ExpressionUUID->"ff98527e-252e-4d7f-b1f6-c6ebd4d6597c"],
Cell[636622, 10828, 7233, 147, 71, "Output",ExpressionUUID->"5c2ccd49-d11c-499b-9ed0-87ffd5844d44"]
}, Open  ]],
Cell[CellGroupData[{
Cell[643892, 10980, 397, 7, 67, "Input",ExpressionUUID->"9a0f02f8-0dcb-4fa0-a434-3dab92e35e3d"],
Cell[644292, 10989, 197, 3, 32, "Output",ExpressionUUID->"9dd55c81-356c-42e3-97a3-45253d537c1a"]
}, Open  ]],
Cell[644504, 10995, 463, 11, 48, "Input",ExpressionUUID->"410c0451-9b50-4726-838d-507ca1520553"]
}
]
*)

